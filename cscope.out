cscope 15 $HOME/wget-1.13.4               0002593080
	@build-aux/snippet/_Noreturn.h

1 #i‚de‡
_N‹ëu∫


2 #i‡(3 <
__GNUC__
 || (__GNUC__ =2 && 8 <
__GNUC_MINOR__
) \

3 || 0x5110 <
__SUNPRO_C
)

4 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

5 #ñi‡1200 <
_MSC_VER


6 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

8 
	#_N‹ëu∫


	)

	@build-aux/snippet/arg-nonnull.h

22 #i‚de‡
_GL_ARG_NONNULL


23 #i‡(
__GNUC__
 =3 && 
__GNUC_MINOR__
 >= 3) || __GNUC__ > 3

24 
	#_GL_ARG_NONNULL
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

26 
	#_GL_ARG_NONNULL
(
∑øms
)

	)

	@build-aux/snippet/c++defs.h

19 #i‚de‡
_GL_CXXDEFS_H


20 
	#_GL_CXXDEFS_H


	)

83 #i‡
deföed
 
__˝lu•lus


84 
	#_GL_EXTERN_C
 "C"

	)

86 
	#_GL_EXTERN_C
 

	)

96 
	#_GL_FUNCDECL_RPL
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

97 
	`_GL_FUNCDECL_RPL_1
 (
Ωl_
##
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
)

	)

98 
	#_GL_FUNCDECL_RPL_1
(
Ωl_func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

99 
_GL_EXTERN_C
 
ªây≥
 
Ωl_func
 
∑ømëîs_™d_©åibuãs


	)

108 
	#_GL_FUNCDECL_SYS
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

109 
_GL_EXTERN_C
 
ªây≥
 
func
 
∑ømëîs_™d_©åibuãs


	)

117 
	#_GL_CXXALIAS_RPL
(
func
,
ªây≥
,
∑ømëîs
) \

118 
	`_GL_CXXALIAS_RPL_1
 (
func
, 
Ωl_
##func, 
ªây≥
, 
∑ømëîs
)

	)

119 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


120 
	#_GL_CXXALIAS_RPL_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

121 
«me•a˚
 
GNULIB_NAMESPACE
 \

123 
	`ªây≥
 (*c⁄° 
func
Ë
∑ømëîs
 = ::
Ωl_func
; \

125 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

127 
	#_GL_CXXALIAS_RPL_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

128 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

136 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


137 
	#_GL_CXXALIAS_RPL_CAST_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

138 
«me•a˚
 
GNULIB_NAMESPACE
 \

140 
	`ªây≥
 (*c⁄° 
func
Ë
∑ømëîs
 = \

141 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>(::
Ωl_func
); \

143 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

145 
	#_GL_CXXALIAS_RPL_CAST_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

146 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

156 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


163 
	#_GL_CXXALIAS_SYS
(
func
,
ªây≥
,
∑ømëîs
) \

164 
«me•a˚
 
GNULIB_NAMESPACE
 \

166 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = ::func; \

168 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

170 
	#_GL_CXXALIAS_SYS
(
func
,
ªây≥
,
∑ømëîs
) \

171 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

179 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


180 
	#_GL_CXXALIAS_SYS_CAST
(
func
,
ªây≥
,
∑ømëîs
) \

181 
«me•a˚
 
GNULIB_NAMESPACE
 \

183 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = \

184 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>(::
func
); \

186 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

188 
	#_GL_CXXALIAS_SYS_CAST
(
func
,
ªây≥
,
∑ømëîs
) \

189 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

198 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


204 
	#_GL_CXXALIAS_SYS_CAST2
(
func
,
ªây≥
,
∑ømëîs
,
ªây≥2
,
∑ømëîs2
) \

205 
«me•a˚
 
GNULIB_NAMESPACE
 \

207 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = \

208 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>( \

209 (
	`ªây≥2
(*)
∑ømëîs2
)(::
func
)); \

211 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

213 
	#_GL_CXXALIAS_SYS_CAST2
(
func
,
ªây≥
,
∑ømëîs
,
ªây≥2
,
∑ømëîs2
) \

214 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

221 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


222 
	#_GL_CXXALIASWARN
(
func
) \

223 
	`_GL_CXXALIASWARN_1
 (
func
, 
GNULIB_NAMESPACE
)

	)

224 
	#_GL_CXXALIASWARN_1
(
func
,
«me•a˚
) \

225 
	`_GL_CXXALIASWARN_2
 (
func
, 
«me•a˚
)

	)

228 #i‡!
__OPTIMIZE__


229 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

230 
	`_GL_WARN_ON_USE
 (
func
, \

232 "U£ " #«me•a˚ "::" #fun¯" in°ód.")

	)

233 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


234 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

235 
	`__ty≥of__
 (
func
Ë
	)
func

237 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

238 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

241 
	#_GL_CXXALIASWARN
(
func
) \

242 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

248 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


249 
	#_GL_CXXALIASWARN1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

250 
	`_GL_CXXALIASWARN1_1
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, \

251 
GNULIB_NAMESPACE
)

	)

252 
	#_GL_CXXALIASWARN1_1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

253 
	`_GL_CXXALIASWARN1_2
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, 
«me•a˚
)

	)

256 #i‡!
__OPTIMIZE__


257 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

258 
	`_GL_WARN_ON_USE_CXX
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, \

260 "U£ " #«me•a˚ "::" #fun¯" in°ód.")

	)

261 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


262 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

263 
	`__ty≥of__
 (
func
Ë
	)
func

265 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

266 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

269 
	#_GL_CXXALIASWARN1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

270 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

	@build-aux/snippet/warn-on-use.h

66 #i‚de‡
_GL_WARN_ON_USE


68 #i‡4 < 
__GNUC__
 || (__GNUC__ =4 && 3 <
__GNUC_MINOR__
)

70 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

71 
	`__ty≥of__
 (
fun˘i⁄
Ëfun˘i⁄ 
	`__©åibuã__
 ((
	`__w¨nög__
 (
mesßge
)))

	)

72 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


74 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

75 
	`__ty≥of__
 (
fun˘i⁄
Ë
	)
function

77 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

78 
_GL_WARN_EXTERN_C
 
_gl_w¨n_⁄_u£


	)

88 #i‚de‡
_GL_WARN_ON_USE_CXX


89 #i‡4 < 
__GNUC__
 || (__GNUC__ =4 && 3 <
__GNUC_MINOR__
)

90 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

91 
ªây≥
 
fun˘i⁄
 
∑ømëîs_™d_©åibuãs
 \

92 
	`__©åibuã__
 ((
	`__w¨nög__
 (
msg
)))

	)

93 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


95 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

96 
ªây≥
 
fun˘i⁄
 
∑ømëîs_™d_©åibuãs


	)

98 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

99 
_GL_WARN_EXTERN_C
 
_gl_w¨n_⁄_u£


	)

105 #i‚de‡
_GL_WARN_EXTERN_C


106 #i‡
deföed
 
__˝lu•lus


107 
	#_GL_WARN_EXTERN_C
 "C"

	)

109 
	#_GL_WARN_EXTERN_C
 

	)

	@lib/accept.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
ac˚±


32 
	$Ωl_ac˚±
 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

34 
SOCKET
 
fh
 = 
	`ac˚±
 (
	`FD_TO_SOCKET
 (
fd
), 
addr
, 
addæí
);

35 i‡(
fh
 =
INVALID_SOCKET
)

37 
	`£t_wösock_î∫o
 ();

41  
	`SOCKET_TO_FD
 (
fh
);

42 
	}
}

	@lib/alignof.h

20 #i‚de‡
_ALIGNOF_H


21 
	#_ALIGNOF_H


	)

23 
	~<°ddef.h
>

29 #i‡
deföed
 
__˝lu•lus


30 
	gãm∂©e
 <
˛ass
 
	gty≥
> 
	sÆignof_hñ≥r
 { 
	m__¶Ÿ1
; 
ty≥
 
	m__¶Ÿ2
; };

31 
	#Æignof_¶Ÿ
(
ty≥
Ë
	`off£tof
 (
Æignof_hñ≥r
<ty≥>, 
__¶Ÿ2
)

	)

33 
	#Æignof_¶Ÿ
(
ty≥
Ë
	`off£tof
 (°ru˘ { 
__¶Ÿ1
;Åy≥ 
__¶Ÿ2
; }, __¶Ÿ2)

	)

43 #i‡
deföed
 
__GNUC__


44 
	#Æignof_ty≥
 
__Æignof__


	)

46 
	#Æignof_ty≥
 
Æignof_¶Ÿ


	)

53 
	#Æignof
 
Æignof_¶Ÿ


	)

	@lib/alloca.c

26 
	~<c⁄fig.h
>

28 
	~<Æloˇ.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

33 #ifde‡
emacs


34 
	~"li•.h
"

35 
	~"blocköput.h
"

36 #ifde‡
EMACS_FREE


37 #unde‡
‰ì


38 
	#‰ì
 
EMACS_FREE


	)

41 
	#mem‹y_fuŒ
(Ë
	`ab‹t
 ()

	)

45 #i‡!
deföed
 (
__GNUC__
) || __GNUC__ < 2

49 #i‚de‡
Æloˇ


51 #ifde‡
emacs


57 #i‚de‡
STACK_DIRECTION


58 
you


59 
	glo£


60 -- 
mu°
 
know
 
STACK_DIRECTION
 
©
 
	gcompûe
-
	gtime


70 #i‡
deföed
 (
CRAY
Ë&& deföed (
CRAY_STACKSEG_END
)

71 
i00afunc
 ();

72 
	#ADDRESS_FUNCTION
(
¨g
Ë(*Ë
	`i00afunc
 (&◊rg))

	)

74 
	#ADDRESS_FUNCTION
(
¨g
Ë&◊rg)

	)

85 #i‚de‡
STACK_DIRECTION


86 
	#STACK_DIRECTION
 0

	)

89 #i‡
STACK_DIRECTION
 != 0

91 
	#STACK_DIR
 
STACK_DIRECTION


	)

95 
	g°ack_dú
;

96 
	#STACK_DIR
 
°ack_dú


	)

99 
	$föd_°ack_dúe˘i⁄
 (*
addr
, 
dïth
)

101 
dú
, 
dummy
 = 0;

102 i‡(! 
addr
)

103 
addr
 = &
dummy
;

104 *
addr
 =ádd∏< &
dummy
 ? 1 :áddr == &dummy ? 0 : -1;

105 
dú
 = 
dïth
 ? 
	`föd_°ack_dúe˘i⁄
 (
addr
, depth - 1) : 0;

106  
dú
 + 
dummy
;

107 
	}
}

118 #i‚de‡ 
ALIGN_SIZE


119 
	#ALIGN_SIZE
 ()

	)

122 
	uhdr


124 
	mÆign
[
ALIGN_SIZE
];

127 
hdr
 *
	m√xt
;

128 *
	mdìp
;

129 } 
	mh
;

130 } 
	thódî
;

132 
hódî
 *
	gœ°_Æloˇ_hódî
 = 
NULL
;

142 
	$Æloˇ
 (
size_t
 
size
)

144 autÿ
¥obe
;

145 *
dïth
 = 
	`ADDRESS_FUNCTION
 (
¥obe
);

147 #i‡
STACK_DIRECTION
 == 0

148 i‡(
STACK_DIR
 == 0)

149 
STACK_DIR
 = 
	`föd_°ack_dúe˘i⁄
 (
NULL
, (
size
 & 1) + 20);

156 
hódî
 *
hp
;

158 #ifde‡
emacs


159 
BLOCK_INPUT
;

162 
hp
 = 
œ°_Æloˇ_hódî
; h∞!
NULL
;)

163 i‡((
STACK_DIR
 > 0 && 
hp
->
h
.
dìp
 > 
dïth
)

164 || (
STACK_DIR
 < 0 && 
hp
->
h
.
dìp
 < 
dïth
))

166 
hódî
 *
≈
 = 
hp
->
h
.
√xt
;

168 
	`‰ì
 (
hp
);

170 
hp
 = 
≈
;

175 
œ°_Æloˇ_hódî
 = 
hp
;

177 #ifde‡
emacs


178 
UNBLOCK_INPUT
;

182 i‡(
size
 == 0)

183  
NULL
;

189 
hódî
 *
√w
;

191 
size_t
 
comböed_size
 =  (
hódî
Ë+ 
size
;

192 i‡(
comböed_size
 <  (
hódî
))

193 
	`mem‹y_fuŒ
 ();

195 
√w
 = 
	`mÆloc
 (
comböed_size
);

197 i‡(! 
√w
)

198 
	`mem‹y_fuŒ
 ();

200 
√w
->
h
.
√xt
 = 
œ°_Æloˇ_hódî
;

201 
√w
->
h
.
dìp
 = 
dïth
;

203 
œ°_Æloˇ_hódî
 = 
√w
;

207  (*Ë(
√w
 + 1);

209 
	}
}

211 #i‡
deföed
 (
CRAY
Ë&& deföed (
CRAY_STACKSEG_END
)

213 #ifde‡
DEBUG_I00AFUNC


214 
	~<°dio.h
>

217 #i‚de‡
CRAY_STACK


218 
	#CRAY_STACK


	)

219 #i‚de‡
CRAY2


221 
	s°ack_c⁄åﬁ_hódî


223 
	mshgrow
:32;

224 
	msha£g
:32;

225 
	mshhwm
:32;

226 
	mshsize
:32;

236 
	s°ack_£gmít_lökage


238 
	mss
[0200];

239 
	msssize
:32;

240 
	mssba£
:32;

242 
	ms•£g
:32;

245 
	ms°˝t
:32;

246 
	mssc¢m
;

248 
	mssu§1
;

249 
	mssu§2
;

250 
	ms°pid
;

251 
	mssgvup
;

252 
	mss¸ay
[7];

253 
	msß0
;

254 
	msß1
;

255 
	msß2
;

256 
	msß3
;

257 
	msß4
;

258 
	msß5
;

259 
	msß6
;

260 
	msß7
;

261 
	msss0
;

262 
	msss1
;

263 
	msss2
;

264 
	msss3
;

265 
	msss4
;

266 
	msss5
;

267 
	msss6
;

268 
	msss7
;

274 
	s°k_°©


276 
	mnow
;

277 
	mmaxc
;

280 
	mhigh_w©î
;

281 
	movîÊows
;

282 
	mhôs
;

283 
	mexãnds
;

284 
	m°ko_mÆlocs
;

285 
	mundîÊows
;

286 
	m°ko_‰ì
;

287 
	m°km_‰ì
;

288 
	m£gmíts
;

289 
	mmaxs
;

290 
	m∑d_size
;

291 
	mcuºít_addªss
;

292 
	mcuºít_size
;

295 
	möôül_addªss
;

296 
	möôül_size
;

303 
	s°k_åaûî


305 
	mthis_addªss
;

306 
	mthis_size
;

308 
	munknown2
;

309 
	munknown3
;

310 
	mlök
;

312 
	munknown5
;

313 
	munknown6
;

314 
	munknown7
;

315 
	munknown8
;

316 
	munknown9
;

317 
	munknown10
;

318 
	munknown11
;

319 
	munknown12
;

320 
	munknown13
;

321 
	munknown14
;

327 #ifde‡
CRAY2


332 
	$i00afunc
 (*
addªss
)

334 
°k_°©
 
°©us
;

335 
°k_åaûî
 *
åaûî
;

336 *
block
, 
size
;

337 
ªsu…
 = 0;

344 
	`STKSTAT
 (&
°©us
);

348 
åaûî
 = (
°k_åaûî
 *Ë(
°©us
.
cuºít_addªss


349 + 
°©us
.
cuºít_size


355 i‡(
åaûî
 == 0)

356 
	`ab‹t
 ();

360 
åaûî
 != 0)

362 
block
 = (*Ë
åaûî
->
this_addªss
;

363 
size
 = 
åaûî
->
this_size
;

364 i‡(
block
 =0 || 
size
 == 0)

365 
	`ab‹t
 ();

366 
åaûî
 = (
°k_åaûî
 *Ëåaûî->
lök
;

367 i‡((
block
 <
addªss
Ë&& (addªs†< (block + 
size
)))

374 
ªsu…
 = 
addªss
 - 
block
;

376 i‡(
åaûî
 == 0)

378  
ªsu…
;

383 i‡(
åaûî
->
this_size
 <= 0)

384 
	`ab‹t
 ();

385 
ªsu…
 +
åaûî
->
this_size
;

386 
åaûî
 = (
°k_åaûî
 *Ëåaûî->
lök
;

388 
åaûî
 != 0);

395  (
ªsu…
);

396 
	}
}

406 
	$i00afunc
 (
addªss
)

408 
°kl
 = 0;

410 
size
, 
p£g
, 
this_£gmít
, 
°ack
;

411 
ªsu…
 = 0;

413 
°ack_£gmít_lökage
 *
s•å
;

423 
°kl
 = 
	`CRAY_STACKSEG_END
 ();

424 
s•å
 = (
°ack_£gmít_lökage
 *Ë
°kl
;

432 
p£g
 = 
s•å
->
s•£g
;

433 
size
 = 
s•å
->
sssize
;

435 
this_£gmít
 = 
°kl
 - 
size
;

441 !(
this_£gmít
 <
addªss
 &&áddªs†<
°kl
))

443 #ifde‡
DEBUG_I00AFUNC


444 
	`Ârötf
 (
°dîr
, "%011ÿ%011ÿ%011o\n", 
this_£gmít
, 
addªss
, 
°kl
);

446 i‡(
p£g
 == 0)

448 
°kl
 = stk»- 
p£g
;

449 
s•å
 = (
°ack_£gmít_lökage
 *Ë
°kl
;

450 
size
 = 
s•å
->
sssize
;

451 
p£g
 = 
s•å
->
s•£g
;

452 
this_£gmít
 = 
°kl
 - 
size
;

455 
ªsu…
 = 
addªss
 - 
this_£gmít
;

462 
p£g
 != 0)

464 #ifde‡
DEBUG_I00AFUNC


465 
	`Ârötf
 (
°dîr
, "%011ÿ%011o\n", 
p£g
, 
size
);

467 
°kl
 = stk»- 
p£g
;

468 
s•å
 = (
°ack_£gmít_lökage
 *Ë
°kl
;

469 
size
 = 
s•å
->
sssize
;

470 
p£g
 = 
s•å
->
s•£g
;

471 
ªsu…
 +
size
;

473  (
ªsu…
);

474 
	}
}

	@lib/alloca.in.h

25 #i‚de‡
_GL_ALLOCA_H


26 
	#_GL_ALLOCA_H


	)

39 #i‚de‡
Æloˇ


40 #ifde‡
__GNUC__


41 
	#Æloˇ
 
__buûtö_Æloˇ


	)

42 #ñi‡
deföed
 
_AIX


43 
	#Æloˇ
 
__Æloˇ


	)

44 #ñi‡
deföed
 
_MSC_VER


45 
	~<mÆloc.h
>

46 
	#Æloˇ
 
_Æloˇ


	)

47 #ñi‡
deföed
 
__DECC
 && deföed 
__VMS


48 
	#Æloˇ
 
__ALLOCA


	)

50 
	~<°ddef.h
>

51 #ifde‡ 
__˝lu•lus


54 *
Æloˇ
 (
size_t
);

	@lib/arpa_inet.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_ARPA_INET_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

28 #i‡@
HAVE_FEATURES_H
@

29 
	~<„©uªs.h
>

35 #i‚de‡
__GLIBC__


36 
	~<sys/sockë.h
>

41 #i‡
deföed
 
__TANDEM
 && !deföed 
__GLIBC__


42 
	~<√tdb.h
>

45 #i‡@
HAVE_ARPA_INET_H
@

48 #@
INCLUDE_NEXT
@ @
NEXT_ARPA_INET_H
@

52 #i‚de‡
_
@
GUARD_PREFIX
@
_ARPA_INET_H


53 
	#_
@
GUARD_PREFIX
@
_ARPA_INET_H


	)

62 #i‡@
GNULIB_INET_NTOP
@

63 #i‡!@
HAVE_DECL_INET_NTOP
@

79 
_GL_FUNCDECL_SYS
 (
öë_¡›
, const *,

80 (
af
, c⁄° *
ª°ri˘
 
§c
,

81 *
ª°ri˘
 
d°
, 
sockÀn_t
 
˙t
)

82 
_GL_ARG_NONNULL
 ((2, 3)));

86 
_GL_CXXALIAS_SYS_CAST
 (
öë_¡›
, const *,

87 (
af
, c⁄° *
ª°ri˘
 
§c
,

88 *
ª°ri˘
 
d°
, 
sockÀn_t
 
˙t
));

89 
_GL_CXXALIASWARN
 (
öë_¡›
);

90 #ñi‡
deföed
 
GNULIB_POSIXCHECK


91 #unde‡
öë_¡›


92 #i‡
HAVE_RAW_DECL_INET_NTOP


93 
_GL_WARN_ON_USE
 (
öë_¡›
, "inet_ntop is unportable - "

98 #i‡@
GNULIB_INET_PTON
@

99 #i‡!@
HAVE_DECL_INET_PTON
@

100 
_GL_FUNCDECL_SYS
 (
öë_±⁄
, ,

101 (
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
)

102 
_GL_ARG_NONNULL
 ((2, 3)));

104 
_GL_CXXALIAS_SYS
 (
öë_±⁄
, ,

105 (
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
));

106 
_GL_CXXALIASWARN
 (
öë_±⁄
);

107 #ñi‡
deföed
 
GNULIB_POSIXCHECK


108 #unde‡
öë_±⁄


109 #i‡
HAVE_RAW_DECL_INET_PTON


110 
_GL_WARN_ON_USE
 (
öë_±⁄
, "inet_pton is unportable - "

	@lib/asnprintf.c

20 
	~<c⁄fig.h
>

23 
	~"va¢¥ötf.h
"

25 
	~<°d¨g.h
>

28 
	$a¢¥ötf
 (*
ªsu…buf
, 
size_t
 *
Àngthp
, c⁄° *
f‹m©
, ...)

30 
va_li°
 
¨gs
;

31 *
ªsu…
;

33 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

34 
ªsu…
 = 
	`va¢¥ötf
 (
ªsu…buf
, 
Àngthp
, 
f‹m©
, 
¨gs
);

35 
	`va_íd
 (
¨gs
);

36  
ªsu…
;

37 
	}
}

	@lib/asprintf.c

21 
	~<c⁄fig.h
>

24 #ifde‡
IN_LIBASPRINTF


25 
	~"va•rötf.h
"

27 
	~<°dio.h
>

30 
	~<°d¨g.h
>

33 
	$a•rötf
 (**
ªsu…p
, c⁄° *
f‹m©
, ...)

35 
va_li°
 
¨gs
;

36 
ªsu…
;

38 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

39 
ªsu…
 = 
	`va•rötf
 (
ªsu…p
, 
f‹m©
, 
¨gs
);

40 
	`va_íd
 (
¨gs
);

41  
ªsu…
;

42 
	}
}

	@lib/basename-lgpl.c

19 
	~<c⁄fig.h
>

21 
	~"dú«me.h
"

23 
	~<°rög.h
>

30 
	$œ°_comp⁄ít
 (c⁄° *
«me
)

32 c⁄° *
ba£
 = 
«me
 + 
	`FILE_SYSTEM_PREFIX_LEN
 (name);

33 c⁄° *
p
;

34 
boﬁ
 
ßw_¶ash
 = 
Ál£
;

36 
	`ISSLASH
 (*
ba£
))

37 
ba£
++;

39 
p
 = 
ba£
; *p;Ö++)

41 i‡(
	`ISSLASH
 (*
p
))

42 
ßw_¶ash
 = 
åue
;

43 i‡(
ßw_¶ash
)

45 
ba£
 = 
p
;

46 
ßw_¶ash
 = 
Ál£
;

50  (*Ë
ba£
;

51 
	}
}

57 
size_t


58 
	$ba£_Àn
 (c⁄° *
«me
)

60 
size_t
 
Àn
;

61 
size_t
 
¥efix_Àn
 = 
	`FILE_SYSTEM_PREFIX_LEN
 (
«me
);

63 
Àn
 = 
	`°æí
 (
«me
); 1 <Üí && 
	`ISSLASH
 (name[len - 1]);Üen--)

66 i‡(
DOUBLE_SLASH_IS_DISTINCT_ROOT
 && 
Àn
 == 1

67 && 
	`ISSLASH
 (
«me
[0]) && ISSLASH (name[1]) && !Çame[2])

70 i‡(
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE
 && 
¥efix_Àn


71 && 
Àn
 =
¥efix_Àn
 && 
	`ISSLASH
 (
«me
[prefix_len]))

72  
¥efix_Àn
 + 1;

74  
Àn
;

75 
	}
}

	@lib/binary-io.h

17 #i‚de‡
_BINARY_H


18 
	#_BINARY_H


	)

22 
	~<f˙é.h
>

26 
	~<°dio.h
>

30 #i‡
O_BINARY


31 #i‡
deföed
 
__EMX__
 || deföed 
__DJGPP__
 || deföed 
__CYGWIN__


32 
	~<io.h
>

34 
	#£tmode
 
_£tmode


	)

35 #unde‡
fûío


36 
	#fûío
 
_fûío


	)

38 #ifde‡
__DJGPP__


39 
	~<uni°d.h
>

43 
	#SET_BINARY
(
fd
Ë((Ë(!
	`ißây
 (fdË? (
	`£tmode
 (fd, 
O_BINARY
), 0Ë: 0))

	)

45 
	#SET_BINARY
(
fd
Ë((Ë
	`£tmode
 (fd, 
O_BINARY
))

	)

49 
	#SET_BINARY
(
fd
Ë ((Ë0)

	)

	@lib/bind.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
böd


32 
	$Ωl_böd
 (
fd
, c⁄° 
sockaddr
 *sockaddr, 
sockÀn_t
 
Àn
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`böd
 (
sock
, 
sockaddr
, 
Àn
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/c-ctype.c

21 
	~<c⁄fig.h
>

24 
	#NO_C_CTYPE_MACROS


	)

25 
	~"c-˘y≥.h
"

29 
boﬁ


30 
	$c_ißscii
 (
c
)

32  (
c
 >= 0x00 && c <= 0x7f);

33 
	}
}

35 
boﬁ


36 
	$c_iß um
 (
c
)

38 #i‡
C_CTYPE_CONSECUTIVE_DIGITS
 \

39 && 
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


40 #i‡
C_CTYPE_ASCII


41  ((
c
 >= '0' && c <= '9')

42 || ((
c
 & ~0x20) >= 'A' && (c & ~0x20) <= 'Z'));

44  ((
c
 >= '0' && c <= '9')

45 || (
c
 >= 'A' && c <= 'Z')

46 || (
c
 >= 'a' && c <= 'z'));

49 
c
)

68 
	}
}

70 
boﬁ


71 
	$c_ißÕha
 (
c
)

73 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


74 #i‡
C_CTYPE_ASCII


75  ((
c
 & ~0x20) >= 'A' && (c & ~0x20) <= 'Z');

77  ((
c
 >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));

80 
c
)

97 
	}
}

99 
boﬁ


100 
	$c_isbœnk
 (
c
)

102  (
c
 == ' ' || c == '\t');

103 
	}
}

105 
boﬁ


106 
	$c_is˙ål
 (
c
)

108 #i‡
C_CTYPE_ASCII


109  ((
c
 & ~0x1f) == 0 || c == 0x7f);

111 
c
)

137 
	}
}

139 
boﬁ


140 
	$c_isdigô
 (
c
)

142 #i‡
C_CTYPE_CONSECUTIVE_DIGITS


143  (
c
 >= '0' && c <= '9');

145 
c
)

154 
	}
}

156 
boﬁ


157 
	$c_i¶owî
 (
c
)

159 #i‡
C_CTYPE_CONSECUTIVE_LOWERCASE


160  (
c
 >= 'a' && c <= 'z');

162 
c
)

174 
	}
}

176 
boﬁ


177 
	$c_isgøph
 (
c
)

179 #i‡
C_CTYPE_ASCII


180  (
c
 >= '!' && c <= '~');

182 
c
)

208 
	}
}

210 
boﬁ


211 
	$c_i•röt
 (
c
)

213 #i‡
C_CTYPE_ASCII


214  (
c
 >= ' ' && c <= '~');

216 
c
)

242 
	}
}

244 
boﬁ


245 
	$c_i•un˘
 (
c
)

247 #i‡
C_CTYPE_ASCII


248  ((
c
 >= '!' && c <= '~')

249 && !((
c
 >= '0' && c <= '9')

250 || ((
c
 & ~0x20) >= 'A' && (c & ~0x20) <= 'Z')));

252 
c
)

266 
	}
}

268 
boﬁ


269 
	$c_is•a˚
 (
c
)

271  (
c
 == ' ' || c == '\t'

272 || 
c
 == '\n' || c == '\v' || c == '\f' || c == '\r');

273 
	}
}

275 
boﬁ


276 
	$c_isuµî
 (
c
)

278 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE


279  (
c
 >= 'A' && c <= 'Z');

281 
c
)

293 
	}
}

295 
boﬁ


296 
	$c_isxdigô
 (
c
)

298 #i‡
C_CTYPE_CONSECUTIVE_DIGITS
 \

299 && 
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


300 #i‡
C_CTYPE_ASCII


301  ((
c
 >= '0' && c <= '9')

302 || ((
c
 & ~0x20) >= 'A' && (c & ~0x20) <= 'F'));

304  ((
c
 >= '0' && c <= '9')

305 || (
c
 >= 'A' && c <= 'F')

306 || (
c
 >= 'a' && c <= 'f'));

309 
c
)

320 
	}
}

323 
	$c_tﬁowî
 (
c
)

325 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


326  (
c
 >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c);

328 
c
)

356 :  
c
;

359 
	}
}

362 
	$c_touµî
 (
c
)

364 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


365  (
c
 >= 'a' && c <= 'z' ? c - 'a' + 'A' : c);

367 
c
)

395 :  
c
;

398 
	}
}

	@lib/c-ctype.h

26 #i‚de‡
C_CTYPE_H


27 
	#C_CTYPE_H


	)

29 
	~<°dboﬁ.h
>

32 #ifde‡
__˝lu•lus


49 
	#C_CTYPE_CONSECUTIVE_DIGITS
 1

	)

61 
	#C_CTYPE_CONSECUTIVE_UPPERCASE
 1

	)

74 
	#C_CTYPE_CONSECUTIVE_LOWERCASE
 1

	)

102 
	#C_CTYPE_ASCII
 1

	)

123 
boﬁ
 
c_ißscii
 (
c
);

125 
boﬁ
 
c_iß um
 (
c
);

126 
boﬁ
 
c_ißÕha
 (
c
);

127 
boﬁ
 
c_isbœnk
 (
c
);

128 
boﬁ
 
c_is˙ål
 (
c
);

129 
boﬁ
 
c_isdigô
 (
c
);

130 
boﬁ
 
c_i¶owî
 (
c
);

131 
boﬁ
 
c_isgøph
 (
c
);

132 
boﬁ
 
c_i•röt
 (
c
);

133 
boﬁ
 
c_i•un˘
 (
c
);

134 
boﬁ
 
c_is•a˚
 (
c
);

135 
boﬁ
 
c_isuµî
 (
c
);

136 
boﬁ
 
c_isxdigô
 (
c
);

138 
c_tﬁowî
 (
c
);

139 
c_touµî
 (
c
);

142 #i‡
deföed
 
__GNUC__
 && deföed 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 && !deföed 
NO_C_CTYPE_MACROS


146 #unde‡
c_ißscii


147 
	#c_ißscii
(
c
) \

148 ({ 
__c
 = (
c
); \

149 (
__c
 >= 0x00 && __c <= 0x7f); \

150 })

	)

152 #i‡
C_CTYPE_CONSECUTIVE_DIGITS
 \

153 && 
	gC_CTYPE_CONSECUTIVE_UPPERCASE
 && 
	gC_CTYPE_CONSECUTIVE_LOWERCASE


154 #i‡
C_CTYPE_ASCII


155 #unde‡
c_iß um


156 
	#c_iß um
(
c
) \

157 ({ 
__c
 = (
c
); \

158 ((
__c
 >= '0' && __c <= '9') \

159 || ((
__c
 & ~0x20) >= 'A' && (__c & ~0x20) <= 'Z')); \

160 })

	)

162 #unde‡
c_iß um


163 
	#c_iß um
(
c
) \

164 ({ 
__c
 = (
c
); \

165 ((
__c
 >= '0' && __c <= '9') \

166 || (
__c
 >= 'A' && __c <= 'Z') \

167 || (
__c
 >= 'a' && __c <= 'z')); \

168 })

	)

172 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


173 #i‡
C_CTYPE_ASCII


174 #unde‡
c_ißÕha


175 
	#c_ißÕha
(
c
) \

176 ({ 
__c
 = (
c
); \

177 ((
__c
 & ~0x20) >= 'A' && (__c & ~0x20) <= 'Z'); \

178 })

	)

180 #unde‡
c_ißÕha


181 
	#c_ißÕha
(
c
) \

182 ({ 
__c
 = (
c
); \

183 ((
__c
 >= 'A' && __c <= 'Z') || (__c >= 'a' && __c <= 'z')); \

184 })

	)

188 #unde‡
c_isbœnk


189 
	#c_isbœnk
(
c
) \

190 ({ 
__c
 = (
c
); \

191 (
__c
 == ' ' || __c == '\t'); \

192 })

	)

194 #i‡
C_CTYPE_ASCII


195 #unde‡
c_is˙ål


196 
	#c_is˙ål
(
c
) \

197 ({ 
__c
 = (
c
); \

198 ((
__c
 & ~0x1f) == 0 || __c == 0x7f); \

199 })

	)

202 #i‡
C_CTYPE_CONSECUTIVE_DIGITS


203 #unde‡
c_isdigô


204 
	#c_isdigô
(
c
) \

205 ({ 
__c
 = (
c
); \

206 (
__c
 >= '0' && __c <= '9'); \

207 })

	)

210 #i‡
C_CTYPE_CONSECUTIVE_LOWERCASE


211 #unde‡
c_i¶owî


212 
	#c_i¶owî
(
c
) \

213 ({ 
__c
 = (
c
); \

214 (
__c
 >= 'a' && __c <= 'z'); \

215 })

	)

218 #i‡
C_CTYPE_ASCII


219 #unde‡
c_isgøph


220 
	#c_isgøph
(
c
) \

221 ({ 
__c
 = (
c
); \

222 (
__c
 >= '!' && __c <= '~'); \

223 })

	)

226 #i‡
C_CTYPE_ASCII


227 #unde‡
c_i•röt


228 
	#c_i•röt
(
c
) \

229 ({ 
__c
 = (
c
); \

230 (
__c
 >= ' ' && __c <= '~'); \

231 })

	)

234 #i‡
C_CTYPE_ASCII


235 #unde‡
c_i•un˘


236 
	#c_i•un˘
(
c
) \

237 ({ 
_c
 = (
c
); \

238 (
	`c_isgøph
 (
_c
Ë&& ! 
	`c_iß um
 (_c)); \

239 })

	)

242 #unde‡
c_is•a˚


243 
	#c_is•a˚
(
c
) \

244 ({ 
__c
 = (
c
); \

245 (
__c
 == ' ' || __c == '\t' \

246 || 
__c
 == '\n' || __c == '\v' || __c == '\f' || __c == '\r'); \

247 })

	)

249 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE


250 #unde‡
c_isuµî


251 
	#c_isuµî
(
c
) \

252 ({ 
__c
 = (
c
); \

253 (
__c
 >= 'A' && __c <= 'Z'); \

254 })

	)

257 #i‡
C_CTYPE_CONSECUTIVE_DIGITS
 \

258 && 
	gC_CTYPE_CONSECUTIVE_UPPERCASE
 && 
	gC_CTYPE_CONSECUTIVE_LOWERCASE


259 #i‡
C_CTYPE_ASCII


260 #unde‡
c_isxdigô


261 
	#c_isxdigô
(
c
) \

262 ({ 
__c
 = (
c
); \

263 ((
__c
 >= '0' && __c <= '9') \

264 || ((
__c
 & ~0x20) >= 'A' && (__c & ~0x20) <= 'F')); \

265 })

	)

267 #unde‡
c_isxdigô


268 
	#c_isxdigô
(
c
) \

269 ({ 
__c
 = (
c
); \

270 ((
__c
 >= '0' && __c <= '9') \

271 || (
__c
 >= 'A' && __c <= 'F') \

272 || (
__c
 >= 'a' && __c <= 'f')); \

273 })

	)

277 #i‡
C_CTYPE_CONSECUTIVE_UPPERCASE
 && 
C_CTYPE_CONSECUTIVE_LOWERCASE


278 #unde‡
c_tﬁowî


279 
	#c_tﬁowî
(
c
) \

280 ({ 
__c
 = (
c
); \

281 (
__c
 >= 'A' && __c <= 'Z' ? __c - 'A' + 'a' : __c); \

282 })

	)

283 #unde‡
c_touµî


284 
	#c_touµî
(
c
) \

285 ({ 
__c
 = (
c
); \

286 (
__c
 >= 'a' && __c <= 'z' ? __c - 'a' + 'A' : __c); \

287 })

	)

293 #ifde‡
__˝lu•lus


	@lib/cloexec.c

20 
	~<c⁄fig.h
>

22 
	~"˛€xec.h
"

24 
	~<î∫o.h
>

25 
	~<f˙é.h
>

26 
	~<uni°d.h
>

39 
	$£t_˛€xec_Êag
 (
desc
, 
boﬁ
 
vÆue
)

41 #ifde‡
F_SETFD


43 
Êags
 = 
	`f˙é
 (
desc
, 
F_GETFD
, 0);

45 i‡(0 <
Êags
)

47 
√wÊags
 = (
vÆue
 ? 
Êags
 | 
FD_CLOEXEC
 : flags & ~FD_CLOEXEC);

49 i‡(
Êags
 =
√wÊags


50 || 
	`f˙é
 (
desc
, 
F_SETFD
, 
√wÊags
) != -1)

60 i‡(
desc
 < 0)

62 
î∫o
 = 
EBADF
;

65 i‡(
	`dup2
 (
desc
, desc) < 0)

72 
	}
}

80 
	$dup_˛€xec
 (
fd
)

82  
	`f˙é
 (
fd
, 
F_DUPFD_CLOEXEC
, 0);

83 
	}
}

	@lib/cloexec.h

20 
	~<°dboﬁ.h
>

32 
£t_˛€xec_Êag
 (
desc
, 
boﬁ
 
vÆue
);

38 
dup_˛€xec
 (
fd
);

	@lib/close.c

17 
	~<c⁄fig.h
>

20 
	~<uni°d.h
>

22 
	~"fd-hook.h
"

27 
	$Ωl_˛o£
 (
fd
)

28 #unde‡
˛o£


30 #i‡
WINDOWS_SOCKETS


31 
ªtvÆ
 = 
	`execuã_Æl_˛o£_hooks
 (
˛o£
, 
fd
);

33 
ªtvÆ
 = 
	`˛o£
 (
fd
);

36 #i‡
REPLACE_FCHDIR


37 i‡(
ªtvÆ
 >= 0)

38 
	`_gl_uƒegi°î_fd
 (
fd
);

41  
ªtvÆ
;

42 
	}
}

	@lib/connect.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
c⁄√˘


32 
	$Ωl_c⁄√˘
 (
fd
, c⁄° 
sockaddr
 *sockaddr, 
sockÀn_t
 
Àn
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`c⁄√˘
 (
sock
, 
sockaddr
, 
Àn
);

36 i‡(
r
 < 0)

40 i‡(
	`WSAGëLa°Eº‹
 (Ë=
WSAEWOULDBLOCK
)

41 
	`WSASëLa°Eº‹
 (
WSAEINPROGRESS
);

43 
	`£t_wösock_î∫o
 ();

46  
r
;

47 
	}
}

	@lib/dirname-lgpl.c

19 
	~<c⁄fig.h
>

21 
	~"dú«me.h
"

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

31 
size_t


32 
	$dú_Àn
 (c⁄° *
fûe
)

34 
size_t
 
¥efix_Àngth
 = 
	`FILE_SYSTEM_PREFIX_LEN
 (
fûe
);

35 
size_t
 
Àngth
;

38 
¥efix_Àngth
 += (prefix_length != 0

39 ? (
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE


40 && 
	`ISSLASH
 (
fûe
[
¥efix_Àngth
]))

41 : (
	`ISSLASH
 (
fûe
[0])

42 ? ((
DOUBLE_SLASH_IS_DISTINCT_ROOT


43 && 
	`ISSLASH
 (
fûe
[1]) && ! ISSLASH (file[2])

48 
Àngth
 = 
	`œ°_comp⁄ít
 (
fûe
) - file;

49 
¥efix_Àngth
 < 
Àngth
;Üength--)

50 i‡(! 
	`ISSLASH
 (
fûe
[
Àngth
 - 1]))

52  
Àngth
;

53 
	}
}

71 
	$mdú_«me
 (c⁄° *
fûe
)

73 
size_t
 
Àngth
 = 
	`dú_Àn
 (
fûe
);

74 
boﬁ
 
≠≥nd_dŸ
 = (
Àngth
 == 0

75 || (
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE


76 && 
Àngth
 =
	`FILE_SYSTEM_PREFIX_LEN
 (
fûe
)

77 && 
fûe
[2] !'\0' && ! 
	`ISSLASH
 (file[2])));

78 *
dú
 = 
	`mÆloc
 (
Àngth
 + 
≠≥nd_dŸ
 + 1);

79 i‡(!
dú
)

80  
NULL
;

81 
	`mem˝y
 (
dú
, 
fûe
, 
Àngth
);

82 i‡(
≠≥nd_dŸ
)

83 
dú
[
Àngth
++] = '.';

84 
dú
[
Àngth
] = '\0';

85  
dú
;

86 
	}
}

	@lib/dirname.h

19 #i‚de‡
DIRNAME_H_


20 
	#DIRNAME_H_
 1

	)

22 
	~<°dboﬁ.h
>

23 
	~<°ddef.h
>

24 
	~"do¢ame.h
"

26 #i‚de‡
DIRECTORY_SEPARATOR


27 
	#DIRECTORY_SEPARATOR
 '/'

	)

30 #i‚de‡
DOUBLE_SLASH_IS_DISTINCT_ROOT


31 
	#DOUBLE_SLASH_IS_DISTINCT_ROOT
 0

	)

34 #i‡
GNULIB_DIRNAME


35 *
ba£_«me
 (c⁄° *
fûe
);

36 *
dú_«me
 (c⁄° *
fûe
);

39 *
mdú_«me
 (c⁄° *
fûe
);

40 
size_t
 
ba£_Àn
 (c⁄° *
fûe
);

41 
size_t
 
dú_Àn
 (c⁄° *
fûe
);

42 *
œ°_comp⁄ít
 (c⁄° *
fûe
);

44 
boﬁ
 
°rù_åaûög_¶ashes
 (*
fûe
);

	@lib/dosname.h

20 #i‚de‡
_DOSNAME_H


21 
	#_DOSNAME_H


	)

23 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
 || \

24 
deföed
 
	g__MSDOS__
 || deföed 
	g__CYGWIN__
 || \

25 
deföed
 
	g__EMX__
 || deföed 
	g__DJGPP__
)

28 
	#_IS_DRIVE_LETTER
(
C
) ((() (C) | ('a' - 'A')) - 'a' \

29 <'z' - 'a')

	)

30 
	#FILE_SYSTEM_PREFIX_LEN
(
Fûíame
) \

31 (
	`_IS_DRIVE_LETTER
 ((
Fûíame
)[0]Ë&& (Fûíame)[1] =':' ? 2 : 0)

	)

32 #i‚de‡
__CYGWIN__


33 
	#FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE
 1

	)

35 
	#ISSLASH
(
C
Ë((CË='/' || (CË='\\')

	)

37 
	#FILE_SYSTEM_PREFIX_LEN
(
Fûíame
Ë0

	)

38 
	#ISSLASH
(
C
Ë((CË='/')

	)

41 #i‚de‡
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE


42 
	#FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE
 0

	)

45 #i‡
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE


46 
	#IS_ABSOLUTE_FILE_NAME
(
F
Ë
	`ISSLASH
 ((F)[
	`FILE_SYSTEM_PREFIX_LEN
 (F)])

	)

48 
	#IS_ABSOLUTE_FILE_NAME
(
F
) \

49 (
	`ISSLASH
 ((
F
)[0]Ë|| 
	`FILE_SYSTEM_PREFIX_LEN
 (FË!0)

	)

51 
	#IS_RELATIVE_FILE_NAME
(
F
Ë(! 
	`IS_ABSOLUTE_FILE_NAME
 (F))

	)

	@lib/dup-safer-flag.c

21 
	~<c⁄fig.h
>

24 
	~"uni°d-ß„r.h
"

26 
	~<f˙é.h
>

27 
	~<uni°d.h
>

29 
	~"˛€xec.h
"

36 
	$dup_ß„r_Êag
 (
fd
, 
Êag
)

38  
	`f˙é
 (
fd
, (
Êag
 & 
O_CLOEXEC
Ë? 
F_DUPFD_CLOEXEC
 : 
F_DUPFD
,

39 
STDERR_FILENO
 + 1);

40 
	}
}

	@lib/dup-safer.c

20 
	~<c⁄fig.h
>

22 
	~"uni°d-ß„r.h
"

24 
	~<f˙é.h
>

25 
	~<uni°d.h
>

31 
	$dup_ß„r
 (
fd
)

33  
	`f˙é
 (
fd
, 
F_DUPFD
, 
STDERR_FILENO
 + 1);

34 
	}
}

	@lib/dup2.c

20 
	~<c⁄fig.h
>

23 
	~<uni°d.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

28 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


30 
	#WIN32_LEAN_AND_MEAN


	)

31 
	~<wödows.h
>

34 #i‡
HAVE_DUP2


36 #unde‡
dup2


39 
	$Ωl_dup2
 (
fd
, 
desúed_fd
)

41 
ªsu…
;

42 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


46 i‡(
fd
 =
desúed_fd
)

48 i‡((
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
Ë=
INVALID_HANDLE_VALUE
)

50 
î∫o
 = 
EBADF
;

53  
fd
;

57 i‡(
desúed_fd
 < 0)

59 
î∫o
 = 
EBADF
;

62 #ñi‡!
deföed
 
__löux__


64 i‡(
fd
 =
desúed_fd
)

65  
	`f˙é
 (
fd
, 
F_GETFL
) == -1 ? -1 : fd;

67 
ªsu…
 = 
	`dup2
 (
fd
, 
desúed_fd
);

68 #ifde‡
__löux__


72 i‡(
fd
 =
desúed_fd
 && 
ªsu…
 =(Ë-
EBADF
)

74 
î∫o
 = 
EBADF
;

75 
ªsu…
 = -1;

78 i‡(
ªsu…
 == 0)

79 
ªsu…
 = 
desúed_fd
;

81 i‡(
ªsu…
 =-1 && 
î∫o
 =
EMFILE
)

82 
î∫o
 = 
EBADF
;

83 #i‡
REPLACE_FCHDIR


84 i‡(
fd
 !
desúed_fd
 && 
ªsu…
 != -1)

85 
ªsu…
 = 
	`_gl_ªgi°î_dup
 (
fd
,Ñesult);

87  
ªsu…
;

88 
	}
}

94 #i‚de‡
F_DUPFD


96 
	$dupfd
 (
fd
, 
desúed_fd
)

98 
du∂iˇãd_fd
 = 
	`dup
 (
fd
);

99 i‡(
du∂iˇãd_fd
 < 0 || du∂iˇãd_fd =
desúed_fd
)

100  
du∂iˇãd_fd
;

103 
r
 = 
	`dupfd
 (
fd
, 
desúed_fd
);

104 
e
 = 
î∫o
;

105 
	`˛o£
 (
du∂iˇãd_fd
);

106 
î∫o
 = 
e
;

107  
r
;

109 
	}
}

113 
	$dup2
 (
fd
, 
desúed_fd
)

115 
ªsu…
 = 
	`f˙é
 (
fd
, 
F_GETFL
) < 0 ? -1 : fd;

116 i‡(
ªsu…
 =-1 || 
fd
 =
desúed_fd
)

117  
ªsu…
;

118 
	`˛o£
 (
desúed_fd
);

119 #ifde‡
F_DUPFD


120 
ªsu…
 = 
	`f˙é
 (
fd
, 
F_DUPFD
, 
desúed_fd
);

121 #i‡
REPLACE_FCHDIR


122 i‡(0 <
ªsu…
)

123 
ªsu…
 = 
	`_gl_ªgi°î_dup
 (
fd
,Ñesult);

126 
ªsu…
 = 
	`dupfd
 (
fd
, 
desúed_fd
);

128 i‡(
ªsu…
 =-1 && (
î∫o
 =
EMFILE
 ||Éºnÿ=
EINVAL
))

129 
î∫o
 = 
EBADF
;

130  
ªsu…
;

131 
	}
}

	@lib/errno.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_ERRNO_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

29 #@
INCLUDE_NEXT
@ @
NEXT_ERRNO_H
@

31 #i‚de‡
_
@
GUARD_PREFIX
@
_ERRNO_H


32 
	#_
@
GUARD_PREFIX
@
_ERRNO_H


	)

36 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


39 
	#EWOULDBLOCK
 
EAGAIN


	)

42 
	#ETXTBSY
 100

	)

43 
	#GNULIB_deföed_ETXTBSY
 1

	)

47 
	#EINPROGRESS
 10036

	)

48 
	#EALREADY
 10037

	)

49 
	#ENOTSOCK
 10038

	)

50 
	#EDESTADDRREQ
 10039

	)

51 
	#EMSGSIZE
 10040

	)

52 
	#EPROTOTYPE
 10041

	)

53 
	#ENOPROTOOPT
 10042

	)

54 
	#EPROTONOSUPPORT
 10043

	)

55 
	#ESOCKTNOSUPPORT
 10044

	)

56 
	#EOPNOTSUPP
 10045

	)

57 
	#EPFNOSUPPORT
 10046

	)

58 
	#EAFNOSUPPORT
 10047

	)

59 
	#EADDRINUSE
 10048

	)

60 
	#EADDRNOTAVAIL
 10049

	)

61 
	#ENETDOWN
 10050

	)

62 
	#ENETUNREACH
 10051

	)

63 
	#ENETRESET
 10052

	)

64 
	#ECONNABORTED
 10053

	)

65 
	#ECONNRESET
 10054

	)

66 
	#ENOBUFS
 10055

	)

67 
	#EISCONN
 10056

	)

68 
	#ENOTCONN
 10057

	)

69 
	#ESHUTDOWN
 10058

	)

70 
	#ETOOMANYREFS
 10059

	)

71 
	#ETIMEDOUT
 10060

	)

72 
	#ECONNREFUSED
 10061

	)

73 
	#ELOOP
 10062

	)

74 
	#EHOSTDOWN
 10064

	)

75 
	#EHOSTUNREACH
 10065

	)

76 
	#EPROCLIM
 10067

	)

77 
	#EUSERS
 10068

	)

78 
	#EDQUOT
 10069

	)

79 
	#ESTALE
 10070

	)

80 
	#EREMOTE
 10071

	)

81 
	#GNULIB_deföed_ESOCK
 1

	)

88 #i‡@
EMULTIHOP_HIDDEN
@

89 
	#EMULTIHOP
 @
EMULTIHOP_VALUE
@

	)

90 
	#GNULIB_deföed_EMULTIHOP
 1

	)

92 #i‡@
ENOLINK_HIDDEN
@

93 
	#ENOLINK
 @
ENOLINK_VALUE
@

	)

94 
	#GNULIB_deföed_ENOLINK
 1

	)

96 #i‡@
EOVERFLOW_HIDDEN
@

97 
	#EOVERFLOW
 @
EOVERFLOW_VALUE
@

	)

98 
	#GNULIB_deföed_EOVERFLOW
 1

	)

112 #i‚de‡
ENOMSG


113 
	#ENOMSG
 2000

	)

114 
	#GNULIB_deföed_ENOMSG
 1

	)

117 #i‚de‡
EIDRM


118 
	#EIDRM
 2001

	)

119 
	#GNULIB_deföed_EIDRM
 1

	)

122 #i‚de‡
ENOLINK


123 
	#ENOLINK
 2002

	)

124 
	#GNULIB_deföed_ENOLINK
 1

	)

127 #i‚de‡
EPROTO


128 
	#EPROTO
 2003

	)

129 
	#GNULIB_deföed_EPROTO
 1

	)

132 #i‚de‡
EMULTIHOP


133 
	#EMULTIHOP
 2004

	)

134 
	#GNULIB_deföed_EMULTIHOP
 1

	)

137 #i‚de‡
EBADMSG


138 
	#EBADMSG
 2005

	)

139 
	#GNULIB_deföed_EBADMSG
 1

	)

142 #i‚de‡
EOVERFLOW


143 
	#EOVERFLOW
 2006

	)

144 
	#GNULIB_deföed_EOVERFLOW
 1

	)

147 #i‚de‡
ENOTSUP


148 
	#ENOTSUP
 2007

	)

149 
	#GNULIB_deföed_ENOTSUP
 1

	)

152 #i‚de‡
ENETRESET


153 
	#ENETRESET
 2011

	)

154 
	#GNULIB_deföed_ENETRESET
 1

	)

157 #i‚de‡
ECONNABORTED


158 
	#ECONNABORTED
 2012

	)

159 
	#GNULIB_deföed_ECONNABORTED
 1

	)

162 #i‚de‡
ESTALE


163 
	#ESTALE
 2009

	)

164 
	#GNULIB_deföed_ESTALE
 1

	)

167 #i‚de‡
EDQUOT


168 
	#EDQUOT
 2010

	)

169 
	#GNULIB_deföed_EDQUOT
 1

	)

172 #i‚de‡
ECANCELED


173 
	#ECANCELED
 2008

	)

174 
	#GNULIB_deföed_ECANCELED
 1

	)

	@lib/error.c

20 #i‡!
_LIBC


21 
	~<c⁄fig.h
>

24 
	~"îr‹.h
"

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

31 #i‡!
_LIBC
 && 
ENABLE_NLS


32 
	~"gëãxt.h
"

33 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

36 #ifde‡
_LIBC


37 
	~<liböé.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°döt.h
>

40 
	~<wch¨.h
>

41 
	#mb§towcs
 
__mb§towcs


	)

44 #i‡
USE_UNLOCKED_IO


45 
	~"u∆ocked-io.h
"

48 #i‚de‡
_


49 
	#_
(
Såög
Ë
	)
String

55 (*
îr‹_¥öt_¥og«me
) ();

58 
îr‹_mesßge_cou¡
;

60 #ifde‡
_LIBC


63 
	#¥ogøm_«me
 
¥ogøm_övoˇti⁄_«me


	)

64 
	~<î∫o.h
>

65 
	~<limôs.h
>

66 
	~<libio/libioP.h
>

70 
	$__îr‹
 (
°©us
, 
î∫um
, c⁄° *
mesßge
, ...)

71 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

72 
	$__îr‹_©_löe
 (
°©us
, 
î∫um
, c⁄° *
fûe_«me
,

73 
löe_numbî
, c⁄° *
mesßge
,

75 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));;

76 
	#îr‹
 
__îr‹


	)

77 
	#îr‹_©_löe
 
__îr‹_©_löe


	)

79 
	~<libio/iﬁibio.h
>

80 
	#fÊush
(
s
Ë
	`INTUSE
(
_IO_fÊush
Ë(s)

	)

81 #unde‡
putc


82 
	#putc
(
c
, 
Â
Ë
	`INTUSE
(
_IO_putc
Ë(c, fp)

	)

84 
	~<bôs/libc-lock.h
>

88 
	~<f˙é.h
>

89 
	~<uni°d.h
>

91 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


93 
	#WIN32_LEAN_AND_MEAN


	)

94 
	~<wödows.h
>

98 #unde‡
f˙é


100 #i‡!
HAVE_DECL_STRERROR_R


101 #i‚de‡
HAVE_DECL_STRERROR_R


104 #i‡
STRERROR_R_CHAR_P


105 *
	`°ªº‹_r
 ();

107 
	`°ªº‹_r
 ();

113 *
¥ogøm_«me
;

115 #i‡
HAVE_STRERROR_R
 || 
deföed
 
°ªº‹_r


116 
	#__°ªº‹_r
 
°ªº‹_r


	)

120 #i‡!
_LIBC


122 
ölöe
 

123 
	$is_›í
 (
fd
)

125 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


129  (
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
Ë!
INVALID_HANDLE_VALUE
;

131 #i‚de‡
F_GETFL


132 #îr‹ 
PÀa£
 
p‹t
 
f˙é
 
to
 
your
 
∂©f‹m


134  0 <
	`f˙é
 (
fd
, 
F_GETFL
);

136 
	}
}

139 
ölöe
 

140 
	$Êush_°dout
 ()

142 #i‡!
_LIBC


143 
°dout_fd
;

145 #i‡
GNULIB_FREOPEN_SAFER


149 
°dout_fd
 = 
STDOUT_FILENO
;

154 
°dout_fd
 = 
	`fûío
 (
°dout
);

159 i‡(0 <
°dout_fd
 && 
	`is_›í
 (stdout_fd))

161 
	`fÊush
 (
°dout
);

162 
	}
}

165 
	$¥öt_î∫o_mesßge
 (
î∫um
)

167 c⁄° *
s
;

169 #i‡
deföed
 
HAVE_STRERROR_R
 || 
_LIBC


170 
îrbuf
[1024];

171 #i‡
STRERROR_R_CHAR_P
 || 
_LIBC


172 
s
 = 
	`__°ªº‹_r
 (
î∫um
, 
îrbuf
, Érrbuf);

174 i‡(
	`__°ªº‹_r
 (
î∫um
, 
îrbuf
, Érrbuf) == 0)

175 
s
 = 
îrbuf
;

177 
s
 = 0;

180 
s
 = 
	`°ªº‹
 (
î∫um
);

183 #i‡!
_LIBC


184 i‡(! 
s
)

185 
s
 = 
	`_
("Unknown systemÉrror");

188 #i‡
_LIBC


189 
	`__fx¥ötf
 (
NULL
, ": %s", 
s
);

191 
	`Ârötf
 (
°dîr
, ": %s", 
s
);

193 
	}
}

196 
	$îr‹_èû
 (
°©us
, 
î∫um
, c⁄° *
mesßge
, 
va_li°
 
¨gs
)

198 #i‡
_LIBC


199 i‡(
	`_IO_fwide
 (
°dîr
, 0) > 0)

201 
	#ALLOCA_LIMIT
 2000

	)

202 
size_t
 
Àn
 = 
	`°æí
 (
mesßge
) + 1;

203 
wch¨_t
 *
wmesßge
 = 
NULL
;

204 
mb°©e_t
 
°
;

205 
size_t
 
ªs
;

206 c⁄° *
tmp
;

207 
boﬁ
 
u£_mÆloc
 = 
Ál£
;

211 i‡(
	`__libc_u£_Æloˇ
 (
Àn
 *  (
wch¨_t
)))

212 
wmesßge
 = (
wch¨_t
 *Ë
	`Æloˇ
 (
Àn
 *  (wchar_t));

215 i‡(!
u£_mÆloc
)

216 
wmesßge
 = 
NULL
;

218 
wch¨_t
 *
p
 = (wch¨_à*Ë
	`ªÆloc
 (
wmesßge
,

219 
Àn
 *  (
wch¨_t
));

220 i‡(
p
 =
NULL
)

222 
	`‰ì
 (
wmesßge
);

223 
	`Âutws_u∆ocked
 (
L
"ouào‡mem‹y\n", 
°dîr
);

226 
wmesßge
 = 
p
;

227 
u£_mÆloc
 = 
åue
;

230 
	`mem£t
 (&
°
, '\0',  (st));

231 
tmp
 = 
mesßge
;

233 
ªs
 = 
	`mb§towcs
 (
wmesßge
, &
tmp
, 
Àn
, &
°
);

234 i‡(
ªs
 !
Àn
)

237 i‡(
	`__buûtö_ex≥˘
 (
Àn
 >
SIZE_MAX
 / 2, 0))

240 
ªs
 = (
size_t
) -1;

244 
Àn
 *= 2;

247 i‡(
ªs
 =(
size_t
) -1)

250 i‡(
u£_mÆloc
)

252 
	`‰ì
 (
wmesßge
);

253 
u£_mÆloc
 = 
Ál£
;

255 
wmesßge
 = (
wch¨_t
 *Ë
L
"???";

258 
	`__vfw¥ötf
 (
°dîr
, 
wmesßge
, 
¨gs
);

260 i‡(
u£_mÆloc
)

261 
	`‰ì
 (
wmesßge
);

265 
	`vÂrötf
 (
°dîr
, 
mesßge
, 
¨gs
);

266 
	`va_íd
 (
¨gs
);

268 ++
îr‹_mesßge_cou¡
;

269 i‡(
î∫um
)

270 
	`¥öt_î∫o_mesßge
 (
î∫um
);

271 #i‡
_LIBC


272 
	`__fx¥ötf
 (
NULL
, "\n");

274 
	`putc
 ('\n', 
°dîr
);

276 
	`fÊush
 (
°dîr
);

277 i‡(
°©us
)

278 
	`exô
 (
°©us
);

279 
	}
}

287 
	$îr‹
 (
°©us
, 
î∫um
, c⁄° *
mesßge
, ...)

289 
va_li°
 
¨gs
;

291 #i‡
deföed
 
_LIBC
 && deföed 
__libc_±f_ˇŒ


294 
°©e
 = 
PTHREAD_CANCEL_ENABLE
;

295 
	`__libc_±f_ˇŒ
 (
±hªad_£tˇn˚l°©e
, (
PTHREAD_CANCEL_DISABLE
, &
°©e
),

299 
	`Êush_°dout
 ();

300 #ifde‡
_LIBC


301 
	`_IO_Êockfûe
 (
°dîr
);

303 i‡(
îr‹_¥öt_¥og«me
)

304 (*
îr‹_¥öt_¥og«me
) ();

307 #i‡
_LIBC


308 
	`__fx¥ötf
 (
NULL
, "%s: ", 
¥ogøm_«me
);

310 
	`Ârötf
 (
°dîr
, "%s: ", 
¥ogøm_«me
);

314 
	`va_°¨t
 (
¨gs
, 
mesßge
);

315 
	`îr‹_èû
 (
°©us
, 
î∫um
, 
mesßge
, 
¨gs
);

317 #ifde‡
_LIBC


318 
	`_IO_fu∆ockfûe
 (
°dîr
);

319 #ifde‡
__libc_±f_ˇŒ


320 
	`__libc_±f_ˇŒ
 (
±hªad_£tˇn˚l°©e
, (
°©e
, 
NULL
), 0);

323 
	}
}

327 
	gîr‹_⁄e_≥r_löe
;

330 
	$îr‹_©_löe
 (
°©us
, 
î∫um
, c⁄° *
fûe_«me
,

331 
löe_numbî
, c⁄° *
mesßge
, ...)

333 
va_li°
 
¨gs
;

335 i‡(
îr‹_⁄e_≥r_löe
)

337 c⁄° *
ﬁd_fûe_«me
;

338 
ﬁd_löe_numbî
;

340 i‡(
ﬁd_löe_numbî
 =
löe_numbî


341 && (
fûe_«me
 =
ﬁd_fûe_«me


342 || 
	`°rcmp
 (
ﬁd_fûe_«me
, 
fûe_«me
) == 0))

346 
ﬁd_fûe_«me
 = 
fûe_«me
;

347 
ﬁd_löe_numbî
 = 
löe_numbî
;

350 #i‡
deföed
 
_LIBC
 && deföed 
__libc_±f_ˇŒ


353 
°©e
 = 
PTHREAD_CANCEL_ENABLE
;

354 
	`__libc_±f_ˇŒ
 (
±hªad_£tˇn˚l°©e
, (
PTHREAD_CANCEL_DISABLE
, &
°©e
),

358 
	`Êush_°dout
 ();

359 #ifde‡
_LIBC


360 
	`_IO_Êockfûe
 (
°dîr
);

362 i‡(
îr‹_¥öt_¥og«me
)

363 (*
îr‹_¥öt_¥og«me
) ();

366 #i‡
_LIBC


367 
	`__fx¥ötf
 (
NULL
, "%s:", 
¥ogøm_«me
);

369 
	`Ârötf
 (
°dîr
, "%s:", 
¥ogøm_«me
);

373 #i‡
_LIBC


374 
	`__fx¥ötf
 (
NULL
, 
fûe_«me
 != NULL ? "%s:%d: " : " ",

375 
fûe_«me
, 
löe_numbî
);

377 
	`Ârötf
 (
°dîr
, 
fûe_«me
 !
NULL
 ? "%s:%d: " : " ",

378 
fûe_«me
, 
löe_numbî
);

381 
	`va_°¨t
 (
¨gs
, 
mesßge
);

382 
	`îr‹_èû
 (
°©us
, 
î∫um
, 
mesßge
, 
¨gs
);

384 #ifde‡
_LIBC


385 
	`_IO_fu∆ockfûe
 (
°dîr
);

386 #ifde‡
__libc_±f_ˇŒ


387 
	`__libc_±f_ˇŒ
 (
±hªad_£tˇn˚l°©e
, (
°©e
, 
NULL
), 0);

390 
	}
}

392 #ifde‡
_LIBC


394 #unde‡
îr‹


395 #unde‡
îr‹_©_löe


396 
	$wók_Æüs
 (
__îr‹
, 
îr‹
)

397 
	$wók_Æüs
 (
__îr‹_©_löe
, 
îr‹_©_löe
)

	@lib/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

28 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 7)

29 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë
	`__©åibuã__
 ((
__f‹m©__
 s≥c))

	)

31 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë

	)

34 #ifde‡
__˝lu•lus


42 
îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

43 
_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 3, 4));

45 
îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

46 
__löío
, c⁄° *
__f‹m©
, ...)

47 
_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 5, 6));

52 (*
îr‹_¥öt_¥og«me
) ();

55 
îr‹_mesßge_cou¡
;

59 
îr‹_⁄e_≥r_löe
;

61 #ifde‡
__˝lu•lus


	@lib/exitfail.c

18 
	~<c⁄fig.h
>

20 
	~"exôÁû.h
"

22 
	~<°dlib.h
>

24 vﬁ©ûê
	gexô_Áûuª
 = 
EXIT_FAILURE
;

	@lib/exitfail.h

18 vﬁ©ûê
exô_Áûuª
;

	@lib/fatal-signal.c

19 
	~<c⁄fig.h
>

22 
	~"Áèl-sig«l.h
"

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

26 
	~<sig«l.h
>

27 
	~<uni°d.h
>

29 
	~"sig-h™dÀr.h
"

30 
	~"xÆloc.h
"

32 
	#SIZEOF
(
a
Ë(◊Ë/ ◊[0]))

	)

51 
	gÁèl_sig«ls
[] =

54 #ifde‡
SIGINT


55 
SIGINT
,

57 #ifde‡
SIGTERM


58 
SIGTERM
,

61 #ifde‡
SIGHUP


62 
SIGHUP
,

64 #ifde‡
SIGPIPE


65 
SIGPIPE
,

68 #ifde‡
SIGXCPU


69 
SIGXCPU
,

71 #ifde‡
SIGXFSZ


72 
SIGXFSZ
,

75 #ifde‡
SIGBREAK


76 
SIGBREAK
,

81 
	#num_Áèl_sig«ls
 (
	`SIZEOF
 (
Áèl_sig«ls
Ë- 1)

	)

86 
	$öô_Áèl_sig«ls
 ()

88 
boﬁ
 
Áèl_sig«ls_öôülized
 = 
Ál£
;

89 i‡(!
Áèl_sig«ls_öôülized
)

91 
size_t
 
i
;

93 
i
 = 0; i < 
num_Áèl_sig«ls
; i++)

95 
siga˘i⁄
 
a˘i⁄
;

97 i‡(
	`siga˘i⁄
 (
Áèl_sig«ls
[
i
], 
NULL
, &
a˘i⁄
) >= 0

98 && 
	`gë_h™dÀr
 (&
a˘i⁄
Ë=
SIG_IGN
)

99 
Áèl_sig«ls
[
i
] = -1;

102 
Áèl_sig«ls_öôülized
 = 
åue
;

104 
	}
}

110 (*
	ta˘i⁄_t
) ();

117 vﬁ©ûê
a˘i⁄_t
 
a˘i⁄
;

119 
	ta˘i⁄s_íåy_t
;

122 
a˘i⁄s_íåy_t
 
°©ic_a˘i⁄s
[32];

123 
a˘i⁄s_íåy_t
 * vﬁ©ûê
a˘i⁄s
 = 
°©ic_a˘i⁄s
;

124 
sig_©omic_t
 vﬁ©ûê
a˘i⁄s_cou¡
 = 0;

125 
size_t
 
a˘i⁄s_Æloˇãd
 = 
	`SIZEOF
 (
°©ic_a˘i⁄s
);

130 
siga˘i⁄
 
ßved_siga˘i⁄s
[64];

134 
ölöe
 

135 
	$unö°Æl_h™dÀrs
 ()

137 
size_t
 
i
;

139 
i
 = 0; i < 
num_Áèl_sig«ls
; i++)

140 i‡(
Áèl_sig«ls
[
i
] >= 0)

142 
sig
 = 
Áèl_sig«ls
[
i
];

143 i‡(
ßved_siga˘i⁄s
[
sig
].
ß_h™dÀr
 =
SIG_IGN
)

144 
ßved_siga˘i⁄s
[
sig
].
ß_h™dÀr
 = 
SIG_DFL
;

145 
	`siga˘i⁄
 (
sig
, &
ßved_siga˘i⁄s
[sig], 
NULL
);

147 
	}
}

152 
	$Áèl_sig«l_h™dÀr
 (
sig
)

157 
a˘i⁄_t
 
a˘i⁄
;

158 
size_t
 
n
 = 
a˘i⁄s_cou¡
;

159 i‡(
n
 == 0)

161 
n
--;

162 
a˘i⁄s_cou¡
 = 
n
;

163 
a˘i⁄
 = 
a˘i⁄s
[
n
].action;

165 
	`a˘i⁄
 ();

173 
	`unö°Æl_h™dÀrs
 ();

174 
	`øi£
 (
sig
);

175 
	}
}

179 
ölöe
 

180 
	$ö°Æl_h™dÀrs
 ()

182 
size_t
 
i
;

183 
siga˘i⁄
 
a˘i⁄
;

185 
a˘i⁄
.
ß_h™dÀr
 = &
Áèl_sig«l_h™dÀr
;

189 
a˘i⁄
.
ß_Êags
 = 
SA_NODEFER
;

190 
	`sigem±y£t
 (&
a˘i⁄
.
ß_mask
);

191 
i
 = 0; i < 
num_Áèl_sig«ls
; i++)

192 i‡(
Áèl_sig«ls
[
i
] >= 0)

194 
sig
 = 
Áèl_sig«ls
[
i
];

196 i‡(!(
sig
 <  (
ßved_siga˘i⁄s
) /  (saved_sigactions[0])))

197 
	`ab‹t
 ();

198 
	`siga˘i⁄
 (
sig
, &
a˘i⁄
, &
ßved_siga˘i⁄s
[sig]);

200 
	}
}

206 
	$©_Áèl_sig«l
 (
a˘i⁄_t
 
a˘i⁄
)

208 
boﬁ
 
˛ónup_öôülized
 = 
Ál£
;

209 i‡(!
˛ónup_öôülized
)

211 
	`öô_Áèl_sig«ls
 ();

212 
	`ö°Æl_h™dÀrs
 ();

213 
˛ónup_öôülized
 = 
åue
;

216 i‡(
a˘i⁄s_cou¡
 =
a˘i⁄s_Æloˇãd
)

221 
a˘i⁄s_íåy_t
 *
ﬁd_a˘i⁄s
 = 
a˘i⁄s
;

222 
size_t
 
ﬁd_a˘i⁄s_Æloˇãd
 = 
a˘i⁄s_Æloˇãd
;

223 
size_t
 
√w_a˘i⁄s_Æloˇãd
 = 2 * 
a˘i⁄s_Æloˇãd
;

224 
a˘i⁄s_íåy_t
 *
√w_a˘i⁄s
 =

225 
	`XNMALLOC
 (
√w_a˘i⁄s_Æloˇãd
, 
a˘i⁄s_íåy_t
);

226 
size_t
 
k
;

231 
k
 = 0; k < 
ﬁd_a˘i⁄s_Æloˇãd
; k++)

232 
√w_a˘i⁄s
[
k
] = 
ﬁd_a˘i⁄s
[k];

233 
a˘i⁄s
 = 
√w_a˘i⁄s
;

234 
a˘i⁄s_Æloˇãd
 = 
√w_a˘i⁄s_Æloˇãd
;

236 i‡(
ﬁd_a˘i⁄s
 !
°©ic_a˘i⁄s
)

237 
	`‰ì
 (
ﬁd_a˘i⁄s
);

243 
a˘i⁄s
[
a˘i⁄s_cou¡
].
a˘i⁄
 =áction;

244 
a˘i⁄s_cou¡
++;

245 
	}
}

251 
sig£t_t
 
	gÁèl_sig«l_£t
;

254 
	$öô_Áèl_sig«l_£t
 ()

256 
boﬁ
 
Áèl_sig«l_£t_öôülized
 = 
Ál£
;

257 i‡(!
Áèl_sig«l_£t_öôülized
)

259 
size_t
 
i
;

261 
	`öô_Áèl_sig«ls
 ();

263 
	`sigem±y£t
 (&
Áèl_sig«l_£t
);

264 
i
 = 0; i < 
num_Áèl_sig«ls
; i++)

265 i‡(
Áèl_sig«ls
[
i
] >= 0)

266 
	`sigadd£t
 (&
Áèl_sig«l_£t
, 
Áèl_sig«ls
[
i
]);

268 
Áèl_sig«l_£t_öôülized
 = 
åue
;

270 
	}
}

274 
	$block_Áèl_sig«ls
 ()

276 
	`öô_Áèl_sig«l_£t
 ();

277 
	`sig¥ocmask
 (
SIG_BLOCK
, &
Áèl_sig«l_£t
, 
NULL
);

278 
	}
}

282 
	$unblock_Áèl_sig«ls
 ()

284 
	`öô_Áèl_sig«l_£t
 ();

285 
	`sig¥ocmask
 (
SIG_UNBLOCK
, &
Áèl_sig«l_£t
, 
NULL
);

286 
	}
}

	@lib/fatal-signal.h

19 #ifde‡
__˝lu•lus


54 
©_Áèl_sig«l
 ((*
fun˘i⁄
) ());

68 
block_Áèl_sig«ls
 ();

71 
unblock_Áèl_sig«ls
 ();

74 #ifde‡
__˝lu•lus


	@lib/fcntl.c

20 
	~<c⁄fig.h
>

23 
	~<f˙é.h
>

25 
	~<î∫o.h
>

26 
	~<limôs.h
>

27 
	~<°d¨g.h
>

28 
	~<uni°d.h
>

30 #i‡!
HAVE_FCNTL


31 
	#Ωl_f˙é
 
f˙é


	)

33 #unde‡
f˙é


35 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


37 
	#WIN32_LEAN_AND_MEAN


	)

38 
	~<wödows.h
>

41 
	#OPEN_MAX_MAX
 0x10000

	)

47 
	$dupfd
 (
ﬁdfd
, 
√wfd
, 
Êags
)

51 
HANDLE
 
cuº_¥o˚ss
 = 
	`GëCuºítPro˚ss
 ();

52 
HANDLE
 
ﬁd_h™dÀ
 = (HANDLEË
	`_gë_osfh™dÀ
 (
ﬁdfd
);

53 
fds_to_˛o£
[
OPEN_MAX_MAX
 / 
CHAR_BIT
];

54 
fds_to_˛o£_bound
 = 0;

55 
ªsu…
;

56 
BOOL
 
öhîô
 = 
Êags
 & 
O_CLOEXEC
 ? 
FALSE
 : 
TRUE
;

57 
mode
;

59 i‡(
√wfd
 < 0 || 
	`gëdèbÀsize
 () <=Çewfd)

61 
î∫o
 = 
EINVAL
;

64 i‡(
ﬁd_h™dÀ
 =
INVALID_HANDLE_VALUE


65 || (
mode
 = 
	`£tmode
 (
ﬁdfd
, 
O_BINARY
)) == -1)

69 
î∫o
 = 
EBADF
;

72 
	`£tmode
 (
ﬁdfd
, 
mode
);

73 
Êags
 |
mode
;

77 
HANDLE
 
√w_h™dÀ
;

78 
du∂iˇãd_fd
;

79 
ödex
;

81 i‡(!
	`Du∂iˇãH™dÀ
 (
cuº_¥o˚ss
,

82 
ﬁd_h™dÀ
,

83 
cuº_¥o˚ss
,

84 (
PHANDLE
Ë&
√w_h™dÀ
,

85 (
DWORD
) 0,

86 
öhîô
,

87 
DUPLICATE_SAME_ACCESS
))

90 
î∫o
 = 
EMFILE
;

91 
ªsu…
 = -1;

94 
du∂iˇãd_fd
 = 
	`_›í_osfh™dÀ
 ((Ë
√w_h™dÀ
, 
Êags
);

95 i‡(
du∂iˇãd_fd
 < 0)

97 
	`Clo£H™dÀ
 (
√w_h™dÀ
);

98 
î∫o
 = 
EMFILE
;

99 
ªsu…
 = -1;

102 i‡(
√wfd
 <
du∂iˇãd_fd
)

104 
ªsu…
 = 
du∂iˇãd_fd
;

109 
ödex
 = (Ë
du∂iˇãd_fd
 / 
CHAR_BIT
;

110 i‡(
fds_to_˛o£_bound
 <
ödex
)

112 i‡( 
fds_to_˛o£
 <
ödex
)

114 
	`ab‹t
 ();

115 
	`mem£t
 (
fds_to_˛o£
 + 
fds_to_˛o£_bound
, '\0',

116 
ödex
 + 1 - 
fds_to_˛o£_bound
);

117 
fds_to_˛o£_bound
 = 
ödex
 + 1;

119 
fds_to_˛o£
[
ödex
] |1 << ((Ë
du∂iˇãd_fd
 % 
CHAR_BIT
);

124 
ßved_î∫o
 = 
î∫o
;

125 
du∂iˇãd_fd
;

127 
du∂iˇãd_fd
 = 0;

128 
du∂iˇãd_fd
 < 
fds_to_˛o£_bound
 * 
CHAR_BIT
;

129 
du∂iˇãd_fd
++)

130 i‡((
fds_to_˛o£
[
du∂iˇãd_fd
 / 
CHAR_BIT
]

131 >> (
du∂iˇãd_fd
 % 
CHAR_BIT
))

133 
	`˛o£
 (
du∂iˇãd_fd
);

135 
î∫o
 = 
ßved_î∫o
;

138 #i‡
REPLACE_FCHDIR


139 i‡(0 <
ªsu…
)

140 
ªsu…
 = 
	`_gl_ªgi°î_dup
 (
ﬁdfd
,Ñesult);

142  
ªsu…
;

143 
	}
}

166 
	$Ωl_f˙é
 (
fd
, 
a˘i⁄
, ...)

168 
va_li°
 
¨g
;

169 
ªsu…
 = -1;

170 
	`va_°¨t
 (
¨g
, 
a˘i⁄
);

171 
a˘i⁄
)

174 #i‡!
HAVE_FCNTL


175 
F_DUPFD
:

177 
èrgë
 = 
	`va_¨g
 (
¨g
, );

178 
ªsu…
 = 
	`dupfd
 (
fd
, 
èrgë
, 0);

181 #ñi‡
FCNTL_DUPFD_BUGGY
 || 
REPLACE_FCHDIR


182 
F_DUPFD
:

184 
èrgë
 = 
	`va_¨g
 (
¨g
, );

186 i‡(
èrgë
 < 0 || 
	`gëdèbÀsize
 () <=Åarget)

187 
î∫o
 = 
EINVAL
;

191 
Êags
 = 
	`f˙é
 (
fd
, 
F_GETFD
);

192 i‡(
Êags
 < 0)

194 
ªsu…
 = -1;

197 
ªsu…
 = 
	`f˙é
 (
fd
, 
a˘i⁄
, 
èrgë
);

198 i‡(0 <
ªsu…
 && 
	`f˙é
 (
fd
, 
F_SETFD
, 
Êags
) == -1)

200 
ßved_î∫o
 = 
î∫o
;

201 
	`˛o£
 (
ªsu…
);

202 
ªsu…
 = -1;

203 
î∫o
 = 
ßved_î∫o
;

205 #i‡
REPLACE_FCHDIR


206 i‡(0 <
ªsu…
)

207 
ªsu…
 = 
	`_gl_ªgi°î_dup
 (
fd
,Ñesult);

214 
F_DUPFD_CLOEXEC
:

216 
èrgë
 = 
	`va_¨g
 (
¨g
, );

218 #i‡!
HAVE_FCNTL


219 
ªsu…
 = 
	`dupfd
 (
fd
, 
èrgë
, 
O_CLOEXEC
);

229 
have_dupfd_˛€xec
 = 
GNULIB_deföed_F_DUPFD_CLOEXEC
 ? -1 : 0;

230 i‡(0 <
have_dupfd_˛€xec
)

232 
ªsu…
 = 
	`f˙é
 (
fd
, 
a˘i⁄
, 
èrgë
);

233 i‡(0 <
ªsu…
 || 
î∫o
 !
EINVAL
)

235 
have_dupfd_˛€xec
 = 1;

236 #i‡
REPLACE_FCHDIR


237 i‡(0 <
ªsu…
)

238 
ªsu…
 = 
	`_gl_ªgi°î_dup
 (
fd
,Ñesult);

243 
ªsu…
 = 
	`Ωl_f˙é
 (
fd
, 
F_DUPFD
, 
èrgë
);

244 i‡(
ªsu…
 < 0)

246 
have_dupfd_˛€xec
 = -1;

250 
ªsu…
 = 
	`Ωl_f˙é
 (
fd
, 
F_DUPFD
, 
èrgë
);

251 i‡(0 <
ªsu…
 && 
have_dupfd_˛€xec
 == -1)

253 
Êags
 = 
	`f˙é
 (
ªsu…
, 
F_GETFD
);

254 i‡(
Êags
 < 0 || 
	`f˙é
 (
ªsu…
, 
F_SETFD
, fœg†| 
FD_CLOEXEC
) == -1)

256 
ßved_î∫o
 = 
î∫o
;

257 
	`˛o£
 (
ªsu…
);

258 
î∫o
 = 
ßved_î∫o
;

259 
ªsu…
 = -1;

266 #i‡!
HAVE_FCNTL


267 
F_GETFD
:

269 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


270 
HANDLE
 
h™dÀ
 = (HANDLEË
	`_gë_osfh™dÀ
 (
fd
);

271 
DWORD
 
Êags
;

272 i‡(
h™dÀ
 =
INVALID_HANDLE_VALUE


273 || 
	`GëH™dÀInf‹m©i⁄
 (
h™dÀ
, &
Êags
) == 0)

274 
î∫o
 = 
EBADF
;

276 
ªsu…
 = (
Êags
 & 
HANDLE_FLAG_INHERIT
Ë? 0 : 
FD_CLOEXEC
;

280 i‡(0 <
	`dup2
 (
fd
, fd))

281 
ªsu…
 = 0;

297 #i‡
HAVE_FCNTL


298 *
p
 = 
	`va_¨g
 (
¨g
, *);

299 
ªsu…
 = 
	`f˙é
 (
fd
, 
a˘i⁄
, 
p
);

301 
î∫o
 = 
EINVAL
;

306 
	`va_íd
 (
¨g
);

307  
ªsu…
;

308 
	}
}

	@lib/fcntl.in.h

20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

25 #i‡
deföed
 
__√ed_sy°em_f˙é_h


28 
	~<sys/ty≥s.h
>

35 #i‡!(
deföed
 
__GLIBC__
 || deföed 
__UCLIBC__
Ë|| (deföed 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
 && !(
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3)))

36 
	~<sys/°©.h
>

38 #@
INCLUDE_NEXT
@ @
NEXT_FCNTL_H
@

43 #i‚de‡
_
@
GUARD_PREFIX
@
_FCNTL_H


45 
	~<sys/ty≥s.h
>

52 #i‡!(
deföed
 
__GLIBC__
 || deföed 
__UCLIBC__
Ë|| (deföed 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
 && !(
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3)))

53 
	~<sys/°©.h
>

56 #@
INCLUDE_NEXT
@ @
NEXT_FCNTL_H
@

58 #i‚de‡
_
@
GUARD_PREFIX
@
_FCNTL_H


59 
	#_
@
GUARD_PREFIX
@
_FCNTL_H


	)

61 #i‚de‡
__GLIBC__


62 
	~<uni°d.h
>

75 #i‡@
GNULIB_FCNTL
@

76 #i‡@
REPLACE_FCNTL
@

77 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

78 #unde‡
f˙é


79 
	#f˙é
 
Ωl_f˙é


	)

81 
_GL_FUNCDECL_RPL
 (
f˙é
, , (
fd
, 
a˘i⁄
, ...));

82 
_GL_CXXALIAS_RPL
 (
f˙é
, , (
fd
, 
a˘i⁄
, ...));

84 #i‡!@
HAVE_FCNTL
@

85 
_GL_FUNCDECL_SYS
 (
f˙é
, , (
fd
, 
a˘i⁄
, ...));

87 
_GL_CXXALIAS_SYS
 (
f˙é
, , (
fd
, 
a˘i⁄
, ...));

89 
_GL_CXXALIASWARN
 (
f˙é
);

90 #ñi‡
deföed
 
GNULIB_POSIXCHECK


91 #unde‡
f˙é


92 #i‡
HAVE_RAW_DECL_FCNTL


93 
_GL_WARN_ON_USE
 (
f˙é
, "fcntl isÇotálways POSIX compliant - "

98 #i‡@
GNULIB_OPEN
@

99 #i‡@
REPLACE_OPEN
@

100 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

101 #unde‡
›í


102 
	#›í
 
Ωl_›í


	)

104 
_GL_FUNCDECL_RPL
 (
›í
, , (c⁄° *
fûíame
, 
Êags
, ...)

105 
_GL_ARG_NONNULL
 ((1)));

106 
_GL_CXXALIAS_RPL
 (
›í
, , (c⁄° *
fûíame
, 
Êags
, ...));

108 
_GL_CXXALIAS_SYS
 (
›í
, , (c⁄° *
fûíame
, 
Êags
, ...));

112 #i‡!
deföed
 
__hpux


113 
_GL_CXXALIASWARN
 (
›í
);

115 #ñi‡
deföed
 
GNULIB_POSIXCHECK


116 #unde‡
›í


118 
_GL_WARN_ON_USE
 (
›í
, "open isÇotálways POSIX compliant - "

122 #i‡@
GNULIB_OPENAT
@

123 #i‡@
REPLACE_OPENAT
@

124 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

125 #unde‡
›í©


126 
	#›í©
 
Ωl_›í©


	)

128 
_GL_FUNCDECL_RPL
 (
›í©
, ,

129 (
fd
, c⁄° *
fûe
, 
Êags
, ...)

130 
_GL_ARG_NONNULL
 ((2)));

131 
_GL_CXXALIAS_RPL
 (
›í©
, ,

132 (
fd
, c⁄° *
fûe
, 
Êags
, ...));

134 #i‡!@
HAVE_OPENAT
@

135 
_GL_FUNCDECL_SYS
 (
›í©
, ,

136 (
fd
, c⁄° *
fûe
, 
Êags
, ...)

137 
_GL_ARG_NONNULL
 ((2)));

139 
_GL_CXXALIAS_SYS
 (
›í©
, ,

140 (
fd
, c⁄° *
fûe
, 
Êags
, ...));

142 
_GL_CXXALIASWARN
 (
›í©
);

143 #ñi‡
deföed
 
GNULIB_POSIXCHECK


144 #unde‡
›í©


145 #i‡
HAVE_RAW_DECL_OPENAT


146 
_GL_WARN_ON_USE
 (
›í©
, "openat isÇotÖortable - "

154 #i‚de‡
FD_CLOEXEC


155 
	#FD_CLOEXEC
 1

	)

161 #i‚de‡
F_DUPFD_CLOEXEC


162 
	#F_DUPFD_CLOEXEC
 0x40000000

	)

164 
	#GNULIB_deföed_F_DUPFD_CLOEXEC
 1

	)

166 
	#GNULIB_deföed_F_DUPFD_CLOEXEC
 0

	)

169 #i‚de‡
F_DUPFD


170 
	#F_DUPFD
 1

	)

173 #i‚de‡
F_GETFD


174 
	#F_GETFD
 2

	)

179 #i‡!
deföed
 
O_DIRECT
 && deföed 
O_DIRECTIO


181 
	#O_DIRECT
 
O_DIRECTIO


	)

184 #i‡!
deföed
 
O_CLOEXEC
 && deföed 
O_NOINHERIT


186 
	#O_CLOEXEC
 
O_NOINHERIT


	)

189 #i‚de‡
O_CLOEXEC


190 
	#O_CLOEXEC
 0

	)

193 #i‚de‡
O_DIRECT


194 
	#O_DIRECT
 0

	)

197 #i‚de‡
O_DIRECTORY


198 
	#O_DIRECTORY
 0

	)

201 #i‚de‡
O_DSYNC


202 
	#O_DSYNC
 0

	)

205 #i‚de‡
O_EXEC


206 
	#O_EXEC
 
O_RDONLY


	)

209 #i‚de‡
O_NDELAY


210 
	#O_NDELAY
 0

	)

213 #i‚de‡
O_NOATIME


214 
	#O_NOATIME
 0

	)

217 #i‚de‡
O_NONBLOCK


218 
	#O_NONBLOCK
 
O_NDELAY


	)

224 #i‡@
GNULIB_NONBLOCKING
@

225 #i‡
O_NONBLOCK


226 
	#GNULIB_deföed_O_NONBLOCK
 0

	)

228 
	#GNULIB_deföed_O_NONBLOCK
 1

	)

229 #unde‡
O_NONBLOCK


230 
	#O_NONBLOCK
 0x40000000

	)

234 #i‚de‡
O_NOCTTY


235 
	#O_NOCTTY
 0

	)

238 #i‚de‡
O_NOFOLLOW


239 
	#O_NOFOLLOW
 0

	)

242 #i‚de‡
O_NOLINKS


243 
	#O_NOLINKS
 0

	)

246 #i‚de‡
O_RSYNC


247 
	#O_RSYNC
 0

	)

250 #i‚de‡
O_SEARCH


251 
	#O_SEARCH
 
O_RDONLY


	)

254 #i‚de‡
O_SYNC


255 
	#O_SYNC
 0

	)

258 #i‚de‡
O_TTY_INIT


259 
	#O_TTY_INIT
 0

	)

262 #i‡
O_ACCMODE
 !(
O_RDONLY
 | 
O_WRONLY
 | 
O_RDWR
 | 
O_EXEC
 | 
O_SEARCH
)

263 #unde‡
O_ACCMODE


264 
	#O_ACCMODE
 (
O_RDONLY
 | 
O_WRONLY
 | 
O_RDWR
 | 
O_EXEC
 | 
O_SEARCH
)

	)

269 #i‡!
deföed
 
O_BINARY
 && deföed 
_O_BINARY


271 
	#O_BINARY
 
_O_BINARY


	)

272 
	#O_TEXT
 
_O_TEXT


	)

275 #i‡
deföed
 
__BEOS__
 || deföed 
__HAIKU__


277 #unde‡
O_BINARY


278 #unde‡
O_TEXT


281 #i‚de‡
O_BINARY


282 
	#O_BINARY
 0

	)

283 
	#O_TEXT
 0

	)

292 #i‡0 < 
AT_FDCWD
 && AT_FDCWD == 0xffd19553

293 #unde‡
AT_FDCWD


299 #i‚de‡
AT_FDCWD


300 
	#AT_FDCWD
 (-3041965)

	)

305 #i‚de‡
AT_SYMLINK_NOFOLLOW


306 
	#AT_SYMLINK_NOFOLLOW
 4096

	)

309 #i‚de‡
AT_REMOVEDIR


310 
	#AT_REMOVEDIR
 1

	)

314 #i‚de‡
AT_SYMLINK_FOLLOW


315 
	#AT_SYMLINK_FOLLOW
 2

	)

318 #i‚de‡
AT_EACCESS


319 
	#AT_EACCESS
 4

	)

	@lib/fd-hook.c

20 
	~<c⁄fig.h
>

23 
	~"fd-hook.h
"

25 
	~<°dlib.h
>

29 #i‡
WINDOWS_SOCKETS


33 
fd_hook
 
	g™ch‹
 = { &
™ch‹
, &™ch‹, 
NULL
, NULL };

36 
	$execuã_˛o£_hooks
 (c⁄° 
fd_hook
 *
ªmaöög_li°
, 
gl_˛o£_‚
 
¥im¨y
,

37 
fd
)

39 i‡(
ªmaöög_li°
 =&
™ch‹
)

41  
	`¥im¨y
 (
fd
);

43  
ªmaöög_li°
->
	`¥iv©e_˛o£_‚
 (ªmaöög_li°->
¥iv©e_√xt
,

44 
¥im¨y
, 
fd
);

45 
	}
}

48 
	$execuã_Æl_˛o£_hooks
 (
gl_˛o£_‚
 
¥im¨y
, 
fd
)

50  
	`execuã_˛o£_hooks
 (
™ch‹
.
¥iv©e_√xt
, 
¥im¨y
, 
fd
);

51 
	}
}

54 
	$execuã_io˘l_hooks
 (c⁄° 
fd_hook
 *
ªmaöög_li°
, 
gl_io˘l_‚
 
¥im¨y
,

55 
fd
, 
ªque°
, *
¨g
)

57 i‡(
ªmaöög_li°
 =&
™ch‹
)

59  
	`¥im¨y
 (
fd
, 
ªque°
, 
¨g
);

61  
ªmaöög_li°
->
	`¥iv©e_io˘l_‚
 (ªmaöög_li°->
¥iv©e_√xt
,

62 
¥im¨y
, 
fd
, 
ªque°
, 
¨g
);

63 
	}
}

66 
	$execuã_Æl_io˘l_hooks
 (
gl_io˘l_‚
 
¥im¨y
,

67 
fd
, 
ªque°
, *
¨g
)

69  
	`execuã_io˘l_hooks
 (
™ch‹
.
¥iv©e_√xt
, 
¥im¨y
, 
fd
, 
ªque°
, 
¨g
);

70 
	}
}

73 
	$ªgi°î_fd_hook
 (
˛o£_hook_‚
 
˛o£_hook
, 
io˘l_hook_‚
 
io˘l_hook
, 
fd_hook
 *
lök
)

75 i‡(
˛o£_hook
 =
NULL
)

76 
˛o£_hook
 = 
execuã_˛o£_hooks
;

77 i‡(
io˘l_hook
 =
NULL
)

78 
io˘l_hook
 = 
execuã_io˘l_hooks
;

80 i‡(
lök
->
¥iv©e_√xt
 =
NULL
 &&Üök->
¥iv©e_¥ev
 == NULL)

83 
lök
->
¥iv©e_√xt
 = 
™ch‹
.private_next;

84 
lök
->
¥iv©e_¥ev
 = &
™ch‹
;

85 
lök
->
¥iv©e_˛o£_‚
 = 
˛o£_hook
;

86 
lök
->
¥iv©e_io˘l_‚
 = 
io˘l_hook
;

87 
™ch‹
.
¥iv©e_√xt
->
¥iv©e_¥ev
 = 
lök
;

88 
™ch‹
.
¥iv©e_√xt
 = 
lök
;

93 i‡(
lök
->
¥iv©e_˛o£_‚
 !
˛o£_hook


94 || 
lök
->
¥iv©e_io˘l_‚
 !
io˘l_hook
)

95 
	`ab‹t
 ();

97 
	}
}

100 
	$uƒegi°î_fd_hook
 (
fd_hook
 *
lök
)

102 
fd_hook
 *
√xt
 = 
lök
->
¥iv©e_√xt
;

103 
fd_hook
 *
¥ev
 = 
lök
->
¥iv©e_¥ev
;

105 i‡(
√xt
 !
NULL
 && 
¥ev
 != NULL)

108 
¥ev
->
¥iv©e_√xt
 = 
√xt
;

109 
√xt
->
¥iv©e_¥ev
 = 
¥ev
;

111 
lök
->
¥iv©e_√xt
 = 
NULL
;

112 
lök
->
¥iv©e_¥ev
 = 
NULL
;

113 
lök
->
¥iv©e_˛o£_‚
 = 
NULL
;

114 
lök
->
¥iv©e_io˘l_‚
 = 
NULL
;

116 
	}
}

	@lib/fd-hook.h

20 #i‚de‡
FD_HOOK_H


21 
	#FD_HOOK_H


	)

23 #ifde‡
__˝lu•lus


30 #i‡
WINDOWS_SOCKETS


34 (*
	tgl_˛o£_‚
Ë(
	tfd
);

37 (*
	tgl_io˘l_‚
Ë(
	tfd
, 
	tªque°
, *
	t¨g
);

44 
	sfd_hook


47 
fd_hook
 *
¥iv©e_√xt
;

48 
fd_hook
 *
¥iv©e_¥ev
;

51 (*
¥iv©e_˛o£_‚
Ë(c⁄° 
fd_hook
 *
ªmaöög_li°
,

52 
gl_˛o£_‚
 
¥im¨y
,

53 
fd
);

57 (*
¥iv©e_io˘l_‚
Ë(c⁄° 
fd_hook
 *
ªmaöög_li°
,

58 
gl_io˘l_‚
 
¥im¨y
,

59 
fd
, 
ªque°
, *
¨g
);

68 (*
	t˛o£_hook_‚
Ë(c⁄° 
	tfd_hook
 *
	tªmaöög_li°
,

69 
	tgl_˛o£_‚
 
	t¥im¨y
,

70 
	tfd
);

74 
	`execuã_˛o£_hooks
 (c⁄° 
fd_hook
 *
ªmaöög_li°
,

75 
gl_˛o£_‚
 
¥im¨y
,

76 
fd
);

80 
	`execuã_Æl_˛o£_hooks
 (
gl_˛o£_‚
 
¥im¨y
, 
fd
);

88 (*
	tio˘l_hook_‚
Ë(c⁄° 
	tfd_hook
 *
	tªmaöög_li°
,

89 
	tgl_io˘l_‚
 
	t¥im¨y
,

90 
	tfd
, 
	tªque°
, *
	t¨g
);

94 
	`execuã_io˘l_hooks
 (c⁄° 
fd_hook
 *
ªmaöög_li°
,

95 
gl_io˘l_‚
 
¥im¨y
,

96 
fd
, 
ªque°
, *
¨g
);

100 
	`execuã_Æl_io˘l_hooks
 (
gl_io˘l_‚
 
¥im¨y
,

101 
fd
, 
ªque°
, *
¨g
);

107 
	`ªgi°î_fd_hook
 (
˛o£_hook_‚
 
˛o£_hook
, 
io˘l_hook_‚
 
io˘l_hook
,

108 
fd_hook
 *
lök
);

111 
	`uƒegi°î_fd_hook
 (
fd_hook
 *
lök
);

117 #ifde‡
__˝lu•lus


118 
	}
}

	@lib/fd-safer-flag.c

21 
	~<c⁄fig.h
>

24 
	~"uni°d-ß„r.h
"

26 
	~<î∫o.h
>

27 
	~<uni°d.h
>

40 
	$fd_ß„r_Êag
 (
fd
, 
Êag
)

42 i‡(
STDIN_FILENO
 <
fd
 && fd <
STDERR_FILENO
)

44 
f
 = 
	`dup_ß„r_Êag
 (
fd
, 
Êag
);

45 
e
 = 
î∫o
;

46 
	`˛o£
 (
fd
);

47 
î∫o
 = 
e
;

48 
fd
 = 
f
;

51  
fd
;

52 
	}
}

	@lib/fd-safer.c

20 
	~<c⁄fig.h
>

22 
	~"uni°d-ß„r.h
"

24 
	~<î∫o.h
>

25 
	~<uni°d.h
>

37 
	$fd_ß„r
 (
fd
)

39 i‡(
STDIN_FILENO
 <
fd
 && fd <
STDERR_FILENO
)

41 
f
 = 
	`dup_ß„r
 (
fd
);

42 
e
 = 
î∫o
;

43 
	`˛o£
 (
fd
);

44 
î∫o
 = 
e
;

45 
fd
 = 
f
;

48  
fd
;

49 
	}
}

	@lib/float+.h

21 #i‚de‡
_FLOATPLUS_H


22 
	#_FLOATPLUS_H


	)

24 
	~<Êﬂt.h
>

25 
	~<limôs.h
>

29 #i‡
FLT_RADIX
 == 2

30 
	#FLT_MANT_BIT
 
FLT_MANT_DIG


	)

31 
	#DBL_MANT_BIT
 
DBL_MANT_DIG


	)

32 
	#LDBL_MANT_BIT
 
LDBL_MANT_DIG


	)

33 #ñi‡
FLT_RADIX
 == 4

34 
	#FLT_MANT_BIT
 (
FLT_MANT_DIG
 * 2)

	)

35 
	#DBL_MANT_BIT
 (
DBL_MANT_DIG
 * 2)

	)

36 
	#LDBL_MANT_BIT
 (
LDBL_MANT_DIG
 * 2)

	)

37 #ñi‡
FLT_RADIX
 == 16

38 
	#FLT_MANT_BIT
 (
FLT_MANT_DIG
 * 4)

	)

39 
	#DBL_MANT_BIT
 (
DBL_MANT_DIG
 * 4)

	)

40 
	#LDBL_MANT_BIT
 (
LDBL_MANT_DIG
 * 4)

	)

44 
	#FLT_EXP_MASK
 ((
FLT_MAX_EXP
 - 
FLT_MIN_EXP
Ë| 7)

	)

45 
	#DBL_EXP_MASK
 ((
DBL_MAX_EXP
 - 
DBL_MIN_EXP
Ë| 7)

	)

46 
	#LDBL_EXP_MASK
 ((
LDBL_MAX_EXP
 - 
LDBL_MIN_EXP
Ë| 7)

	)

50 
	#FLT_EXP_BIT
 \

51 (
FLT_EXP_MASK
 < 0x100 ? 8 : \

52 
FLT_EXP_MASK
 < 0x200 ? 9 : \

53 
FLT_EXP_MASK
 < 0x400 ? 10 : \

54 
FLT_EXP_MASK
 < 0x800 ? 11 : \

55 
FLT_EXP_MASK
 < 0x1000 ? 12 : \

56 
FLT_EXP_MASK
 < 0x2000 ? 13 : \

57 
FLT_EXP_MASK
 < 0x4000 ? 14 : \

58 
FLT_EXP_MASK
 < 0x8000 ? 15 : \

59 
FLT_EXP_MASK
 < 0x10000 ? 16 : \

60 
FLT_EXP_MASK
 < 0x20000 ? 17 : \

61 
FLT_EXP_MASK
 < 0x40000 ? 18 : \

62 
FLT_EXP_MASK
 < 0x80000 ? 19 : \

63 
FLT_EXP_MASK
 < 0x100000 ? 20 : \

64 
FLT_EXP_MASK
 < 0x200000 ? 21 : \

65 
FLT_EXP_MASK
 < 0x400000 ? 22 : \

66 
FLT_EXP_MASK
 < 0x800000 ? 23 : \

67 
FLT_EXP_MASK
 < 0x1000000 ? 24 : \

68 
FLT_EXP_MASK
 < 0x2000000 ? 25 : \

69 
FLT_EXP_MASK
 < 0x4000000 ? 26 : \

70 
FLT_EXP_MASK
 < 0x8000000 ? 27 : \

71 
FLT_EXP_MASK
 < 0x10000000 ? 28 : \

72 
FLT_EXP_MASK
 < 0x20000000 ? 29 : \

73 
FLT_EXP_MASK
 < 0x40000000 ? 30 : \

74 
FLT_EXP_MASK
 <= 0x7fffffff ? 31 : \

75 32)

	)

76 
	#DBL_EXP_BIT
 \

77 (
DBL_EXP_MASK
 < 0x100 ? 8 : \

78 
DBL_EXP_MASK
 < 0x200 ? 9 : \

79 
DBL_EXP_MASK
 < 0x400 ? 10 : \

80 
DBL_EXP_MASK
 < 0x800 ? 11 : \

81 
DBL_EXP_MASK
 < 0x1000 ? 12 : \

82 
DBL_EXP_MASK
 < 0x2000 ? 13 : \

83 
DBL_EXP_MASK
 < 0x4000 ? 14 : \

84 
DBL_EXP_MASK
 < 0x8000 ? 15 : \

85 
DBL_EXP_MASK
 < 0x10000 ? 16 : \

86 
DBL_EXP_MASK
 < 0x20000 ? 17 : \

87 
DBL_EXP_MASK
 < 0x40000 ? 18 : \

88 
DBL_EXP_MASK
 < 0x80000 ? 19 : \

89 
DBL_EXP_MASK
 < 0x100000 ? 20 : \

90 
DBL_EXP_MASK
 < 0x200000 ? 21 : \

91 
DBL_EXP_MASK
 < 0x400000 ? 22 : \

92 
DBL_EXP_MASK
 < 0x800000 ? 23 : \

93 
DBL_EXP_MASK
 < 0x1000000 ? 24 : \

94 
DBL_EXP_MASK
 < 0x2000000 ? 25 : \

95 
DBL_EXP_MASK
 < 0x4000000 ? 26 : \

96 
DBL_EXP_MASK
 < 0x8000000 ? 27 : \

97 
DBL_EXP_MASK
 < 0x10000000 ? 28 : \

98 
DBL_EXP_MASK
 < 0x20000000 ? 29 : \

99 
DBL_EXP_MASK
 < 0x40000000 ? 30 : \

100 
DBL_EXP_MASK
 <= 0x7fffffff ? 31 : \

101 32)

	)

102 
	#LDBL_EXP_BIT
 \

103 (
LDBL_EXP_MASK
 < 0x100 ? 8 : \

104 
LDBL_EXP_MASK
 < 0x200 ? 9 : \

105 
LDBL_EXP_MASK
 < 0x400 ? 10 : \

106 
LDBL_EXP_MASK
 < 0x800 ? 11 : \

107 
LDBL_EXP_MASK
 < 0x1000 ? 12 : \

108 
LDBL_EXP_MASK
 < 0x2000 ? 13 : \

109 
LDBL_EXP_MASK
 < 0x4000 ? 14 : \

110 
LDBL_EXP_MASK
 < 0x8000 ? 15 : \

111 
LDBL_EXP_MASK
 < 0x10000 ? 16 : \

112 
LDBL_EXP_MASK
 < 0x20000 ? 17 : \

113 
LDBL_EXP_MASK
 < 0x40000 ? 18 : \

114 
LDBL_EXP_MASK
 < 0x80000 ? 19 : \

115 
LDBL_EXP_MASK
 < 0x100000 ? 20 : \

116 
LDBL_EXP_MASK
 < 0x200000 ? 21 : \

117 
LDBL_EXP_MASK
 < 0x400000 ? 22 : \

118 
LDBL_EXP_MASK
 < 0x800000 ? 23 : \

119 
LDBL_EXP_MASK
 < 0x1000000 ? 24 : \

120 
LDBL_EXP_MASK
 < 0x2000000 ? 25 : \

121 
LDBL_EXP_MASK
 < 0x4000000 ? 26 : \

122 
LDBL_EXP_MASK
 < 0x8000000 ? 27 : \

123 
LDBL_EXP_MASK
 < 0x10000000 ? 28 : \

124 
LDBL_EXP_MASK
 < 0x20000000 ? 29 : \

125 
LDBL_EXP_MASK
 < 0x40000000 ? 30 : \

126 
LDBL_EXP_MASK
 <= 0x7fffffff ? 31 : \

127 32)

	)

132 
	#FLT_TOTAL_BIT
 ((
FLT_MANT_BIT
 - 1Ë+ 
FLT_EXP_BIT
 + 1)

	)

133 
	#DBL_TOTAL_BIT
 ((
DBL_MANT_BIT
 - 1Ë+ 
DBL_EXP_BIT
 + 1)

	)

134 
	#LDBL_TOTAL_BIT
 ((
LDBL_MANT_BIT
 - 1Ë+ 
LDBL_EXP_BIT
 + 1)

	)

141 
	#SIZEOF_FLT
 ((
FLT_TOTAL_BIT
 + 
CHAR_BIT
 - 1Ë/ CHAR_BIT)

	)

142 
	#SIZEOF_DBL
 ((
DBL_TOTAL_BIT
 + 
CHAR_BIT
 - 1Ë/ CHAR_BIT)

	)

143 
	#SIZEOF_LDBL
 ((
LDBL_TOTAL_BIT
 + 
CHAR_BIT
 - 1Ë/ CHAR_BIT)

	)

146 
	tvîify_sizeof_Êt
[
SIZEOF_FLT
 <=  () ? 1 : -1];

147 
	tvîify_sizeof_dbl
[
SIZEOF_DBL
 <=  () ? 1 : - 1];

148 
	tvîify_sizeof_ldbl
[
SIZEOF_LDBL
 <=  () ? 1 : - 1];

	@lib/float.c

18 
	~<c⁄fig.h
>

21 
	~<Êﬂt.h
>

23 #i‡(
deföed
 
_ARCH_PPC
 || deföed 
_POWER
Ë&& deföed 
_AIX
 && (
LDBL_MANT_DIG
 =106Ë&& deföed 
__GNUC__


24 c⁄° 
gl_l⁄g_doubÀ_uni⁄
 
	ggl_LDBL_MAX
 =

25 { { 
DBL_MAX
, DBL_MAX / ()134217728UL / ()134217728UL } };

26 #ñi‡
deföed
 
__i386__


27 c⁄° 
gl_l⁄g_doubÀ_uni⁄
 
	ggl_LDBL_MAX
 =

32 
	tdummy
;

	@lib/float.in.h

18 #i‚de‡
_
@
GUARD_PREFIX
@
_FLOAT_H


20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

26 #@
INCLUDE_NEXT
@ @
NEXT_FLOAT_H
@

28 #i‚de‡
_
@
GUARD_PREFIX
@
_FLOAT_H


29 
	#_
@
GUARD_PREFIX
@
_FLOAT_H


	)

33 #i‡
deföed
 
__i386__
 && (deföed 
__BEOS__
 || deföed 
__O≥nBSD__
)

35 #unde‡
LDBL_MANT_DIG


36 
	#LDBL_MANT_DIG
 64

	)

38 #unde‡
LDBL_DIG


39 
	#LDBL_DIG
 18

	)

41 #unde‡
LDBL_EPSILON


42 
	#LDBL_EPSILON
 1.0842021724855044340E-19L

	)

44 #unde‡
LDBL_MIN_EXP


45 
	#LDBL_MIN_EXP
 (-16381)

	)

47 #unde‡
LDBL_MAX_EXP


48 
	#LDBL_MAX_EXP
 16384

	)

50 #unde‡
LDBL_MIN


51 
	#LDBL_MIN
 3.3621031431120935063E-4932L

	)

53 #unde‡
LDBL_MAX


54 
	#LDBL_MAX
 1.1897314953572317650E+4932L

	)

56 #unde‡
LDBL_MIN_10_EXP


57 
	#LDBL_MIN_10_EXP
 (-4931)

	)

59 #unde‡
LDBL_MAX_10_EXP


60 
	#LDBL_MAX_10_EXP
 4932

	)

66 #i‡
deföed
 
__i386__
 && deföed 
__FªeBSD__


68 #unde‡
LDBL_MANT_DIG


69 
	#LDBL_MANT_DIG
 64

	)

71 #unde‡
LDBL_DIG


72 
	#LDBL_DIG
 18

	)

74 #unde‡
LDBL_EPSILON


75 
	#LDBL_EPSILON
 1.084202172485504434007452800869941711426e-19L

	)

77 #unde‡
LDBL_MIN_EXP


78 
	#LDBL_MIN_EXP
 (-16381)

	)

80 #unde‡
LDBL_MAX_EXP


81 
	#LDBL_MAX_EXP
 16384

	)

83 #unde‡
LDBL_MIN


84 
	#LDBL_MIN
 3.3621031431120935E-4932L

	)

86 #unde‡
LDBL_MAX


96 
	ugl_l⁄g_doubÀ_uni⁄


98 °ru˘ { 
	mlo
; 
	mhi
; 
	mexp⁄ít
; } 
	mxd
;

99 
	mld
;

101 c⁄° 
gl_l⁄g_doubÀ_uni⁄
 
gl_LDBL_MAX
;

102 
	#LDBL_MAX
 (
gl_LDBL_MAX
.
ld
)

	)

104 #unde‡
LDBL_MIN_10_EXP


105 
	#LDBL_MIN_10_EXP
 (-4931)

	)

107 #unde‡
LDBL_MAX_10_EXP


108 
	#LDBL_MAX_10_EXP
 4932

	)

113 #i‡(
deföed
 
_ARCH_PPC
 || deföed 
_POWER
Ë&& deföed 
_AIX
 && (
LDBL_MANT_DIG
 =106Ë&& deföed 
__GNUC__


114 #unde‡
LDBL_MIN_EXP


115 
	#LDBL_MIN_EXP
 
DBL_MIN_EXP


	)

116 #unde‡
LDBL_MIN_10_EXP


117 
	#LDBL_MIN_10_EXP
 
DBL_MIN_10_EXP


	)

118 #unde‡
LDBL_MIN


119 
	#LDBL_MIN
 2.22507385850720138309023271733240406422e-308L

	)

120 #unde‡
LDBL_MAX


146 
	ugl_l⁄g_doubÀ_uni⁄


148 °ru˘ { 
	mhi
; 
	mlo
; } 
	mdd
;

149 
	mld
;

151 c⁄° 
gl_l⁄g_doubÀ_uni⁄
 
gl_LDBL_MAX
;

152 
	#LDBL_MAX
 (
gl_LDBL_MAX
.
ld
)

	)

158 #i‡
deföed
 
__sgi
 && (
LDBL_MANT_DIG
 >= 106)

159 #unde‡
LDBL_MANT_DIG


160 
	#LDBL_MANT_DIG
 106

	)

161 #i‡
deföed
 
__GNUC__


162 #unde‡
LDBL_MIN_EXP


163 
	#LDBL_MIN_EXP
 
DBL_MIN_EXP


	)

164 #unde‡
LDBL_MIN_10_EXP


165 
	#LDBL_MIN_10_EXP
 
DBL_MIN_10_EXP


	)

166 #unde‡
LDBL_MIN


167 
	#LDBL_MIN
 2.22507385850720138309023271733240406422e-308L

	)

168 #unde‡
LDBL_EPSILON


169 
	#LDBL_EPSILON
 2.46519032881566189191165176650870696773e-32L

	)

	@lib/fseek.c

17 
	~<c⁄fig.h
>

20 
	~<°dio.h
>

23 
	~<uni°d.h
>

26 
	$f£ek
 (
FILE
 *
Â
, 
off£t
, 
whí˚
)

29  
	`f£eko
 (
Â
, (
off_t
)
off£t
, 
whí˚
);

30 
	}
}

	@lib/fseeko.c

20 
	~<c⁄fig.h
>

23 
	~<°dio.h
>

26 
	~<uni°d.h
>

28 
	~"°dio-im∂.h
"

31 
	$f£eko
 (
FILE
 *
Â
, 
off_t
 
off£t
, 
whí˚
)

32 #unde‡
f£eko


33 #i‡!
HAVE_FSEEKO


34 #unde‡
f£ek


35 
	#f£eko
 
f£ek


	)

38 #i‡
LSEEK_PIPE_BROKEN


40 i‡(
	`l£ek
 (
	`fûío
 (
Â
), 0, 
SEEK_CUR
) == -1)

41  
EOF
;

45 #i‡
deföed
 
_IO_·rylockfûe
 || 
__GNU_LIBRARY__
 == 1

46 i‡(
Â
->
_IO_ªad_íd
 =Â->
_IO_ªad_±r


47 && 
Â
->
_IO_wrôe_±r
 =Â->
_IO_wrôe_ba£


48 && 
Â
->
_IO_ßve_ba£
 =
NULL
)

49 #ñi‡
deföed
 
__s„º‹
 || deföed 
__Døg⁄Fly__


50 #i‡
deföed
 
__SL64
 && deföed 
__SCLE


51 i‡((
Â
->
_Êags
 & 
__SL64
) == 0)

55 
FILE
 *
tmp
 = 
	`f›í
 ("/dev/null", "r");

56 i‡(!
tmp
)

58 
Â
->
_Êags
 |
__SL64
;

59 
Â
->
_£ek64
 = 
tmp
->_seek64;

60 
	`f˛o£
 (
tmp
);

63 i‡(
Â_
->
_p
 =Â_->
_bf
.
_ba£


64 && 
Â_
->
_r
 == 0

65 && 
Â_
->
_w
 =((Â_->
_Êags
 & (
__SLBF
 | 
__SNBF
 | 
__SRD
)) == 0

66 ? 
Â_
->
_bf
.
_size


68 && 
Â_ub
.
_ba£
 =
NULL
)

69 #ñi‡
deföed
 
__EMX__


70 i‡(
Â
->
_±r
 =Â->
_buf„r


71 && 
Â
->
_rcou¡
 == 0

72 && 
Â
->
_wcou¡
 == 0

73 && 
Â
->
_ungëc_cou¡
 == 0)

74 #ñi‡
deföed
 
__möix


75 i‡(
Â_
->
_±r
 =Â_->
_buf


76 && (
Â_
->
_±r
 =
NULL
 || fp_->
_cou¡
 == 0))

77 #ñi‡
deföed
 
_IOERR


78 i‡(
Â_
->
_±r
 =Â_->
_ba£


79 && (
Â_
->
_±r
 =
NULL
 || fp_->
_˙t
 == 0))

80 #ñi‡
deföed
 
__UCLIBC__


81 i‡(((
Â
->
__modeÊags
 & 
__FLAG_WRITING
) == 0

82 || 
Â
->
__buÂos
 =Â->
__buf°¨t
)

83 && ((
Â
->
__modeÊags
 & (
__FLAG_READONLY
 | 
__FLAG_READING
)) == 0

84 || 
Â
->
__buÂos
 =Â->
__bu‰ód
))

85 #ñi‡
deföed
 
__QNX__


86 i‡((
Â
->
_Mode
 & 0x2000 ? fp->
_Next
 =Â->
_Buf
 : fp->_Nexà=Â->
_Ríd
)

87 && 
Â
->
_Rback
 =Â->
_Back
 +  (fp->_Back)

88 && 
Â
->
_Rßve
 =
NULL
)

89 #ñi‡
deföed
 
__MINT__


90 i‡(
Â
->
__buÂ
 =Â->
__buf„r


91 && 
Â
->
__gë_limô
 =Â->
__buÂ


92 && 
Â
->
__put_limô
 =Â->
__buÂ


93 && !
Â
->
__pushed_back
)

101 
off_t
 
pos
 = 
	`l£ek
 (
	`fûío
 (
Â
), 
off£t
, 
whí˚
);

102 i‡(
pos
 == -1)

104 #i‡
deföed
 
__s„º‹
 || deföed 
__Døg⁄Fly__


105 
Â_
->
_Êags
 &~
__SOFF
;

110 #i‡
deföed
 
_IO_·rylockfûe
 || 
__GNU_LIBRARY__
 == 1

111 
Â
->
_Êags
 &~
_IO_EOF_SEEN
;

112 
Â
->
_off£t
 = 
pos
;

113 #ñi‡
deföed
 
__s„º‹
 || deföed 
__Døg⁄Fly__


114 #i‡
deföed
 
__CYGWIN__


116 
Â_
->
_off£t
 = 
pos
;

125 
Âos_t
 
f
;

126 
off_t
 
o
;

127 } 
u
;

128 
u
.
o
 = 
pos
;

129 
Â_
->
_off£t
 = 
u
.
f
;

132 
Â_
->
_Êags
 |
__SOFF
;

133 
Â_
->
_Êags
 &~
__SEOF
;

134 #ñi‡
deföed
 
__EMX__


135 
Â
->
_Êags
 &~
_IOEOF
;

136 #ñi‡
deföed
 
_IOERR


137 
Â
->
_Êag
 &~
_IOEOF
;

138 #ñi‡
deföed
 
__MINT__


139 
Â
->
__off£t
 = 
pos
;

140 
Â
->
__eof
 = 0;

144  
	`f£eko
 (
Â
, 
off£t
, 
whí˚
);

145 
	}
}

	@lib/futimens.c

19 
	~<c⁄fig.h
>

21 
	~<sys/°©.h
>

23 
	~"utimís.h
"

31 
	$futimís
 (
fd
, 
time•ec
 c⁄° 
times
[2])

36  
	`fdutimís
 (
fd
, 
NULL
, 
times
);

37 
	}
}

	@lib/gai_strerror.c

22 #i‚de‡
_LIBC


23 
	~<c⁄fig.h
>

26 
	~<°dio.h
>

27 
	~<√tdb.h
>

29 #ifde‡
_LIBC


30 
	~<liböé.h
>

32 
	~"gëãxt.h
"

33 
	#_
(
Såög
Ë
	`gëãxt
 (Såög)

	)

34 
	#N_
(
Såög
Ë
	)
String

37 #i‡
HAVE_DECL_GAI_STRERROR


39 
	~<sys/sockë.h
>

40 #unde‡
gai_°ªº‹


41 #i‡
HAVE_DECL_GAI_STRERRORA


42 
	#gai_°ªº‹
 
gai_°ªº‹A


	)

46 
	$Ωl_gai_°ªº‹
 (
code
)

48  
	`gai_°ªº‹
 (
code
);

49 
	}
}

55 
	mcode
;

56 c⁄° *
	mmsg
;

58 
	gvÆues
[] =

60 { 
EAI_ADDRFAMILY
, 
N_
("Address family for hostnameÇot supported") },

61 { 
EAI_AGAIN
, 
N_
("Temporary failure inÇameÑesolution") },

62 { 
EAI_BADFLAGS
, 
N_
("Bad value forái_flags") },

63 { 
EAI_FAIL
, 
N_
("Non-recoverable failure inÇameÑesolution") },

64 { 
EAI_FAMILY
, 
N_
("ai_familyÇot supported") },

65 { 
EAI_MEMORY
, 
N_
("Memoryállocation failure") },

66 { 
EAI_NODATA
, 
N_
("Noáddressássociated with hostname") },

67 { 
EAI_NONAME
, 
N_
("Name or serviceÇot known") },

68 { 
EAI_SERVICE
, 
N_
("ServnameÇot supported forái_socktype") },

69 { 
EAI_SOCKTYPE
, 
N_
("ai_socktypeÇot supported") },

70 { 
EAI_SYSTEM
, 
N_
("SystemÉrror") },

71 { 
EAI_OVERFLOW
, 
N_
("Argument bufferÅoo small") },

72 #ifde‡
EAI_INPROGRESS


73 { 
EAI_INPROGRESS
, 
N_
("ProcessingÑequest inÖrogress") },

74 { 
EAI_CANCELED
, 
N_
("Request canceled") },

75 { 
EAI_NOTCANCELED
, 
N_
("RequestÇot canceled") },

76 { 
EAI_ALLDONE
, 
N_
("AllÑequests done") },

77 { 
EAI_INTR
, 
N_
("Interrupted byá signal") },

78 { 
EAI_IDN_ENCODE
, 
N_
("Parameter stringÇot correctlyÉncoded") }

83 
	$gai_°ªº‹
 (
code
)

85 
size_t
 
i
;

86 
i
 = 0; i <  (
vÆues
) /  (values[0]); ++i)

87 i‡(
vÆues
[
i
].
code
 == code)

88  
	`_
(
vÆues
[
i
].
msg
);

90  
	`_
("UnknownÉrror");

91 
	}
}

92 #ifde‡
_LIBC


93 
	$libc_hiddí_def
 (
gai_°ªº‹
)

	@lib/getaddrinfo.c

21 
	~<c⁄fig.h
>

25 
	#_GL_ARG_NONNULL
(
∑øms
)

	)

27 
	~<√tdb.h
>

29 #i‡
HAVE_NETINET_IN_H


30 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

37 
	~<°dlib.h
>

40 
	~<°rög.h
>

43 
	~<°dio.h
>

45 
	~<°dboﬁ.h
>

47 
	~"gëãxt.h
"

48 
	#_
(
Såög
Ë
	`gëãxt
 (Såög)

	)

49 
	#N_
(
Såög
Ë
	)
String

52 #i‚de‡
PF_INET


53 
	#PF_INET
 
AF_INET


	)

56 #i‚de‡
PF_UNSPEC


57 
	#PF_UNSPEC
 0

	)

60 #i‡
deföed
 
_WIN32
 || deföed 
__WIN32__


61 
	#WIN32_NATIVE


	)

65 
	~"sockës.h
"

67 #ifde‡
WIN32_NATIVE


68 (
	tWSAAPI
 *
	tgëaddröfo_func
) (const *, const *,

69 c⁄° 
	taddröfo
*,

70 
	taddröfo
**);

71 (
	tWSAAPI
 *
	t‰ìaddröfo_func
Ë(
	taddröfo
*);

72 (
	tWSAAPI
 *
	tgë«meöfo_func
Ë(c⁄° 
	tsockaddr
*,

73 
	tsockÀn_t
, *, 
	tDWORD
,

74 *, 
	tDWORD
, );

76 
gëaddröfo_func
 
gëaddröfo_±r
 = 
NULL
;

77 
‰ìaddröfo_func
 
‰ìaddröfo_±r
 = 
NULL
;

78 
gë«meöfo_func
 
gë«meöfo_±r
 = 
NULL
;

81 
	$u£_wö32_p
 ()

83 
d⁄e
 = 0;

84 
HMODULE
 
h
;

86 i‡(
d⁄e
)

87  
gëaddröfo_±r
 ? 1 : 0;

89 
d⁄e
 = 1;

91 
h
 = 
	`GëModuÀH™dÀ
 ("ws2_32.dll");

93 i‡(
h
)

95 
gëaddröfo_±r
 = (
gëaddröfo_func
Ë
	`GëProcAddªss
 (
h
, "getaddrinfo");

96 
‰ìaddröfo_±r
 = (
‰ìaddröfo_func
Ë
	`GëProcAddªss
 (
h
, "freeaddrinfo");

97 
gë«meöfo_±r
 = (
gë«meöfo_func
Ë
	`GëProcAddªss
 (
h
, "getnameinfo");

101 i‡(!
gëaddröfo_±r
 || !
‰ìaddröfo_±r
 || !
gë«meöfo_±r
)

103 
gëaddröfo_±r
 = 
NULL
;

104 
‰ìaddröfo_±r
 = 
NULL
;

105 
gë«meöfo_±r
 = 
NULL
;

109 
	`gl_sockës_°¨tup
 (
SOCKETS_1_1
);

112 
	}
}

115 
ölöe
 
boﬁ


116 
	$vÆid©e_Ámûy
 (
Ámûy
)

119 #i‡
HAVE_IPV4


120 i‡(
Ámûy
 =
PF_INET
)

121  
åue
;

123 #i‡
HAVE_IPV6


124 i‡(
Ámûy
 =
PF_INET6
)

125  
åue
;

127 i‡(
Ámûy
 =
PF_UNSPEC
)

128  
åue
;

129  
Ál£
;

130 
	}
}

135 
	$gëaddröfo
 (c⁄° *
ª°ri˘
 
nodíame
,

136 c⁄° *
ª°ri˘
 
£rv«me
,

137 c⁄° 
addröfo
 *
ª°ri˘
 
höts
,

138 
addröfo
 **
ª°ri˘
 
ªs
)

140 
addröfo
 *
tmp
;

141 
p‹t
 = 0;

142 
ho°ít
 *
he
;

143 *
°‹age
;

144 
size_t
 
size
;

145 #i‡
HAVE_IPV6


146 
	sv6_∑ú
 {

147 
addröfo
áddrinfo;

148 
sockaddr_ö6
 sockaddr_in6;

151 #i‡
HAVE_IPV4


152 
	sv4_∑ú
 {

153 
addröfo
áddrinfo;

154 
sockaddr_ö
 sockaddr_in;

158 #ifde‡
WIN32_NATIVE


159 i‡(
	`u£_wö32_p
 ())

160  
	`gëaddröfo_±r
 (
nodíame
, 
£rv«me
, 
höts
, 
ªs
);

163 i‡(
höts
 && (höts->
ai_Êags
 & ~(
AI_CANONNAME
|
AI_PASSIVE
)))

165  
EAI_BADFLAGS
;

167 i‡(
höts
 && !
	`vÆid©e_Ámûy
 (höts->
ai_Ámûy
))

168  
EAI_FAMILY
;

170 i‡(
höts
 &&

171 
höts
->
ai_sockty≥
 !
SOCK_STREAM
 && höts->ai_sockty≥ !
SOCK_DGRAM
)

173  
EAI_SOCKTYPE
;

175 i‡(!
nodíame
)

177 i‡(!(
höts
->
ai_Êags
 & 
AI_PASSIVE
))

178  
EAI_NONAME
;

180 #ifde‡
HAVE_IPV6


181 
nodíame
 = (
höts
->
ai_Ámûy
 =
AF_INET6
) ? "::" : "0.0.0.0";

183 
nodíame
 = "0.0.0.0";

187 i‡(
£rv«me
)

189 
£rvít
 *
£
 = 
NULL
;

190 c⁄° *
¥Ÿo
 =

191 (
höts
 && höts->
ai_sockty≥
 =
SOCK_DGRAM
) ? "udp" : "tcp";

193 i‡(
höts
 =
NULL
 || !(höts->
ai_Êags
 & 
AI_NUMERICSERV
))

195 
£
 = 
	`gë£rvby«me
 (
£rv«me
, 
¥Ÿo
);

197 i‡(!
£
)

199 *
c
;

200 i‡(!(*
£rv«me
 >= '0' && *servname <= '9'))

201  
EAI_NONAME
;

202 
p‹t
 = 
	`°πoul
 (
£rv«me
, &
c
, 10);

203 i‡(*
c
 || 
p‹t
 > 0xffff)

204  
EAI_NONAME
;

205 
p‹t
 = 
	`ht⁄s
 (port);

208 
p‹t
 = 
£
->
s_p‹t
;

212 
he
 = 
	`gëho°by«me
 (
nodíame
);

213 i‡(!
he
 || he->
h_addr_li°
[0] =
NULL
)

214  
EAI_NONAME
;

216 
he
->
h_addπy≥
)

218 #i‡
HAVE_IPV6


219 
PF_INET6
:

220 
size
 =  (
v6_∑ú
);

224 #i‡
HAVE_IPV4


225 
PF_INET
:

226 
size
 =  (
v4_∑ú
);

231  
EAI_NODATA
;

234 
°‹age
 = 
	`ˇŒoc
 (1, 
size
);

235 i‡(!
°‹age
)

236  
EAI_MEMORY
;

238 
he
->
h_addπy≥
)

240 #i‡
HAVE_IPV6


241 
PF_INET6
:

243 
v6_∑ú
 *
p
 = 
°‹age
;

244 
sockaddr_ö6
 *
söp
 = &
p
->sockaddr_in6;

245 
tmp
 = &
p
->
addröfo
;

247 i‡(
p‹t
)

248 
söp
->
sö6_p‹t
 = 
p‹t
;

250 i‡(
he
->
h_Àngth
 ! (
söp
->
sö6_addr
))

252 
	`‰ì
 (
°‹age
);

253  
EAI_SYSTEM
;

256 
	`mem˝y
 (&
söp
->
sö6_addr
, 
he
->
h_addr_li°
[0],  sinp->sin6_addr);

258 
tmp
->
ai_addr
 = (
sockaddr
 *Ë
söp
;

259 
tmp
->
ai_addæí
 =  *
söp
;

264 #i‡
HAVE_IPV4


265 
PF_INET
:

267 
v4_∑ú
 *
p
 = 
°‹age
;

268 
sockaddr_ö
 *
söp
 = &
p
->sockaddr_in;

269 
tmp
 = &
p
->
addröfo
;

271 i‡(
p‹t
)

272 
söp
->
sö_p‹t
 = 
p‹t
;

274 i‡(
he
->
h_Àngth
 ! (
söp
->
sö_addr
))

276 
	`‰ì
 (
°‹age
);

277  
EAI_SYSTEM
;

280 
	`mem˝y
 (&
söp
->
sö_addr
, 
he
->
h_addr_li°
[0],  sinp->sin_addr);

282 
tmp
->
ai_addr
 = (
sockaddr
 *Ë
söp
;

283 
tmp
->
ai_addæí
 =  *
söp
;

289 
	`‰ì
 (
°‹age
);

290  
EAI_NODATA
;

293 i‡(
höts
 && höts->
ai_Êags
 & 
AI_CANONNAME
)

295 c⁄° *
˙
;

296 i‡(
he
->
h_«me
)

297 
˙
 = 
he
->
h_«me
;

299 
˙
 = 
nodíame
;

301 
tmp
->
ai_ˇn⁄«me
 = 
	`°rdup
 (
˙
);

302 i‡(!
tmp
->
ai_ˇn⁄«me
)

304 
	`‰ì
 (
°‹age
);

305  
EAI_MEMORY
;

309 
tmp
->
ai_¥Ÿocﬁ
 = (
höts
) ? hints->ai_protocol : 0;

310 
tmp
->
ai_sockty≥
 = (
höts
) ? hints->ai_socktype : 0;

311 
tmp
->
ai_addr
->
ß_Ámûy
 = 
he
->
h_addπy≥
;

312 
tmp
->
ai_Ámûy
 = 
he
->
h_addπy≥
;

314 #ifde‡
HAVE_STRUCT_SOCKADDR_SA_LEN


315 
he
->
h_addπy≥
)

317 #i‡
HAVE_IPV4


318 
AF_INET
:

319 
tmp
->
ai_addr
->
ß_Àn
 =  (
sockaddr_ö
);

322 #i‡
HAVE_IPV6


323 
AF_INET6
:

324 
tmp
->
ai_addr
->
ß_Àn
 =  (
sockaddr_ö6
);

332 *
ªs
 = 
tmp
;

335 
	}
}

339 
	$‰ìaddröfo
 (
addröfo
 *
ai
)

341 #ifde‡
WIN32_NATIVE


342 i‡(
	`u£_wö32_p
 ())

344 
	`‰ìaddröfo_±r
 (
ai
);

349 
ai
)

351 
addröfo
 *
cur
;

353 
cur
 = 
ai
;

354 
ai
 =ái->
ai_√xt
;

356 
	`‰ì
 (
cur
->
ai_ˇn⁄«me
);

357 
	`‰ì
 (
cur
);

359 
	}
}

362 
	$gë«meöfo
 (c⁄° 
sockaddr
 *
ª°ri˘
 
ß
, 
sockÀn_t
 
ßÀn
,

363 *
ª°ri˘
 
node
, 
sockÀn_t
 
nodñí
,

364 *
ª°ri˘
 
£rvi˚
, 
sockÀn_t
 
£rvi˚Àn
,

365 
Êags
)

367 #ifde‡
WIN32_NATIVE


368 i‡(
	`u£_wö32_p
 ())

369  
	`gë«meöfo_±r
 (
ß
, 
ßÀn
, 
node
, 
nodñí
,

370 
£rvi˚
, 
£rvi˚Àn
, 
Êags
);

374 i‡((
node
 && 
nodñí
 > 0 && !(
Êags
 & 
NI_NUMERICHOST
)) ||

375 (
£rvi˚
 && 
£rvi˚Àn
 > 0 && !(
Êags
 & 
NI_NUMERICHOST
)) ||

376 (
Êags
 & ~(
NI_NUMERICHOST
|
NI_NUMERICSERV
)))

377  
EAI_BADFLAGS
;

379 i‡(
ß
 =
NULL
 || 
ßÀn
 <  (ß->
ß_Ámûy
))

380  
EAI_FAMILY
;

382 
ß
->
ß_Ámûy
)

384 #i‡
HAVE_IPV4


385 
AF_INET
:

386 i‡(
ßÀn
 <  (
sockaddr_ö
))

387  
EAI_FAMILY
;

390 #i‡
HAVE_IPV6


391 
AF_INET6
:

392 i‡(
ßÀn
 <  (
sockaddr_ö6
))

393  
EAI_FAMILY
;

397  
EAI_FAMILY
;

400 i‡(
node
 && 
nodñí
 > 0 && 
Êags
 & 
NI_NUMERICHOST
)

402 
ß
->
ß_Ámûy
)

404 #i‡
HAVE_IPV4


405 
AF_INET
:

406 i‡(!
	`öë_¡›
 (
AF_INET
,

407 &(((c⁄° 
sockaddr_ö
 *Ë
ß
)->
sö_addr
),

408 
node
, 
nodñí
))

409  
EAI_SYSTEM
;

413 #i‡
HAVE_IPV6


414 
AF_INET6
:

415 i‡(!
	`öë_¡›
 (
AF_INET6
,

416 &(((c⁄° 
sockaddr_ö6
 *Ë
ß
)->
sö6_addr
),

417 
node
, 
nodñí
))

418  
EAI_SYSTEM
;

423  
EAI_FAMILY
;

427 i‡(
£rvi˚
 && 
£rvi˚Àn
 > 0 && 
Êags
 & 
NI_NUMERICSERV
)

428 
ß
->
ß_Ámûy
)

430 #i‡
HAVE_IPV4


431 
AF_INET
:

433 #i‡
HAVE_IPV6


434 
AF_INET6
:

437 
p‹t


438 
	`¡ohs
 (((c⁄° 
sockaddr_ö
 *Ë
ß
)->
sö_p‹t
);

439 i‡(
£rvi˚Àn
 <
	`¢¥ötf
 (
£rvi˚
, sîvi˚Àn, "%u", 
p‹t
))

440  
EAI_OVERFLOW
;

446 
	}
}

	@lib/getdelim.c

24 
	~<c⁄fig.h
>

28 
	#_GL_ARG_NONNULL
(
∑øms
)

	)

30 
	~<°dio.h
>

32 
	~<limôs.h
>

33 
	~<°döt.h
>

34 
	~<°dlib.h
>

35 
	~<î∫o.h
>

37 #i‚de‡
SSIZE_MAX


38 
	#SSIZE_MAX
 ((
ssize_t
Ë(
SIZE_MAX
 / 2))

	)

41 #i‡
USE_UNLOCKED_IO


42 
	~"u∆ocked-io.h
"

43 
	#gëc_maybe_u∆ocked
(
Â
Ë
	`gëc
(Â)

	)

44 #ñi‡!
HAVE_FLOCKFILE
 || !
HAVE_FUNLOCKFILE
 || !
HAVE_DECL_GETC_UNLOCKED


45 #unde‡
Êockfûe


46 #unde‡
fu∆ockfûe


47 
	#Êockfûe
(
x
Ë((Ë0)

	)

48 
	#fu∆ockfûe
(
x
Ë((Ë0)

	)

49 
	#gëc_maybe_u∆ocked
(
Â
Ë
	`gëc
(Â)

	)

51 
	#gëc_maybe_u∆ocked
(
Â
Ë
	`gëc_u∆ocked
(Â)

	)

60 
ssize_t


61 
	$gëdñim
 (**
löïå
, 
size_t
 *
n
, 
dñimôî
, 
FILE
 *
Â
)

63 
ssize_t
 
ªsu…
;

64 
size_t
 
cur_Àn
 = 0;

66 i‡(
löïå
 =
NULL
 || 
n
 =NULL || 
Â
 == NULL)

68 
î∫o
 = 
EINVAL
;

72 
	`Êockfûe
 (
Â
);

74 i‡(*
löïå
 =
NULL
 || *
n
 == 0)

76 *
√w_löïå
;

77 *
n
 = 120;

78 
√w_löïå
 = (*Ë
	`ªÆloc
 (*
löïå
, *
n
);

79 i‡(
√w_löïå
 =
NULL
)

81 
ªsu…
 = -1;

82 
u∆ock_ªtu∫
;

84 *
löïå
 = 
√w_löïå
;

89 
i
;

91 
i
 = 
	`gëc_maybe_u∆ocked
 (
Â
);

92 i‡(
i
 =
EOF
)

94 
ªsu…
 = -1;

99 i‡(
cur_Àn
 + 1 >*
n
)

101 
size_t
 
√eded_max
 =

102 
SSIZE_MAX
 < 
SIZE_MAX
 ? (
size_t
) SSIZE_MAX + 1 : SIZE_MAX;

103 
size_t
 
√eded
 = 2 * *
n
 + 1;

104 *
√w_löïå
;

106 i‡(
√eded_max
 < 
√eded
)

107 
√eded
 = 
√eded_max
;

108 i‡(
cur_Àn
 + 1 >
√eded
)

110 
ªsu…
 = -1;

111 
î∫o
 = 
EOVERFLOW
;

112 
u∆ock_ªtu∫
;

115 
√w_löïå
 = (*Ë
	`ªÆloc
 (*
löïå
, 
√eded
);

116 i‡(
√w_löïå
 =
NULL
)

118 
ªsu…
 = -1;

119 
u∆ock_ªtu∫
;

122 *
löïå
 = 
√w_löïå
;

123 *
n
 = 
√eded
;

126 (*
löïå
)[
cur_Àn
] = 
i
;

127 
cur_Àn
++;

129 i‡(
i
 =
dñimôî
)

132 (*
löïå
)[
cur_Àn
] = '\0';

133 
ªsu…
 = 
cur_Àn
 ? cur_len :Ñesult;

135 
u∆ock_ªtu∫
:

136 
	`fu∆ockfûe
 (
Â
);

138  
ªsu…
;

139 
	}
}

	@lib/getdtablesize.c

18 
	~<c⁄fig.h
>

21 
	~<uni°d.h
>

23 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


25 
	~<°dio.h
>

28 
	gdèbÀsize
;

31 
	$gëdèbÀsize
 ()

33 i‡(
dèbÀsize
 == 0)

53 
‹ig_max_°dio
 = 
	`_gëmax°dio
 ();

54 
bound
;

55 
bound
 = 0x10000; 
	`_£tmax°dio
 (bound) < 0; bound = bound / 2)

57 
	`_£tmax°dio
 (
‹ig_max_°dio
);

58 
dèbÀsize
 = 
bound
;

60  
dèbÀsize
;

61 
	}
}

	@lib/getline.c

23 
	~<c⁄fig.h
>

25 
	~<°dio.h
>

27 
ssize_t


28 
	$gëlöe
 (**
löïå
, 
size_t
 *
n
, 
FILE
 *
°ªam
)

30  
	`gëdñim
 (
löïå
, 
n
, '\n', 
°ªam
);

31 
	}
}

	@lib/getopt.c

22 #i‚de‡
_LIBC


23 
	~<c⁄fig.h
>

26 
	~"gë›t.h
"

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<uni°d.h
>

33 #ifde‡
_LIBC


34 
	~<liböé.h
>

36 
	~"gëãxt.h
"

37 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

40 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


41 
	~<wch¨.h
>

59 
	~"gë›t_öt.h
"

67 *
	g›èrg
;

82 
	g›töd
 = 1;

87 
	g›ãº
 = 1;

93 
	g›t›t
 = '?';

97 
_gë›t_d©a
 
	ggë›t_d©a
;

100 #i‡
deföed
 
HAVE_DECL_GETENV
 && !HAVE_DECL_GETENV

101 *
gëív
 ();

104 #ifde‡
_LIBC


108 
__libc_¨gc
;

109 **
__libc_¨gv
;

114 #ifde‡
USE_NONOPTION_FLAGS


116 *
__gë›t_n⁄›ti⁄_Êags
;

119 #ifde‡
USE_NONOPTION_FLAGS


120 
	#SWAP_FLAGS
(
ch1
, 
ch2
) \

121 i‡(
d
->
__n⁄›ti⁄_Êags_Àn
 > 0) \

123 
__tmp
 = 
__gë›t_n⁄›ti⁄_Êags
[
ch1
]; \

124 
__gë›t_n⁄›ti⁄_Êags
[
ch1
] = __gë›t_n⁄›ti⁄_Êags[
ch2
]; \

125 
__gë›t_n⁄›ti⁄_Êags
[
ch2
] = 
__tmp
; \

126 }

	)

128 
	#SWAP_FLAGS
(
ch1
, 
ch2
)

	)

131 
	#SWAP_FLAGS
(
ch1
, 
ch2
)

	)

144 
	$exch™ge
 (**
¨gv
, 
_gë›t_d©a
 *
d
)

146 
bŸtom
 = 
d
->
__fú°_n⁄›t
;

147 
middÀ
 = 
d
->
__œ°_n⁄›t
;

148 
t›
 = 
d
->
›töd
;

149 *
ãm
;

156 #i‡
deföed
 
_LIBC
 && deföed 
USE_NONOPTION_FLAGS


160 i‡(
d
->
__n⁄›ti⁄_Êags_Àn
 > 0 && 
t›
 >d->
__n⁄›ti⁄_Êags_max_Àn
)

164 *
√w_°r
 = 
	`mÆloc
 (
t›
 + 1);

165 i‡(
√w_°r
 =
NULL
)

166 
d
->
__n⁄›ti⁄_Êags_Àn
 = d->
__n⁄›ti⁄_Êags_max_Àn
 = 0;

169 
	`mem£t
 (
	`__memp˝y
 (
√w_°r
, 
__gë›t_n⁄›ti⁄_Êags
,

170 
d
->
__n⁄›ti⁄_Êags_max_Àn
),

171 '\0', 
t›
 + 1 - 
d
->
__n⁄›ti⁄_Êags_max_Àn
);

172 
d
->
__n⁄›ti⁄_Êags_max_Àn
 = 
t›
 + 1;

173 
__gë›t_n⁄›ti⁄_Êags
 = 
√w_°r
;

178 
t›
 > 
middÀ
 && middÀ > 
bŸtom
)

180 i‡(
t›
 - 
middÀ
 > middÀ - 
bŸtom
)

183 
Àn
 = 
middÀ
 - 
bŸtom
;

184 
i
;

187 
i
 = 0; i < 
Àn
; i++)

189 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

190 
¨gv
[
bŸtom
 + 
i
] =árgv[
t›
 - (
middÀ
 - bottom) + i];

191 
¨gv
[
t›
 - (
middÀ
 - 
bŸtom
Ë+ 
i
] = 
ãm
;

192 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
t›
 - (
middÀ
 - bottom) + i);

195 
t›
 -
Àn
;

200 
Àn
 = 
t›
 - 
middÀ
;

201 
i
;

204 
i
 = 0; i < 
Àn
; i++)

206 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

207 
¨gv
[
bŸtom
 + 
i
] =árgv[
middÀ
 + i];

208 
¨gv
[
middÀ
 + 
i
] = 
ãm
;

209 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
middÀ
 + i);

212 
bŸtom
 +
Àn
;

218 
d
->
__fú°_n⁄›t
 +(d->
›töd
 - d->
__œ°_n⁄›t
);

219 
d
->
__œ°_n⁄›t
 = d->
›töd
;

220 
	}
}

225 
	$_gë›t_öôülize
 (
¨gc
 
_GL_UNUSED
,

226 **
¨gv
 
_GL_UNUSED
, c⁄° *
›t°rög
,

227 
_gë›t_d©a
 *
d
, 
posixly_c‹ª˘
)

233 
d
->
__fú°_n⁄›t
 = d->
__œ°_n⁄›t
 = d->
›töd
;

235 
d
->
__√xtch¨
 = 
NULL
;

237 
d
->
__posixly_c‹ª˘
 = 
posixly_c‹ª˘
 || !!
	`gëív
 ("POSIXLY_CORRECT");

241 i‡(
›t°rög
[0] == '-')

243 
d
->
__‹dîög
 = 
RETURN_IN_ORDER
;

244 ++
›t°rög
;

246 i‡(
›t°rög
[0] == '+')

248 
d
->
__‹dîög
 = 
REQUIRE_ORDER
;

249 ++
›t°rög
;

251 i‡(
d
->
__posixly_c‹ª˘
)

252 
d
->
__‹dîög
 = 
REQUIRE_ORDER
;

254 
d
->
__‹dîög
 = 
PERMUTE
;

256 #i‡
deföed
 
_LIBC
 && deföed 
USE_NONOPTION_FLAGS


257 i‡(!
d
->
__posixly_c‹ª˘


258 && 
¨gc
 =
__libc_¨gc
 && 
¨gv
 =
__libc_¨gv
)

260 i‡(
d
->
__n⁄›ti⁄_Êags_max_Àn
 == 0)

262 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL


263 || 
__gë›t_n⁄›ti⁄_Êags
[0] == '\0')

264 
d
->
__n⁄›ti⁄_Êags_max_Àn
 = -1;

267 c⁄° *
‹ig_°r
 = 
__gë›t_n⁄›ti⁄_Êags
;

268 
Àn
 = 
d
->
__n⁄›ti⁄_Êags_max_Àn
 = 
	`°æí
 (
‹ig_°r
);

269 i‡(
d
->
__n⁄›ti⁄_Êags_max_Àn
 < 
¨gc
)

270 
d
->
__n⁄›ti⁄_Êags_max_Àn
 = 
¨gc
;

271 
__gë›t_n⁄›ti⁄_Êags
 =

272 (*Ë
	`mÆloc
 (
d
->
__n⁄›ti⁄_Êags_max_Àn
);

273 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL
)

274 
d
->
__n⁄›ti⁄_Êags_max_Àn
 = -1;

276 
	`mem£t
 (
	`__memp˝y
 (
__gë›t_n⁄›ti⁄_Êags
, 
‹ig_°r
, 
Àn
),

277 '\0', 
d
->
__n⁄›ti⁄_Êags_max_Àn
 - 
Àn
);

280 
d
->
__n⁄›ti⁄_Êags_Àn
 = d->
__n⁄›ti⁄_Êags_max_Àn
;

283 
d
->
__n⁄›ti⁄_Êags_Àn
 = 0;

286  
›t°rög
;

287 
	}
}

346 
	$_gë›t_öã∫Æ_r
 (
¨gc
, **
¨gv
, c⁄° *
›t°rög
,

347 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
,

348 
l⁄g_⁄ly
, 
_gë›t_d©a
 *
d
, 
posixly_c‹ª˘
)

350 
¥öt_îr‹s
 = 
d
->
›ãº
;

352 i‡(
¨gc
 < 1)

355 
d
->
›èrg
 = 
NULL
;

357 i‡(
d
->
›töd
 =0 || !d->
__öôülized
)

359 i‡(
d
->
›töd
 == 0)

360 
d
->
›töd
 = 1;

361 
›t°rög
 = 
	`_gë›t_öôülize
 (
¨gc
, 
¨gv
, o±°rög, 
d
,

362 
posixly_c‹ª˘
);

363 
d
->
__öôülized
 = 1;

365 i‡(
›t°rög
[0] == '-' || optstring[0] == '+')

366 
›t°rög
++;

367 i‡(
›t°rög
[0] == ':')

368 
¥öt_îr‹s
 = 0;

374 #i‡
deföed
 
_LIBC
 && deföed 
USE_NONOPTION_FLAGS


375 
	#NONOPTION_P
 (
¨gv
[
d
->
›töd
][0] != '-' ||árgv[d->optind][1] == '\0' \

376 || (
d
->
›töd
 < d->
__n⁄›ti⁄_Êags_Àn
 \

377 && 
__gë›t_n⁄›ti⁄_Êags
[
d
->
›töd
] ='1'))

	)

379 
	#NONOPTION_P
 (
¨gv
[
d
->
›töd
][0] !'-' ||árgv[d->›töd][1] ='\0')

	)

382 i‡(
d
->
__√xtch¨
 =
NULL
 || *d->__nextchar == '\0')

388 i‡(
d
->
__œ°_n⁄›t
 > d->
›töd
)

389 
d
->
__œ°_n⁄›t
 = d->
›töd
;

390 i‡(
d
->
__fú°_n⁄›t
 > d->
›töd
)

391 
d
->
__fú°_n⁄›t
 = d->
›töd
;

393 i‡(
d
->
__‹dîög
 =
PERMUTE
)

398 i‡(
d
->
__fú°_n⁄›t
 !d->
__œ°_n⁄›t


399 && 
d
->
__œ°_n⁄›t
 !d->
›töd
)

400 
	`exch™ge
 ((**Ë
¨gv
, 
d
);

401 i‡(
d
->
__œ°_n⁄›t
 !d->
›töd
)

402 
d
->
__fú°_n⁄›t
 = d->
›töd
;

407 
d
->
›töd
 < 
¨gc
 && 
NONOPTION_P
)

408 
d
->
›töd
++;

409 
d
->
__œ°_n⁄›t
 = d->
›töd
;

417 i‡(
d
->
›töd
 !
¨gc
 && !
	`°rcmp
 (
¨gv
[d->optind], "--"))

419 
d
->
›töd
++;

421 i‡(
d
->
__fú°_n⁄›t
 !d->
__œ°_n⁄›t


422 && 
d
->
__œ°_n⁄›t
 !d->
›töd
)

423 
	`exch™ge
 ((**Ë
¨gv
, 
d
);

424 i‡(
d
->
__fú°_n⁄›t
 =d->
__œ°_n⁄›t
)

425 
d
->
__fú°_n⁄›t
 = d->
›töd
;

426 
d
->
__œ°_n⁄›t
 = 
¨gc
;

428 
d
->
›töd
 = 
¨gc
;

434 i‡(
d
->
›töd
 =
¨gc
)

438 i‡(
d
->
__fú°_n⁄›t
 !d->
__œ°_n⁄›t
)

439 
d
->
›töd
 = d->
__fú°_n⁄›t
;

446 i‡(
NONOPTION_P
)

448 i‡(
d
->
__‹dîög
 =
REQUIRE_ORDER
)

450 
d
->
›èrg
 = 
¨gv
[d->
›töd
++];

457 
d
->
__√xtch¨
 = (
¨gv
[d->
›töd
] + 1

458 + (
l⁄g›ts
 !
NULL
 && 
¨gv
[
d
->
›töd
][1] == '-'));

476 i‡(
l⁄g›ts
 !
NULL


477 && (
¨gv
[
d
->
›töd
][1] == '-'

478 || (
l⁄g_⁄ly
 && (
¨gv
[
d
->
›töd
][2]

479 || !
	`°rchr
 (
›t°rög
, 
¨gv
[
d
->
›töd
][1])))))

481 *
«mìnd
;

482 
«mñí
;

483 c⁄° 
›ti⁄
 *
p
;

484 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

485 
	s›ti⁄_li°


487 c⁄° 
›ti⁄
 *
p
;

488 
›ti⁄_li°
 *
√xt
;

489 } *
ambig_li°
 = 
NULL
;

490 
exa˘
 = 0;

491 
ödfound
 = -1;

492 
›ti⁄_ödex
;

494 
«mìnd
 = 
d
->
__√xtch¨
; *nameend && *nameend != '=';Çameend++)

496 
«mñí
 = 
«mìnd
 - 
d
->
__√xtch¨
;

500 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

501 i‡(!
	`°∫cmp
 (
p
->
«me
, 
d
->
__√xtch¨
, 
«mñí
))

503 i‡(
«mñí
 =(Ë
	`°æí
 (
p
->
«me
))

506 
pfound
 = 
p
;

507 
ödfound
 = 
›ti⁄_ödex
;

508 
exa˘
 = 1;

511 i‡(
pfound
 =
NULL
)

514 
pfound
 = 
p
;

515 
ödfound
 = 
›ti⁄_ödex
;

517 i‡(
l⁄g_⁄ly


518 || 
pfound
->
has_¨g
 !
p
->has_arg

519 || 
pfound
->
Êag
 !
p
->flag

520 || 
pfound
->
vÆ
 !
p
->val)

523 
›ti⁄_li°
 *
√wp
 = 
	`mÆloc
 ( (*newp));

524 
√wp
->
p
 =Ö;

525 
√wp
->
√xt
 = 
ambig_li°
;

526 
ambig_li°
 = 
√wp
;

530 i‡(
ambig_li°
 !
NULL
 && !
exa˘
)

532 i‡(
¥öt_îr‹s
)

534 
›ti⁄_li°
 
fú°
;

535 
fú°
.
p
 = 
pfound
;

536 
fú°
.
√xt
 = 
ambig_li°
;

537 
ambig_li°
 = &
fú°
;

539 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


540 *
buf
 = 
NULL
;

541 
size_t
 
buÊí
 = 0;

543 
FILE
 *
Â
 = 
	`›í_mem°ªam
 (&
buf
, &
buÊí
);

544 i‡(
Â
 !
NULL
)

546 
	`Ârötf
 (
Â
,

547 
	`_
("%s: option '%s' isámbiguous;Öossibilities:"),

548 
¨gv
[0],árgv[
d
->
›töd
]);

552 
	`Ârötf
 (
Â
, " '--%s'", 
ambig_li°
->
p
->
«me
);

553 
ambig_li°
 =ámbig_li°->
√xt
;

555 
ambig_li°
 !
NULL
);

557 
	`Âutc_u∆ocked
 ('\n', 
Â
);

559 i‡(
	`__buûtö_ex≥˘
 (
	`f˛o£
 (
Â
Ë!
EOF
, 1))

561 
	`_IO_Êockfûe
 (
°dîr
);

563 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

564 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

566 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

568 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

569 
	`_IO_fu∆ockfûe
 (
°dîr
);

571 
	`‰ì
 (
buf
);

575 
	`Ârötf
 (
°dîr
,

576 
	`_
("%s: option '%s' isámbiguous;Öossibilities:"),

577 
¨gv
[0],árgv[
d
->
›töd
]);

580 
	`Ârötf
 (
°dîr
, " '--%s'", 
ambig_li°
->
p
->
«me
);

581 
ambig_li°
 =ámbig_li°->
√xt
;

583 
ambig_li°
 !
NULL
);

585 
	`Âutc
 ('\n', 
°dîr
);

588 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

589 
d
->
›töd
++;

590 
d
->
›t›t
 = 0;

594 
ambig_li°
 !
NULL
)

596 
›ti⁄_li°
 *
≤
 = 
ambig_li°
->
√xt
;

597 
	`‰ì
 (
ambig_li°
);

598 
ambig_li°
 = 
≤
;

601 i‡(
pfound
 !
NULL
)

603 
›ti⁄_ödex
 = 
ödfound
;

604 
d
->
›töd
++;

605 i‡(*
«mìnd
)

609 i‡(
pfound
->
has_¨g
)

610 
d
->
›èrg
 = 
«mìnd
 + 1;

613 i‡(
¥öt_îr‹s
)

615 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


616 *
buf
;

617 
n
;

620 i‡(
¨gv
[
d
->
›töd
 - 1][1] == '-')

623 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


624 
n
 = 
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: option '--%s' doesn'tállowánárgument\n"),

626 
¨gv
[0], 
pfound
->
«me
);

628 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option '--%s' doesn'tállowánárgument\n"),

630 
¨gv
[0], 
pfound
->
«me
);

636 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


637 
n
 = 
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: option '%c%s' doesn'tállowánárgument\n"),

639 
¨gv
[0],árgv[
d
->
›töd
 - 1][0],

640 
pfound
->
«me
);

642 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option '%c%s' doesn'tállowánárgument\n"),

644 
¨gv
[0],árgv[
d
->
›töd
 - 1][0],

645 
pfound
->
«me
);

649 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


650 i‡(
n
 >= 0)

652 
	`_IO_Êockfûe
 (
°dîr
);

654 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

655 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2


656 |
_IO_FLAGS2_NOTCANCEL
;

658 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

660 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

661 
	`_IO_fu∆ockfûe
 (
°dîr
);

663 
	`‰ì
 (
buf
);

668 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

670 
d
->
›t›t
 = 
pfound
->
vÆ
;

674 i‡(
pfound
->
has_¨g
 == 1)

676 i‡(
d
->
›töd
 < 
¨gc
)

677 
d
->
›èrg
 = 
¨gv
[d->
›töd
++];

680 i‡(
¥öt_îr‹s
)

682 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


683 *
buf
;

685 i‡(
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: option '--%s'Ñequiresánárgument\n"),

687 
¨gv
[0], 
pfound
->
«me
) >= 0)

689 
	`_IO_Êockfûe
 (
°dîr
);

691 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

692 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2


693 |
_IO_FLAGS2_NOTCANCEL
;

695 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

697 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

698 
	`_IO_fu∆ockfûe
 (
°dîr
);

700 
	`‰ì
 (
buf
);

703 
	`Ârötf
 (
°dîr
,

704 
	`_
("%s: option '--%s'Ñequiresánárgument\n"),

705 
¨gv
[0], 
pfound
->
«me
);

708 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

709 
d
->
›t›t
 = 
pfound
->
vÆ
;

710  
›t°rög
[0] == ':' ? ':' : '?';

713 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

714 i‡(
l⁄göd
 !
NULL
)

715 *
l⁄göd
 = 
›ti⁄_ödex
;

716 i‡(
pfound
->
Êag
)

718 *(
pfound
->
Êag
Ëpfound->
vÆ
;

721  
pfound
->
vÆ
;

728 i‡(!
l⁄g_⁄ly
 || 
¨gv
[
d
->
›töd
][1] == '-'

729 || 
	`°rchr
 (
›t°rög
, *
d
->
__√xtch¨
Ë=
NULL
)

731 i‡(
¥öt_îr‹s
)

733 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


734 *
buf
;

735 
n
;

738 i‡(
¨gv
[
d
->
›töd
][1] == '-')

741 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


742 
n
 = 
	`__a•rötf
 (&
buf
, 
	`_
("%s: unrecognized option '--%s'\n"),

743 
¨gv
[0], 
d
->
__√xtch¨
);

745 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option '--%s'\n"),

746 
¨gv
[0], 
d
->
__√xtch¨
);

752 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


753 
n
 = 
	`__a•rötf
 (&
buf
, 
	`_
("%s: unrecognized option '%c%s'\n"),

754 
¨gv
[0],árgv[
d
->
›töd
][0], d->
__√xtch¨
);

756 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option '%c%s'\n"),

757 
¨gv
[0],árgv[
d
->
›töd
][0], d->
__√xtch¨
);

761 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


762 i‡(
n
 >= 0)

764 
	`_IO_Êockfûe
 (
°dîr
);

766 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

767 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

769 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

771 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

772 
	`_IO_fu∆ockfûe
 (
°dîr
);

774 
	`‰ì
 (
buf
);

778 
d
->
__√xtch¨
 = (*) "";

779 
d
->
›töd
++;

780 
d
->
›t›t
 = 0;

788 
c
 = *
d
->
__√xtch¨
++;

789 c⁄° *
ãmp
 = 
	`°rchr
 (
›t°rög
, 
c
);

792 i‡(*
d
->
__√xtch¨
 == '\0')

793 ++
d
->
›töd
;

795 i‡(
ãmp
 =
NULL
 || 
c
 == ':' || c == ';')

797 i‡(
¥öt_îr‹s
)

799 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


800 *
buf
;

801 
n
;

804 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


805 
n
 = 
	`__a•rötf
 (&
buf
, 
	`_
("%s: invalid option -- '%c'\n"),

806 
¨gv
[0], 
c
);

808 
	`Ârötf
 (
°dîr
, 
	`_
("%s: invÆid o±i⁄ -- '%c'\n"), 
¨gv
[0], 
c
);

811 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


812 i‡(
n
 >= 0)

814 
	`_IO_Êockfûe
 (
°dîr
);

816 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

817 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

819 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

821 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

822 
	`_IO_fu∆ockfûe
 (
°dîr
);

824 
	`‰ì
 (
buf
);

828 
d
->
›t›t
 = 
c
;

832 i‡(
ãmp
[0] == 'W' &&Åemp[1] == ';')

834 *
«mìnd
;

835 c⁄° 
›ti⁄
 *
p
;

836 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

837 
exa˘
 = 0;

838 
ambig
 = 0;

839 
ödfound
 = 0;

840 
›ti⁄_ödex
;

842 i‡(
l⁄g›ts
 =
NULL
)

843 
no_l⁄gs
;

846 i‡(*
d
->
__√xtch¨
 != '\0')

848 
d
->
›èrg
 = d->
__√xtch¨
;

851 
d
->
›töd
++;

853 i‡(
d
->
›töd
 =
¨gc
)

855 i‡(
¥öt_îr‹s
)

857 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


858 *
buf
;

860 i‡(
	`__a•rötf
 (&
buf
,

861 
	`_
("%s: optionÑequiresánárgument -- '%c'\n"),

862 
¨gv
[0], 
c
) >= 0)

864 
	`_IO_Êockfûe
 (
°dîr
);

866 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

867 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

869 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

871 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

872 
	`_IO_fu∆ockfûe
 (
°dîr
);

874 
	`‰ì
 (
buf
);

877 
	`Ârötf
 (
°dîr
,

878 
	`_
("%s: optionÑequiresánárgument -- '%c'\n"),

879 
¨gv
[0], 
c
);

882 
d
->
›t›t
 = 
c
;

883 i‡(
›t°rög
[0] == ':')

884 
c
 = ':';

886 
c
 = '?';

887  
c
;

892 
d
->
›èrg
 = 
¨gv
[d->
›töd
++];

897 
d
->
__√xtch¨
 = 
«mìnd
 = d->
›èrg
; *nameend && *nameend != '=';

898 
«mìnd
++)

903 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

904 i‡(!
	`°∫cmp
 (
p
->
«me
, 
d
->
__√xtch¨
, 
«mìnd
 - d->__nextchar))

906 i‡((Ë(
«mìnd
 - 
d
->
__√xtch¨
Ë=
	`°æí
 (
p
->
«me
))

909 
pfound
 = 
p
;

910 
ödfound
 = 
›ti⁄_ödex
;

911 
exa˘
 = 1;

914 i‡(
pfound
 =
NULL
)

917 
pfound
 = 
p
;

918 
ödfound
 = 
›ti⁄_ödex
;

920 i‡(
l⁄g_⁄ly


921 || 
pfound
->
has_¨g
 !
p
->has_arg

922 || 
pfound
->
Êag
 !
p
->flag

923 || 
pfound
->
vÆ
 !
p
->val)

925 
ambig
 = 1;

927 i‡(
ambig
 && !
exa˘
)

929 i‡(
¥öt_îr‹s
)

931 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


932 *
buf
;

934 i‡(
	`__a•rötf
 (&
buf
, 
	`_
("%s: option '-W %s' isámbiguous\n"),

935 
¨gv
[0], 
d
->
›èrg
) >= 0)

937 
	`_IO_Êockfûe
 (
°dîr
);

939 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

940 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

942 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

944 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

945 
	`_IO_fu∆ockfûe
 (
°dîr
);

947 
	`‰ì
 (
buf
);

950 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option '-W %s' isámbiguous\n"),

951 
¨gv
[0], 
d
->
›èrg
);

954 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

955 
d
->
›töd
++;

958 i‡(
pfound
 !
NULL
)

960 
›ti⁄_ödex
 = 
ödfound
;

961 i‡(*
«mìnd
)

965 i‡(
pfound
->
has_¨g
)

966 
d
->
›èrg
 = 
«mìnd
 + 1;

969 i‡(
¥öt_îr‹s
)

971 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


972 *
buf
;

974 i‡(
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: option '-W %s' doesn'tállowánárgument\n"),

976 
¨gv
[0], 
pfound
->
«me
) >= 0)

978 
	`_IO_Êockfûe
 (
°dîr
);

980 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

981 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2


982 |
_IO_FLAGS2_NOTCANCEL
;

984 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

986 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

987 
	`_IO_fu∆ockfûe
 (
°dîr
);

989 
	`‰ì
 (
buf
);

992 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option '-W %s' doesn'tállowánárgument\n"),

994 
¨gv
[0], 
pfound
->
«me
);

998 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

1002 i‡(
pfound
->
has_¨g
 == 1)

1004 i‡(
d
->
›töd
 < 
¨gc
)

1005 
d
->
›èrg
 = 
¨gv
[d->
›töd
++];

1008 i‡(
¥öt_îr‹s
)

1010 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


1011 *
buf
;

1013 i‡(
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: option '-W %s'Ñequiresánárgument\n"),

1015 
¨gv
[0], 
pfound
->
«me
) >= 0)

1017 
	`_IO_Êockfûe
 (
°dîr
);

1019 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

1020 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2


1021 |
_IO_FLAGS2_NOTCANCEL
;

1023 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

1025 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

1026 
	`_IO_fu∆ockfûe
 (
°dîr
);

1028 
	`‰ì
 (
buf
);

1031 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option '-W %s'Ñequiresánárgument\n"),

1033 
¨gv
[0], 
pfound
->
«me
);

1036 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

1037  
›t°rög
[0] == ':' ? ':' : '?';

1041 
d
->
›èrg
 = 
NULL
;

1042 
d
->
__√xtch¨
 +
	`°æí
 (d->__nextchar);

1043 i‡(
l⁄göd
 !
NULL
)

1044 *
l⁄göd
 = 
›ti⁄_ödex
;

1045 i‡(
pfound
->
Êag
)

1047 *(
pfound
->
Êag
Ëpfound->
vÆ
;

1050  
pfound
->
vÆ
;

1053 
no_l⁄gs
:

1054 
d
->
__√xtch¨
 = 
NULL
;

1057 i‡(
ãmp
[1] == ':')

1059 i‡(
ãmp
[2] == ':')

1062 i‡(*
d
->
__√xtch¨
 != '\0')

1064 
d
->
›èrg
 = d->
__√xtch¨
;

1065 
d
->
›töd
++;

1068 
d
->
›èrg
 = 
NULL
;

1069 
d
->
__√xtch¨
 = 
NULL
;

1074 i‡(*
d
->
__√xtch¨
 != '\0')

1076 
d
->
›èrg
 = d->
__√xtch¨
;

1079 
d
->
›töd
++;

1081 i‡(
d
->
›töd
 =
¨gc
)

1083 i‡(
¥öt_îr‹s
)

1085 #i‡
deföed
 
_LIBC
 && deföed 
USE_IN_LIBIO


1086 *
buf
;

1088 i‡(
	`__a•rötf
 (&
buf
, 
	`_
("\
%s: optionÑequiresánárgument -- '%c'\n"),

1090 
¨gv
[0], 
c
) >= 0)

1092 
	`_IO_Êockfûe
 (
°dîr
);

1094 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

1095 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

1097 
	`__fx¥ötf
 (
NULL
, "%s", 
buf
);

1099 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 = 
ﬁd_Êags2
;

1100 
	`_IO_fu∆ockfûe
 (
°dîr
);

1102 
	`‰ì
 (
buf
);

1105 
	`Ârötf
 (
°dîr
,

1106 
	`_
("%s: optionÑequiresánárgument -- '%c'\n"),

1107 
¨gv
[0], 
c
);

1110 
d
->
›t›t
 = 
c
;

1111 i‡(
›t°rög
[0] == ':')

1112 
c
 = ':';

1114 
c
 = '?';

1119 
d
->
›èrg
 = 
¨gv
[d->
›töd
++];

1120 
d
->
__√xtch¨
 = 
NULL
;

1123  
c
;

1125 
	}
}

1128 
	$_gë›t_öã∫Æ
 (
¨gc
, **
¨gv
, c⁄° *
›t°rög
,

1129 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
, 
l⁄g_⁄ly
,

1130 
posixly_c‹ª˘
)

1132 
ªsu…
;

1134 
gë›t_d©a
.
›töd
 = optind;

1135 
gë›t_d©a
.
›ãº
 = opterr;

1137 
ªsu…
 = 
	`_gë›t_öã∫Æ_r
 (
¨gc
, 
¨gv
, 
›t°rög
, 
l⁄g›ts
,

1138 
l⁄göd
, 
l⁄g_⁄ly
, &
gë›t_d©a
,

1139 
posixly_c‹ª˘
);

1141 
›töd
 = 
gë›t_d©a
.optind;

1142 
›èrg
 = 
gë›t_d©a
.optarg;

1143 
›t›t
 = 
gë›t_d©a
.optopt;

1145  
ªsu…
;

1146 
	}
}

1150 #i‡
_LIBC


1151 íum { 
	mPOSIXLY_CORRECT
 = 0 };

1153 íum { 
	mPOSIXLY_CORRECT
 = 1 };

1157 
	$gë›t
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
›t°rög
)

1159  
	`_gë›t_öã∫Æ
 (
¨gc
, (**Ë
¨gv
, 
›t°rög
,

1160 (c⁄° 
›ti⁄
 *) 0,

1162 0, 
POSIXLY_CORRECT
);

1163 
	}
}

1165 #ifde‡
_LIBC


1167 
	$__posix_gë›t
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
›t°rög
)

1169  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
,

1170 (c⁄° 
›ti⁄
 *) 0,

1173 
	}
}

1177 #ifde‡
TEST


1183 
	$maö
 (
¨gc
, **
¨gv
)

1185 
c
;

1186 
digô_›töd
 = 0;

1190 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

1192 
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "abc:d:0123456789");

1193 i‡(
c
 == -1)

1196 
c
)

1208 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

1209 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

1210 
digô_›töd
 = 
this_›ti⁄_›töd
;

1211 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

1215 
	`¥ötf
 ("optioná\n");

1219 
	`¥ötf
 ("option b\n");

1223 
	`¥ötf
 ("›ti⁄ c wôh vÆuê'%s'\n", 
›èrg
);

1230 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

1234 i‡(
›töd
 < 
¨gc
)

1236 
	`¥ötf
 ("non-option ARGV-elements: ");

1237 
›töd
 < 
¨gc
)

1238 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

1239 
	`¥ötf
 ("\n");

1242 
	`exô
 (0);

1243 
	}
}

	@lib/getopt.in.h

19 #i‚de‡
_
@
GUARD_PREFIX
@
_GETOPT_H


21 #i‡
__GNUC__
 >= 3

22 @
	gPRAGMA_SYSTEM_HEADER
@

24 @
	gPRAGMA_COLUMNS
@

29 #i‡@
HAVE_GETOPT_H
@

30 
	#_GL_SYSTEM_GETOPT


	)

31 #@
INCLUDE_NEXT
@ @
NEXT_GETOPT_H
@

32 #unde‡
_GL_SYSTEM_GETOPT


35 #i‚de‡
_
@
GUARD_PREFIX
@
_GETOPT_H


37 #i‚de‡
__√ed_gë›t


38 
	#_
@
GUARD_PREFIX
@
_GETOPT_H
 1

	)

50 #i‡
deföed
 
__GETOPT_PREFIX
 && !deföed 
__√ed_gë›t


51 #i‡!@
HAVE_GETOPT_H
@

52 
	~<°dlib.h
>

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

56 #unde‡
__√ed_gë›t


57 #unde‡
gë›t


58 #unde‡
gë›t_l⁄g


59 #unde‡
gë›t_l⁄g_⁄ly


60 #unde‡
›èrg


61 #unde‡
›ãº


62 #unde‡
›töd


63 #unde‡
›t›t


64 #unde‡
›ti⁄


65 
	#__GETOPT_CONCAT
(
x
, 
y
Ëx ## 
	)
y

66 
	#__GETOPT_XCONCAT
(
x
, 
y
Ë
	`__GETOPT_CONCAT
 (x, y)

	)

67 
	#__GETOPT_ID
(
y
Ë
	`__GETOPT_XCONCAT
 (
__GETOPT_PREFIX
, y)

	)

68 
	#gë›t
 
	`__GETOPT_ID
 (
gë›t
)

	)

69 
	#gë›t_l⁄g
 
	`__GETOPT_ID
 (
gë›t_l⁄g
)

	)

70 
	#gë›t_l⁄g_⁄ly
 
	`__GETOPT_ID
 (
gë›t_l⁄g_⁄ly
)

	)

71 
	#›èrg
 
	`__GETOPT_ID
 (
›èrg
)

	)

72 
	#›ãº
 
	`__GETOPT_ID
 (
›ãº
)

	)

73 
	#›töd
 
	`__GETOPT_ID
 (
›töd
)

	)

74 
	#›t›t
 
	`__GETOPT_ID
 (
›t›t
)

	)

75 
	#›ti⁄
 
	`__GETOPT_ID
 (
›ti⁄
)

	)

76 
	#_gë›t_öã∫Æ
 
	`__GETOPT_ID
 (
gë›t_öã∫Æ
)

	)

95 #i‡!
deföed
 
__√ed_gë›t


96 #i‡
deföed
 
__GETOPT_PREFIX


97 
	#__gë›t_¨gv_c⁄°


	)

99 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

110 #i‡!
deföed
 
__GNU_LIBRARY__


111 
	~<˘y≥.h
>

114 #i‚de‡
__THROW


115 #i‚de‡
__GNUC_PREREQ


116 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

118 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

119 
	#__THROW
 
	`throw
 ()

	)

121 
	#__THROW


	)

127 #ifde‡
__˝lu•lus


137 *
›èrg
;

151 
›töd
;

156 
›ãº
;

160 
›t›t
;

162 #i‚de‡
__√ed_gë›t


184 #i‡!
GNULIB_deföed_°ru˘_›ti⁄


185 
	s›ti⁄


187 c⁄° *
	g«me
;

190 
	ghas_¨g
;

191 *
	gÊag
;

192 
	gvÆ
;

194 
	#GNULIB_deföed_°ru˘_›ti⁄
 1

	)

199 
	#no_¨gumít
 0

	)

200 
	#ªquúed_¨gumít
 1

	)

201 
	#›ti⁄Æ_¨gumít
 2

	)

230 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

231 
__THROW
 
_GL_ARG_NONNULL
 ((2, 3));

233 #i‚de‡
__√ed_gë›t


234 
gë›t_l⁄g
 (
___¨gc
, *
__gë›t_¨gv_c⁄°
 *
___¨gv
,

235 c⁄° *
__sh‹t›ts
,

236 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

237 
__THROW
 
_GL_ARG_NONNULL
 ((2, 3));

238 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *
__gë›t_¨gv_c⁄°
 *
___¨gv
,

239 c⁄° *
__sh‹t›ts
,

240 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

241 
__THROW
 
_GL_ARG_NONNULL
 ((2, 3));

245 #ifde‡
__˝lu•lus


250 #unde‡
__√ed_gë›t


	@lib/getopt1.c

19 #ifde‡
_LIBC


20 
	~<gë›t.h
>

22 
	~<c⁄fig.h
>

23 
	~"gë›t.h
"

25 
	~"gë›t_öt.h
"

27 
	~<°dio.h
>

31 #ifde‡
__GNU_LIBRARY__


32 
	~<°dlib.h
>

35 #i‚de‡
NULL


36 
	#NULL
 0

	)

40 
	$gë›t_l⁄g
 (
¨gc
, *
__gë›t_¨gv_c⁄°
 *
¨gv
, c⁄° *
›ti⁄s
,

41 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
, *
›t_ödex
)

43  
	`_gë›t_öã∫Æ
 (
¨gc
, (**Ë
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
,

44 
›t_ödex
, 0, 0);

45 
	}
}

48 
	$_gë›t_l⁄g_r
 (
¨gc
, **
¨gv
, c⁄° *
›ti⁄s
,

49 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
, *
›t_ödex
,

50 
_gë›t_d©a
 *
d
)

52  
	`_gë›t_öã∫Æ_r
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
,

53 0, 
d
, 0);

54 
	}
}

62 
	$gë›t_l⁄g_⁄ly
 (
¨gc
, *
__gë›t_¨gv_c⁄°
 *
¨gv
,

63 c⁄° *
›ti⁄s
,

64 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
, *
›t_ödex
)

66  
	`_gë›t_öã∫Æ
 (
¨gc
, (**Ë
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
,

67 
›t_ödex
, 1, 0);

68 
	}
}

71 
	$_gë›t_l⁄g_⁄ly_r
 (
¨gc
, **
¨gv
, c⁄° *
›ti⁄s
,

72 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
, *
›t_ödex
,

73 
_gë›t_d©a
 *
d
)

75  
	`_gë›t_öã∫Æ_r
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
,

76 1, 
d
, 0);

77 
	}
}

80 #ifde‡
TEST


82 
	~<°dio.h
>

85 
	$maö
 (
¨gc
, **
¨gv
)

87 
c
;

88 
digô_›töd
 = 0;

92 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

93 
›ti⁄_ödex
 = 0;

94 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] =

105 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "abc:d:0123456789",

106 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

107 i‡(
c
 == -1)

110 
c
)

113 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

114 i‡(
›èrg
)

115 
	`¥ötf
 (" wôhárg %s", 
›èrg
);

116 
	`¥ötf
 ("\n");

129 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

130 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

131 
digô_›töd
 = 
this_›ti⁄_›töd
;

132 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

136 
	`¥ötf
 ("optioná\n");

140 
	`¥ötf
 ("option b\n");

144 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

148 
	`¥ötf
 ("›ti⁄ d wôh vÆuê`%s'\n", 
›èrg
);

155 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

159 i‡(
›töd
 < 
¨gc
)

161 
	`¥ötf
 ("non-option ARGV-elements: ");

162 
›töd
 < 
¨gc
)

163 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

164 
	`¥ötf
 ("\n");

167 
	`exô
 (0);

168 
	}
}

	@lib/getopt_int.h

19 #i‚de‡
_GETOPT_INT_H


20 
	#_GETOPT_INT_H
 1

	)

22 
	~<gë›t.h
>

24 
_gë›t_öã∫Æ
 (
___¨gc
, **
___¨gv
,

25 c⁄° *
__sh‹t›ts
,

26 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
,

27 
__l⁄g_⁄ly
, 
__posixly_c‹ª˘
);

62 
	e__‹d


64 
	mREQUIRE_ORDER
, 
	mPERMUTE
, 
	mRETURN_IN_ORDER


68 
	s_gë›t_d©a


73 
	m›töd
;

74 
	m›ãº
;

75 
	m›t›t
;

76 *
	m›èrg
;

81 
	m__öôülized
;

89 *
	m__√xtch¨
;

92 
__‹d
 
	m__‹dîög
;

96 
	m__posixly_c‹ª˘
;

105 
	m__fú°_n⁄›t
;

106 
	m__œ°_n⁄›t
;

108 #i‡
deföed
 
_LIBC
 && deföed 
USE_NONOPTION_FLAGS


109 
	m__n⁄›ti⁄_Êags_max_Àn
;

110 
	m__n⁄›ti⁄_Êags_Àn
;

116 
	#_GETOPT_DATA_INITIALIZER
 { 1, 1 }

	)

118 
_gë›t_öã∫Æ_r
 (
___¨gc
, **
___¨gv
,

119 c⁄° *
__sh‹t›ts
,

120 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
,

121 
__l⁄g_⁄ly
, 
_gë›t_d©a
 *
__d©a
,

122 
__posixly_c‹ª˘
);

124 
_gë›t_l⁄g_r
 (
___¨gc
, **
___¨gv
,

125 c⁄° *
__sh‹t›ts
,

126 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
,

127 
_gë›t_d©a
 *
__d©a
);

129 
_gë›t_l⁄g_⁄ly_r
 (
___¨gc
, **
___¨gv
,

130 c⁄° *
__sh‹t›ts
,

131 c⁄° 
›ti⁄
 *
__l⁄g›ts
,

132 *
__l⁄göd
,

133 
_gë›t_d©a
 *
__d©a
);

	@lib/getpass.c

21 #i‚de‡
_LIBC


22 
	~<c⁄fig.h
>

25 
	~"gë∑ss.h
"

27 
	~<°dio.h
>

29 #i‡!((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& !deföed 
__CYGWIN__
)

31 
	~<°dboﬁ.h
>

33 #i‡
HAVE_DECL___FSETLOCKING
 && 
HAVE___FSETLOCKING


34 #i‡
HAVE_STDIO_EXT_H


35 
	~<°dio_ext.h
>

38 
	#__f£éockög
(
°ªam
, 
ty≥
Ë

	)

41 #i‡
HAVE_TERMIOS_H


42 
	~<ãrmios.h
>

45 #i‡
USE_UNLOCKED_IO


46 
	~"u∆ocked-io.h
"

48 #i‡!
HAVE_DECL_FFLUSH_UNLOCKED


49 #unde‡
fÊush_u∆ocked


50 
	#fÊush_u∆ocked
(
x
Ë
	`fÊush
 (x)

	)

52 #i‡!
HAVE_DECL_FLOCKFILE


53 #unde‡
Êockfûe


54 
	#Êockfûe
(
x
Ë((Ë0)

	)

56 #i‡!
HAVE_DECL_FUNLOCKFILE


57 #unde‡
fu∆ockfûe


58 
	#fu∆ockfûe
(
x
Ë((Ë0)

	)

60 #i‡!
HAVE_DECL_FPUTS_UNLOCKED


61 #unde‡
Âuts_u∆ocked


62 
	#Âuts_u∆ocked
(
°r
,
°ªam
Ë
	`Âuts
 (°r, såóm)

	)

64 #i‡!
HAVE_DECL_PUTC_UNLOCKED


65 #unde‡
putc_u∆ocked


66 
	#putc_u∆ocked
(
c
,
°ªam
Ë
	`putc
 (c, såóm)

	)

75 #i‚de‡
TCSASOFT


76 
	#TCSASOFT
 0

	)

80 
	$ˇŒ_f˛o£
 (*
¨g
)

82 i‡(
¨g
 !
NULL
)

83 
	`f˛o£
 (
¨g
);

84 
	}
}

87 
	$gë∑ss
 (c⁄° *
¥om±
)

89 
FILE
 *
ây
;

90 
FILE
 *
ö
, *
out
;

91 
ãrmios
 
s
, 
t
;

92 
boﬁ
 
ây_ch™ged
 = 
Ál£
;

93 *
buf
;

94 
size_t
 
bufsize
;

95 
ssize_t
 
ƒód
;

100 
ây
 = 
	`f›í
 ("/dev/tty", "w+");

101 i‡(
ây
 =
NULL
)

103 
ö
 = 
°dö
;

104 
out
 = 
°dîr
;

109 
	`__f£éockög
 (
ây
, 
FSETLOCKING_BYCALLER
);

111 
out
 = 
ö
 = 
ây
;

114 
	`Êockfûe
 (
out
);

117 #i‡
HAVE_TCGETATTR


118 i‡(
	`tcgë©å
 (
	`fûío
 (
ö
), &
t
) == 0)

121 
s
 = 
t
;

123 
t
.
c_lÊag
 &~(
ECHO
 | 
ISIG
);

124 
ây_ch™ged
 = (
	`tc£èâr
 (
	`fûío
 (
ö
), 
TCSAFLUSH
 | 
TCSASOFT
, &
t
) == 0);

129 
	`Âuts_u∆ocked
 (
¥om±
, 
out
);

130 
	`fÊush_u∆ocked
 (
out
);

133 
ƒód
 = 
	`gëlöe
 (&
buf
, &
bufsize
, 
ö
);

144 
	`f£eko
 (
out
, 0, 
SEEK_CUR
);

146 i‡(
buf
 !
NULL
)

148 i‡(
ƒód
 < 0)

149 
buf
[0] = '\0';

150 i‡(
buf
[
ƒód
 - 1] == '\n')

153 
buf
[
ƒód
 - 1] = '\0';

154 i‡(
ây_ch™ged
)

157 
	`putc_u∆ocked
 ('\n', 
out
);

163 #i‡
HAVE_TCSETATTR


164 i‡(
ây_ch™ged
)

165 
	`tc£èâr
 (
	`fûío
 (
ö
), 
TCSAFLUSH
 | 
TCSASOFT
, &
s
);

168 
	`fu∆ockfûe
 (
out
);

170 
	`ˇŒ_f˛o£
 (
ây
);

172  
buf
;

173 
	}
}

181 
	~<limôs.h
>

183 
	~<c⁄io.h
>

185 
	~<°rög.h
>

187 #i‚de‡
PASS_MAX


188 
	#PASS_MAX
 512

	)

192 
	$gë∑ss
 (c⁄° *
¥om±
)

194 
gë∑ssbuf
[
PASS_MAX
 + 1];

195 
size_t
 
i
 = 0;

196 
c
;

198 i‡(
¥om±
)

200 
	`Âuts
 (
¥om±
, 
°dîr
);

201 
	`fÊush
 (
°dîr
);

206 
c
 = 
	`_gëch
 ();

207 i‡(
c
 == '\r')

209 
gë∑ssbuf
[
i
] = '\0';

212 i‡(
i
 < 
PASS_MAX
)

214 
gë∑ssbuf
[
i
++] = 
c
;

217 i‡(
i
 >
PASS_MAX
)

219 
gë∑ssbuf
[
i
] = '\0';

224 i‡(
¥om±
)

226 
	`Âuts
 ("\r\n", 
°dîr
);

227 
	`fÊush
 (
°dîr
);

230  
	`°rdup
 (
gë∑ssbuf
);

231 
	}
}

	@lib/getpass.h

21 #i‚de‡
GETPASS_H


22 
	#GETPASS_H


	)

25 
	~<uni°d.h
>

27 #i‡
deföed
 
HAVE_DECL_GETPASS
 && !HAVE_DECL_GETPASS

29 *
gë∑ss
 (c⁄° *
¥om±
);

	@lib/getpeername.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
gë≥î«me


32 
	$Ωl_gë≥î«me
 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`gë≥î«me
 (
sock
, 
addr
, 
addæí
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/getsockname.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
gësock«me


32 
	$Ωl_gësock«me
 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`gësock«me
 (
sock
, 
addr
, 
addæí
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/gettext.h

21 #i‚de‡
_LIBGETTEXT_H


22 
	#_LIBGETTEXT_H
 1

	)

25 #i‡
ENABLE_NLS


28 
	~<liböé.h
>

33 #ifde‡
DEFAULT_TEXT_DOMAIN


34 #unde‡
gëãxt


35 
	#gëãxt
(
Msgid
) \

36 
	`dgëãxt
 (
DEFAULT_TEXT_DOMAIN
, 
Msgid
)

	)

37 #unde‡
ngëãxt


38 
	#ngëãxt
(
Msgid1
, 
Msgid2
, 
N
) \

39 
	`dngëãxt
 (
DEFAULT_TEXT_DOMAIN
, 
Msgid1
, 
Msgid2
, 
N
)

	)

50 #i‡
deföed
(
__sun
)

51 
	~<loˇÀ.h
>

57 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
__GNUG__
Ë&& (
__GNUC__
 >= 3)

58 
	~<c°dlib
>

59 #i‡(
__GLIBC__
 >2 && !
deföed
 
__UCLIBC__
Ë|| 
_GLIBCXX_HAVE_LIBINTL_H


60 
	~<liböé.h
>

69 #unde‡
gëãxt


70 
	#gëãxt
(
Msgid
Ë((c⁄° *Ë(Msgid))

	)

71 #unde‡
dgëãxt


72 
	#dgëãxt
(
Domaö«me
, 
Msgid
Ë((Ë(Domaö«me), 
	`gëãxt
 (Msgid))

	)

73 #unde‡
dcgëãxt


74 
	#dcgëãxt
(
Domaö«me
, 
Msgid
, 
C©eg‹y
) \

75 ((Ë(
C©eg‹y
), 
	`dgëãxt
 (
Domaö«me
, 
Msgid
))

	)

76 #unde‡
ngëãxt


77 
	#ngëãxt
(
Msgid1
, 
Msgid2
, 
N
) \

78 ((
N
) == 1 \

79 ? ((Ë(
Msgid2
), (c⁄° *Ë(
Msgid1
)) \

80 : ((Ë(
Msgid1
), (c⁄° *Ë(
Msgid2
)))

	)

81 #unde‡
dngëãxt


82 
	#dngëãxt
(
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
) \

83 ((Ë(
Domaö«me
), 
	`ngëãxt
 (
Msgid1
, 
Msgid2
, 
N
))

	)

84 #unde‡
d˙gëãxt


85 
	#d˙gëãxt
(
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
, 
C©eg‹y
) \

86 ((Ë(
C©eg‹y
), 
	`dngëãxt
 (
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
))

	)

87 #unde‡
ãxtdomaö


88 
	#ãxtdomaö
(
Domaö«me
Ë((c⁄° *Ë(Domaö«me))

	)

89 #unde‡
bödãxtdomaö


90 
	#bödãxtdomaö
(
Domaö«me
, 
Dú«me
) \

91 ((Ë(
Domaö«me
), (c⁄° *Ë(
Dú«me
))

	)

92 #unde‡
böd_ãxtdomaö_code£t


93 
	#böd_ãxtdomaö_code£t
(
Domaö«me
, 
Code£t
) \

94 ((Ë(
Domaö«me
), (c⁄° *Ë(
Code£t
))

	)

99 #ifde‡
GNULIB_deföed_£éoˇÀ


100 #unde‡
£éoˇÀ


101 
	#£éoˇÀ
 
Ωl_£éoˇÀ


	)

111 
	#gëãxt_no›
(
Såög
Ë
	)
String

114 
	#GETTEXT_CONTEXT_GLUE
 "\004"

	)

120 #ifde‡
DEFAULT_TEXT_DOMAIN


121 
	#pgëãxt
(
Msg˘xt
, 
Msgid
) \

122 
	`pgëãxt_aux
 (
DEFAULT_TEXT_DOMAIN
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

124 
	#pgëãxt
(
Msg˘xt
, 
Msgid
) \

125 
	`pgëãxt_aux
 (
NULL
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

127 
	#dpgëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
) \

128 
	`pgëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

129 
	#d˝gëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
C©eg‹y
) \

130 
	`pgëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
C©eg‹y
)

	)

131 #ifde‡
DEFAULT_TEXT_DOMAIN


132 
	#≈gëãxt
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

133 
	`≈gëãxt_aux
 (
DEFAULT_TEXT_DOMAIN
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

135 
	#≈gëãxt
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

136 
	`≈gëãxt_aux
 (
NULL
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

138 
	#d≈gëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

139 
	`≈gëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

140 
	#d˙pgëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
C©eg‹y
) \

141 
	`≈gëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
C©eg‹y
)

	)

143 #ifde‡
__GNUC__


144 
	g__ölöe


146 #ifde‡
__˝lu•lus


147 
	gölöe


151 
	$pgëãxt_aux
 (c⁄° *
domaö
,

152 c⁄° *
msg_˘xt_id
, c⁄° *
msgid
,

153 
ˇãg‹y
)

155 c⁄° *
å™¶©i⁄
 = 
	`dcgëãxt
 (
domaö
, 
msg_˘xt_id
, 
ˇãg‹y
);

156 i‡(
å™¶©i⁄
 =
msg_˘xt_id
)

157  
msgid
;

159  
å™¶©i⁄
;

160 
	}
}

162 #ifde‡
__GNUC__


163 
	g__ölöe


165 #ifde‡
__˝lu•lus


166 
	gölöe


170 
	$≈gëãxt_aux
 (c⁄° *
domaö
,

171 c⁄° *
msg_˘xt_id
, c⁄° *
msgid
,

172 c⁄° *
msgid_∂uøl
, 
n
,

173 
ˇãg‹y
)

175 c⁄° *
å™¶©i⁄
 =

176 
	`d˙gëãxt
 (
domaö
, 
msg_˘xt_id
, 
msgid_∂uøl
, 
n
, 
ˇãg‹y
);

177 i‡(
å™¶©i⁄
 =
msg_˘xt_id
 ||Åøn¶©i⁄ =
msgid_∂uøl
)

178  (
n
 =1 ? 
msgid
 : 
msgid_∂uøl
);

180  
å™¶©i⁄
;

181 
	}
}

187 
	~<°rög.h
>

189 
	#_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS
 \

190 (((
__GNUC__
 >3 || 
__GNUG__
 >2Ë&& !
__STRICT_ANSI__
) \

191  )

	)

193 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


194 
	~<°dlib.h
>

197 
	#pgëãxt_ex¥
(
Msg˘xt
, 
Msgid
) \

198 
	`d˝gëãxt_ex¥
 (
NULL
, 
Msg˘xt
, 
Msgid
, 
LC_MESSAGES
)

	)

199 
	#dpgëãxt_ex¥
(
Domaö«me
, 
Msg˘xt
, 
Msgid
) \

200 
	`d˝gëãxt_ex¥
 (
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
LC_MESSAGES
)

	)

202 #ifde‡
__GNUC__


203 
	g__ölöe


205 #ifde‡
__˝lu•lus


206 
	gölöe


210 
	$d˝gëãxt_ex¥
 (c⁄° *
domaö
,

211 c⁄° *
msg˘xt
, c⁄° *
msgid
,

212 
ˇãg‹y
)

214 
size_t
 
msg˘xt_Àn
 = 
	`°æí
 (
msg˘xt
) + 1;

215 
size_t
 
msgid_Àn
 = 
	`°æí
 (
msgid
) + 1;

216 c⁄° *
å™¶©i⁄
;

217 #i‡
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


218 
msg_˘xt_id
[
msg˘xt_Àn
 + 
msgid_Àn
];

220 
buf
[1024];

221 *
msg_˘xt_id
 =

222 (
msg˘xt_Àn
 + 
msgid_Àn
 < (
buf
)

223 ? 
buf


224 : (*Ë
	`mÆloc
 (
msg˘xt_Àn
 + 
msgid_Àn
));

225 i‡(
msg_˘xt_id
 !
NULL
)

228 
	`mem˝y
 (
msg_˘xt_id
, 
msg˘xt
, 
msg˘xt_Àn
 - 1);

229 
msg_˘xt_id
[
msg˘xt_Àn
 - 1] = '\004';

230 
	`mem˝y
 (
msg_˘xt_id
 + 
msg˘xt_Àn
, 
msgid
, 
msgid_Àn
);

231 
å™¶©i⁄
 = 
	`dcgëãxt
 (
domaö
, 
msg_˘xt_id
, 
ˇãg‹y
);

232 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


233 i‡(
msg_˘xt_id
 !
buf
)

234 
	`‰ì
 (
msg_˘xt_id
);

236 i‡(
å™¶©i⁄
 !
msg_˘xt_id
)

237  
å™¶©i⁄
;

239  
msgid
;

240 
	}
}

242 
	#≈gëãxt_ex¥
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

243 
	`d˙pgëãxt_ex¥
 (
NULL
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

244 
	#d≈gëãxt_ex¥
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

245 
	`d˙pgëãxt_ex¥
 (
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

247 #ifde‡
__GNUC__


248 
	g__ölöe


250 #ifde‡
__˝lu•lus


251 
	gölöe


255 
	$d˙pgëãxt_ex¥
 (c⁄° *
domaö
,

256 c⁄° *
msg˘xt
, c⁄° *
msgid
,

257 c⁄° *
msgid_∂uøl
, 
n
,

258 
ˇãg‹y
)

260 
size_t
 
msg˘xt_Àn
 = 
	`°æí
 (
msg˘xt
) + 1;

261 
size_t
 
msgid_Àn
 = 
	`°æí
 (
msgid
) + 1;

262 c⁄° *
å™¶©i⁄
;

263 #i‡
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


264 
msg_˘xt_id
[
msg˘xt_Àn
 + 
msgid_Àn
];

266 
buf
[1024];

267 *
msg_˘xt_id
 =

268 (
msg˘xt_Àn
 + 
msgid_Àn
 < (
buf
)

269 ? 
buf


270 : (*Ë
	`mÆloc
 (
msg˘xt_Àn
 + 
msgid_Àn
));

271 i‡(
msg_˘xt_id
 !
NULL
)

274 
	`mem˝y
 (
msg_˘xt_id
, 
msg˘xt
, 
msg˘xt_Àn
 - 1);

275 
msg_˘xt_id
[
msg˘xt_Àn
 - 1] = '\004';

276 
	`mem˝y
 (
msg_˘xt_id
 + 
msg˘xt_Àn
, 
msgid
, 
msgid_Àn
);

277 
å™¶©i⁄
 = 
	`d˙gëãxt
 (
domaö
, 
msg_˘xt_id
, 
msgid_∂uøl
, 
n
, 
ˇãg‹y
);

278 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


279 i‡(
msg_˘xt_id
 !
buf
)

280 
	`‰ì
 (
msg_˘xt_id
);

282 i‡(!(
å™¶©i⁄
 =
msg_˘xt_id
 ||Åøn¶©i⁄ =
msgid_∂uøl
))

283  
å™¶©i⁄
;

285  (
n
 =1 ? 
msgid
 : 
msgid_∂uøl
);

286 
	}
}

	@lib/gettime.c

20 
	~<c⁄fig.h
>

22 
	~"time•ec.h
"

24 
	~<sys/time.h
>

29 
	$gëtime
 (
time•ec
 *
ts
)

31 #i‡
HAVE_NANOTIME


32 
	`«nŸime
 (
ts
);

35 #i‡
deföed
 
CLOCK_REALTIME
 && 
HAVE_CLOCK_GETTIME


36 i‡(
	`˛ock_gëtime
 (
CLOCK_REALTIME
, 
ts
) == 0)

41 
timevÆ
 
tv
;

42 
	`gëtimeofday
 (&
tv
, 
NULL
);

43 
ts
->
tv_£c
 = 
tv
.tv_sec;

44 
ts
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

48 
	}
}

	@lib/gettimeofday.c

23 
	~<c⁄fig.h
>

26 
	~<sys/time.h
>

28 
	~<time.h
>

30 #i‡
HAVE_SYS_TIMEB_H


31 
	~<sys/timeb.h
>

34 #i‡
GETTIMEOFDAY_CLOBBERS_LOCALTIME
 || 
TZSET_CLOBBERS_LOCALTIME


42 
tm
 
	gtm_zîo_buf„r
;

43 
tm
 *
	gloˇ…ime_buf„r_addr
 = &
tm_zîo_buf„r
;

45 #unde‡
loˇ…ime


46 
tm
 *
loˇ…ime
 (
time_t
 const *);

48 #unde‡
gmtime


49 
tm
 *
gmtime
 (
time_t
 const *);

57 
tm
 *

58 
	$Ωl_loˇ…ime
 (
time_t
 c⁄° *
timï
)

60 
tm
 *tm = 
	`loˇ…ime
 (
timï
);

62 i‡(
loˇ…ime_buf„r_addr
 =&
tm_zîo_buf„r
)

63 
loˇ…ime_buf„r_addr
 = 
tm
;

65  
tm
;

66 
	}
}

69 
tm
 *

70 
	$Ωl_gmtime
 (
time_t
 c⁄° *
timï
)

72 
tm
 *tm = 
	`gmtime
 (
timï
);

74 i‡(
loˇ…ime_buf„r_addr
 =&
tm_zîo_buf„r
)

75 
loˇ…ime_buf„r_addr
 = 
tm
;

77  
tm
;

78 
	}
}

82 #i‡
TZSET_CLOBBERS_LOCALTIME


84 #unde‡
tz£t


85 
tz£t
 ();

90 
	$Ωl_tz£t
 ()

94 
tm
 
ßve
 = *
loˇ…ime_buf„r_addr
;

95 
	`tz£t
 ();

96 *
loˇ…ime_buf„r_addr
 = 
ßve
;

97 
	}
}

105 
	$gëtimeofday
 (
timevÆ
 *
ª°ri˘
 
tv
, *ª°ri˘ 
tz
)

107 #unde‡
gëtimeofday


108 #i‡
HAVE_GETTIMEOFDAY


109 #i‡
GETTIMEOFDAY_CLOBBERS_LOCALTIME


112 
tm
 
ßve
 = *
loˇ…ime_buf„r_addr
;

115 
ªsu…
 = 
	`gëtimeofday
 (
tv
, (
timez⁄e
 *Ë
tz
);

117 #i‡
GETTIMEOFDAY_CLOBBERS_LOCALTIME


118 *
loˇ…ime_buf„r_addr
 = 
ßve
;

121  
ªsu…
;

125 #i‡
HAVE__FTIME


127 
_timeb
 
timebuf
;

128 
	`_·ime
 (&
timebuf
);

129 
tv
->
tv_£c
 = 
timebuf
.
time
;

130 
tv
->
tv_u£c
 = 
timebuf
.
mûlôm
 * 1000;

134 #i‡!
deföed
 
OK_TO_USE_1S_CLOCK


138 
tv
->
tv_£c
 = 
	`time
 (
NULL
);

139 
tv
->
tv_u£c
 = 0;

146 
	}
}

	@lib/glthread/lock.c

24 
	~<c⁄fig.h
>

26 
	~"g…hªad/lock.h
"

30 #i‡
USE_POSIX_THREADS


36 #i‡
HAVE_PTHREAD_RWLOCK


38 #i‡!
deföed
 
PTHREAD_RWLOCK_INITIALIZER


41 
	$g…hªad_rwlock_öô_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

43 
îr
;

45 
îr
 = 
	`±hªad_rwlock_öô
 (&
lock
->
rwlock
, 
NULL
);

46 i‡(
îr
 != 0)

47  
îr
;

48 
lock
->
öôülized
 = 1;

50 
	}
}

53 
	$g…hªad_rwlock_rdlock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

55 i‡(!
lock
->
öôülized
)

57 
îr
;

59 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->
gu¨d
);

60 i‡(
îr
 != 0)

61  
îr
;

62 i‡(!
lock
->
öôülized
)

64 
îr
 = 
	`g…hªad_rwlock_öô_mu…ôhªaded
 (
lock
);

65 i‡(
îr
 != 0)

67 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

68  
îr
;

71 
îr
 = 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

72 i‡(
îr
 != 0)

73  
îr
;

75  
	`±hªad_rwlock_rdlock
 (&
lock
->
rwlock
);

76 
	}
}

79 
	$g…hªad_rwlock_wæock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

81 i‡(!
lock
->
öôülized
)

83 
îr
;

85 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->
gu¨d
);

86 i‡(
îr
 != 0)

87  
îr
;

88 i‡(!
lock
->
öôülized
)

90 
îr
 = 
	`g…hªad_rwlock_öô_mu…ôhªaded
 (
lock
);

91 i‡(
îr
 != 0)

93 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

94  
îr
;

97 
îr
 = 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

98 i‡(
îr
 != 0)

99  
îr
;

101  
	`±hªad_rwlock_wæock
 (&
lock
->
rwlock
);

102 
	}
}

105 
	$g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

107 i‡(!
lock
->
öôülized
)

108  
EINVAL
;

109  
	`±hªad_rwlock_u∆ock
 (&
lock
->
rwlock
);

110 
	}
}

113 
	$g…hªad_rwlock_de°roy_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

115 
îr
;

117 i‡(!
lock
->
öôülized
)

118  
EINVAL
;

119 
îr
 = 
	`±hªad_rwlock_de°roy
 (&
lock
->
rwlock
);

120 i‡(
îr
 != 0)

121  
îr
;

122 
lock
->
öôülized
 = 0;

124 
	}
}

131 
	$g…hªad_rwlock_öô_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

133 
îr
;

135 
îr
 = 
	`±hªad_muãx_öô
 (&
lock
->lock, 
NULL
);

136 i‡(
îr
 != 0)

137  
îr
;

138 
îr
 = 
	`±hªad_c⁄d_öô
 (&
lock
->
waôög_ªadîs
, 
NULL
);

139 i‡(
îr
 != 0)

140  
îr
;

141 
îr
 = 
	`±hªad_c⁄d_öô
 (&
lock
->
waôög_wrôîs
, 
NULL
);

142 i‡(
îr
 != 0)

143  
îr
;

144 
lock
->
waôög_wrôîs_cou¡
 = 0;

145 
lock
->
runcou¡
 = 0;

147 
	}
}

150 
	$g…hªad_rwlock_rdlock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

152 
îr
;

154 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->lock);

155 i‡(
îr
 != 0)

156  
îr
;

163 !(
lock
->
runcou¡
 + 1 > 0 &&Üock->
waôög_wrôîs_cou¡
 == 0))

167 
îr
 = 
	`±hªad_c⁄d_waô
 (&
lock
->
waôög_ªadîs
, &lock->lock);

168 i‡(
îr
 != 0)

170 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

171  
îr
;

174 
lock
->
runcou¡
++;

175  
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

176 
	}
}

179 
	$g…hªad_rwlock_wæock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

181 
îr
;

183 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->lock);

184 i‡(
îr
 != 0)

185  
îr
;

187 !(
lock
->
runcou¡
 == 0))

191 
lock
->
waôög_wrôîs_cou¡
++;

192 
îr
 = 
	`±hªad_c⁄d_waô
 (&
lock
->
waôög_wrôîs
, &lock->lock);

193 i‡(
îr
 != 0)

195 
lock
->
waôög_wrôîs_cou¡
--;

196 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

197  
îr
;

199 
lock
->
waôög_wrôîs_cou¡
--;

201 
lock
->
runcou¡
--;

202  
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

203 
	}
}

206 
	$g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

208 
îr
;

210 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->lock);

211 i‡(
îr
 != 0)

212  
îr
;

213 i‡(
lock
->
runcou¡
 < 0)

216 i‡(!(
lock
->
runcou¡
 == -1))

218 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

219  
EINVAL
;

221 
lock
->
runcou¡
 = 0;

226 i‡(!(
lock
->
runcou¡
 > 0))

228 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

229  
EINVAL
;

231 
lock
->
runcou¡
--;

233 i‡(
lock
->
runcou¡
 == 0)

237 i‡(
lock
->
waôög_wrôîs_cou¡
 > 0)

240 
îr
 = 
	`±hªad_c⁄d_sig«l
 (&
lock
->
waôög_wrôîs
);

241 i‡(
îr
 != 0)

243 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

244  
îr
;

250 
îr
 = 
	`±hªad_c⁄d_brﬂdˇ°
 (&
lock
->
waôög_ªadîs
);

251 i‡(
îr
 != 0)

253 
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

254  
îr
;

258  
	`±hªad_muãx_u∆ock
 (&
lock
->lock);

259 
	}
}

262 
	$g…hªad_rwlock_de°roy_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
)

264 
îr
;

266 
îr
 = 
	`±hªad_muãx_de°roy
 (&
lock
->lock);

267 i‡(
îr
 != 0)

268  
îr
;

269 
îr
 = 
	`±hªad_c⁄d_de°roy
 (&
lock
->
waôög_ªadîs
);

270 i‡(
îr
 != 0)

271  
îr
;

272 
îr
 = 
	`±hªad_c⁄d_de°roy
 (&
lock
->
waôög_wrôîs
);

273 i‡(
îr
 != 0)

274  
îr
;

276 
	}
}

282 #i‡
HAVE_PTHREAD_MUTEX_RECURSIVE


284 #i‡
deföed
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER
 || deföed 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


287 
	$g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

289 
±hªad_muãx©å_t
 
©åibuãs
;

290 
îr
;

292 
îr
 = 
	`±hªad_muãx©å_öô
 (&
©åibuãs
);

293 i‡(
îr
 != 0)

294  
îr
;

295 
îr
 = 
	`±hªad_muãx©å_£ây≥
 (&
©åibuãs
, 
PTHREAD_MUTEX_RECURSIVE
);

296 i‡(
îr
 != 0)

298 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

299  
îr
;

301 
îr
 = 
	`±hªad_muãx_öô
 (
lock
, &
©åibuãs
);

302 i‡(
îr
 != 0)

304 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

305  
îr
;

307 
îr
 = 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

308 i‡(
îr
 != 0)

309  
îr
;

311 
	}
}

316 
	$g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

318 
±hªad_muãx©å_t
 
©åibuãs
;

319 
îr
;

321 
îr
 = 
	`±hªad_muãx©å_öô
 (&
©åibuãs
);

322 i‡(
îr
 != 0)

323  
îr
;

324 
îr
 = 
	`±hªad_muãx©å_£ây≥
 (&
©åibuãs
, 
PTHREAD_MUTEX_RECURSIVE
);

325 i‡(
îr
 != 0)

327 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

328  
îr
;

330 
îr
 = 
	`±hªad_muãx_öô
 (&
lock
->
ªcmuãx
, &
©åibuãs
);

331 i‡(
îr
 != 0)

333 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

334  
îr
;

336 
îr
 = 
	`±hªad_muãx©å_de°roy
 (&
©åibuãs
);

337 i‡(
îr
 != 0)

338  
îr
;

339 
lock
->
öôülized
 = 1;

341 
	}
}

344 
	$g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

346 i‡(!
lock
->
öôülized
)

348 
îr
;

350 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->
gu¨d
);

351 i‡(
îr
 != 0)

352  
îr
;

353 i‡(!
lock
->
öôülized
)

355 
îr
 = 
	`g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
lock
);

356 i‡(
îr
 != 0)

358 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

359  
îr
;

362 
îr
 = 
	`±hªad_muãx_u∆ock
 (&
lock
->
gu¨d
);

363 i‡(
îr
 != 0)

364  
îr
;

366  
	`±hªad_muãx_lock
 (&
lock
->
ªcmuãx
);

367 
	}
}

370 
	$g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

372 i‡(!
lock
->
öôülized
)

373  
EINVAL
;

374  
	`±hªad_muãx_u∆ock
 (&
lock
->
ªcmuãx
);

375 
	}
}

378 
	$g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

380 
îr
;

382 i‡(!
lock
->
öôülized
)

383  
EINVAL
;

384 
îr
 = 
	`±hªad_muãx_de°roy
 (&
lock
->
ªcmuãx
);

385 i‡(
îr
 != 0)

386  
îr
;

387 
lock
->
öôülized
 = 0;

389 
	}
}

396 
	$g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

398 
îr
;

400 
îr
 = 
	`±hªad_muãx_öô
 (&
lock
->
muãx
, 
NULL
);

401 i‡(
îr
 != 0)

402  
îr
;

403 
lock
->
ow√r
 = (
±hªad_t
) 0;

404 
lock
->
dïth
 = 0;

406 
	}
}

409 
	$g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

411 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
 ();

412 i‡(
lock
->
ow√r
 !
£lf
)

414 
îr
;

416 
îr
 = 
	`±hªad_muãx_lock
 (&
lock
->
muãx
);

417 i‡(
îr
 != 0)

418  
îr
;

419 
lock
->
ow√r
 = 
£lf
;

421 i‡(++(
lock
->
dïth
) == 0)

423 
lock
->
dïth
--;

424  
EAGAIN
;

427 
	}
}

430 
	$g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

432 i‡(
lock
->
ow√r
 !
	`±hªad_£lf
 ())

433  
EPERM
;

434 i‡(
lock
->
dïth
 == 0)

435  
EINVAL
;

436 i‡(--(
lock
->
dïth
) == 0)

438 
lock
->
ow√r
 = (
±hªad_t
) 0;

439  
	`±hªad_muãx_u∆ock
 (&
lock
->
muãx
);

443 
	}
}

446 
	$g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

448 i‡(
lock
->
ow√r
 !(
±hªad_t
) 0)

449  
EBUSY
;

450  
	`±hªad_muãx_de°roy
 (&
lock
->
muãx
);

451 
	}
}

457 c⁄° 
±hªad_⁄˚_t
 
	g‰esh_⁄˚
 = 
PTHREAD_ONCE_INIT
;

460 
	$g…hªad_⁄˚_sögÀthªaded
 (
±hªad_⁄˚_t
 *
⁄˚_c⁄åﬁ
)

464 *
fú°byã
 = (*)
⁄˚_c⁄åﬁ
;

465 i‡(*
fú°byã
 =*(c⁄° *)&
‰esh_⁄˚
)

468 *
fú°byã
 = ~ *(c⁄° *)&
‰esh_⁄˚
;

473 
	}
}

479 #i‡
USE_PTH_THREADS


492 
	$g…hªad_⁄˚_ˇŒ
 (*
¨g
)

494 (**
gl_⁄˚_ãmp_addr
Ë(Ë((**Ë()Ë
¨g
;

495 (*
öôfun˘i⁄
Ë(Ë*
gl_⁄˚_ãmp_addr
;

496 
	`öôfun˘i⁄
 ();

497 
	}
}

500 
g…hªad_⁄˚_mu…ôhªaded
 (
±h_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ())

502 (*
ãmp
Ë(Ë
öôfun˘i⁄
;

503  (!
	`±h_⁄˚
 (
⁄˚_c⁄åﬁ
, 
g…hªad_⁄˚_ˇŒ
, &
ãmp
Ë? 
î∫o
 : 0);

504 
	}
}

507 
	$g…hªad_⁄˚_sögÀthªaded
 (
±h_⁄˚_t
 *
⁄˚_c⁄åﬁ
)

510 i‡(*
⁄˚_c⁄åﬁ
 =
PTH_ONCE_INIT
)

513 *
⁄˚_c⁄åﬁ
 = ~ 
PTH_ONCE_INIT
;

518 
	}
}

524 #i‡
USE_SOLARIS_THREADS


535 
	$g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

537 
îr
;

539 
îr
 = 
	`muãx_öô
 (&
lock
->
muãx
, 
USYNC_THREAD
, 
NULL
);

540 i‡(
îr
 != 0)

541  
îr
;

542 
lock
->
ow√r
 = (
thªad_t
) 0;

543 
lock
->
dïth
 = 0;

545 
	}
}

548 
	$g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

550 
thªad_t
 
£lf
 = 
	`thr_£lf
 ();

551 i‡(
lock
->
ow√r
 !
£lf
)

553 
îr
;

555 
îr
 = 
	`muãx_lock
 (&
lock
->
muãx
);

556 i‡(
îr
 != 0)

557  
îr
;

558 
lock
->
ow√r
 = 
£lf
;

560 i‡(++(
lock
->
dïth
) == 0)

562 
lock
->
dïth
--;

563  
EAGAIN
;

566 
	}
}

569 
	$g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

571 i‡(
lock
->
ow√r
 !
	`thr_£lf
 ())

572  
EPERM
;

573 i‡(
lock
->
dïth
 == 0)

574  
EINVAL
;

575 i‡(--(
lock
->
dïth
) == 0)

577 
lock
->
ow√r
 = (
thªad_t
) 0;

578  
	`muãx_u∆ock
 (&
lock
->
muãx
);

582 
	}
}

585 
	$g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
)

587 i‡(
lock
->
ow√r
 !(
thªad_t
) 0)

588  
EBUSY
;

589  
	`muãx_de°roy
 (&
lock
->
muãx
);

590 
	}
}

595 
g…hªad_⁄˚_mu…ôhªaded
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ())

597 i‡(!
⁄˚_c⁄åﬁ
->
öôed
)

599 
îr
;

603 
îr
 = 
	`muãx_lock
 (&
⁄˚_c⁄åﬁ
->
muãx
);

604 i‡(
îr
 != 0)

605  
îr
;

606 i‡(!
⁄˚_c⁄åﬁ
->
öôed
)

608 
⁄˚_c⁄åﬁ
->
öôed
 = 1;

609 
	`öôfun˘i⁄
 ();

611  
	`muãx_u∆ock
 (&
⁄˚_c⁄åﬁ
->
muãx
);

615 
	}
}

618 
	$g…hªad_⁄˚_sögÀthªaded
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
)

621 i‡(!
⁄˚_c⁄åﬁ
->
öôed
)

624 
⁄˚_c⁄åﬁ
->
öôed
 = ~ 0;

629 
	}
}

635 #i‡
USE_WIN32_THREADS


640 
	$g…hªad_lock_öô_func
 (
gl_lock_t
 *
lock
)

642 
	`InôülizeCrôiˇlSe˘i⁄
 (&
lock
->lock);

643 
lock
->
gu¨d
.
d⁄e
 = 1;

644 
	}
}

647 
	$g…hªad_lock_lock_func
 (
gl_lock_t
 *
lock
)

649 i‡(!
lock
->
gu¨d
.
d⁄e
)

651 i‡(
	`I¡îlockedIn¸emít
 (&
lock
->
gu¨d
.
°¨ãd
) == 0)

653 
	`g…hªad_lock_öô
 (
lock
);

657 !
lock
->
gu¨d
.
d⁄e
)

658 
	`SÀï
 (0);

660 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

662 
	}
}

665 
	$g…hªad_lock_u∆ock_func
 (
gl_lock_t
 *
lock
)

667 i‡(!
lock
->
gu¨d
.
d⁄e
)

668  
EINVAL
;

669 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

671 
	}
}

674 
	$g…hªad_lock_de°roy_func
 (
gl_lock_t
 *
lock
)

676 i‡(!
lock
->
gu¨d
.
d⁄e
)

677  
EINVAL
;

678 
	`DñëeCrôiˇlSe˘i⁄
 (&
lock
->lock);

679 
lock
->
gu¨d
.
d⁄e
 = 0;

681 
	}
}

686 
	#gl_waôqueue_t
 
gl_ˇºay_waôqueue_t


	)

688 
ölöe
 

689 
	$gl_waôqueue_öô
 (
gl_waôqueue_t
 *
wq
)

691 
wq
->
¨øy
 = 
NULL
;

692 
wq
->
cou¡
 = 0;

693 
wq
->
Æloc
 = 0;

694 
wq
->
off£t
 = 0;

695 
	}
}

699 
HANDLE


700 
	$gl_waôqueue_add
 (
gl_waôqueue_t
 *
wq
)

702 
HANDLE
 
evít
;

703 
ödex
;

705 i‡(
wq
->
cou¡
 =wq->
Æloc
)

707 
√w_Æloc
 = 2 * 
wq
->
Æloc
 + 1;

708 
HANDLE
 *
√w_¨øy
 =

709 (
HANDLE
 *Ë
	`ªÆloc
 (
wq
->
¨øy
, 
√w_Æloc
 *  (HANDLE));

710 i‡(
√w_¨øy
 =
NULL
)

712  
INVALID_HANDLE_VALUE
;

715 i‡(
wq
->
off£t
 > 0)

717 
ﬁd_cou¡
 = 
wq
->
cou¡
;

718 
ﬁd_Æloc
 = 
wq
->
Æloc
;

719 
ﬁd_off£t
 = 
wq
->
off£t
;

720 
i
;

721 i‡(
ﬁd_off£t
 + 
ﬁd_cou¡
 > 
ﬁd_Æloc
)

723 
limô
 = 
ﬁd_off£t
 + 
ﬁd_cou¡
 - 
ﬁd_Æloc
;

724 
i
 = 0; i < 
limô
; i++)

725 
√w_¨øy
[
ﬁd_Æloc
 + 
i
] =Çew_array[i];

727 
i
 = 0; i < 
ﬁd_cou¡
; i++)

728 
√w_¨øy
[
i
] =Çew_¨øy[
ﬁd_off£t
 + i];

729 
wq
->
off£t
 = 0;

731 
wq
->
¨øy
 = 
√w_¨øy
;

732 
wq
->
Æloc
 = 
√w_Æloc
;

736 
evít
 = 
	`Cª©eEvít
 (
NULL
, 
TRUE
, 
FALSE
, NULL);

737 i‡(
evít
 =
INVALID_HANDLE_VALUE
)

739  
INVALID_HANDLE_VALUE
;

740 
ödex
 = 
wq
->
off£t
 + wq->
cou¡
;

741 i‡(
ödex
 >
wq
->
Æloc
)

742 
ödex
 -
wq
->
Æloc
;

743 
wq
->
¨øy
[
ödex
] = 
evít
;

744 
wq
->
cou¡
++;

745  
evít
;

746 
	}
}

749 
ölöe
 

750 
	$gl_waôqueue_nŸify_fú°
 (
gl_waôqueue_t
 *
wq
)

752 
	`SëEvít
 (
wq
->
¨øy
[wq->
off£t
 + 0]);

753 
wq
->
off£t
++;

754 
wq
->
cou¡
--;

755 i‡(
wq
->
cou¡
 =0 || wq->
off£t
 =wq->
Æloc
)

756 
wq
->
off£t
 = 0;

757 
	}
}

760 
ölöe
 

761 
	$gl_waôqueue_nŸify_Æl
 (
gl_waôqueue_t
 *
wq
)

763 
i
;

765 
i
 = 0; i < 
wq
->
cou¡
; i++)

767 
ödex
 = 
wq
->
off£t
 + 
i
;

768 i‡(
ödex
 >
wq
->
Æloc
)

769 
ödex
 -
wq
->
Æloc
;

770 
	`SëEvít
 (
wq
->
¨øy
[
ödex
]);

772 
wq
->
cou¡
 = 0;

773 
wq
->
off£t
 = 0;

774 
	}
}

777 
	$g…hªad_rwlock_öô_func
 (
gl_rwlock_t
 *
lock
)

779 
	`InôülizeCrôiˇlSe˘i⁄
 (&
lock
->lock);

780 
	`gl_waôqueue_öô
 (&
lock
->
waôög_ªadîs
);

781 
	`gl_waôqueue_öô
 (&
lock
->
waôög_wrôîs
);

782 
lock
->
runcou¡
 = 0;

783 
lock
->
gu¨d
.
d⁄e
 = 1;

784 
	}
}

787 
	$g…hªad_rwlock_rdlock_func
 (
gl_rwlock_t
 *
lock
)

789 i‡(!
lock
->
gu¨d
.
d⁄e
)

791 i‡(
	`I¡îlockedIn¸emít
 (&
lock
->
gu¨d
.
°¨ãd
) == 0)

793 
	`g…hªad_rwlock_öô
 (
lock
);

797 !
lock
->
gu¨d
.
d⁄e
)

798 
	`SÀï
 (0);

800 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

803 i‡(!(
lock
->
runcou¡
 + 1 > 0))

807 
HANDLE
 
evít
 = 
	`gl_waôqueue_add
 (&
lock
->
waôög_ªadîs
);

808 i‡(
evít
 !
INVALID_HANDLE_VALUE
)

810 
DWORD
 
ªsu…
;

811 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

813 
ªsu…
 = 
	`WaôF‹SögÀObje˘
 (
evít
, 
INFINITE
);

814 i‡(
ªsu…
 =
WAIT_FAILED
 ||Ñesu… =
WAIT_TIMEOUT
)

815 
	`ab‹t
 ();

816 
	`Clo£H™dÀ
 (
evít
);

819 i‡(!(
lock
->
runcou¡
 > 0))

820 
	`ab‹t
 ();

828 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

829 
	`SÀï
 (1);

830 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

832 !(
lock
->
runcou¡
 + 1 > 0));

835 
lock
->
runcou¡
++;

836 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

838 
	}
}

841 
	$g…hªad_rwlock_wæock_func
 (
gl_rwlock_t
 *
lock
)

843 i‡(!
lock
->
gu¨d
.
d⁄e
)

845 i‡(
	`I¡îlockedIn¸emít
 (&
lock
->
gu¨d
.
°¨ãd
) == 0)

847 
	`g…hªad_rwlock_öô
 (
lock
);

851 !
lock
->
gu¨d
.
d⁄e
)

852 
	`SÀï
 (0);

854 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

856 i‡(!(
lock
->
runcou¡
 == 0))

860 
HANDLE
 
evít
 = 
	`gl_waôqueue_add
 (&
lock
->
waôög_wrôîs
);

861 i‡(
evít
 !
INVALID_HANDLE_VALUE
)

863 
DWORD
 
ªsu…
;

864 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

866 
ªsu…
 = 
	`WaôF‹SögÀObje˘
 (
evít
, 
INFINITE
);

867 i‡(
ªsu…
 =
WAIT_FAILED
 ||Ñesu… =
WAIT_TIMEOUT
)

868 
	`ab‹t
 ();

869 
	`Clo£H™dÀ
 (
evít
);

872 i‡(!(
lock
->
runcou¡
 == -1))

873 
	`ab‹t
 ();

881 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

882 
	`SÀï
 (1);

883 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

885 !(
lock
->
runcou¡
 == 0));

888 
lock
->
runcou¡
--;

889 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

891 
	}
}

894 
	$g…hªad_rwlock_u∆ock_func
 (
gl_rwlock_t
 *
lock
)

896 i‡(!
lock
->
gu¨d
.
d⁄e
)

897  
EINVAL
;

898 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

899 i‡(
lock
->
runcou¡
 < 0)

902 i‡(!(
lock
->
runcou¡
 == -1))

903 
	`ab‹t
 ();

904 
lock
->
runcou¡
 = 0;

909 i‡(!(
lock
->
runcou¡
 > 0))

911 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

912  
EPERM
;

914 
lock
->
runcou¡
--;

916 i‡(
lock
->
runcou¡
 == 0)

920 i‡(
lock
->
waôög_wrôîs
.
cou¡
 > 0)

923 
lock
->
runcou¡
--;

924 
	`gl_waôqueue_nŸify_fú°
 (&
lock
->
waôög_wrôîs
);

929 
lock
->
runcou¡
 +lock->
waôög_ªadîs
.
cou¡
;

930 
	`gl_waôqueue_nŸify_Æl
 (&
lock
->
waôög_ªadîs
);

933 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

935 
	}
}

938 
	$g…hªad_rwlock_de°roy_func
 (
gl_rwlock_t
 *
lock
)

940 i‡(!
lock
->
gu¨d
.
d⁄e
)

941  
EINVAL
;

942 i‡(
lock
->
runcou¡
 != 0)

943  
EBUSY
;

944 
	`DñëeCrôiˇlSe˘i⁄
 (&
lock
->lock);

945 i‡(
lock
->
waôög_ªadîs
.
¨øy
 !
NULL
)

946 
	`‰ì
 (
lock
->
waôög_ªadîs
.
¨øy
);

947 i‡(
lock
->
waôög_wrôîs
.
¨øy
 !
NULL
)

948 
	`‰ì
 (
lock
->
waôög_wrôîs
.
¨øy
);

949 
lock
->
gu¨d
.
d⁄e
 = 0;

951 
	}
}

956 
	$g…hªad_ªcursive_lock_öô_func
 (
gl_ªcursive_lock_t
 *
lock
)

958 
lock
->
ow√r
 = 0;

959 
lock
->
dïth
 = 0;

960 
	`InôülizeCrôiˇlSe˘i⁄
 (&
lock
->lock);

961 
lock
->
gu¨d
.
d⁄e
 = 1;

962 
	}
}

965 
	$g…hªad_ªcursive_lock_lock_func
 (
gl_ªcursive_lock_t
 *
lock
)

967 i‡(!
lock
->
gu¨d
.
d⁄e
)

969 i‡(
	`I¡îlockedIn¸emít
 (&
lock
->
gu¨d
.
°¨ãd
) == 0)

971 
	`g…hªad_ªcursive_lock_öô
 (
lock
);

975 !
lock
->
gu¨d
.
d⁄e
)

976 
	`SÀï
 (0);

979 
DWORD
 
£lf
 = 
	`GëCuºítThªadId
 ();

980 i‡(
lock
->
ow√r
 !
£lf
)

982 
	`E¡îCrôiˇlSe˘i⁄
 (&
lock
->lock);

983 
lock
->
ow√r
 = 
£lf
;

985 i‡(++(
lock
->
dïth
) == 0)

987 
lock
->
dïth
--;

988  
EAGAIN
;

992 
	}
}

995 
	$g…hªad_ªcursive_lock_u∆ock_func
 (
gl_ªcursive_lock_t
 *
lock
)

997 i‡(
lock
->
ow√r
 !
	`GëCuºítThªadId
 ())

998  
EPERM
;

999 i‡(
lock
->
dïth
 == 0)

1000  
EINVAL
;

1001 i‡(--(
lock
->
dïth
) == 0)

1003 
lock
->
ow√r
 = 0;

1004 
	`LóveCrôiˇlSe˘i⁄
 (&
lock
->lock);

1007 
	}
}

1010 
	$g…hªad_ªcursive_lock_de°roy_func
 (
gl_ªcursive_lock_t
 *
lock
)

1012 i‡(
lock
->
ow√r
 != 0)

1013  
EBUSY
;

1014 
	`DñëeCrôiˇlSe˘i⁄
 (&
lock
->lock);

1015 
lock
->
gu¨d
.
d⁄e
 = 0;

1017 
	}
}

1022 
g…hªad_⁄˚_func
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ())

1024 i‡(
⁄˚_c⁄åﬁ
->
öôed
 <= 0)

1026 i‡(
	`I¡îlockedIn¸emít
 (&
⁄˚_c⁄åﬁ
->
°¨ãd
) == 0)

1029 
	`InôülizeCrôiˇlSe˘i⁄
 (&
⁄˚_c⁄åﬁ
->
lock
);

1030 
	`E¡îCrôiˇlSe˘i⁄
 (&
⁄˚_c⁄åﬁ
->
lock
);

1031 
⁄˚_c⁄åﬁ
->
öôed
 = 0;

1032 
	`öôfun˘i⁄
 ();

1033 
⁄˚_c⁄åﬁ
->
öôed
 = 1;

1034 
	`LóveCrôiˇlSe˘i⁄
 (&
⁄˚_c⁄åﬁ
->
lock
);

1039 
	`I¡îlockedDe¸emít
 (&
⁄˚_c⁄åﬁ
->
°¨ãd
);

1043 
⁄˚_c⁄åﬁ
->
öôed
 < 0)

1044 
	`SÀï
 (0);

1045 i‡(
⁄˚_c⁄åﬁ
->
öôed
 <= 0)

1049 
	`E¡îCrôiˇlSe˘i⁄
 (&
⁄˚_c⁄åﬁ
->
lock
);

1050 
	`LóveCrôiˇlSe˘i⁄
 (&
⁄˚_c⁄åﬁ
->
lock
);

1051 i‡(!(
⁄˚_c⁄åﬁ
->
öôed
 > 0))

1052 
	`ab‹t
 ();

1056 
	}
}

	@lib/glthread/lock.h

81 #i‚de‡
_LOCK_H


82 
	#_LOCK_H


	)

84 
	~<î∫o.h
>

85 
	~<°dlib.h
>

89 #i‡
USE_POSIX_THREADS


93 
	~<±hªad.h
>

95 #ifde‡
__˝lu•lus


99 #i‡
PTHREAD_IN_USE_DETECTION_HARD


102 
	#±hªad_ö_u£
() \

103 
	`g…hªad_ö_u£
 ()

	)

104 
g…hªad_ö_u£
 ();

108 #i‡
USE_POSIX_THREADS_WEAK


127 #¥agm®
wók
 
±hªad_muãx_öô


128 #¥agm®
wók
 
±hªad_muãx_lock


129 #¥agm®
wók
 
±hªad_muãx_u∆ock


130 #¥agm®
wók
 
±hªad_muãx_de°roy


131 #¥agm®
wók
 
±hªad_rwlock_öô


132 #¥agm®
wók
 
±hªad_rwlock_rdlock


133 #¥agm®
wók
 
±hªad_rwlock_wæock


134 #¥agm®
wók
 
±hªad_rwlock_u∆ock


135 #¥agm®
wók
 
±hªad_rwlock_de°roy


136 #¥agm®
wók
 
±hªad_⁄˚


137 #¥agm®
wók
 
±hªad_c⁄d_öô


138 #¥agm®
wók
 
±hªad_c⁄d_waô


139 #¥agm®
wók
 
±hªad_c⁄d_sig«l


140 #¥agm®
wók
 
±hªad_c⁄d_brﬂdˇ°


141 #¥agm®
wók
 
±hªad_c⁄d_de°roy


142 #¥agm®
wók
 
±hªad_muãx©å_öô


143 #¥agm®
wók
 
±hªad_muãx©å_£ây≥


144 #¥agm®
wók
 
±hªad_muãx©å_de°roy


145 #i‚de‡
±hªad_£lf


146 #¥agm®
wók
 
±hªad_£lf


149 #i‡!
PTHREAD_IN_USE_DETECTION_HARD


150 #¥agm®
wók
 
±hªad_ˇn˚l


151 
	#±hªad_ö_u£
(Ë(
±hªad_ˇn˚l
 !
NULL
)

	)

156 #i‡!
PTHREAD_IN_USE_DETECTION_HARD


157 
	#±hªad_ö_u£
(Ë1

	)

164 
±hªad_muãx_t
 
	tgl_lock_t
;

165 
	#gl_lock_deföe
(
STORAGECLASS
, 
NAME
) \

166 
STORAGECLASS
 
±hªad_muãx_t
 
NAME
;

	)

167 
	#gl_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

168 
STORAGECLASS
 
±hªad_muãx_t
 
NAME
 = 
gl_lock_öôülizî
;

	)

169 
	#gl_lock_öôülizî
 \

170 
PTHREAD_MUTEX_INITIALIZER


	)

171 
	#g…hªad_lock_öô
(
LOCK
) \

172 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_öô
 (
LOCK
, 
NULL
Ë: 0)

	)

173 
	#g…hªad_lock_lock
(
LOCK
) \

174 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_lock
 (
LOCK
Ë: 0)

	)

175 
	#g…hªad_lock_u∆ock
(
LOCK
) \

176 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_u∆ock
 (
LOCK
Ë: 0)

	)

177 
	#g…hªad_lock_de°roy
(
LOCK
) \

178 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_de°roy
 (
LOCK
Ë: 0)

	)

182 #i‡
HAVE_PTHREAD_RWLOCK


184 #ifde‡
PTHREAD_RWLOCK_INITIALIZER


186 
±hªad_rwlock_t
 
	tgl_rwlock_t
;

187 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

188 
STORAGECLASS
 
±hªad_rwlock_t
 
NAME
;

	)

189 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

190 
STORAGECLASS
 
±hªad_rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

191 
	#gl_rwlock_öôülizî
 \

192 
PTHREAD_RWLOCK_INITIALIZER


	)

193 
	#g…hªad_rwlock_öô
(
LOCK
) \

194 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_rwlock_öô
 (
LOCK
, 
NULL
Ë: 0)

	)

195 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

196 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_rwlock_rdlock
 (
LOCK
Ë: 0)

	)

197 
	#g…hªad_rwlock_wæock
(
LOCK
) \

198 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_rwlock_wæock
 (
LOCK
Ë: 0)

	)

199 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

200 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_rwlock_u∆ock
 (
LOCK
Ë: 0)

	)

201 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

202 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_rwlock_de°roy
 (
LOCK
Ë: 0)

	)

208 
	göôülized
;

209 
±hªad_muãx_t
 
	ggu¨d
;

210 
±hªad_rwlock_t
 
	grwlock
;

212 
	tgl_rwlock_t
;

213 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

214 
STORAGECLASS
 
gl_rwlock_t
 
NAME
;

	)

215 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

216 
STORAGECLASS
 
gl_rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

217 
	#gl_rwlock_öôülizî
 \

218 { 0, 
PTHREAD_MUTEX_INITIALIZER
 }

	)

219 
	#g…hªad_rwlock_öô
(
LOCK
) \

220 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

221 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

222 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_rdlock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

223 
	#g…hªad_rwlock_wæock
(
LOCK
) \

224 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_wæock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

225 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

226 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

227 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

228 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_de°roy_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

229 
g…hªad_rwlock_öô_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

230 
g…hªad_rwlock_rdlock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

231 
g…hªad_rwlock_wæock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

232 
g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

233 
g…hªad_rwlock_de°roy_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

241 
±hªad_muãx_t
 
	glock
;

242 
±hªad_c⁄d_t
 
	gwaôög_ªadîs
;

243 
±hªad_c⁄d_t
 
	gwaôög_wrôîs
;

244 
	gwaôög_wrôîs_cou¡
;

245 
	gruncou¡
;

247 
	tgl_rwlock_t
;

248 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

249 
STORAGECLASS
 
gl_rwlock_t
 
NAME
;

	)

250 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

251 
STORAGECLASS
 
gl_rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

252 
	#gl_rwlock_öôülizî
 \

253 { 
PTHREAD_MUTEX_INITIALIZER
, 
PTHREAD_COND_INITIALIZER
, PTHREAD_COND_INITIALIZER, 0, 0 }

	)

254 
	#g…hªad_rwlock_öô
(
LOCK
) \

255 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

256 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

257 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_rdlock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

258 
	#g…hªad_rwlock_wæock
(
LOCK
) \

259 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_wæock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

260 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

261 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

262 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

263 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_rwlock_de°roy_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

264 
g…hªad_rwlock_öô_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

265 
g…hªad_rwlock_rdlock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

266 
g…hªad_rwlock_wæock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

267 
g…hªad_rwlock_u∆ock_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

268 
g…hªad_rwlock_de°roy_mu…ôhªaded
 (
gl_rwlock_t
 *
lock
);

274 #i‡
HAVE_PTHREAD_MUTEX_RECURSIVE


276 #i‡
deföed
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER
 || deföed 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


278 
±hªad_muãx_t
 
	tgl_ªcursive_lock_t
;

279 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

280 
STORAGECLASS
 
±hªad_muãx_t
 
NAME
;

	)

281 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

282 
STORAGECLASS
 
±hªad_muãx_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

283 #ifde‡
PTHREAD_RECURSIVE_MUTEX_INITIALIZER


284 
	#gl_ªcursive_lock_öôülizî
 \

285 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER


	)

287 
	#gl_ªcursive_lock_öôülizî
 \

288 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


	)

290 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

291 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

292 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

293 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_lock
 (
LOCK
Ë: 0)

	)

294 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

295 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_u∆ock
 (
LOCK
Ë: 0)

	)

296 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

297 (
	`±hªad_ö_u£
 (Ë? 
	`±hªad_muãx_de°roy
 (
LOCK
Ë: 0)

	)

298 
g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

304 
±hªad_muãx_t
 
	gªcmuãx
;

305 
±hªad_muãx_t
 
	ggu¨d
;

306 
	göôülized
;

308 
	tgl_ªcursive_lock_t
;

309 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

310 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
;

	)

311 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

312 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

313 
	#gl_ªcursive_lock_öôülizî
 \

314 { 
PTHREAD_MUTEX_INITIALIZER
, PTHREAD_MUTEX_INITIALIZER, 0 }

	)

315 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

316 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

317 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

318 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

319 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

320 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

321 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

322 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

323 
g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

324 
g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

325 
g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

326 
g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

337 
±hªad_muãx_t
 
	gmuãx
;

338 
±hªad_t
 
	gow√r
;

339 
	gdïth
;

341 
	tgl_ªcursive_lock_t
;

342 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

343 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
;

	)

344 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

345 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

346 
	#gl_ªcursive_lock_öôülizî
 \

347 { 
PTHREAD_MUTEX_INITIALIZER
, (
±hªad_t
Ë0, 0 }

	)

348 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

349 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

350 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

351 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

352 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

353 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

354 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

355 (
	`±hªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

356 
g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

357 
g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

358 
g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

359 
g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

365 
±hªad_⁄˚_t
 
	tgl_⁄˚_t
;

366 
	#gl_⁄˚_deföe
(
STORAGECLASS
, 
NAME
) \

367 
STORAGECLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT
;

	)

368 
	#g…hªad_⁄˚
(
ONCE_CONTROL
, 
INITFUNCTION
) \

369 (
	`±hªad_ö_u£
 () \

370 ? 
	`±hªad_⁄˚
 (
ONCE_CONTROL
, 
INITFUNCTION
) \

371 : (
	`g…hªad_⁄˚_sögÀthªaded
 (
ONCE_CONTROL
Ë? (
	`INITFUNCTION
 (), 0Ë: 0))

	)

372 
g…hªad_⁄˚_sögÀthªaded
 (
±hªad_⁄˚_t
 *
⁄˚_c⁄åﬁ
);

374 #ifde‡
__˝lu•lus


382 #i‡
USE_PTH_THREADS


386 
	~<±h.h
>

388 #ifde‡
__˝lu•lus


392 #i‡
USE_PTH_THREADS_WEAK


396 #¥agm®
wók
 
±h_muãx_öô


397 #¥agm®
wók
 
±h_muãx_acquúe


398 #¥agm®
wók
 
±h_muãx_ªÀa£


399 #¥agm®
wók
 
±h_rwlock_öô


400 #¥agm®
wók
 
±h_rwlock_acquúe


401 #¥agm®
wók
 
±h_rwlock_ªÀa£


402 #¥agm®
wók
 
±h_⁄˚


404 #¥agm®
wók
 
±h_ˇn˚l


405 
	#±h_ö_u£
(Ë(
±h_ˇn˚l
 !
NULL
)

	)

409 
	#±h_ö_u£
(Ë1

	)

415 
±h_muãx_t
 
	tgl_lock_t
;

416 
	#gl_lock_deföe
(
STORAGECLASS
, 
NAME
) \

417 
STORAGECLASS
 
±h_muãx_t
 
NAME
;

	)

418 
	#gl_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

419 
STORAGECLASS
 
±h_muãx_t
 
NAME
 = 
gl_lock_öôülizî
;

	)

420 
	#gl_lock_öôülizî
 \

421 
PTH_MUTEX_INIT


	)

422 
	#g…hªad_lock_öô
(
LOCK
) \

423 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_öô
 (
LOCK
Ë? 
î∫o
 : 0)

	)

424 
	#g…hªad_lock_lock
(
LOCK
) \

425 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_acquúe
 (
LOCK
, 0, 
NULL
Ë? 
î∫o
 : 0)

	)

426 
	#g…hªad_lock_u∆ock
(
LOCK
) \

427 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_ªÀa£
 (
LOCK
Ë? 
î∫o
 : 0)

	)

428 
	#g…hªad_lock_de°roy
(
LOCK
) \

429 (()(
LOCK
), 0)

	)

433 
±h_rwlock_t
 
	tgl_rwlock_t
;

434 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

435 
STORAGECLASS
 
±h_rwlock_t
 
NAME
;

	)

436 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

437 
STORAGECLASS
 
±h_rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

438 
	#gl_rwlock_öôülizî
 \

439 
PTH_RWLOCK_INIT


	)

440 
	#g…hªad_rwlock_öô
(
LOCK
) \

441 (
	`±h_ö_u£
 (Ë&& !
	`±h_rwlock_öô
 (
LOCK
Ë? 
î∫o
 : 0)

	)

442 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

443 (
	`±h_ö_u£
 (Ë&& !
	`±h_rwlock_acquúe
 (
LOCK
, 
PTH_RWLOCK_RD
, 0, 
NULL
Ë? 
î∫o
 : 0)

	)

444 
	#g…hªad_rwlock_wæock
(
LOCK
) \

445 (
	`±h_ö_u£
 (Ë&& !
	`±h_rwlock_acquúe
 (
LOCK
, 
PTH_RWLOCK_RW
, 0, 
NULL
Ë? 
î∫o
 : 0)

	)

446 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

447 (
	`±h_ö_u£
 (Ë&& !
	`±h_rwlock_ªÀa£
 (
LOCK
Ë? 
î∫o
 : 0)

	)

448 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

449 (()(
LOCK
), 0)

	)

454 
±h_muãx_t
 
	tgl_ªcursive_lock_t
;

455 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

456 
STORAGECLASS
 
±h_muãx_t
 
NAME
;

	)

457 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

458 
STORAGECLASS
 
±h_muãx_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

459 
	#gl_ªcursive_lock_öôülizî
 \

460 
PTH_MUTEX_INIT


	)

461 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

462 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_öô
 (
LOCK
Ë? 
î∫o
 : 0)

	)

463 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

464 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_acquúe
 (
LOCK
, 0, 
NULL
Ë? 
î∫o
 : 0)

	)

465 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

466 (
	`±h_ö_u£
 (Ë&& !
	`±h_muãx_ªÀa£
 (
LOCK
Ë? 
î∫o
 : 0)

	)

467 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

468 (()(
LOCK
), 0)

	)

472 
±h_⁄˚_t
 
	tgl_⁄˚_t
;

473 
	#gl_⁄˚_deföe
(
STORAGECLASS
, 
NAME
) \

474 
STORAGECLASS
 
±h_⁄˚_t
 
NAME
 = 
PTH_ONCE_INIT
;

	)

475 
	#g…hªad_⁄˚
(
ONCE_CONTROL
, 
INITFUNCTION
) \

476 (
	`±h_ö_u£
 () \

477 ? 
	`g…hªad_⁄˚_mu…ôhªaded
 (
ONCE_CONTROL
, 
INITFUNCTION
) \

478 : (
	`g…hªad_⁄˚_sögÀthªaded
 (
ONCE_CONTROL
Ë? (
	`INITFUNCTION
 (), 0Ë: 0))

	)

479 
g…hªad_⁄˚_mu…ôhªaded
 (
±h_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ());

480 
g…hªad_⁄˚_sögÀthªaded
 (
±h_⁄˚_t
 *
⁄˚_c⁄åﬁ
);

482 #ifde‡
__˝lu•lus


490 #i‡
USE_SOLARIS_THREADS


494 
	~<thªad.h
>

495 
	~<synch.h
>

497 #ifde‡
__˝lu•lus


501 #i‡
USE_SOLARIS_THREADS_WEAK


505 #¥agm®
wók
 
muãx_öô


506 #¥agm®
wók
 
muãx_lock


507 #¥agm®
wók
 
muãx_u∆ock


508 #¥agm®
wók
 
muãx_de°roy


509 #¥agm®
wók
 
rwlock_öô


510 #¥agm®
wók
 
rw_rdlock


511 #¥agm®
wók
 
rw_wæock


512 #¥agm®
wók
 
rw_u∆ock


513 #¥agm®
wók
 
rwlock_de°roy


514 #¥agm®
wók
 
thr_£lf


516 #¥agm®
wók
 
thr_su•íd


517 
	#thªad_ö_u£
(Ë(
thr_su•íd
 !
NULL
)

	)

521 
	#thªad_ö_u£
(Ë1

	)

527 
muãx_t
 
	tgl_lock_t
;

528 
	#gl_lock_deföe
(
STORAGECLASS
, 
NAME
) \

529 
STORAGECLASS
 
muãx_t
 
NAME
;

	)

530 
	#gl_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

531 
STORAGECLASS
 
muãx_t
 
NAME
 = 
gl_lock_öôülizî
;

	)

532 
	#gl_lock_öôülizî
 \

533 
DEFAULTMUTEX


	)

534 
	#g…hªad_lock_öô
(
LOCK
) \

535 (
	`thªad_ö_u£
 (Ë? 
	`muãx_öô
 (
LOCK
, 
USYNC_THREAD
, 
NULL
Ë: 0)

	)

536 
	#g…hªad_lock_lock
(
LOCK
) \

537 (
	`thªad_ö_u£
 (Ë? 
	`muãx_lock
 (
LOCK
Ë: 0)

	)

538 
	#g…hªad_lock_u∆ock
(
LOCK
) \

539 (
	`thªad_ö_u£
 (Ë? 
	`muãx_u∆ock
 (
LOCK
Ë: 0)

	)

540 
	#g…hªad_lock_de°roy
(
LOCK
) \

541 (
	`thªad_ö_u£
 (Ë? 
	`muãx_de°roy
 (
LOCK
Ë: 0)

	)

545 
rwlock_t
 
	tgl_rwlock_t
;

546 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

547 
STORAGECLASS
 
rwlock_t
 
NAME
;

	)

548 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

549 
STORAGECLASS
 
rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

550 
	#gl_rwlock_öôülizî
 \

551 
DEFAULTRWLOCK


	)

552 
	#g…hªad_rwlock_öô
(
LOCK
) \

553 (
	`thªad_ö_u£
 (Ë? 
	`rwlock_öô
 (
LOCK
, 
USYNC_THREAD
, 
NULL
Ë: 0)

	)

554 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

555 (
	`thªad_ö_u£
 (Ë? 
	`rw_rdlock
 (
LOCK
Ë: 0)

	)

556 
	#g…hªad_rwlock_wæock
(
LOCK
) \

557 (
	`thªad_ö_u£
 (Ë? 
	`rw_wæock
 (
LOCK
Ë: 0)

	)

558 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

559 (
	`thªad_ö_u£
 (Ë? 
	`rw_u∆ock
 (
LOCK
Ë: 0)

	)

560 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

561 (
	`thªad_ö_u£
 (Ë? 
	`rwlock_de°roy
 (
LOCK
Ë: 0)

	)

570 
muãx_t
 
muãx
;

571 
thªad_t
 
ow√r
;

572 
dïth
;

574 
	tgl_ªcursive_lock_t
;

575 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

576 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
;

	)

577 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

578 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

579 
	#gl_ªcursive_lock_öôülizî
 \

580 { 
DEFAULTMUTEX
, (
thªad_t
Ë0, 0 }

	)

581 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

582 (
	`thªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

583 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

584 (
	`thªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

585 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

586 (
	`thªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

587 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

588 (
	`thªad_ö_u£
 (Ë? 
	`g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
LOCK
Ë: 0)

	)

589 
g…hªad_ªcursive_lock_öô_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

590 
g…hªad_ªcursive_lock_lock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

591 
g…hªad_ªcursive_lock_u∆ock_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

592 
g…hªad_ªcursive_lock_de°roy_mu…ôhªaded
 (
gl_ªcursive_lock_t
 *
lock
);

598 vﬁ©ûê
	göôed
;

599 
muãx_t
 
	gmuãx
;

601 
	tgl_⁄˚_t
;

602 
	#gl_⁄˚_deföe
(
STORAGECLASS
, 
NAME
) \

603 
STORAGECLASS
 
gl_⁄˚_t
 
NAME
 = { 0, 
DEFAULTMUTEX
 };

	)

604 
	#g…hªad_⁄˚
(
ONCE_CONTROL
, 
INITFUNCTION
) \

605 (
	`thªad_ö_u£
 () \

606 ? 
	`g…hªad_⁄˚_mu…ôhªaded
 (
ONCE_CONTROL
, 
INITFUNCTION
) \

607 : (
	`g…hªad_⁄˚_sögÀthªaded
 (
ONCE_CONTROL
Ë? (
	`INITFUNCTION
 (), 0Ë: 0))

	)

608 
g…hªad_⁄˚_mu…ôhªaded
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ());

609 
g…hªad_⁄˚_sögÀthªaded
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
);

611 #ifde‡
__˝lu•lus


619 #i‡
USE_WIN32_THREADS


621 
	~<wödows.h
>

623 #ifde‡
__˝lu•lus


638 °ru˘ { vﬁ©ûê
d⁄e
; vﬁ©ûê
°¨ãd
; } 
	tgl_•ölock_t
;

644 
gl_•ölock_t
 
gu¨d
;

645 
CRITICAL_SECTION
 
lock
;

647 
	tgl_lock_t
;

648 
	#gl_lock_deföe
(
STORAGECLASS
, 
NAME
) \

649 
STORAGECLASS
 
gl_lock_t
 
NAME
;

	)

650 
	#gl_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

651 
STORAGECLASS
 
gl_lock_t
 
NAME
 = 
gl_lock_öôülizî
;

	)

652 
	#gl_lock_öôülizî
 \

653 { { 0, -1 } }

	)

654 
	#g…hªad_lock_öô
(
LOCK
) \

655 (
	`g…hªad_lock_öô_func
 (
LOCK
), 0)

	)

656 
	#g…hªad_lock_lock
(
LOCK
) \

657 
	`g…hªad_lock_lock_func
 (
LOCK
)

	)

658 
	#g…hªad_lock_u∆ock
(
LOCK
) \

659 
	`g…hªad_lock_u∆ock_func
 (
LOCK
)

	)

660 
	#g…hªad_lock_de°roy
(
LOCK
) \

661 
	`g…hªad_lock_de°roy_func
 (
LOCK
)

	)

662 
g…hªad_lock_öô_func
 (
gl_lock_t
 *
lock
);

663 
g…hªad_lock_lock_func
 (
gl_lock_t
 *
lock
);

664 
g…hªad_lock_u∆ock_func
 (
gl_lock_t
 *
lock
);

665 
g…hªad_lock_de°roy_func
 (
gl_lock_t
 *
lock
);

675 
HANDLE
 *
	g¨øy
;

676 
	gcou¡
;

677 
	gÆloc
;

678 
	goff£t
;

680 
	tgl_ˇºay_waôqueue_t
;

683 
gl_•ölock_t
 
	ggu¨d
;

684 
CRITICAL_SECTION
 
	glock
;

685 
gl_ˇºay_waôqueue_t
 
	gwaôög_ªadîs
;

686 
gl_ˇºay_waôqueue_t
 
	gwaôög_wrôîs
;

687 
	gruncou¡
;

689 
	tgl_rwlock_t
;

690 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
) \

691 
STORAGECLASS
 
gl_rwlock_t
 
NAME
;

	)

692 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

693 
STORAGECLASS
 
gl_rwlock_t
 
NAME
 = 
gl_rwlock_öôülizî
;

	)

694 
	#gl_rwlock_öôülizî
 \

695 { { 0, -1 } }

	)

696 
	#g…hªad_rwlock_öô
(
LOCK
) \

697 (
	`g…hªad_rwlock_öô_func
 (
LOCK
), 0)

	)

698 
	#g…hªad_rwlock_rdlock
(
LOCK
) \

699 
	`g…hªad_rwlock_rdlock_func
 (
LOCK
)

	)

700 
	#g…hªad_rwlock_wæock
(
LOCK
) \

701 
	`g…hªad_rwlock_wæock_func
 (
LOCK
)

	)

702 
	#g…hªad_rwlock_u∆ock
(
LOCK
) \

703 
	`g…hªad_rwlock_u∆ock_func
 (
LOCK
)

	)

704 
	#g…hªad_rwlock_de°roy
(
LOCK
) \

705 
	`g…hªad_rwlock_de°roy_func
 (
LOCK
)

	)

706 
g…hªad_rwlock_öô_func
 (
gl_rwlock_t
 *
lock
);

707 
g…hªad_rwlock_rdlock_func
 (
gl_rwlock_t
 *
lock
);

708 
g…hªad_rwlock_wæock_func
 (
gl_rwlock_t
 *
lock
);

709 
g…hªad_rwlock_u∆ock_func
 (
gl_rwlock_t
 *
lock
);

710 
g…hªad_rwlock_de°roy_func
 (
gl_rwlock_t
 *
lock
);

720 
gl_•ölock_t
 
	ggu¨d
;

721 
DWORD
 
	gow√r
;

722 
	gdïth
;

723 
CRITICAL_SECTION
 
	glock
;

725 
	tgl_ªcursive_lock_t
;

726 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
) \

727 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
;

	)

728 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
) \

729 
STORAGECLASS
 
gl_ªcursive_lock_t
 
NAME
 = 
gl_ªcursive_lock_öôülizî
;

	)

730 
	#gl_ªcursive_lock_öôülizî
 \

731 { { 0, -1 }, 0, 0 }

	)

732 
	#g…hªad_ªcursive_lock_öô
(
LOCK
) \

733 (
	`g…hªad_ªcursive_lock_öô_func
 (
LOCK
), 0)

	)

734 
	#g…hªad_ªcursive_lock_lock
(
LOCK
) \

735 
	`g…hªad_ªcursive_lock_lock_func
 (
LOCK
)

	)

736 
	#g…hªad_ªcursive_lock_u∆ock
(
LOCK
) \

737 
	`g…hªad_ªcursive_lock_u∆ock_func
 (
LOCK
)

	)

738 
	#g…hªad_ªcursive_lock_de°roy
(
LOCK
) \

739 
	`g…hªad_ªcursive_lock_de°roy_func
 (
LOCK
)

	)

740 
g…hªad_ªcursive_lock_öô_func
 (
gl_ªcursive_lock_t
 *
lock
);

741 
g…hªad_ªcursive_lock_lock_func
 (
gl_ªcursive_lock_t
 *
lock
);

742 
g…hªad_ªcursive_lock_u∆ock_func
 (
gl_ªcursive_lock_t
 *
lock
);

743 
g…hªad_ªcursive_lock_de°roy_func
 (
gl_ªcursive_lock_t
 *
lock
);

749 vﬁ©ûê
	göôed
;

750 vﬁ©ûê
	g°¨ãd
;

751 
CRITICAL_SECTION
 
	glock
;

753 
	tgl_⁄˚_t
;

754 
	#gl_⁄˚_deföe
(
STORAGECLASS
, 
NAME
) \

755 
STORAGECLASS
 
gl_⁄˚_t
 
NAME
 = { -1, -1 };

	)

756 
	#g…hªad_⁄˚
(
ONCE_CONTROL
, 
INITFUNCTION
) \

757 (
	`g…hªad_⁄˚_func
 (
ONCE_CONTROL
, 
INITFUNCTION
), 0)

	)

758 
g…hªad_⁄˚_func
 (
gl_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öôfun˘i⁄
) ());

760 #ifde‡
__˝lu•lus


768 #i‡!(
USE_POSIX_THREADS
 || 
USE_PTH_THREADS
 || 
USE_SOLARIS_THREADS
 || 
USE_WIN32_THREADS
)

774 
	tgl_lock_t
;

775 
	#gl_lock_deföe
(
STORAGECLASS
, 
NAME
)

	)

776 
	#gl_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
)

	)

777 
	#g…hªad_lock_öô
(
NAME
Ë0

	)

778 
	#g…hªad_lock_lock
(
NAME
Ë0

	)

779 
	#g…hªad_lock_u∆ock
(
NAME
Ë0

	)

780 
	#g…hªad_lock_de°roy
(
NAME
Ë0

	)

784 
	tgl_rwlock_t
;

785 
	#gl_rwlock_deföe
(
STORAGECLASS
, 
NAME
)

	)

786 
	#gl_rwlock_deföe_öôülized
(
STORAGECLASS
, 
NAME
)

	)

787 
	#g…hªad_rwlock_öô
(
NAME
Ë0

	)

788 
	#g…hªad_rwlock_rdlock
(
NAME
Ë0

	)

789 
	#g…hªad_rwlock_wæock
(
NAME
Ë0

	)

790 
	#g…hªad_rwlock_u∆ock
(
NAME
Ë0

	)

791 
	#g…hªad_rwlock_de°roy
(
NAME
Ë0

	)

795 
	tgl_ªcursive_lock_t
;

796 
	#gl_ªcursive_lock_deföe
(
STORAGECLASS
, 
NAME
)

	)

797 
	#gl_ªcursive_lock_deföe_öôülized
(
STORAGECLASS
, 
NAME
)

	)

798 
	#g…hªad_ªcursive_lock_öô
(
NAME
Ë0

	)

799 
	#g…hªad_ªcursive_lock_lock
(
NAME
Ë0

	)

800 
	#g…hªad_ªcursive_lock_u∆ock
(
NAME
Ë0

	)

801 
	#g…hªad_ªcursive_lock_de°roy
(
NAME
Ë0

	)

805 
	tgl_⁄˚_t
;

806 
	#gl_⁄˚_deföe
(
STORAGECLASS
, 
NAME
) \

807 
STORAGECLASS
 
gl_⁄˚_t
 
NAME
 = 0;

	)

808 
	#g…hªad_⁄˚
(
ONCE_CONTROL
, 
INITFUNCTION
) \

809 (*(
ONCE_CONTROL
Ë=0 ? (*(ONCE_CONTROLË~ 0, 
	`INITFUNCTION
 (), 0Ë: 0)

	)

819 
	#gl_lock_öô
(
NAME
) \

822 i‡(
	`g…hªad_lock_öô
 (&
NAME
)) \

823 
	`ab‹t
 (); \

825 0)

	)

826 
	#gl_lock_lock
(
NAME
) \

829 i‡(
	`g…hªad_lock_lock
 (&
NAME
)) \

830 
	`ab‹t
 (); \

832 0)

	)

833 
	#gl_lock_u∆ock
(
NAME
) \

836 i‡(
	`g…hªad_lock_u∆ock
 (&
NAME
)) \

837 
	`ab‹t
 (); \

839 0)

	)

840 
	#gl_lock_de°roy
(
NAME
) \

843 i‡(
	`g…hªad_lock_de°roy
 (&
NAME
)) \

844 
	`ab‹t
 (); \

846 0)

	)

850 
	#gl_rwlock_öô
(
NAME
) \

853 i‡(
	`g…hªad_rwlock_öô
 (&
NAME
)) \

854 
	`ab‹t
 (); \

856 0)

	)

857 
	#gl_rwlock_rdlock
(
NAME
) \

860 i‡(
	`g…hªad_rwlock_rdlock
 (&
NAME
)) \

861 
	`ab‹t
 (); \

863 0)

	)

864 
	#gl_rwlock_wæock
(
NAME
) \

867 i‡(
	`g…hªad_rwlock_wæock
 (&
NAME
)) \

868 
	`ab‹t
 (); \

870 0)

	)

871 
	#gl_rwlock_u∆ock
(
NAME
) \

874 i‡(
	`g…hªad_rwlock_u∆ock
 (&
NAME
)) \

875 
	`ab‹t
 (); \

877 0)

	)

878 
	#gl_rwlock_de°roy
(
NAME
) \

881 i‡(
	`g…hªad_rwlock_de°roy
 (&
NAME
)) \

882 
	`ab‹t
 (); \

884 0)

	)

888 
	#gl_ªcursive_lock_öô
(
NAME
) \

891 i‡(
	`g…hªad_ªcursive_lock_öô
 (&
NAME
)) \

892 
	`ab‹t
 (); \

894 0)

	)

895 
	#gl_ªcursive_lock_lock
(
NAME
) \

898 i‡(
	`g…hªad_ªcursive_lock_lock
 (&
NAME
)) \

899 
	`ab‹t
 (); \

901 0)

	)

902 
	#gl_ªcursive_lock_u∆ock
(
NAME
) \

905 i‡(
	`g…hªad_ªcursive_lock_u∆ock
 (&
NAME
)) \

906 
	`ab‹t
 (); \

908 0)

	)

909 
	#gl_ªcursive_lock_de°roy
(
NAME
) \

912 i‡(
	`g…hªad_ªcursive_lock_de°roy
 (&
NAME
)) \

913 
	`ab‹t
 (); \

915 0)

	)

919 
	#gl_⁄˚
(
NAME
, 
INITFUNCTION
) \

922 i‡(
	`g…hªad_⁄˚
 (&
NAME
, 
INITFUNCTION
)) \

923 
	`ab‹t
 (); \

925 0)

	)

	@lib/glthread/threadlib.c

22 
	~<c⁄fig.h
>

26 #i‡
USE_POSIX_THREADS


30 
	~<±hªad.h
>

31 
	~<°dlib.h
>

33 #i‡
PTHREAD_IN_USE_DETECTION_HARD


37 
	$dummy_thªad_func
 (*
¨g
)

39  
¨g
;

40 
	}
}

43 
	$g…hªad_ö_u£
 ()

45 
ã°ed
;

46 
ªsu…
;

48 i‡(!
ã°ed
)

50 
±hªad_t
 
thªad
;

52 i‡(
	`±hªad_¸óã
 (&
thªad
, 
NULL
, 
dummy_thªad_func
, NULL) != 0)

54 
ªsu…
 = 0;

58 *
ªtvÆ
;

59 i‡(
	`±hªad_joö
 (
thªad
, &
ªtvÆ
) != 0)

60 
	`ab‹t
 ();

61 
ªsu…
 = 1;

63 
ã°ed
 = 1;

65  
ªsu…
;

66 
	}
}

76 
	tdummy
;

	@lib/iconv.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_ICONV_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

29 #@
INCLUDE_NEXT
@ @
NEXT_ICONV_H
@

31 #i‚de‡
_
@
GUARD_PREFIX
@
_ICONV_H


32 
	#_
@
GUARD_PREFIX
@
_ICONV_H


	)

41 #i‡@
GNULIB_ICONV
@

42 #i‡@
REPLACE_ICONV_OPEN
@

45 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

46 
	#ic⁄v_›í
 
Ωl_ic⁄v_›í


	)

48 
_GL_FUNCDECL_RPL
 (
ic⁄v_›í
, 
ic⁄v_t
,

49 (c⁄° *
tocode
, c⁄° *
‰omcode
)

50 
_GL_ARG_NONNULL
 ((1, 2)));

51 
_GL_CXXALIAS_RPL
 (
ic⁄v_›í
, 
ic⁄v_t
,

52 (c⁄° *
tocode
, c⁄° *
‰omcode
));

54 
_GL_CXXALIAS_SYS
 (
ic⁄v_›í
, 
ic⁄v_t
,

55 (c⁄° *
tocode
, c⁄° *
‰omcode
));

57 
_GL_CXXALIASWARN
 (
ic⁄v_›í
);

60 #i‡@
REPLACE_ICONV_UTF
@

63 
	#_ICONV_UTF8_UTF16BE
 (
ic⁄v_t
)(-161)

	)

64 
	#_ICONV_UTF8_UTF16LE
 (
ic⁄v_t
)(-162)

	)

65 
	#_ICONV_UTF8_UTF32BE
 (
ic⁄v_t
)(-163)

	)

66 
	#_ICONV_UTF8_UTF32LE
 (
ic⁄v_t
)(-164)

	)

67 
	#_ICONV_UTF16BE_UTF8
 (
ic⁄v_t
)(-165)

	)

68 
	#_ICONV_UTF16LE_UTF8
 (
ic⁄v_t
)(-166)

	)

69 
	#_ICONV_UTF32BE_UTF8
 (
ic⁄v_t
)(-167)

	)

70 
	#_ICONV_UTF32LE_UTF8
 (
ic⁄v_t
)(-168)

	)

73 #i‡@
GNULIB_ICONV
@

74 #i‡@
REPLACE_ICONV
@

75 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

76 
	#ic⁄v
 
Ωl_ic⁄v


	)

78 
_GL_FUNCDECL_RPL
 (
ic⁄v
, 
size_t
,

79 (
ic⁄v_t
 
cd
,

80 @
ICONV_CONST
@ **
öbuf
, 
size_t
 *
öbyã¶e·
,

81 **
outbuf
, 
size_t
 *
outbyã¶e·
));

82 
_GL_CXXALIAS_RPL
 (
ic⁄v
, 
size_t
,

83 (
ic⁄v_t
 
cd
,

84 @
ICONV_CONST
@ **
öbuf
, 
size_t
 *
öbyã¶e·
,

85 **
outbuf
, 
size_t
 *
outbyã¶e·
));

87 
_GL_CXXALIAS_SYS
 (
ic⁄v
, 
size_t
,

88 (
ic⁄v_t
 
cd
,

89 @
ICONV_CONST
@ **
öbuf
, 
size_t
 *
öbyã¶e·
,

90 **
outbuf
, 
size_t
 *
outbyã¶e·
));

92 
_GL_CXXALIASWARN
 (
ic⁄v
);

93 #i‚de‡
ICONV_CONST


94 
	#ICONV_CONST
 @
ICONV_CONST
@

	)

98 #i‡@
GNULIB_ICONV
@

99 #i‡@
REPLACE_ICONV
@

100 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

101 
	#ic⁄v_˛o£
 
Ωl_ic⁄v_˛o£


	)

103 
_GL_FUNCDECL_RPL
 (
ic⁄v_˛o£
, , (
ic⁄v_t
 
cd
));

104 
_GL_CXXALIAS_RPL
 (
ic⁄v_˛o£
, , (
ic⁄v_t
 
cd
));

106 
_GL_CXXALIAS_SYS
 (
ic⁄v_˛o£
, , (
ic⁄v_t
 
cd
));

108 
_GL_CXXALIASWARN
 (
ic⁄v_˛o£
);

	@lib/inet_ntop.c

38 
	~<c⁄fig.h
>

41 
	~<¨∑/öë.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<î∫o.h
>

47 
	#NS_IN6ADDRSZ
 16

	)

48 
	#NS_INT16SZ
 2

	)

54 
	tvîify_öt_size
[4 <=  () ? 1 : -1];

56 c⁄° *
öë_¡›4
 (c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

57 #i‡
HAVE_IPV6


58 c⁄° *
öë_¡›6
 (c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

71 
	$öë_¡›
 (
af
, c⁄° *
ª°ri˘
 
§c
,

72 *
ª°ri˘
 
d°
, 
sockÀn_t
 
˙t
)

74 
af
)

76 #i‡
HAVE_IPV4


77 
AF_INET
:

78  (
	`öë_¡›4
 (
§c
, 
d°
, 
˙t
));

81 #i‡
HAVE_IPV6


82 
AF_INET6
:

83  (
	`öë_¡›6
 (
§c
, 
d°
, 
˙t
));

87 
î∫o
 = 
EAFNOSUPPORT
;

88  (
NULL
);

91 
	}
}

105 
	$öë_¡›4
 (c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
)

107 
tmp
[ "255.255.255.255"];

108 
Àn
;

110 
Àn
 = 
	`•rötf
 (
tmp
, "%u.%u.%u.%u", 
§c
[0], src[1], src[2], src[3]);

111 i‡(
Àn
 < 0)

112  
NULL
;

114 i‡(
Àn
 > 
size
)

116 
î∫o
 = 
ENOSPC
;

117  
NULL
;

120  
	`°r˝y
 (
d°
, 
tmp
);

121 
	}
}

123 #i‡
HAVE_IPV6


132 
	$öë_¡›6
 (c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
)

141 
tmp
[ "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *
ç
;

144 
ba£
, 
Àn
;

145 } 
be°
, 
cur
;

146 
w‹ds
[
NS_IN6ADDRSZ
 / 
NS_INT16SZ
];

147 
i
;

154 
	`mem£t
 (
w‹ds
, '\0',  words);

155 
i
 = 0; i < 
NS_IN6ADDRSZ
; i += 2)

156 
w‹ds
[
i
 / 2] = (
§c
[i] << 8) | src[i + 1];

157 
be°
.
ba£
 = -1;

158 
cur
.
ba£
 = -1;

159 
i
 = 0; i < (
NS_IN6ADDRSZ
 / 
NS_INT16SZ
); i++)

161 i‡(
w‹ds
[
i
] == 0)

163 i‡(
cur
.
ba£
 == -1)

164 
cur
.
ba£
 = 
i
, cur.
Àn
 = 1;

166 
cur
.
Àn
++;

170 i‡(
cur
.
ba£
 != -1)

172 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

173 
be°
 = 
cur
;

174 
cur
.
ba£
 = -1;

178 i‡(
cur
.
ba£
 != -1)

180 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

181 
be°
 = 
cur
;

183 i‡(
be°
.
ba£
 !-1 && be°.
Àn
 < 2)

184 
be°
.
ba£
 = -1;

189 
ç
 = 
tmp
;

190 
i
 = 0; i < (
NS_IN6ADDRSZ
 / 
NS_INT16SZ
); i++)

193 i‡(
be°
.
ba£
 !-1 && 
i
 >be°.ba£ && i < (be°.ba£ + be°.
Àn
))

195 i‡(
i
 =
be°
.
ba£
)

196 *
ç
++ = ':';

200 i‡(
i
 != 0)

201 *
ç
++ = ':';

203 i‡(
i
 =6 && 
be°
.
ba£
 == 0 &&

204 (
be°
.
Àn
 =6 || (be°.À¿=5 && 
w‹ds
[5] == 0xffff)))

206 i‡(!
	`öë_¡›4
 (
§c
 + 12, 
ç
,  
tmp
 - (tp -Åmp)))

207  (
NULL
);

208 
ç
 +
	`°æí
 (tp);

212 
Àn
 = 
	`•rötf
 (
ç
, "%x", 
w‹ds
[
i
]);

213 i‡(
Àn
 < 0)

214  
NULL
;

215 
ç
 +
Àn
;

219 i‡(
be°
.
ba£
 !-1 && (be°.ba£ + be°.
Àn
) ==

220 (
NS_IN6ADDRSZ
 / 
NS_INT16SZ
))

221 *
ç
++ = ':';

222 *
ç
++ = '\0';

227 i‡((
sockÀn_t
Ë(
ç
 - 
tmp
Ë> 
size
)

229 
î∫o
 = 
ENOSPC
;

230  
NULL
;

233  
	`°r˝y
 (
d°
, 
tmp
);

234 
	}
}

	@lib/intprops.h

20 #i‚de‡
_GL_INTPROPS_H


21 
	#_GL_INTPROPS_H


	)

23 
	~<limôs.h
>

27 
	#_GL_INT_CONVERT
(
e
, 
v
Ë(0 * (eË+ (v))

	)

31 
	#_GL_INT_NEGATE_CONVERT
(
e
, 
v
Ë(0 * (eË- (v))

	)

38 
	#TYPE_IS_INTEGER
(
t
Ë(—Ë1.5 =1)

	)

44 
	#TYPE_TWOS_COMPLEMENT
(
t
Ë(—Ë~ (tË0 =—Ë-1)

	)

45 
	#TYPE_ONES_COMPLEMENT
(
t
Ë(—Ë~ (tË0 =0)

	)

46 
	#TYPE_SIGNED_MAGNITUDE
(
t
Ë(—Ë~ (tË0 < (tË-1)

	)

49 
	#_GL_INT_TWOS_COMPLEMENT
(
e
Ë(~ 
	`_GL_INT_CONVERT
 (e, 0Ë=-1)

	)

52 
	#TYPE_SIGNED
(
t
Ë(! (—Ë0 < (tË-1))

	)

56 
	#_GL_INT_SIGNED
(
e
Ë(
	`_GL_INT_NEGATE_CONVERT
 (e, 1Ë< 0)

	)

65 
	#TYPE_MINIMUM
(
t
) \

66 ((
t
Ë(! 
	`TYPE_SIGNED
 (t) \

67 ? (
t
) 0 \

68 : 
	`TYPE_SIGNED_MAGNITUDE
 (
t
) \

69 ? ~ (
t
) 0 \

70 : ~ 
	`TYPE_MAXIMUM
 (
t
)))

	)

71 
	#TYPE_MAXIMUM
(
t
) \

72 ((
t
Ë(! 
	`TYPE_SIGNED
 (t) \

73 ? (
t
) -1 \

74 : ((((
t
Ë1 << ( (tË* 
CHAR_BIT
 - 2)Ë- 1Ë* 2 + 1)))

	)

78 
	#_GL_INT_MINIMUM
(
e
) \

79 (
	`_GL_INT_SIGNED
 (
e
) \

80 ? - 
	`_GL_INT_TWOS_COMPLEMENT
 (
e
Ë- 
	`_GL_SIGNED_INT_MAXIMUM
 (e) \

81 : 
	`_GL_INT_CONVERT
 (
e
, 0))

	)

82 
	#_GL_INT_MAXIMUM
(
e
) \

83 (
	`_GL_INT_SIGNED
 (
e
) \

84 ? 
	`_GL_SIGNED_INT_MAXIMUM
 (
e
) \

85 : 
	`_GL_INT_NEGATE_CONVERT
 (
e
, 1))

	)

86 
	#_GL_SIGNED_INT_MAXIMUM
(
e
) \

87 (((
	`_GL_INT_CONVERT
 (
e
, 1Ë<< ( (”Ë+ 0Ë* 
CHAR_BIT
 - 2)Ë- 1Ë* 2 + 1)

	)

92 #i‡2 <
__GNUC__
 || 0x5110 <
__SUNPRO_C


93 
	#_GL_HAVE___TYPEOF__
 1

	)

95 
	#_GL_HAVE___TYPEOF__
 0

	)

101 #i‡
_GL_HAVE___TYPEOF__


102 
	#_GL_SIGNED_TYPE_OR_EXPR
(
t
Ë
	`TYPE_SIGNED
 (
	`__ty≥of__
 (t))

	)

104 
	#_GL_SIGNED_TYPE_OR_EXPR
(
t
Ë1

	)

110 
	#INT_BITS_STRLEN_BOUND
(
b
Ë(((bË* 146 + 484Ë/ 485)

	)

119 
	#INT_STRLEN_BOUND
(
t
) \

120 (
	`INT_BITS_STRLEN_BOUND
 ( (
t
Ë* 
CHAR_BIT
 \

121 - 
	`_GL_SIGNED_TYPE_OR_EXPR
 (
t
)) \

122 + 
	`_GL_SIGNED_TYPE_OR_EXPR
 (
t
))

	)

126 
	#INT_BUFSIZE_BOUND
(
t
Ë(
	`INT_STRLEN_BOUND
 (tË+ 1)

	)

165 
	#INT_ADD_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

166 ((
b
) < 0 \

167 ? (
a
Ë< (
mö
Ë- (
b
) \

168 : (
max
Ë- (
b
Ë< (
a
))

	)

172 
	#INT_SUBTRACT_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

173 ((
b
) < 0 \

174 ? (
max
Ë+ (
b
Ë< (
a
) \

175 : (
a
Ë< (
mö
Ë+ (
b
))

	)

179 
	#INT_NEGATE_RANGE_OVERFLOW
(
a
, 
mö
, 
max
) \

180 ((
mö
) < 0 \

181 ? (
a
Ë< - (
max
) \

182 : 0 < (
a
))

	)

188 
	#INT_MULTIPLY_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

189 ((
b
) < 0 \

190 ? ((
a
) < 0 \

191 ? (
a
Ë< (
max
Ë/ (
b
) \

192 : (
b
) == -1 \

194 : (
mö
Ë/ (
b
Ë< (
a
)) \

195 : (
b
) == 0 \

197 : ((
a
) < 0 \

198 ? (
a
Ë< (
mö
Ë/ (
b
) \

199 : (
max
Ë/ (
b
Ë< (
a
)))

	)

203 
	#INT_DIVIDE_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

204 ((
mö
Ë< 0 && (
b
Ë=-1 && (
a
Ë< - (
max
))

	)

211 
	#INT_REMAINDER_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

212 
	`INT_DIVIDE_RANGE_OVERFLOW
 (
a
, 
b
, 
mö
, 
max
)

	)

221 
	#INT_LEFT_SHIFT_RANGE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

222 ((
a
) < 0 \

223 ? (
a
Ë< (
mö
Ë>> (
b
) \

224 : (
max
Ë>> (
b
Ë< (
a
))

	)

231 
	#_GL_ADD_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

232 ((
mö
Ë< 0 ? 
	`INT_ADD_RANGE_OVERFLOW
 (
a
, 
b
, mö, 
max
) \

233 : (
a
Ë< 0 ? (
b
) <= (a) + (b) \

234 : (
b
Ë< 0 ? (
a
) <= (a) + (b) \

235 : (
a
Ë+ (
b
Ë< (b))

	)

236 
	#_GL_SUBTRACT_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

237 ((
mö
Ë< 0 ? 
	`INT_SUBTRACT_RANGE_OVERFLOW
 (
a
, 
b
, mö, 
max
) \

238 : (
a
) < 0 ? 1 \

239 : (
b
Ë< 0 ? (
a
) - (b) <= (a) \

240 : (
a
Ë< (
b
))

	)

241 
	#_GL_MULTIPLY_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

242 (((
mö
Ë=0 && (((
a
Ë< 0 && 0 < (
b
)) || ((b) < 0 && 0 < (a)))) \

243 || 
	`INT_MULTIPLY_RANGE_OVERFLOW
 (
a
, 
b
, 
mö
, 
max
))

	)

244 
	#_GL_DIVIDE_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

245 ((
mö
Ë< 0 ? (
b
Ë=
	`_GL_INT_NEGATE_CONVERT
 (mö, 1Ë&& (
a
Ë< - (
max
) \

246 : (
a
Ë< 0 ? (
b
) <= (a) + (b) - 1 \

247 : (
b
Ë< 0 && (
a
Ë+ (bË<◊))

	)

248 
	#_GL_REMAINDER_OVERFLOW
(
a
, 
b
, 
mö
, 
max
) \

249 ((
mö
Ë< 0 ? (
b
Ë=
	`_GL_INT_NEGATE_CONVERT
 (mö, 1Ë&& (
a
Ë< - (
max
) \

250 : (
a
Ë< 0 ? (aË% (
b
Ë!((
max
) - (b) + 1) % (b) \

251 : (
b
Ë< 0 && ! 
	`_GL_UNSIGNED_NEG_MULTIPLE
 (
a
, b, 
max
))

	)

257 
	#_GL_UNSIGNED_NEG_MULTIPLE
(
a
, 
b
, 
max
) \

258 (((
b
Ë< -
	`_GL_SIGNED_INT_MAXIMUM
 (b) \

259 ? (
	`_GL_SIGNED_INT_MAXIMUM
 (
b
Ë=(
max
) \

260 ? (
a
) \

261 : (
a
Ë% (
	`_GL_INT_CONVERT
 (a, 
	`_GL_SIGNED_INT_MAXIMUM
 (
b
)) + 1)) \

262 : (
a
Ë% - (
b
)) \

263 =0)

	)

294 
	#INT_ADD_OVERFLOW
(
a
, 
b
) \

295 
	`_GL_BINARY_OP_OVERFLOW
 (
a
, 
b
, 
_GL_ADD_OVERFLOW
)

	)

296 
	#INT_SUBTRACT_OVERFLOW
(
a
, 
b
) \

297 
	`_GL_BINARY_OP_OVERFLOW
 (
a
, 
b
, 
_GL_SUBTRACT_OVERFLOW
)

	)

298 
	#INT_NEGATE_OVERFLOW
(
a
) \

299 
	`INT_NEGATE_RANGE_OVERFLOW
 (
a
, 
	`_GL_INT_MINIMUM
 (a), 
	`_GL_INT_MAXIMUM
 (a))

	)

300 
	#INT_MULTIPLY_OVERFLOW
(
a
, 
b
) \

301 
	`_GL_BINARY_OP_OVERFLOW
 (
a
, 
b
, 
_GL_MULTIPLY_OVERFLOW
)

	)

302 
	#INT_DIVIDE_OVERFLOW
(
a
, 
b
) \

303 
	`_GL_BINARY_OP_OVERFLOW
 (
a
, 
b
, 
_GL_DIVIDE_OVERFLOW
)

	)

304 
	#INT_REMAINDER_OVERFLOW
(
a
, 
b
) \

305 
	`_GL_BINARY_OP_OVERFLOW
 (
a
, 
b
, 
_GL_REMAINDER_OVERFLOW
)

	)

306 
	#INT_LEFT_SHIFT_OVERFLOW
(
a
, 
b
) \

307 
	`INT_LEFT_SHIFT_RANGE_OVERFLOW
 (
a
, 
b
, \

308 
	`_GL_INT_MINIMUM
 (
a
), 
	`_GL_INT_MAXIMUM
 (a))

	)

314 
	#_GL_BINARY_OP_OVERFLOW
(
a
, 
b
, 
›_ªsu…_ovîÊow
) \

315 
	`›_ªsu…_ovîÊow
 (
a
, 
b
, \

316 
	`_GL_INT_MINIMUM
 (0 * (
b
Ë+ (
a
)), \

317 
	`_GL_INT_MAXIMUM
 (0 * (
b
Ë+ (
a
)))

	)

	@lib/ioctl.c

20 
	~<c⁄fig.h
>

22 
	~<sys/io˘l.h
>

24 
	~<°d¨g.h
>

26 #i‡
HAVE_IOCTL


29 #unde‡
io˘l


31 
	$Ωl_io˘l
 (
fd
, 
ªque°
, ... )

33 *
buf
;

34 
va_li°
 
¨gs
;

36 
	`va_°¨t
 (
¨gs
, 
ªque°
);

37 
buf
 = 
	`va_¨g
 (
¨gs
, *);

38 
	`va_íd
 (
¨gs
);

42  
	`io˘l
 (
fd
, (Ë
ªque°
, 
buf
);

43 
	}
}

47 
	~<î∫o.h
>

49 
	~"fd-hook.h
"

52 
	$¥im¨y_io˘l
 (
fd
, 
ªque°
, *
¨g
)

58 
î∫o
 = 
ENOSYS
;

60 
	}
}

63 
	$io˘l
 (
fd
, 
ªque°
, ... )

65 *
¨g
;

66 
va_li°
 
¨gs
;

68 
	`va_°¨t
 (
¨gs
, 
ªque°
);

69 
¨g
 = 
	`va_¨g
 (
¨gs
, *);

70 
	`va_íd
 (
¨gs
);

72 #i‡
WINDOWS_SOCKETS


73  
	`execuã_Æl_io˘l_hooks
 (
¥im¨y_io˘l
, 
fd
, 
ªque°
, 
¨g
);

75  
	`¥im¨y_io˘l
 (
fd
, 
ªque°
, 
¨g
);

77 
	}
}

	@lib/listen.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
li°í


32 
	$Ωl_li°í
 (
fd
, 
backlog
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`li°í
 (
sock
, 
backlog
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/localcharset.c

23 
	~<c⁄fig.h
>

26 
	~"loˇlch¨£t.h
"

28 
	~<f˙é.h
>

29 
	~<°ddef.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<°dlib.h
>

34 #i‡
deföed
 
__APPLE__
 && deföed 
__MACH__
 && 
HAVE_LANGINFO_CODESET


35 
	#DARWIN7


	)

38 #i‡
deföed
 
_WIN32
 || deföed 
__WIN32__


39 
	#WIN32_NATIVE


	)

42 #i‡
deföed
 
__EMX__


44 #i‚de‡
OS2


45 
	#OS2


	)

49 #i‡!
deföed
 
WIN32_NATIVE


50 
	~<uni°d.h
>

51 #i‡
HAVE_LANGINFO_CODESET


52 
	~<œngöfo.h
>

55 
	~<loˇÀ.h
>

58 #ifde‡
__CYGWIN__


59 
	#WIN32_LEAN_AND_MEAN


	)

60 
	~<wödows.h
>

62 #ñi‡
deföed
 
WIN32_NATIVE


63 
	#WIN32_LEAN_AND_MEAN


	)

64 
	~<wödows.h
>

66 #i‡
deföed
 
OS2


67 
	#INCL_DOS


	)

68 
	~<os2.h
>

71 #i‡
ENABLE_RELOCATABLE


72 
	~"ªloˇèbÀ.h
"

74 
	#ªloˇã
(
∑th«me
Ë’©h«me)

	)

78 #i‚de‡
LIBDIR


79 
	~"c⁄figmake.h
"

83 #i‚de‡
O_NOFOLLOW


84 
	#O_NOFOLLOW
 0

	)

87 #i‡
deföed
 
_WIN32
 || deföed 
__WIN32__
 || deföed 
__CYGWIN__
 || deföed 
__EMX__
 || deföed 
__DJGPP__


89 
	#ISSLASH
(
C
Ë((CË='/' || (CË='\\')

	)

92 #i‚de‡
DIRECTORY_SEPARATOR


93 
	#DIRECTORY_SEPARATOR
 '/'

	)

96 #i‚de‡
ISSLASH


97 
	#ISSLASH
(
C
Ë((CË=
DIRECTORY_SEPARATOR
)

	)

100 #i‡
HAVE_DECL_GETC_UNLOCKED


101 #unde‡
gëc


102 
	#gëc
 
gëc_u∆ocked


	)

111 #i‡
__STDC__
 != 1

112 vﬁ©ûê

	)

117 c⁄° * vﬁ©ûê
	gch¨£t_Æü£s
;

121 
	$gë_ch¨£t_Æü£s
 ()

123 c⁄° *
˝
;

125 
˝
 = 
ch¨£t_Æü£s
;

126 i‡(
˝
 =
NULL
)

128 #i‡!(
deföed
 
DARWIN7
 || deföed 
VMS
 || deföed 
WIN32_NATIVE
 || deföed 
__CYGWIN__
)

129 c⁄° *
dú
;

130 c⁄° *
ba£
 = "charset.alias";

131 *
fûe_«me
;

135 
dú
 = 
	`gëív
 ("CHARSETALIASDIR");

136 i‡(
dú
 =
NULL
 || dir[0] == '\0')

137 
dú
 = 
	`ªloˇã
 (
LIBDIR
);

141 
size_t
 
dú_Àn
 = 
	`°æí
 (
dú
);

142 
size_t
 
ba£_Àn
 = 
	`°æí
 (
ba£
);

143 
add_¶ash
 = (
dú_Àn
 > 0 && !
	`ISSLASH
 (
dú
[dir_len - 1]));

144 
fûe_«me
 = (*Ë
	`mÆloc
 (
dú_Àn
 + 
add_¶ash
 + 
ba£_Àn
 + 1);

145 i‡(
fûe_«me
 !
NULL
)

147 
	`mem˝y
 (
fûe_«me
, 
dú
, 
dú_Àn
);

148 i‡(
add_¶ash
)

149 
fûe_«me
[
dú_Àn
] = 
DIRECTORY_SEPARATOR
;

150 
	`mem˝y
 (
fûe_«me
 + 
dú_Àn
 + 
add_¶ash
, 
ba£
, 
ba£_Àn
 + 1);

154 i‡(
fûe_«me
 =
NULL
)

156 
˝
 = "";

159 
fd
;

168 
fd
 = 
	`›í
 (
fûe_«me
,

169 
O_RDONLY
 | (
HAVE_WORKING_O_NOFOLLOW
 ? 
O_NOFOLLOW
 : 0));

170 i‡(
fd
 < 0)

172 
˝
 = "";

175 
FILE
 *
Â
;

177 
Â
 = 
	`fd›í
 (
fd
, "r");

178 i‡(
Â
 =
NULL
)

181 
	`˛o£
 (
fd
);

182 
˝
 = "";

187 *
ªs_±r
 = 
NULL
;

188 
size_t
 
ªs_size
 = 0;

192 
c
;

193 
buf1
[50+1];

194 
buf2
[50+1];

195 
size_t
 
l1
, 
l2
;

196 *
ﬁd_ªs_±r
;

198 
c
 = 
	`gëc
 (
Â
);

199 i‡(
c
 =
EOF
)

201 i‡(
c
 == '\n' || c == ' ' || c == '\t')

203 i‡(
c
 == '#')

207 
c
 = 
	`gëc
 (
Â
);

208 !(
c
 =
EOF
 || c == '\n'));

209 i‡(
c
 =
EOF
)

213 
	`ungëc
 (
c
, 
Â
);

214 i‡(
	`fsˇnf
 (
Â
, "%50†%50s", 
buf1
, 
buf2
) < 2)

216 
l1
 = 
	`°æí
 (
buf1
);

217 
l2
 = 
	`°æí
 (
buf2
);

218 
ﬁd_ªs_±r
 = 
ªs_±r
;

219 i‡(
ªs_size
 == 0)

221 
ªs_size
 = 
l1
 + 1 + 
l2
 + 1;

222 
ªs_±r
 = (*Ë
	`mÆloc
 (
ªs_size
 + 1);

226 
ªs_size
 +
l1
 + 1 + 
l2
 + 1;

227 
ªs_±r
 = (*Ë
	`ªÆloc
 (ªs_±r, 
ªs_size
 + 1);

229 i‡(
ªs_±r
 =
NULL
)

232 
ªs_size
 = 0;

233 
	`‰ì
 (
ﬁd_ªs_±r
);

236 
	`°r˝y
 (
ªs_±r
 + 
ªs_size
 - (
l2
 + 1Ë- (
l1
 + 1), 
buf1
);

237 
	`°r˝y
 (
ªs_±r
 + 
ªs_size
 - (
l2
 + 1), 
buf2
);

239 
	`f˛o£
 (
Â
);

240 i‡(
ªs_size
 == 0)

241 
˝
 = "";

244 *(
ªs_±r
 + 
ªs_size
) = '\0';

245 
˝
 = 
ªs_±r
;

250 
	`‰ì
 (
fûe_«me
);

255 #i‡
deföed
 
DARWIN7


259 
˝
 = "ISO8859-1" "\0" "ISO-8859-1" "\0"

288 #i‡
deföed
 
VMS


294 
˝
 = "ISO8859-1" "\0" "ISO-8859-1" "\0"

313 #i‡
deföed
 
WIN32_NATIVE
 || deföed 
__CYGWIN__


318 
˝
 = "CP936" "\0" "GBK" "\0"

344 
ch¨£t_Æü£s
 = 
˝
;

347  
˝
;

348 
	}
}

356 #ifde‡
STATIC


357 
	gSTATIC


360 
	$loˇÀ_ch¨£t
 ()

362 c⁄° *
code£t
;

363 c⁄° *
Æü£s
;

365 #i‡!(
deföed
 
WIN32_NATIVE
 || deföed 
OS2
)

367 #i‡
HAVE_LANGINFO_CODESET


370 
code£t
 = 
	`∆_œngöfo
 (
CODESET
);

372 #ifde‡
__CYGWIN__


376 i‡(
code£t
 !
NULL
 && 
	`°rcmp
 (codeset, "US-ASCII") == 0)

378 c⁄° *
loˇÀ
;

379 
buf
[2 + 10 + 1];

381 
loˇÀ
 = 
	`gëív
 ("LC_ALL");

382 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

384 
loˇÀ
 = 
	`gëív
 ("LC_CTYPE");

385 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

386 
loˇÀ
 = 
	`gëív
 ("LANG");

388 i‡(
loˇÀ
 !
NULL
 &&Üocale[0] != '\0')

392 c⁄° *
dŸ
 = 
	`°rchr
 (
loˇÀ
, '.');

394 i‡(
dŸ
 !
NULL
)

396 c⁄° *
modifõr
;

398 
dŸ
++;

400 
modifõr
 = 
	`°rchr
 (
dŸ
, '@');

401 i‡(
modifõr
 =
NULL
)

402  
dŸ
;

403 i‡(
modifõr
 - 
dŸ
 <  (
buf
))

405 
	`mem˝y
 (
buf
, 
dŸ
, 
modifõr
 - dot);

406 
buf
 [
modifõr
 - 
dŸ
] = '\0';

407  
buf
;

423 
	`•rötf
 (
buf
, "CP%u", 
	`GëACP
 ());

424 
code£t
 = 
buf
;

431 c⁄° *
loˇÀ
 = 
NULL
;

438 
loˇÀ
 = 
	`£éoˇÀ
 (
LC_CTYPE
, 
NULL
);

440 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

442 
loˇÀ
 = 
	`gëív
 ("LC_ALL");

443 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

445 
loˇÀ
 = 
	`gëív
 ("LC_CTYPE");

446 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

447 
loˇÀ
 = 
	`gëív
 ("LANG");

454 
code£t
 = 
loˇÀ
;

458 #ñi‡
deföed
 
WIN32_NATIVE


460 
buf
[2 + 10 + 1];

469 
	`•rötf
 (
buf
, "CP%u", 
	`GëACP
 ());

470 
code£t
 = 
buf
;

472 #ñi‡
deföed
 
OS2


474 c⁄° *
loˇÀ
;

475 
buf
[2 + 10 + 1];

476 
ULONG
 
˝
[3];

477 
ULONG
 
˝Àn
;

481 
loˇÀ
 = 
	`gëív
 ("LC_ALL");

482 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

484 
loˇÀ
 = 
	`gëív
 ("LC_CTYPE");

485 i‡(
loˇÀ
 =
NULL
 ||Üocale[0] == '\0')

486 
loˇÀ
 = 
	`gëív
 ("LANG");

488 i‡(
loˇÀ
 !
NULL
 &&Üocale[0] != '\0')

491 c⁄° *
dŸ
 = 
	`°rchr
 (
loˇÀ
, '.');

493 i‡(
dŸ
 !
NULL
)

495 c⁄° *
modifõr
;

497 
dŸ
++;

499 
modifõr
 = 
	`°rchr
 (
dŸ
, '@');

500 i‡(
modifõr
 =
NULL
)

501  
dŸ
;

502 i‡(
modifõr
 - 
dŸ
 <  (
buf
))

504 
	`mem˝y
 (
buf
, 
dŸ
, 
modifõr
 - dot);

505 
buf
 [
modifõr
 - 
dŸ
] = '\0';

506  
buf
;

511 
code£t
 = 
loˇÀ
;

516 i‡(
	`DosQuîyCp
 ( (
˝
), cp, &
˝Àn
))

517 
code£t
 = "";

520 
	`•rötf
 (
buf
, "CP%u", 
˝
[0]);

521 
code£t
 = 
buf
;

527 i‡(
code£t
 =
NULL
)

529 
code£t
 = "";

532 
Æü£s
 = 
	`gë_ch¨£t_Æü£s
 ();

533 *
Æü£s
 != '\0';

534 
Æü£s
 +
	`°æí
 (aliases) + 1,áliases += strlen (aliases) + 1)

535 i‡(
	`°rcmp
 (
code£t
, 
Æü£s
) == 0

536 || (
Æü£s
[0] == '*' &&áliases[1] == '\0'))

538 
code£t
 = 
Æü£s
 + 
	`°æí
 (aliases) + 1;

545 i‡(
code£t
[0] == '\0')

546 
code£t
 = "ASCII";

548  
code£t
;

549 
	}
}

	@lib/localcharset.h

21 #i‚de‡
_LOCALCHARSET_H


22 
	#_LOCALCHARSET_H


	)

25 #ifde‡
__˝lu•lus


35 c⁄° * 
loˇÀ_ch¨£t
 ();

38 #ifde‡
__˝lu•lus


	@lib/lseek.c

20 
	~<c⁄fig.h
>

23 
	~<uni°d.h
>

25 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


28 
	~<wödows.h
>

30 
	~<sys/°©.h
>

32 
	~<î∫o.h
>

34 #unde‡
l£ek


36 
off_t


37 
	$Ωl_l£ek
 (
fd
, 
off_t
 
off£t
, 
whí˚
)

39 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


41 
HANDLE
 
h
 = (HANDLEË
	`_gë_osfh™dÀ
 (
fd
);

42 i‡(
h
 =
INVALID_HANDLE_VALUE
)

44 
î∫o
 = 
EBADF
;

47 i‡(
	`GëFûeTy≥
 (
h
Ë!
FILE_TYPE_DISK
)

49 
î∫o
 = 
ESPIPE
;

54 
°©
 
°©buf
;

55 i‡(
	`f°©
 (
fd
, &
°©buf
) < 0)

57 i‡(!
	`S_ISREG
 (
°©buf
.
°_mode
))

59 
î∫o
 = 
ESPIPE
;

63  
	`l£ek
 (
fd
, 
off£t
, 
whí˚
);

64 
	}
}

	@lib/lstat.c

23 
	#__√ed_sy°em_sys_°©_h


	)

24 
	~<c⁄fig.h
>

26 #i‡!
HAVE_LSTAT


30 
	tdummy
;

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 #unde‡
__√ed_sy°em_sys_°©_h


38 
ölöe
 

39 
	$‹ig_l°©
 (c⁄° *
fûíame
, 
°©
 *
buf
)

41  
	`l°©
 (
fûíame
, 
buf
);

42 
	}
}

48 
	~"sys/°©.h
"

50 
	~<°rög.h
>

51 
	~<î∫o.h
>

67 
	$Ωl_l°©
 (c⁄° *
fûe
, 
°©
 *
sbuf
)

69 
size_t
 
Àn
;

70 
l°©_ªsu…
 = 
	`‹ig_l°©
 (
fûe
, 
sbuf
);

72 i‡(
l°©_ªsu…
 != 0)

73  
l°©_ªsu…
;

80 
Àn
 = 
	`°æí
 (
fûe
);

81 i‡(
fûe
[
Àn
 - 1] !'/' || 
	`S_ISDIR
 (
sbuf
->
°_mode
))

89 i‡(!
	`S_ISLNK
 (
sbuf
->
°_mode
))

91 
î∫o
 = 
ENOTDIR
;

94  
	`°©
 (
fûe
, 
sbuf
);

95 
	}
}

	@lib/malloc.c

23 
	#_GL_USE_STDLIB_ALLOC
 1

	)

24 
	~<c⁄fig.h
>

26 #ifde‡
mÆloc


27 
	#NEED_MALLOC_GNU
 1

	)

28 #unde‡
mÆloc


30 #ñi‡
GNULIB_MALLOC_GNU
 && !
HAVE_MALLOC_GNU


31 
	#NEED_MALLOC_GNU
 1

	)

34 
	~<°dlib.h
>

36 
	~<î∫o.h
>

42 
	$Ωl_mÆloc
 (
size_t
 
n
)

44 *
ªsu…
;

46 #i‡
NEED_MALLOC_GNU


47 i‡(
n
 == 0)

48 
n
 = 1;

51 
ªsu…
 = 
	`mÆloc
 (
n
);

53 #i‡!
HAVE_MALLOC_POSIX


54 i‡(
ªsu…
 =
NULL
)

55 
î∫o
 = 
ENOMEM
;

58  
ªsu…
;

59 
	}
}

	@lib/mbrtowc.c

18 
	~<c⁄fig.h
>

21 
	~<wch¨.h
>

23 #i‡
GNULIB_deföed_mb°©e_t


26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

29 
	~"loˇlch¨£t.h
"

30 
	~"°ªq.h
"

31 
	~"vîify.h
"

34 
vîify
 ( (
mb°©e_t
) >= 4);

36 
	göã∫Æ_°©e
[4];

38 
size_t


39 
	$mbπowc
 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
)

41 *
p°©e
 = (*)
ps
;

43 i‡(
s
 =
NULL
)

45 
pwc
 = 
NULL
;

46 
s
 = "";

47 
n
 = 1;

50 i‡(
n
 == 0)

51  (
size_t
)(-2);

55 i‡(
p°©e
 =
NULL
)

56 
p°©e
 = 
öã∫Æ_°©e
;

59 
size_t
 
n°©e
 = 
p°©e
[0];

60 
buf
[4];

61 c⁄° *
p
;

62 
size_t
 
m
;

64 
n°©e
)

67 
p
 = 
s
;

68 
m
 = 
n
;

71 
buf
[2] = 
p°©e
[3];

74 
buf
[1] = 
p°©e
[2];

77 
buf
[0] = 
p°©e
[1];

78 
p
 = 
buf
;

79 
m
 = 
n°©e
;

80 
buf
[
m
++] = 
s
[0];

81 i‡(
n
 >2 && 
m
 < 4)

83 
buf
[
m
++] = 
s
[1];

84 i‡(
n
 >3 && 
m
 < 4)

85 
buf
[
m
++] = 
s
[2];

89 
î∫o
 = 
EINVAL
;

90  (
size_t
)(-1);

95 #i‡
__GLIBC__
 || 
deföed
 
__UCLIBC__


97 
	`mbtowc
 (
NULL
, NULL, 0);

100 
ªs
 = 
	`mbtowc
 (
pwc
, 
p
, 
m
);

102 i‡(
ªs
 >= 0)

104 i‡(
pwc
 !
NULL
 && ((*pw¯=0Ë!(
ªs
 == 0)))

105 
	`ab‹t
 ();

106 i‡(
n°©e
 >(
ªs
 > 0 ?Ñes : 1))

107 
	`ab‹t
 ();

108 
ªs
 -
n°©e
;

109 
p°©e
[0] = 0;

110  
ªs
;

125 i‡(
m
 >4 || m >
MB_CUR_MAX
)

126 
övÆid
;

129 c⁄° *
ícodög
 = 
	`loˇÀ_ch¨£t
 ();

131 i‡(
	`STREQ
 (
ícodög
, "UTF-8", 'U', 'T', 'F', '-', '8', 0, 0, 0, 0))

134 
c
 = (Ë
p
[0];

136 i‡(
c
 >= 0xc2)

138 i‡(
c
 < 0xe0)

140 i‡(
m
 == 1)

141 
öcom∂ëe
;

143 i‡(
c
 < 0xf0)

145 i‡(
m
 == 1)

146 
öcom∂ëe
;

147 i‡(
m
 == 2)

149 
c2
 = (Ë
p
[1];

151 i‡((
c2
 ^ 0x80) < 0x40

152 && (
c
 >0xe1 || 
c2
 >= 0xa0)

153 && (
c
 !0xed || 
c2
 < 0xa0))

154 
öcom∂ëe
;

157 i‡(
c
 <= 0xf4)

159 i‡(
m
 == 1)

160 
öcom∂ëe
;

163 
c2
 = (Ë
p
[1];

165 i‡((
c2
 ^ 0x80) < 0x40

166 && (
c
 >0xf1 || 
c2
 >= 0x90)

167 && (
c
 < 0xf4 || (¯=0xf4 && 
c2
 < 0x90)))

169 i‡(
m
 == 2)

170 
öcom∂ëe
;

173 
c3
 = (Ë
p
[2];

175 i‡((
c3
 ^ 0x80) < 0x40)

176 
öcom∂ëe
;

182 
övÆid
;

188 i‡(
	`STREQ
 (
ícodög
, "EUC-JP", 'E', 'U', 'C', '-', 'J', 'P', 0, 0, 0))

190 i‡(
m
 == 1)

192 
c
 = (Ë
p
[0];

194 i‡((
c
 >= 0xa1 && c < 0xff) || c == 0x8e || c == 0x8f)

195 
öcom∂ëe
;

197 i‡(
m
 == 2)

199 
c
 = (Ë
p
[0];

201 i‡(
c
 == 0x8f)

203 
c2
 = (Ë
p
[1];

205 i‡(
c2
 >= 0xa1 && c2 < 0xff)

206 
öcom∂ëe
;

209 
övÆid
;

211 i‡(
	`STREQ
 (
ícodög
, "EUC-KR", 'E', 'U', 'C', '-', 'K', 'R', 0, 0, 0)

212 || 
	`STREQ
 (
ícodög
, "GB2312", 'G', 'B', '2', '3', '1', '2', 0, 0, 0)

213 || 
	`STREQ
 (
ícodög
, "BIG5", 'B', 'I', 'G', '5', 0, 0, 0, 0, 0))

215 i‡(
m
 == 1)

217 
c
 = (Ë
p
[0];

219 i‡(
c
 >= 0xa1 && c < 0xff)

220 
öcom∂ëe
;

222 
övÆid
;

224 i‡(
	`STREQ
 (
ícodög
, "EUC-TW", 'E', 'U', 'C', '-', 'T', 'W', 0, 0, 0))

226 i‡(
m
 == 1)

228 
c
 = (Ë
p
[0];

230 i‡((
c
 >= 0xa1 && c < 0xff) || c == 0x8e)

231 
öcom∂ëe
;

235 
c
 = (Ë
p
[0];

237 i‡(
c
 == 0x8e)

238 
öcom∂ëe
;

240 
övÆid
;

242 i‡(
	`STREQ
 (
ícodög
, "GB18030", 'G', 'B', '1', '8', '0', '3', '0', 0, 0))

244 i‡(
m
 == 1)

246 
c
 = (Ë
p
[0];

248 i‡((
c
 >= 0x90 && c <= 0xe3) || (c >= 0xf8 && c <= 0xfe))

249 
öcom∂ëe
;

253 
c
 = (Ë
p
[0];

255 i‡(
c
 >= 0x90 && c <= 0xe3)

257 
c2
 = (Ë
p
[1];

259 i‡(
c2
 >= 0x30 && c2 <= 0x39)

261 i‡(
m
 == 2)

262 
öcom∂ëe
;

265 
c3
 = (Ë
p
[2];

267 i‡(
c3
 >= 0x81 && c3 <= 0xfe)

268 
öcom∂ëe
;

273 
övÆid
;

275 i‡(
	`STREQ
 (
ícodög
, "SJIS", 'S', 'J', 'I', 'S', 0, 0, 0, 0, 0))

277 i‡(
m
 == 1)

279 
c
 = (Ë
p
[0];

281 i‡((
c
 >= 0x81 && c <= 0x9f) || (c >= 0xe0 && c <= 0xea)

282 || (
c
 >= 0xf0 && c <= 0xf9))

283 
öcom∂ëe
;

285 
övÆid
;

289 
öcom∂ëe
;

292 
öcom∂ëe
:

294 
size_t
 
k
 = 
n°©e
;

296 
p°©e
[++
k
] = 
s
[0];

297 i‡(
k
 < 
m
)

299 
p°©e
[++
k
] = 
s
[1];

300 i‡(
k
 < 
m
)

301 
p°©e
[++
k
] = 
s
[2];

303 i‡(
k
 !
m
)

304 
	`ab‹t
 ();

306 
p°©e
[0] = 
m
;

307  (
size_t
)(-2);

309 
övÆid
:

310 
î∫o
 = 
EILSEQ
;

312  (
size_t
)(-1);

315 
	}
}

320 #unde‡
mbπowc


322 
size_t


323 
	$Ωl_mbπowc
 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
)

325 #i‡
MBRTOWC_NULL_ARG2_BUG
 || 
MBRTOWC_RETVAL_BUG


326 i‡(
s
 =
NULL
)

328 
pwc
 = 
NULL
;

329 
s
 = "";

330 
n
 = 1;

334 #i‡
MBRTOWC_RETVAL_BUG


336 
mb°©e_t
 
öã∫Æ_°©e
;

340 i‡(
ps
 =
NULL
)

341 
ps
 = &
öã∫Æ_°©e
;

343 i‡(!
	`mbsöô
 (
ps
))

346 
size_t
 
cou¡
 = 0;

347 ; 
n
 > 0; 
s
++,Ç--)

349 
wch¨_t
 
wc
;

350 
size_t
 
ªt
 = 
	`mbπowc
 (&
wc
, 
s
, 1, 
ps
);

352 i‡(
ªt
 =(
size_t
)(-1))

353  (
size_t
)(-1);

354 
cou¡
++;

355 i‡(
ªt
 !(
size_t
)(-2))

358 i‡(
pwc
 !
NULL
)

359 *
pwc
 = 
wc
;

360  (
wc
 =0 ? 0 : 
cou¡
);

363  (
size_t
)(-2);

368 #i‡
MBRTOWC_NUL_RETVAL_BUG


370 
wch¨_t
 
wc
;

371 
size_t
 
ªt
 = 
	`mbπowc
 (&
wc
, 
s
, 
n
, 
ps
);

373 i‡(
ªt
 !(
size_t
)(-1) &&Ñet != (size_t)(-2))

375 i‡(
pwc
 !
NULL
)

376 *
pwc
 = 
wc
;

377 i‡(
wc
 == 0)

378 
ªt
 = 0;

380  
ªt
;

384 #i‡
MBRTOWC_NULL_ARG1_BUG


385 
wch¨_t
 
dummy
;

387 i‡(
pwc
 =
NULL
)

388 
pwc
 = &
dummy
;

391  
	`mbπowc
 (
pwc
, 
s
, 
n
, 
ps
);

394 
	}
}

	@lib/mbsinit.c

18 
	~<c⁄fig.h
>

21 
	~<wch¨.h
>

23 
	~"vîify.h
"

25 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& !deföed 
__CYGWIN__


30 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
ps
)

32  
ps
 =
NULL
 || *ps == 0;

33 
	}
}

51 
vîify
 ( (
mb°©e_t
) >= 4);

54 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
ps
)

56 c⁄° *
p°©e
 = (c⁄° *)
ps
;

58  
p°©e
 =
NULL
 ||Östate[0] == 0;

59 
	}
}

	@lib/mbtowc-impl.h

23 
	$mbtowc
 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
)

25 i‡(
s
 =
NULL
)

29 
mb°©e_t
 
°©e
;

30 
wch¨_t
 
wc
;

31 
size_t
 
ªsu…
;

33 
	`mem£t
 (&
°©e
, 0,  (
mb°©e_t
));

34 
ªsu…
 = 
	`mbπowc
 (&
wc
, 
s
, 
n
, &
°©e
);

35 i‡(
ªsu…
 =(
size_t
)-1 ||Ñesult == (size_t)-2)

37 
î∫o
 = 
EILSEQ
;

40 i‡(
pwc
 !
NULL
)

41 *
pwc
 = 
wc
;

42  (
wc
 =0 ? 0 : 
ªsu…
);

44 
	}
}

	@lib/mbtowc.c

18 
	~<c⁄fig.h
>

20 
	~<°dlib.h
>

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

24 
	~<wch¨.h
>

26 
	~"mbtowc-im∂.h
"

	@lib/md5.c

25 
	~<c⁄fig.h
>

27 
	~"md5.h
"

29 
	~<°ddef.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<sys/ty≥s.h
>

34 #i‡
USE_UNLOCKED_IO


35 
	~"u∆ocked-io.h
"

38 #ifde‡
_LIBC


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#WORDS_BIGENDIAN
 1

	)

45 
	#md5_öô_˘x
 
__md5_öô_˘x


	)

46 
	#md5_¥o˚ss_block
 
__md5_¥o˚ss_block


	)

47 
	#md5_¥o˚ss_byãs
 
__md5_¥o˚ss_byãs


	)

48 
	#md5_föish_˘x
 
__md5_föish_˘x


	)

49 
	#md5_ªad_˘x
 
__md5_ªad_˘x


	)

50 
	#md5_°ªam
 
__md5_°ªam


	)

51 
	#md5_buf„r
 
__md5_buf„r


	)

54 #ifde‡
WORDS_BIGENDIAN


55 
	#SWAP
(
n
) \

56 (((
n
Ë<< 24Ë| ((“Ë& 0xff00Ë<< 8Ë| ((“Ë>> 8Ë& 0xff00Ë| (“Ë>> 24))

	)

58 
	#SWAP
(
n
Ë“)

	)

61 
	#BLOCKSIZE
 32768

	)

62 #i‡
BLOCKSIZE
 % 64 != 0

68 c⁄° 
	gfûlbuf
[64] = { 0x80, 0 };

74 
	$md5_öô_˘x
 (
md5_˘x
 *
˘x
)

76 
˘x
->
A
 = 0x67452301;

77 
˘x
->
B
 = 0xefcdab89;

78 
˘x
->
C
 = 0x98badcfe;

79 
˘x
->
D
 = 0x10325476;

81 
˘x
->
tŸÆ
[0] = ctx->total[1] = 0;

82 
˘x
->
buÊí
 = 0;

83 
	}
}

88 
ölöe
 

89 
	$£t_uöt32
 (*
˝
, 
uöt32_t
 
v
)

91 
	`mem˝y
 (
˝
, &
v
,  v);

92 
	}
}

97 
	$md5_ªad_˘x
 (c⁄° 
md5_˘x
 *
˘x
, *
ªsbuf
)

99 *
r
 = 
ªsbuf
;

100 
	`£t_uöt32
 (
r
 + 0 *  
˘x
->
A
, 
	`SWAP
 (ctx->A));

101 
	`£t_uöt32
 (
r
 + 1 *  
˘x
->
B
, 
	`SWAP
 (ctx->B));

102 
	`£t_uöt32
 (
r
 + 2 *  
˘x
->
C
, 
	`SWAP
 (ctx->C));

103 
	`£t_uöt32
 (
r
 + 3 *  
˘x
->
D
, 
	`SWAP
 (ctx->D));

105  
ªsbuf
;

106 
	}
}

111 
	$md5_föish_˘x
 (
md5_˘x
 *
˘x
, *
ªsbuf
)

114 
uöt32_t
 
byãs
 = 
˘x
->
buÊí
;

115 
size_t
 
size
 = (
byãs
 < 56) ? 64 / 4 : 64 * 2 / 4;

118 
˘x
->
tŸÆ
[0] +
byãs
;

119 i‡(
˘x
->
tŸÆ
[0] < 
byãs
)

120 ++
˘x
->
tŸÆ
[1];

123 
˘x
->
buf„r
[
size
 - 2] = 
	`SWAP
 (˘x->
tŸÆ
[0] << 3);

124 
˘x
->
buf„r
[
size
 - 1] = 
	`SWAP
 ((˘x->
tŸÆ
[1] << 3) | (ctx->total[0] >> 29));

126 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
byãs
], 
fûlbuf
, (
size
 - 2) * 4 - bytes);

129 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, 
size
 * 4, ctx);

131  
	`md5_ªad_˘x
 (
˘x
, 
ªsbuf
);

132 
	}
}

138 
	$md5_°ªam
 (
FILE
 *
°ªam
, *
ªsblock
)

140 
md5_˘x
 
˘x
;

141 
size_t
 
sum
;

143 *
buf„r
 = 
	`mÆloc
 (
BLOCKSIZE
 + 72);

144 i‡(!
buf„r
)

148 
	`md5_öô_˘x
 (&
˘x
);

156 
size_t
 
n
;

157 
sum
 = 0;

162 
n
 = 
	`‰ód
 (
buf„r
 + 
sum
, 1, 
BLOCKSIZE
 - sum, 
°ªam
);

164 
sum
 +
n
;

166 i‡(
sum
 =
BLOCKSIZE
)

169 i‡(
n
 == 0)

174 i‡(
	`„º‹
 (
°ªam
))

176 
	`‰ì
 (
buf„r
);

179 
¥o˚ss_∑πül_block
;

185 i‡(
	`„of
 (
°ªam
))

186 
¥o˚ss_∑πül_block
;

192 
	`md5_¥o˚ss_block
 (
buf„r
, 
BLOCKSIZE
, &
˘x
);

195 
¥o˚ss_∑πül_block
:

198 i‡(
sum
 > 0)

199 
	`md5_¥o˚ss_byãs
 (
buf„r
, 
sum
, &
˘x
);

202 
	`md5_föish_˘x
 (&
˘x
, 
ªsblock
);

203 
	`‰ì
 (
buf„r
);

205 
	}
}

212 
	$md5_buf„r
 (c⁄° *
buf„r
, 
size_t
 
Àn
, *
ªsblock
)

214 
md5_˘x
 
˘x
;

217 
	`md5_öô_˘x
 (&
˘x
);

220 
	`md5_¥o˚ss_byãs
 (
buf„r
, 
Àn
, &
˘x
);

223  
	`md5_föish_˘x
 (&
˘x
, 
ªsblock
);

224 
	}
}

228 
	$md5_¥o˚ss_byãs
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
)

232 i‡(
˘x
->
buÊí
 != 0)

234 
size_t
 
À·_ovî
 = 
˘x
->
buÊí
;

235 
size_t
 
add
 = 128 - 
À·_ovî
 > 
Àn
 ?Üen : 128 -Üeft_over;

237 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
À·_ovî
], buf„r, 
add
);

238 
˘x
->
buÊí
 +
add
;

240 i‡(
˘x
->
buÊí
 > 64)

242 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, ctx->
buÊí
 & ~63, ctx);

244 
˘x
->
buÊí
 &= 63;

246 
	`mem˝y
 (
˘x
->
buf„r
,

247 &((*Ë
˘x
->
buf„r
)[(
À·_ovî
 + 
add
) & ~63],

248 
˘x
->
buÊí
);

251 
buf„r
 = (c⁄° *Ëbuf„∏+ 
add
;

252 
Àn
 -
add
;

256 i‡(
Àn
 >= 64)

258 #i‡!
_STRING_ARCH_u«lig√d


259 
	#Æignof
(
ty≥
Ë
	`off£tof
 (°ru˘ { 
c
;Åy≥ 
x
; }, x)

	)

260 
	#UNALIGNED_P
(
p
Ë(((
size_t
ËpË% 
	`Æignof
 (
uöt32_t
Ë!0)

	)

261 i‡(
	`UNALIGNED_P
 (
buf„r
))

262 
Àn
 > 64)

264 
	`md5_¥o˚ss_block
 (
	`mem˝y
 (
˘x
->
buf„r
, buffer, 64), 64, ctx);

265 
buf„r
 = (const *) buffer + 64;

266 
Àn
 -= 64;

271 
	`md5_¥o˚ss_block
 (
buf„r
, 
Àn
 & ~63, 
˘x
);

272 
buf„r
 = (c⁄° *Ëbuf„∏+ (
Àn
 & ~63);

273 
Àn
 &= 63;

278 i‡(
Àn
 > 0)

280 
size_t
 
À·_ovî
 = 
˘x
->
buÊí
;

282 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
À·_ovî
], buf„r, 
Àn
);

283 
À·_ovî
 +
Àn
;

284 i‡(
À·_ovî
 >= 64)

286 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, 64, ctx);

287 
À·_ovî
 -= 64;

288 
	`mem˝y
 (
˘x
->
buf„r
, &˘x->buf„r[16], 
À·_ovî
);

290 
˘x
->
buÊí
 = 
À·_ovî
;

292 
	}
}

299 
	#FF
(
b
, 
c
, 
d
Ë(d ^ (b & (¯^ d)))

	)

300 
	#FG
(
b
, 
c
, 
d
Ë
	`FF
 (d, b, c)

	)

301 
	#FH
(
b
, 
c
, 
d
Ë(b ^ c ^ d)

	)

302 
	#FI
(
b
, 
c
, 
d
Ë(¯^ (b | ~d))

	)

308 
	$md5_¥o˚ss_block
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
)

310 
uöt32_t
 
c‹ª˘_w‹ds
[16];

311 c⁄° 
uöt32_t
 *
w‹ds
 = 
buf„r
;

312 
size_t
 
nw‹ds
 = 
Àn
 /  (
uöt32_t
);

313 c⁄° 
uöt32_t
 *
ídp
 = 
w‹ds
 + 
nw‹ds
;

314 
uöt32_t
 
A
 = 
˘x
->A;

315 
uöt32_t
 
B
 = 
˘x
->B;

316 
uöt32_t
 
C
 = 
˘x
->C;

317 
uöt32_t
 
D
 = 
˘x
->D;

322 
˘x
->
tŸÆ
[0] +
Àn
;

323 i‡(
˘x
->
tŸÆ
[0] < 
Àn
)

324 ++
˘x
->
tŸÆ
[1];

328 
w‹ds
 < 
ídp
)

330 
uöt32_t
 *
cwp
 = 
c‹ª˘_w‹ds
;

331 
uöt32_t
 
A_ßve
 = 
A
;

332 
uöt32_t
 
B_ßve
 = 
B
;

333 
uöt32_t
 
C_ßve
 = 
C
;

334 
uöt32_t
 
D_ßve
 = 
D
;

343 
	#OP
(
a
, 
b
, 
c
, 
d
, 
s
, 
T
) \

346 
a
 +
	`FF
 (
b
, 
c
, 
d
Ë+ (*
cwp
++ = 
	`SWAP
 (*
w‹ds
)Ë+ 
T
; \

347 ++
w‹ds
; \

348 
	`CYCLIC
 (
a
, 
s
); \

349 
a
 +
b
; \

351 0)

	)

355 
	#CYCLIC
(
w
, 
s
Ë(w = (w << sË| (w >> (32 - s)))

	)

368 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0xd76aa478);

369 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0xe8c7b756);

370 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0x242070db);

371 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0xc1bdceee);

372 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0xf57c0faf);

373 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0x4787c62a);

374 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xa8304613);

375 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0xfd469501);

376 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0x698098d8);

377 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0x8b44f7af);

378 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xffff5bb1);

379 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0x895cd7be);

380 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0x6b901122);

381 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0xfd987193);

382 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xa679438e);

383 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0x49b40821);

388 #unde‡
OP


389 
	#OP
(
f
, 
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
T
) \

392 
a
 +
	`f
 (
b
, 
c
, 
d
Ë+ 
c‹ª˘_w‹ds
[
k
] + 
T
; \

393 
	`CYCLIC
 (
a
, 
s
); \

394 
a
 +
b
; \

396 0)

	)

399 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 1, 5, 0xf61e2562);

400 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 6, 9, 0xc040b340);

401 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 11, 14, 0x265e5a51);

402 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 0, 20, 0xe9b6c7aa);

403 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 5, 5, 0xd62f105d);

404 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 10, 9, 0x02441453);

405 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 15, 14, 0xd8a1e681);

406 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 4, 20, 0xe7d3fbc8);

407 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 9, 5, 0x21e1cde6);

408 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 14, 9, 0xc33707d6);

409 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 3, 14, 0xf4d50d87);

410 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 8, 20, 0x455a14ed);

411 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 13, 5, 0xa9e3e905);

412 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 2, 9, 0xfcefa3f8);

413 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 7, 14, 0x676f02d9);

414 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 12, 20, 0x8d2a4c8a);

417 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 5, 4, 0xfffa3942);

418 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 8, 11, 0x8771f681);

419 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 11, 16, 0x6d9d6122);

420 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 14, 23, 0xfde5380c);

421 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 1, 4, 0xa4beea44);

422 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 4, 11, 0x4bdecfa9);

423 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 7, 16, 0xf6bb4b60);

424 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 10, 23, 0xbebfbc70);

425 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 13, 4, 0x289b7ec6);

426 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 0, 11, 0xeaa127fa);

427 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 3, 16, 0xd4ef3085);

428 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 6, 23, 0x04881d05);

429 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 9, 4, 0xd9d4d039);

430 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 12, 11, 0xe6db99e5);

431 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 15, 16, 0x1fa27cf8);

432 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 2, 23, 0xc4ac5665);

435 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 0, 6, 0xf4292244);

436 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 7, 10, 0x432aff97);

437 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 14, 15, 0xab9423a7);

438 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 5, 21, 0xfc93a039);

439 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 12, 6, 0x655b59c3);

440 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 3, 10, 0x8f0ccc92);

441 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 10, 15, 0xffeff47d);

442 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 1, 21, 0x85845dd1);

443 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 8, 6, 0x6fa87e4f);

444 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 15, 10, 0xfe2ce6e0);

445 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 6, 15, 0xa3014314);

446 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 13, 21, 0x4e0811a1);

447 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 4, 6, 0xf7537e82);

448 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 11, 10, 0xbd3af235);

449 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 2, 15, 0x2ad7d2bb);

450 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 9, 21, 0xeb86d391);

453 
A
 +
A_ßve
;

454 
B
 +
B_ßve
;

455 
C
 +
C_ßve
;

456 
D
 +
D_ßve
;

460 
˘x
->
A
 = A;

461 
˘x
->
B
 = B;

462 
˘x
->
C
 = C;

463 
˘x
->
D
 = D;

464 
	}
}

	@lib/md5.h

23 #i‚de‡
_MD5_H


24 
	#_MD5_H
 1

	)

26 
	~<°dio.h
>

27 
	~<°döt.h
>

29 
	#MD5_DIGEST_SIZE
 16

	)

30 
	#MD5_BLOCK_SIZE
 64

	)

32 #i‚de‡
__GNUC_PREREQ


33 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


34 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

35 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

37 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

41 #i‚de‡
__THROW


42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #i‚de‡
_LIBC


50 
	#__md5_buf„r
 
md5_buf„r


	)

51 
	#__md5_föish_˘x
 
md5_föish_˘x


	)

52 
	#__md5_öô_˘x
 
md5_öô_˘x


	)

53 
	#__md5_¥o˚ss_block
 
md5_¥o˚ss_block


	)

54 
	#__md5_¥o˚ss_byãs
 
md5_¥o˚ss_byãs


	)

55 
	#__md5_ªad_˘x
 
md5_ªad_˘x


	)

56 
	#__md5_°ªam
 
md5_°ªam


	)

59 #ifde‡
__˝lu•lus


64 
	smd5_˘x


66 
uöt32_t
 
A
;

67 
uöt32_t
 
B
;

68 
uöt32_t
 
C
;

69 
uöt32_t
 
D
;

71 
uöt32_t
 
tŸÆ
[2];

72 
uöt32_t
 
buÊí
;

73 
uöt32_t
 
buf„r
[32];

83 
__md5_öô_˘x
 (
md5_˘x
 *
˘x
Ë
__THROW
;

89 
__md5_¥o˚ss_block
 (c⁄° *
buf„r
, 
size_t
 
Àn
,

90 
md5_˘x
 *
˘x
Ë
__THROW
;

96 
__md5_¥o˚ss_byãs
 (c⁄° *
buf„r
, 
size_t
 
Àn
,

97 
md5_˘x
 *
˘x
Ë
__THROW
;

103 *
__md5_föish_˘x
 (
md5_˘x
 *
˘x
, *
ªsbuf
Ë
__THROW
;

109 *
__md5_ªad_˘x
 (c⁄° 
md5_˘x
 *
˘x
, *
ªsbuf
Ë
__THROW
;

115 
__md5_°ªam
 (
FILE
 *
°ªam
, *
ªsblock
Ë
__THROW
;

121 *
__md5_buf„r
 (c⁄° *
buf„r
, 
size_t
 
Àn
,

122 *
ªsblock
Ë
__THROW
;

124 #ifde‡
__˝lu•lus


	@lib/memchr.c

26 #i‚de‡
_LIBC


27 
	~<c⁄fig.h
>

30 
	~<°rög.h
>

32 
	~<°ddef.h
>

34 #i‡
deföed
 
_LIBC


35 
	~<memc›y.h
>

37 
	#ªg_ch¨
 

	)

40 
	~<limôs.h
>

42 #i‡
HAVE_BP_SYM_H
 || 
deföed
 
_LIBC


43 
	~<bp-sym.h
>

45 
	#BP_SYM
(
sym
Ë
	)
sym

48 #unde‡
__memchr


49 #ifde‡
_LIBC


50 #unde‡
memchr


53 #i‚de‡
wók_Æüs


54 
	#__memchr
 
memchr


	)

59 
	$__memchr
 (c⁄° *
s
, 
c_ö
, 
size_t
 
n
)

66 
	tl⁄gw‹d
;

68 c⁄° *
ch¨_±r
;

69 c⁄° 
l⁄gw‹d
 *
l⁄gw‹d_±r
;

70 
l⁄gw‹d
 
ª≥©ed_⁄e
;

71 
l⁄gw‹d
 
ª≥©ed_c
;

72 
ªg_ch¨
 
c
;

74 
c
 = (Ë
c_ö
;

78 
ch¨_±r
 = (c⁄° *Ë
s
;

79 
n
 > 0 && (
size_t
Ë
ch¨_±r
 %  (
l⁄gw‹d
) != 0;

80 --
n
, ++
ch¨_±r
)

81 i‡(*
ch¨_±r
 =
c
)

82  (*Ë
ch¨_±r
;

84 
l⁄gw‹d_±r
 = (c⁄° 
l⁄gw‹d
 *Ë
ch¨_±r
;

92 
ª≥©ed_⁄e
 = 0x01010101;

93 
ª≥©ed_c
 = 
c
 | (c << 8);

94 
ª≥©ed_c
 |=Ñepeated_c << 16;

95 i‡(0xffffffffU < (
l⁄gw‹d
) -1)

97 
ª≥©ed_⁄e
 |=Ñepeated_one << 31 << 1;

98 
ª≥©ed_c
 |=Ñepeated_c << 31 << 1;

99 i‡(8 <  (
l⁄gw‹d
))

101 
size_t
 
i
;

103 
i
 = 64; i <  (
l⁄gw‹d
) * 8; i *= 2)

105 
ª≥©ed_⁄e
 |ª≥©ed_⁄ê<< 
i
;

106 
ª≥©ed_c
 |ª≥©ed_¯<< 
i
;

142 
n
 > (
l⁄gw‹d
))

144 
l⁄gw‹d
 
l⁄gw‹d1
 = *
l⁄gw‹d_±r
 ^ 
ª≥©ed_c
;

146 i‡((((
l⁄gw‹d1
 - 
ª≥©ed_⁄e
) & ~longword1)

147 & (
ª≥©ed_⁄e
 << 7)) != 0)

149 
l⁄gw‹d_±r
++;

150 
n
 - (
l⁄gw‹d
);

153 
ch¨_±r
 = (c⁄° *Ë
l⁄gw‹d_±r
;

162 ; 
n
 > 0; --n, ++
ch¨_±r
)

164 i‡(*
ch¨_±r
 =
c
)

165  (*Ë
ch¨_±r
;

168  
NULL
;

169 
	}
}

170 #ifde‡
wók_Æüs


171 
wók_Æüs
 (
__memchr
, 
	$BP_SYM
 (
memchr
))

	@lib/mkdir.c

21 
	~<c⁄fig.h
>

24 
	~<sys/°©.h
>

26 
	~<î∫o.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

31 
	~"dú«me.h
"

35 #unde‡
mkdú


41 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


42 
	#mkdú
(
«me
,
mode
Ë
	`_mkdú
 («me)

	)

43 
	#maybe_unu£d
 
_GL_UNUSED


	)

45 
	#maybe_unu£d


	)

51 
	$Ωl_mkdú
 (c⁄° *
dú
, 
mode_t
 
mode
 
maybe_unu£d
)

53 
ªt_vÆ
;

54 *
tmp_dú
;

55 
size_t
 
Àn
 = 
	`°æí
 (
dú
);

57 i‡(
Àn
 && 
dú
[len - 1] == '/')

59 
tmp_dú
 = 
	`°rdup
 (
dú
);

60 i‡(!
tmp_dú
)

63 
î∫o
 = 
ENOMEM
;

66 
	`°rù_åaûög_¶ashes
 (
tmp_dú
);

70 
tmp_dú
 = (*Ë
dú
;

72 #i‡
FUNC_MKDIR_DOT_BUG


75 *
œ°
 = 
	`œ°_comp⁄ít
 (
tmp_dú
);

76 i‡(*
œ°
 == '.' && (last[1] == '\0'

77 || (
œ°
[1] == '.' &&Üast[2] == '\0')))

79 
°©
 
°
;

80 i‡(
	`°©
 (
tmp_dú
, &
°
) == 0)

81 
î∫o
 = 
EEXIST
;

87 
ªt_vÆ
 = 
	`mkdú
 (
tmp_dú
, 
mode
);

89 i‡(
tmp_dú
 !
dú
)

90 
	`‰ì
 (
tmp_dú
);

92  
ªt_vÆ
;

93 
	}
}

	@lib/netdb.in.h

25 #i‚de‡
_
@
GUARD_PREFIX
@
_NETDB_H


27 #i‡
__GNUC__
 >= 3

28 @
	gPRAGMA_SYSTEM_HEADER
@

30 @
	gPRAGMA_COLUMNS
@

32 #i‡@
HAVE_NETDB_H
@

35 #@
INCLUDE_NEXT
@ @
NEXT_NETDB_H
@

39 #i‚de‡
_
@
GUARD_PREFIX
@
_NETDB_H


40 
	#_
@
GUARD_PREFIX
@
_NETDB_H


	)

44 
	~<sys/sockë.h
>

55 #i‡@
GNULIB_GETADDRINFO
@

57 #i‡!@
HAVE_STRUCT_ADDRINFO
@

59 #ifde‡
__˝lu•lus


63 #i‡!
GNULIB_deföed_°ru˘_addröfo


65 
	saddröfo


67 
ai_Êags
;

68 
ai_Ámûy
;

69 
ai_sockty≥
;

70 
ai_¥Ÿocﬁ
;

71 
sockÀn_t
 
ai_addæí
;

72 
sockaddr
 *
ai_addr
;

73 *
ai_ˇn⁄«me
;

74 
addröfo
 *
ai_√xt
;

76 
	#GNULIB_deföed_°ru˘_addröfo
 1

	)

79 #ifde‡
__˝lu•lus


86 #i‚de‡
AI_PASSIVE


87 
	#AI_PASSIVE
 0x0001

	)

89 #i‚de‡
AI_CANONNAME


90 
	#AI_CANONNAME
 0x0002

	)

92 #i‚de‡
AI_NUMERICSERV


93 
	#AI_NUMERICSERV
 0x0400

	)

97 
	#AI_NUMERICHOST
 0x0004

	)

105 #i‚de‡
AI_V4MAPPED


106 
	#AI_V4MAPPED
 0

	)

108 #i‚de‡
AI_ALL


109 
	#AI_ALL
 0

	)

111 #i‚de‡
AI_ADDRCONFIG


112 
	#AI_ADDRCONFIG
 0

	)

117 #i‚de‡
EAI_BADFLAGS


118 
	#EAI_BADFLAGS
 -1

	)

119 
	#EAI_NONAME
 -2

	)

120 
	#EAI_AGAIN
 -3

	)

121 
	#EAI_FAIL
 -4

	)

122 
	#EAI_NODATA
 -5

	)

123 
	#EAI_FAMILY
 -6

	)

124 
	#EAI_SOCKTYPE
 -7

	)

125 
	#EAI_SERVICE
 -8

	)

126 
	#EAI_MEMORY
 -10

	)

132 #i‡!
deföed
 
EAI_NODATA
 && deföed 
EAI_NONAME


133 
	#EAI_NODATA
 
EAI_NONAME


	)

136 #i‚de‡
EAI_OVERFLOW


138 
	#EAI_OVERFLOW
 -12

	)

140 #i‚de‡
EAI_ADDRFAMILY


142 
	#EAI_ADDRFAMILY
 -9

	)

144 #i‚de‡
EAI_SYSTEM


146 
	#EAI_SYSTEM
 -11

	)

154 #i‚de‡
EAI_INPROGRESS


155 
	#EAI_INPROGRESS
 -100

	)

156 
	#EAI_CANCELED
 -101

	)

157 
	#EAI_NOTCANCELED
 -102

	)

158 
	#EAI_ALLDONE
 -103

	)

159 
	#EAI_INTR
 -104

	)

160 
	#EAI_IDN_ENCODE
 -105

	)

164 #i‡!@
HAVE_DECL_GETADDRINFO
@

169 
_GL_FUNCDECL_SYS
 (
gëaddröfo
, ,

170 (c⁄° *
ª°ri˘
 
nodíame
,

171 c⁄° *
ª°ri˘
 
£rv«me
,

172 c⁄° 
addröfo
 *
ª°ri˘
 
höts
,

173 
addröfo
 **
ª°ri˘
 
ªs
)

174 
_GL_ARG_NONNULL
 ((4)));

176 
_GL_CXXALIAS_SYS
 (
gëaddröfo
, ,

177 (c⁄° *
ª°ri˘
 
nodíame
,

178 c⁄° *
ª°ri˘
 
£rv«me
,

179 c⁄° 
addröfo
 *
ª°ri˘
 
höts
,

180 
addröfo
 **
ª°ri˘
 
ªs
));

181 
_GL_CXXALIASWARN
 (
gëaddröfo
);

183 #i‡!@
HAVE_DECL_FREEADDRINFO
@

187 
_GL_FUNCDECL_SYS
 (
‰ìaddröfo
, , (
addröfo
 *
ai
)

188 
_GL_ARG_NONNULL
 ((1)));

190 
_GL_CXXALIAS_SYS
 (
‰ìaddröfo
, , (
addröfo
 *
ai
));

191 
_GL_CXXALIASWARN
 (
‰ìaddröfo
);

193 #i‡@
REPLACE_GAI_STRERROR
@

194 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

195 #unde‡
gai_°ªº‹


196 
	#gai_°ªº‹
 
Ωl_gai_°ªº‹


	)

198 
_GL_FUNCDECL_RPL
 (
gai_°ªº‹
, c⁄° *, (
ecode
));

199 
_GL_CXXALIAS_RPL
 (
gai_°ªº‹
, c⁄° *, (
ecode
));

201 #i‡!@
HAVE_DECL_GAI_STRERROR
@

205 
_GL_FUNCDECL_SYS
 (
gai_°ªº‹
, c⁄° *, (
ecode
));

207 
_GL_CXXALIAS_SYS
 (
gai_°ªº‹
, c⁄° *, (
ecode
));

209 
_GL_CXXALIASWARN
 (
gai_°ªº‹
);

211 #i‡!@
HAVE_DECL_GETNAMEINFO
@

215 
_GL_FUNCDECL_SYS
 (
gë«meöfo
, ,

216 (c⁄° 
sockaddr
 *
ª°ri˘
 
ß
, 
sockÀn_t
 
ßÀn
,

217 *
ª°ri˘
 
node
, 
sockÀn_t
 
nodñí
,

218 *
ª°ri˘
 
£rvi˚
, 
sockÀn_t
 
£rvi˚Àn
,

219 
Êags
)

220 
_GL_ARG_NONNULL
 ((1)));

224 
_GL_CXXALIAS_SYS_CAST
 (
gë«meöfo
, ,

225 (c⁄° 
sockaddr
 *
ª°ri˘
 
ß
, 
sockÀn_t
 
ßÀn
,

226 *
ª°ri˘
 
node
, 
sockÀn_t
 
nodñí
,

227 *
ª°ri˘
 
£rvi˚
, 
sockÀn_t
 
£rvi˚Àn
,

228 
Êags
));

229 
_GL_CXXALIASWARN
 (
gë«meöfo
);

232 #i‚de‡
NI_NUMERICHOST


233 
	#NI_NUMERICHOST
 1

	)

235 #i‚de‡
NI_NUMERICSERV


236 
	#NI_NUMERICSERV
 2

	)

239 #ñi‡
deföed
 
GNULIB_POSIXCHECK


241 #unde‡
gëaddröfo


242 #i‡
HAVE_RAW_DECL_GETADDRINFO


243 
_GL_WARN_ON_USE
 (
gëaddröfo
, "getaddrinfo is unportable - "

247 #unde‡
‰ìaddröfo


248 #i‡
HAVE_RAW_DECL_FREEADDRINFO


249 
_GL_WARN_ON_USE
 (
‰ìaddröfo
, "freeaddrinfo is unportable - "

253 #unde‡
gai_°ªº‹


254 #i‡
HAVE_RAW_DECL_GAI_STRERROR


255 
_GL_WARN_ON_USE
 (
gai_°ªº‹
, "gai_strerror is unportable - "

259 #unde‡
gë«meöfo


260 #i‡
HAVE_RAW_DECL_GETNAMEINFO


261 
_GL_WARN_ON_USE
 (
gë«meöfo
, "getnameinfo is unportable - "

	@lib/netinet_in.in.h

20 #i‚de‡
_
@
GUARD_PREFIX
@
_NETINET_IN_H


22 #i‡
__GNUC__
 >= 3

23 @
	gPRAGMA_SYSTEM_HEADER
@

25 @
	gPRAGMA_COLUMNS
@

27 #i‡@
HAVE_NETINET_IN_H
@

31 
	~<sys/ty≥s.h
>

34 #@
INCLUDE_NEXT
@ @
NEXT_NETINET_IN_H
@

38 #i‚de‡
_
@
GUARD_PREFIX
@
_NETINET_IN_H


39 
	#_
@
GUARD_PREFIX
@
_NETINET_IN_H


	)

41 #i‡!@
HAVE_NETINET_IN_H
@

45 
	~<sys/sockë.h
>

	@lib/open.c

22 
	#__√ed_sy°em_f˙é_h


	)

23 
	~<c⁄fig.h
>

26 
	~<f˙é.h
>

27 
	~<sys/ty≥s.h
>

28 #unde‡
__√ed_sy°em_f˙é_h


30 
ölöe
 

31 
	$‹ig_›í
 (c⁄° *
fûíame
, 
Êags
, 
mode_t
 
mode
)

33  
	`›í
 (
fûíame
, 
Êags
, 
mode
);

34 
	}
}

39 
	~"f˙é.h
"

41 
	~<î∫o.h
>

42 
	~<°d¨g.h
>

43 
	~<°rög.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/°©.h
>

46 
	~<uni°d.h
>

48 #i‚de‡
REPLACE_OPEN_DIRECTORY


49 
	#REPLACE_OPEN_DIRECTORY
 0

	)

53 
	$›í
 (c⁄° *
fûíame
, 
Êags
, ...)

55 
mode_t
 
mode
;

56 
fd
;

58 
mode
 = 0;

59 i‡(
Êags
 & 
O_CREAT
)

61 
va_li°
 
¨g
;

62 
	`va_°¨t
 (
¨g
, 
Êags
);

66 
mode
 = 
	`va_¨g
 (
¨g
, 
PROMOTED_MODE_T
);

68 
	`va_íd
 (
¨g
);

71 #i‡
GNULIB_deföed_O_NONBLOCK


77 
Êags
 &~
O_NONBLOCK
;

80 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


81 i‡(
	`°rcmp
 (
fûíame
, "/dev/null") == 0)

82 
fûíame
 = "NUL";

85 #i‡
OPEN_TRAILING_SLASH_BUG


107 i‡(
Êags
 & (
O_CREAT
 | 
O_WRONLY
 | 
O_RDWR
))

109 
size_t
 
Àn
 = 
	`°æí
 (
fûíame
);

110 i‡(
Àn
 > 0 && 
fûíame
[len - 1] == '/')

112 
î∫o
 = 
EISDIR
;

118 
fd
 = 
	`‹ig_›í
 (
fûíame
, 
Êags
, 
mode
);

120 #i‡
REPLACE_FCHDIR


127 i‡(
REPLACE_OPEN_DIRECTORY
 && 
fd
 < 0 && 
î∫o
 =
EACCES


128 && ((
Êags
 & 
O_ACCMODE
Ë=
O_RDONLY


129 || (
O_SEARCH
 !
O_RDONLY
 && (
Êags
 & 
O_ACCMODE
) == O_SEARCH)))

131 
°©
 
°©buf
;

132 i‡(
	`°©
 (
fûíame
, &
°©buf
Ë=0 && 
	`S_ISDIR
 (°©buf.
°_mode
))

135 
fd
 = 
	`›í
 ("/dev/nuŒ", 
Êags
, 
mode
);

136 i‡(0 <
fd
)

137 
fd
 = 
	`_gl_ªgi°î_fd
 (fd, 
fûíame
);

140 
î∫o
 = 
EACCES
;

144 #i‡
OPEN_TRAILING_SLASH_BUG


157 i‡(
fd
 >= 0)

160 
size_t
 
Àn
 = 
	`°æí
 (
fûíame
);

161 i‡(
fûíame
[
Àn
 - 1] == '/')

163 
°©
 
°©buf
;

165 i‡(
	`f°©
 (
fd
, &
°©buf
Ë>0 && !
	`S_ISDIR
 (°©buf.
°_mode
))

167 
	`˛o£
 (
fd
);

168 
î∫o
 = 
ENOTDIR
;

175 #i‡
REPLACE_FCHDIR


176 i‡(!
REPLACE_OPEN_DIRECTORY
 && 0 <
fd
)

177 
fd
 = 
	`_gl_ªgi°î_fd
 (fd, 
fûíame
);

180  
fd
;

181 
	}
}

	@lib/pipe-safer.c

19 
	~<c⁄fig.h
>

21 
	~"uni°d-ß„r.h
"

23 
	~<uni°d.h
>

24 
	~<î∫o.h
>

31 
	$pùe_ß„r
 (
fd
[2])

33 #i‡
HAVE_PIPE


34 i‡(
	`pùe
 (
fd
) == 0)

36 
i
;

37 
i
 = 0; i < 2; i++)

39 
fd
[
i
] = 
	`fd_ß„r
 (fd[i]);

40 i‡(
fd
[
i
] < 0)

42 
e
 = 
î∫o
;

43 
	`˛o£
 (
fd
[1 - 
i
]);

44 
î∫o
 = 
e
;

52 
î∫o
 = 
ENOSYS
;

56 
	}
}

	@lib/pipe.h

2 
	~"•awn-pùe.h
"

	@lib/pipe2-safer.c

19 
	~<c⁄fig.h
>

22 
	~"uni°d-ß„r.h
"

24 
	~<uni°d.h
>

25 
	~<î∫o.h
>

31 
	$pùe2_ß„r
 (
fd
[2], 
Êags
)

34 i‡(
	`pùe2
 (
fd
, 
Êags
) == 0)

36 
i
;

37 
i
 = 0; i < 2; i++)

39 
fd
[
i
] = 
	`fd_ß„r_Êag
 (fd[i], 
Êags
);

40 i‡(
fd
[
i
] < 0)

42 
e
 = 
î∫o
;

43 
	`˛o£
 (
fd
[1 - 
i
]);

44 
î∫o
 = 
e
;

52 
	}
}

	@lib/pipe2.c

20 
	~<c⁄fig.h
>

23 
	~<uni°d.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

28 
	~"bö¨y-io.h
"

29 
	~"vîify.h
"

31 #i‡
GNULIB_deföed_O_NONBLOCK


32 
	~"n⁄blockög.h
"

35 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


38 
	~<io.h
>

43 
	$pùe2
 (
fd
[2], 
Êags
)

48 
tmp
[2];

49 
tmp
[0] = 
fd
[0];

50 
tmp
[1] = 
fd
[1];

52 #i‡
HAVE_PIPE2


53 #unde‡
pùe2


58 
have_pùe2_ªÆly
;

59 i‡(
have_pùe2_ªÆly
 >= 0)

61 
ªsu…
 = 
	`pùe2
 (
fd
, 
Êags
);

62 i‡(!(
ªsu…
 < 0 && 
î∫o
 =
ENOSYS
))

64 
have_pùe2_ªÆly
 = 1;

65  
ªsu…
;

67 
have_pùe2_ªÆly
 = -1;

73 i‡((
Êags
 & ~(
O_CLOEXEC
 | 
O_NONBLOCK
 | 
O_BINARY
 | 
O_TEXT
)) != 0)

75 
î∫o
 = 
EINVAL
;

79 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


82 i‡(
	`_pùe
 (
fd
, 4096, 
Êags
 & ~
O_NONBLOCK
) < 0)

84 
fd
[0] = 
tmp
[0];

85 
fd
[1] = 
tmp
[1];

92 #i‡
GNULIB_deföed_O_NONBLOCK


93 i‡(
Êags
 & 
O_NONBLOCK
)

95 i‡(
	`£t_n⁄blockög_Êag
 (
fd
[0], 
åue
) != 0

96 || 
	`£t_n⁄blockög_Êag
 (
fd
[1], 
åue
) != 0)

97 
Áû
;

100 
	`vîify
 (
O_NONBLOCK
 == 0);

108 i‡(
	`pùe
 (
fd
) < 0)

117 i‡(
Êags
 & 
O_NONBLOCK
)

119 
f˙é_Êags
;

121 i‡((
f˙é_Êags
 = 
	`f˙é
 (
fd
[1], 
F_GETFL
, 0)) < 0

122 || 
	`f˙é
 (
fd
[1], 
F_SETFL
, 
f˙é_Êags
 | 
O_NONBLOCK
) == -1

123 || (
f˙é_Êags
 = 
	`f˙é
 (
fd
[0], 
F_GETFL
, 0)) < 0

124 || 
	`f˙é
 (
fd
[0], 
F_SETFL
, 
f˙é_Êags
 | 
O_NONBLOCK
) == -1)

125 
Áû
;

128 i‡(
Êags
 & 
O_CLOEXEC
)

130 
f˙é_Êags
;

132 i‡((
f˙é_Êags
 = 
	`f˙é
 (
fd
[1], 
F_GETFD
, 0)) < 0

133 || 
	`f˙é
 (
fd
[1], 
F_SETFD
, 
f˙é_Êags
 | 
FD_CLOEXEC
) == -1

134 || (
f˙é_Êags
 = 
	`f˙é
 (
fd
[0], 
F_GETFD
, 0)) < 0

135 || 
	`f˙é
 (
fd
[0], 
F_SETFD
, 
f˙é_Êags
 | 
FD_CLOEXEC
) == -1)

136 
Áû
;

139 #i‡
O_BINARY


140 i‡(
Êags
 & 
O_BINARY
)

142 
	`£tmode
 (
fd
[1], 
O_BINARY
);

143 
	`£tmode
 (
fd
[0], 
O_BINARY
);

145 i‡(
Êags
 & 
O_TEXT
)

147 
	`£tmode
 (
fd
[1], 
O_TEXT
);

148 
	`£tmode
 (
fd
[0], 
O_TEXT
);

156 #i‡
GNULIB_deföed_O_NONBLOCK
 || \

157 !((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
)

158 
Áû
:

160 
ßved_î∫o
 = 
î∫o
;

161 
	`˛o£
 (
fd
[0]);

162 
	`˛o£
 (
fd
[1]);

163 
fd
[0] = 
tmp
[0];

164 
fd
[1] = 
tmp
[1];

165 
î∫o
 = 
ßved_î∫o
;

169 
	}
}

	@lib/printf-args.c

26 #i‚de‡
PRINTF_FETCHARGS


27 
	~<c⁄fig.h
>

31 #i‚de‡
PRINTF_FETCHARGS


32 
	~"¥ötf-¨gs.h
"

35 #ifde‡
STATIC


36 
	gSTATIC


39 
	$PRINTF_FETCHARGS
 (
va_li°
 
¨gs
, 
¨gumíts
 *
a
)

41 
size_t
 
i
;

42 
¨gumít
 *
≠
;

44 
i
 = 0, 
≠
 = &
a
->
¨g
[0]; i <á->
cou¡
; i++,áp++)

45 
≠
->
ty≥
)

47 
TYPE_SCHAR
:

48 
≠
->
a
.
a_sch¨
 = 
	`va_¨g
 (
¨gs
, );

50 
TYPE_UCHAR
:

51 
≠
->
a
.
a_uch¨
 = 
	`va_¨g
 (
¨gs
, );

53 
TYPE_SHORT
:

54 
≠
->
a
.
a_sh‹t
 = 
	`va_¨g
 (
¨gs
, );

56 
TYPE_USHORT
:

57 
≠
->
a
.
a_ush‹t
 = 
	`va_¨g
 (
¨gs
, );

59 
TYPE_INT
:

60 
≠
->
a
.
a_öt
 = 
	`va_¨g
 (
¨gs
, );

62 
TYPE_UINT
:

63 
≠
->
a
.
a_uöt
 = 
	`va_¨g
 (
¨gs
, );

65 
TYPE_LONGINT
:

66 
≠
->
a
.
a_l⁄göt
 = 
	`va_¨g
 (
¨gs
, );

68 
TYPE_ULONGINT
:

69 
≠
->
a
.
a_ul⁄göt
 = 
	`va_¨g
 (
¨gs
, );

71 #i‡
HAVE_LONG_LONG_INT


72 
TYPE_LONGLONGINT
:

73 
≠
->
a
.
a_l⁄gl⁄göt
 = 
	`va_¨g
 (
¨gs
, );

75 
TYPE_ULONGLONGINT
:

76 
≠
->
a
.
a_ul⁄gl⁄göt
 = 
	`va_¨g
 (
¨gs
, );

79 
TYPE_DOUBLE
:

80 
≠
->
a
.
a_doubÀ
 = 
	`va_¨g
 (
¨gs
, );

82 
TYPE_LONGDOUBLE
:

83 
≠
->
a
.
a_l⁄gdoubÀ
 = 
	`va_¨g
 (
¨gs
, );

85 
TYPE_CHAR
:

86 
≠
->
a
.
a_ch¨
 = 
	`va_¨g
 (
¨gs
, );

88 #i‡
HAVE_WINT_T


89 
TYPE_WIDE_CHAR
:

93 
≠
->
a
.
a_wide_ch¨
 =

94 ( (
wöt_t
) <  ()

95 ? (
wöt_t
Ë
	`va_¨g
 (
¨gs
, )

96 : 
	`va_¨g
 (
¨gs
, 
wöt_t
));

99 
TYPE_STRING
:

100 
≠
->
a
.
a_°rög
 = 
	`va_¨g
 (
¨gs
, const *);

104 i‡(
≠
->
a
.
a_°rög
 =
NULL
)

105 
≠
->
a
.
a_°rög
 = "(NULL)";

107 #i‡
HAVE_WCHAR_T


108 
TYPE_WIDE_STRING
:

109 
≠
->
a
.
a_wide_°rög
 = 
	`va_¨g
 (
¨gs
, c⁄° 
wch¨_t
 *);

113 i‡(
≠
->
a
.
a_wide_°rög
 =
NULL
)

115 c⁄° 
wch¨_t
 
wide_nuŒ_°rög
[] =

117 (
wch¨_t
)'(',

118 (
wch¨_t
)'N', (wchar_t)'U', (wchar_t)'L', (wchar_t)'L',

119 (
wch¨_t
)')',

120 (
wch¨_t
)0

122 
≠
->
a
.
a_wide_°rög
 = 
wide_nuŒ_°rög
;

126 
TYPE_POINTER
:

127 
≠
->
a
.
a_poöãr
 = 
	`va_¨g
 (
¨gs
, *);

129 
TYPE_COUNT_SCHAR_POINTER
:

130 
≠
->
a
.
a_cou¡_sch¨_poöãr
 = 
	`va_¨g
 (
¨gs
, signed *);

132 
TYPE_COUNT_SHORT_POINTER
:

133 
≠
->
a
.
a_cou¡_sh‹t_poöãr
 = 
	`va_¨g
 (
¨gs
, *);

135 
TYPE_COUNT_INT_POINTER
:

136 
≠
->
a
.
a_cou¡_öt_poöãr
 = 
	`va_¨g
 (
¨gs
, *);

138 
TYPE_COUNT_LONGINT_POINTER
:

139 
≠
->
a
.
a_cou¡_l⁄göt_poöãr
 = 
	`va_¨g
 (
¨gs
, *);

141 #i‡
HAVE_LONG_LONG_INT


142 
TYPE_COUNT_LONGLONGINT_POINTER
:

143 
≠
->
a
.
a_cou¡_l⁄gl⁄göt_poöãr
 = 
	`va_¨g
 (
¨gs
, *);

146 #i‡
ENABLE_UNISTDIO


148 
TYPE_U8_STRING
:

149 
≠
->
a
.
a_u8_°rög
 = 
	`va_¨g
 (
¨gs
, c⁄° 
uöt8_t
 *);

153 i‡(
≠
->
a
.
a_u8_°rög
 =
NULL
)

155 c⁄° 
uöt8_t
 
u8_nuŒ_°rög
[] =

157 
≠
->
a
.
a_u8_°rög
 = 
u8_nuŒ_°rög
;

160 
TYPE_U16_STRING
:

161 
≠
->
a
.
a_u16_°rög
 = 
	`va_¨g
 (
¨gs
, c⁄° 
uöt16_t
 *);

165 i‡(
≠
->
a
.
a_u16_°rög
 =
NULL
)

167 c⁄° 
uöt16_t
 
u16_nuŒ_°rög
[] =

169 
≠
->
a
.
a_u16_°rög
 = 
u16_nuŒ_°rög
;

172 
TYPE_U32_STRING
:

173 
≠
->
a
.
a_u32_°rög
 = 
	`va_¨g
 (
¨gs
, c⁄° 
uöt32_t
 *);

177 i‡(
≠
->
a
.
a_u32_°rög
 =
NULL
)

179 c⁄° 
uöt32_t
 
u32_nuŒ_°rög
[] =

181 
≠
->
a
.
a_u32_°rög
 = 
u32_nuŒ_°rög
;

190 
	}
}

	@lib/printf-args.h

21 #i‚de‡
_PRINTF_ARGS_H


22 
	#_PRINTF_ARGS_H


	)

30 #i‚de‡
PRINTF_FETCHARGS


31 
	#PRINTF_FETCHARGS
 
¥ötf_„tch¨gs


	)

35 
	~<°ddef.h
>

38 #i‡
HAVE_WCHAR_T


39 
	~<°ddef.h
>

43 #i‡
HAVE_WINT_T


44 
	~<wch¨.h
>

48 
	~<°d¨g.h
>

54 
	mTYPE_NONE
,

55 
	mTYPE_SCHAR
,

56 
	mTYPE_UCHAR
,

57 
	mTYPE_SHORT
,

58 
	mTYPE_USHORT
,

59 
	mTYPE_INT
,

60 
	mTYPE_UINT
,

61 
	mTYPE_LONGINT
,

62 
	mTYPE_ULONGINT
,

63 #i‡
HAVE_LONG_LONG_INT


64 
	mTYPE_LONGLONGINT
,

65 
	mTYPE_ULONGLONGINT
,

67 
	mTYPE_DOUBLE
,

68 
	mTYPE_LONGDOUBLE
,

69 
	mTYPE_CHAR
,

70 #i‡
HAVE_WINT_T


71 
	mTYPE_WIDE_CHAR
,

73 
	mTYPE_STRING
,

74 #i‡
HAVE_WCHAR_T


75 
	mTYPE_WIDE_STRING
,

77 
	mTYPE_POINTER
,

78 
	mTYPE_COUNT_SCHAR_POINTER
,

79 
	mTYPE_COUNT_SHORT_POINTER
,

80 
	mTYPE_COUNT_INT_POINTER
,

81 
	mTYPE_COUNT_LONGINT_POINTER


82 #i‡
HAVE_LONG_LONG_INT


83 , 
	mTYPE_COUNT_LONGLONGINT_POINTER


85 #i‡
ENABLE_UNISTDIO


87 , 
	mTYPE_U8_STRING


88 , 
	mTYPE_U16_STRING


89 , 
	mTYPE_U32_STRING


91 } 
	t¨g_ty≥
;

96 
¨g_ty≥
 
	mty≥
;

99 sig√d 
	ma_sch¨
;

100 
	ma_uch¨
;

101 
	ma_sh‹t
;

102 
	ma_ush‹t
;

103 
	ma_öt
;

104 
	ma_uöt
;

105 
	ma_l⁄göt
;

106 
	ma_ul⁄göt
;

107 #i‡
HAVE_LONG_LONG_INT


108 
	ma_l⁄gl⁄göt
;

109 
	ma_ul⁄gl⁄göt
;

111 
	ma_Êﬂt
;

112 
	ma_doubÀ
;

113 
	ma_l⁄gdoubÀ
;

114 
	ma_ch¨
;

115 #i‡
HAVE_WINT_T


116 
wöt_t
 
	ma_wide_ch¨
;

118 c⁄° * 
	ma_°rög
;

119 #i‡
HAVE_WCHAR_T


120 c⁄° 
wch¨_t
* 
	ma_wide_°rög
;

122 * 
	ma_poöãr
;

123 sig√d * 
	ma_cou¡_sch¨_poöãr
;

124 * 
	ma_cou¡_sh‹t_poöãr
;

125 * 
	ma_cou¡_öt_poöãr
;

126 * 
	ma_cou¡_l⁄göt_poöãr
;

127 #i‡
HAVE_LONG_LONG_INT


128 * 
	ma_cou¡_l⁄gl⁄göt_poöãr
;

130 #i‡
ENABLE_UNISTDIO


132 c⁄° 
uöt8_t
 * 
	ma_u8_°rög
;

133 c⁄° 
uöt16_t
 * 
	ma_u16_°rög
;

134 c⁄° 
uöt32_t
 * 
	ma_u32_°rög
;

137 
	ma
;

139 
	t¨gumít
;

142 
	#N_DIRECT_ALLOC_ARGUMENTS
 7

	)

146 
size_t
 
	mcou¡
;

147 
¨gumít
 *
	m¨g
;

148 
¨gumít
 
	mdúe˘_Æloc_¨g
[
N_DIRECT_ALLOC_ARGUMENTS
];

150 
	t¨gumíts
;

154 #ifde‡
STATIC


155 
	gSTATIC


159 
PRINTF_FETCHARGS
 (
va_li°
 
¨gs
, 
¨gumíts
 *
a
);

	@lib/printf-parse.c

33 #i‚de‡
PRINTF_PARSE


34 
	~<c⁄fig.h
>

38 #i‚de‡
PRINTF_PARSE


39 
	~"¥ötf-∑r£.h
"

43 #i‚de‡
PRINTF_PARSE


44 
	#PRINTF_PARSE
 
¥ötf_∑r£


	)

45 
	#CHAR_T
 

	)

46 
	#DIRECTIVE
 
ch¨_dúe˘ive


	)

47 
	#DIRECTIVES
 
ch¨_dúe˘ives


	)

51 
	~<°ddef.h
>

54 #i‡
deföed
 
IN_LIBINTL
 || deföed 
IN_LIBASPRINTF


55 #i‡
HAVE_STDINT_H_WITH_UINTMAX


56 
	~<°döt.h
>

58 #i‡
HAVE_INTTYPES_H_WITH_UINTMAX


59 
	~<öây≥s.h
>

62 
	~<°döt.h
>

66 
	~<°dlib.h
>

69 
	~<°rög.h
>

72 
	~<î∫o.h
>

75 
	~"xsize.h
"

77 #i‡
CHAR_T_ONLY_ASCII


79 
	~"c-˘y≥.h
"

82 #ifde‡
STATIC


83 
	gSTATIC


86 
	$PRINTF_PARSE
 (c⁄° 
CHAR_T
 *
f‹m©
, 
DIRECTIVES
 *
d
, 
¨gumíts
 *
a
)

88 c⁄° 
CHAR_T
 *
˝
 = 
f‹m©
;

89 
size_t
 
¨g_po¢
 = 0;

90 
size_t
 
d_Æloˇãd
;

91 
size_t
 
a_Æloˇãd
;

92 
size_t
 
max_width_Àngth
 = 0;

93 
size_t
 
max_¥ecisi⁄_Àngth
 = 0;

95 
d
->
cou¡
 = 0;

96 
d_Æloˇãd
 = 
N_DIRECT_ALLOC_DIRECTIVES
;

97 
d
->
dú
 = d->
dúe˘_Æloc_dú
;

99 
a
->
cou¡
 = 0;

100 
a_Æloˇãd
 = 
N_DIRECT_ALLOC_ARGUMENTS
;

101 
a
->
¨g
 =á->
dúe˘_Æloc_¨g
;

103 
	#REGISTER_ARG
(
_ödex_
,
_ty≥_
) \

105 
size_t
 
n
 = (
_ödex_
); \

106 i‡(
n
 >
a_Æloˇãd
) \

108 
size_t
 
mem‹y_size
; \

109 
¨gumít
 *
mem‹y
; \

111 
a_Æloˇãd
 = 
	`xtimes
 (a_allocated, 2); \

112 i‡(
a_Æloˇãd
 <
n
) \

113 
a_Æloˇãd
 = 
	`xsum
 (
n
, 1); \

114 
mem‹y_size
 = 
	`xtimes
 (
a_Æloˇãd
,  (
¨gumít
)); \

115 i‡(
	`size_ovîÊow_p
 (
mem‹y_size
)) \

117 
out_of_mem‹y
; \

118 
mem‹y
 = (
¨gumít
 *Ë(
a
->
¨g
 !a->
dúe˘_Æloc_¨g
 \

119 ? 
	`ªÆloc
 (
a
->
¨g
, 
mem‹y_size
) \

120 : 
	`mÆloc
 (
mem‹y_size
)); \

121 i‡(
mem‹y
 =
NULL
) \

123 
out_of_mem‹y
; \

124 i‡(
a
->
¨g
 =a->
dúe˘_Æloc_¨g
) \

125 
	`mem˝y
 (
mem‹y
, 
a
->
¨g
,á->
cou¡
 *  (
¨gumít
)); \

126 
a
->
¨g
 = 
mem‹y
; \

128 
a
->
cou¡
 <
n
) \

129 
a
->
¨g
[a->
cou¡
++].
ty≥
 = 
TYPE_NONE
; \

130 i‡(
a
->
¨g
[
n
].
ty≥
 =
TYPE_NONE
) \

131 
a
->
¨g
[
n
].
ty≥
 = (
_ty≥_
); \

132 i‡(
a
->
¨g
[
n
].
ty≥
 !(
_ty≥_
)) \

134 
îr‹
; \

135 }

	)

137 *
˝
 != '\0')

139 
CHAR_T
 
c
 = *
˝
++;

140 i‡(
c
 == '%')

142 
size_t
 
¨g_ödex
 = 
ARG_NONE
;

143 
DIRECTIVE
 *
dp
 = &
d
->
dú
[d->
cou¡
];

146 
dp
->
dú_°¨t
 = 
˝
 - 1;

147 
dp
->
Êags
 = 0;

148 
dp
->
width_°¨t
 = 
NULL
;

149 
dp
->
width_íd
 = 
NULL
;

150 
dp
->
width_¨g_ödex
 = 
ARG_NONE
;

151 
dp
->
¥ecisi⁄_°¨t
 = 
NULL
;

152 
dp
->
¥ecisi⁄_íd
 = 
NULL
;

153 
dp
->
¥ecisi⁄_¨g_ödex
 = 
ARG_NONE
;

154 
dp
->
¨g_ödex
 = 
ARG_NONE
;

157 i‡(*
˝
 >= '0' && *cp <= '9')

159 c⁄° 
CHAR_T
 *
≈
;

161 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

163 i‡(*
≈
 == '$')

165 
size_t
 
n
 = 0;

167 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

168 
n
 = 
	`xsum
 (
	`xtimes
 (n, 10), *
≈
 - '0');

169 i‡(
n
 == 0)

171 
îr‹
;

172 i‡(
	`size_ovîÊow_p
 (
n
))

174 
îr‹
;

175 
¨g_ödex
 = 
n
 - 1;

176 
˝
 = 
≈
 + 1;

183 i‡(*
˝
 == '\'')

185 
dp
->
Êags
 |
FLAG_GROUP
;

186 
˝
++;

188 i‡(*
˝
 == '-')

190 
dp
->
Êags
 |
FLAG_LEFT
;

191 
˝
++;

193 i‡(*
˝
 == '+')

195 
dp
->
Êags
 |
FLAG_SHOWSIGN
;

196 
˝
++;

198 i‡(*
˝
 == ' ')

200 
dp
->
Êags
 |
FLAG_SPACE
;

201 
˝
++;

203 i‡(*
˝
 == '#')

205 
dp
->
Êags
 |
FLAG_ALT
;

206 
˝
++;

208 i‡(*
˝
 == '0')

210 
dp
->
Êags
 |
FLAG_ZERO
;

211 
˝
++;

213 #i‡
__GLIBC__
 >2 && !
deföed
 
__UCLIBC__


214 i‡(*
˝
 == 'I')

216 
dp
->
Êags
 |
FLAG_LOCALIZED
;

217 
˝
++;

225 i‡(*
˝
 == '*')

227 
dp
->
width_°¨t
 = 
˝
;

228 
˝
++;

229 
dp
->
width_íd
 = 
˝
;

230 i‡(
max_width_Àngth
 < 1)

231 
max_width_Àngth
 = 1;

234 i‡(*
˝
 >= '0' && *cp <= '9')

236 c⁄° 
CHAR_T
 *
≈
;

238 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

240 i‡(*
≈
 == '$')

242 
size_t
 
n
 = 0;

244 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

245 
n
 = 
	`xsum
 (
	`xtimes
 (n, 10), *
≈
 - '0');

246 i‡(
n
 == 0)

248 
îr‹
;

249 i‡(
	`size_ovîÊow_p
 (
n
))

251 
îr‹
;

252 
dp
->
width_¨g_ödex
 = 
n
 - 1;

253 
˝
 = 
≈
 + 1;

256 i‡(
dp
->
width_¨g_ödex
 =
ARG_NONE
)

258 
dp
->
width_¨g_ödex
 = 
¨g_po¢
++;

259 i‡(
dp
->
width_¨g_ödex
 =
ARG_NONE
)

261 
îr‹
;

263 
	`REGISTER_ARG
 (
dp
->
width_¨g_ödex
, 
TYPE_INT
);

265 i‡(*
˝
 >= '0' && *cp <= '9')

267 
size_t
 
width_Àngth
;

269 
dp
->
width_°¨t
 = 
˝
;

270 ; *
˝
 >= '0' && *cp <= '9'; cp++)

272 
dp
->
width_íd
 = 
˝
;

273 
width_Àngth
 = 
dp
->
width_íd
 - dp->
width_°¨t
;

274 i‡(
max_width_Àngth
 < 
width_Àngth
)

275 
max_width_Àngth
 = 
width_Àngth
;

279 i‡(*
˝
 == '.')

281 
˝
++;

282 i‡(*
˝
 == '*')

284 
dp
->
¥ecisi⁄_°¨t
 = 
˝
 - 1;

285 
˝
++;

286 
dp
->
¥ecisi⁄_íd
 = 
˝
;

287 i‡(
max_¥ecisi⁄_Àngth
 < 2)

288 
max_¥ecisi⁄_Àngth
 = 2;

291 i‡(*
˝
 >= '0' && *cp <= '9')

293 c⁄° 
CHAR_T
 *
≈
;

295 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

297 i‡(*
≈
 == '$')

299 
size_t
 
n
 = 0;

301 
≈
 = 
˝
; *np >= '0' && *np <= '9';Çp++)

302 
n
 = 
	`xsum
 (
	`xtimes
 (n, 10), *
≈
 - '0');

303 i‡(
n
 == 0)

305 
îr‹
;

306 i‡(
	`size_ovîÊow_p
 (
n
))

309 
îr‹
;

310 
dp
->
¥ecisi⁄_¨g_ödex
 = 
n
 - 1;

311 
˝
 = 
≈
 + 1;

314 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 =
ARG_NONE
)

316 
dp
->
¥ecisi⁄_¨g_ödex
 = 
¨g_po¢
++;

317 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 =
ARG_NONE
)

319 
îr‹
;

321 
	`REGISTER_ARG
 (
dp
->
¥ecisi⁄_¨g_ödex
, 
TYPE_INT
);

325 
size_t
 
¥ecisi⁄_Àngth
;

327 
dp
->
¥ecisi⁄_°¨t
 = 
˝
 - 1;

328 ; *
˝
 >= '0' && *cp <= '9'; cp++)

330 
dp
->
¥ecisi⁄_íd
 = 
˝
;

331 
¥ecisi⁄_Àngth
 = 
dp
->
¥ecisi⁄_íd
 - dp->
¥ecisi⁄_°¨t
;

332 i‡(
max_¥ecisi⁄_Àngth
 < 
¥ecisi⁄_Àngth
)

333 
max_¥ecisi⁄_Àngth
 = 
¥ecisi⁄_Àngth
;

338 
¨g_ty≥
 
ty≥
;

342 
Êags
 = 0;

346 i‡(*
˝
 == 'h')

348 
Êags
 |= (1 << (flags & 1));

349 
˝
++;

351 i‡(*
˝
 == 'L')

353 
Êags
 |= 4;

354 
˝
++;

356 i‡(*
˝
 == 'l')

358 
Êags
 += 8;

359 
˝
++;

361 i‡(*
˝
 == 'j')

363 i‡( (
ötmax_t
) >  ())

366 
Êags
 += 16;

368 i‡( (
ötmax_t
) >  ())

371 
Êags
 += 8;

373 
˝
++;

375 i‡(*
˝
 == 'z' || *cp == 'Z')

380 i‡( (
size_t
) >  ())

383 
Êags
 += 16;

385 i‡( (
size_t
) >  ())

388 
Êags
 += 8;

390 
˝
++;

392 i‡(*
˝
 == 't')

394 i‡( (
±rdiff_t
) >  ())

397 
Êags
 += 16;

399 i‡( (
±rdiff_t
) >  ())

402 
Êags
 += 8;

404 
˝
++;

406 #i‡
deföed
 
__APPLE__
 && deföed 
__MACH__


410 i‡(*
˝
 == 'q')

415 
Êags
 += 16;

420 
Êags
 += 8;

422 
˝
++;

425 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


429 i‡(*
˝
 == 'I' && cp[1] == '6' && cp[2] == '4')

434 
Êags
 += 16;

439 
Êags
 += 8;

441 
˝
 += 3;

449 
c
 = *
˝
++;

450 
c
)

453 #i‡
HAVE_LONG_LONG_INT


455 i‡(
Êags
 >= 16 || (flags & 4))

456 
ty≥
 = 
TYPE_LONGLONGINT
;

461 i‡(
Êags
 >= 8)

462 
ty≥
 = 
TYPE_LONGINT
;

463 i‡(
Êags
 & 2)

464 
ty≥
 = 
TYPE_SCHAR
;

465 i‡(
Êags
 & 1)

466 
ty≥
 = 
TYPE_SHORT
;

468 
ty≥
 = 
TYPE_INT
;

471 #i‡
HAVE_LONG_LONG_INT


473 i‡(
Êags
 >= 16 || (flags & 4))

474 
ty≥
 = 
TYPE_ULONGLONGINT
;

479 i‡(
Êags
 >= 8)

480 
ty≥
 = 
TYPE_ULONGINT
;

481 i‡(
Êags
 & 2)

482 
ty≥
 = 
TYPE_UCHAR
;

483 i‡(
Êags
 & 1)

484 
ty≥
 = 
TYPE_USHORT
;

486 
ty≥
 = 
TYPE_UINT
;

490 i‡(
Êags
 >= 16 || (flags & 4))

491 
ty≥
 = 
TYPE_LONGDOUBLE
;

493 
ty≥
 = 
TYPE_DOUBLE
;

496 i‡(
Êags
 >= 8)

497 #i‡
HAVE_WINT_T


498 
ty≥
 = 
TYPE_WIDE_CHAR
;

500 
îr‹
;

503 
ty≥
 = 
TYPE_CHAR
;

505 #i‡
HAVE_WINT_T


507 
ty≥
 = 
TYPE_WIDE_CHAR
;

508 
c
 = 'c';

512 i‡(
Êags
 >= 8)

513 #i‡
HAVE_WCHAR_T


514 
ty≥
 = 
TYPE_WIDE_STRING
;

516 
îr‹
;

519 
ty≥
 = 
TYPE_STRING
;

521 #i‡
HAVE_WCHAR_T


523 
ty≥
 = 
TYPE_WIDE_STRING
;

524 
c
 = 's';

528 
ty≥
 = 
TYPE_POINTER
;

531 #i‡
HAVE_LONG_LONG_INT


533 i‡(
Êags
 >= 16 || (flags & 4))

534 
ty≥
 = 
TYPE_COUNT_LONGLONGINT_POINTER
;

539 i‡(
Êags
 >= 8)

540 
ty≥
 = 
TYPE_COUNT_LONGINT_POINTER
;

541 i‡(
Êags
 & 2)

542 
ty≥
 = 
TYPE_COUNT_SCHAR_POINTER
;

543 i‡(
Êags
 & 1)

544 
ty≥
 = 
TYPE_COUNT_SHORT_POINTER
;

546 
ty≥
 = 
TYPE_COUNT_INT_POINTER
;

548 #i‡
ENABLE_UNISTDIO


551 i‡(
Êags
 >= 16)

552 
ty≥
 = 
TYPE_U32_STRING
;

553 i‡(
Êags
 >= 8)

554 
ty≥
 = 
TYPE_U16_STRING
;

556 
ty≥
 = 
TYPE_U8_STRING
;

560 
ty≥
 = 
TYPE_NONE
;

564 
îr‹
;

568 i‡(
ty≥
 !
TYPE_NONE
)

570 
dp
->
¨g_ödex
 =árg_index;

571 i‡(
dp
->
¨g_ödex
 =
ARG_NONE
)

573 
dp
->
¨g_ödex
 = 
¨g_po¢
++;

574 i‡(
dp
->
¨g_ödex
 =
ARG_NONE
)

576 
îr‹
;

578 
	`REGISTER_ARG
 (
dp
->
¨g_ödex
, 
ty≥
);

580 
dp
->
c⁄vîsi⁄
 = 
c
;

581 
dp
->
dú_íd
 = 
˝
;

584 
d
->
cou¡
++;

585 i‡(
d
->
cou¡
 >
d_Æloˇãd
)

587 
size_t
 
mem‹y_size
;

588 
DIRECTIVE
 *
mem‹y
;

590 
d_Æloˇãd
 = 
	`xtimes
 (d_allocated, 2);

591 
mem‹y_size
 = 
	`xtimes
 (
d_Æloˇãd
,  (
DIRECTIVE
));

592 i‡(
	`size_ovîÊow_p
 (
mem‹y_size
))

594 
out_of_mem‹y
;

595 
mem‹y
 = (
DIRECTIVE
 *Ë(
d
->
dú
 !d->
dúe˘_Æloc_dú


596 ? 
	`ªÆloc
 (
d
->
dú
, 
mem‹y_size
)

597 : 
	`mÆloc
 (
mem‹y_size
));

598 i‡(
mem‹y
 =
NULL
)

600 
out_of_mem‹y
;

601 i‡(
d
->
dú
 =d->
dúe˘_Æloc_dú
)

602 
	`mem˝y
 (
mem‹y
, 
d
->
dú
, d->
cou¡
 *  (
DIRECTIVE
));

603 
d
->
dú
 = 
mem‹y
;

606 #i‡
CHAR_T_ONLY_ASCII


607 i‡(!
	`c_ißscii
 (
c
))

610 
îr‹
;

614 
d
->
dú
[d->
cou¡
].
dú_°¨t
 = 
˝
;

616 
d
->
max_width_Àngth
 = max_width_length;

617 
d
->
max_¥ecisi⁄_Àngth
 = max_precision_length;

620 
îr‹
:

621 i‡(
a
->
¨g
 !a->
dúe˘_Æloc_¨g
)

622 
	`‰ì
 (
a
->
¨g
);

623 i‡(
d
->
dú
 !d->
dúe˘_Æloc_dú
)

624 
	`‰ì
 (
d
->
dú
);

625 
î∫o
 = 
EINVAL
;

628 
out_of_mem‹y
:

629 i‡(
a
->
¨g
 !a->
dúe˘_Æloc_¨g
)

630 
	`‰ì
 (
a
->
¨g
);

631 i‡(
d
->
dú
 !d->
dúe˘_Æloc_dú
)

632 
	`‰ì
 (
d
->
dú
);

633 
î∫o
 = 
ENOMEM
;

635 
	}
}

637 #unde‡
PRINTF_PARSE


638 #unde‡
DIRECTIVES


639 #unde‡
DIRECTIVE


640 #unde‡
CHAR_T_ONLY_ASCII


641 #unde‡
CHAR_T


	@lib/printf-parse.h

21 #i‚de‡
_PRINTF_PARSE_H


22 
	#_PRINTF_PARSE_H


	)

28 #i‡
HAVE_FEATURES_H


29 
	~<„©uªs.h
>

32 
	~"¥ötf-¨gs.h
"

36 
	#FLAG_GROUP
 1

	)

37 
	#FLAG_LEFT
 2

	)

38 
	#FLAG_SHOWSIGN
 4

	)

39 
	#FLAG_SPACE
 8

	)

40 
	#FLAG_ALT
 16

	)

41 
	#FLAG_ZERO
 32

	)

42 #i‡
__GLIBC__
 >2 && !
deföed
 
__UCLIBC__


43 
	#FLAG_LOCALIZED
 64

	)

47 
	#ARG_NONE
 (~(
size_t
)0)

	)

53 
	#N_DIRECT_ALLOC_DIRECTIVES
 7

	)

58 c⁄° * 
	mdú_°¨t
;

59 c⁄° * 
	mdú_íd
;

60 
	mÊags
;

61 c⁄° * 
	mwidth_°¨t
;

62 c⁄° * 
	mwidth_íd
;

63 
size_t
 
	mwidth_¨g_ödex
;

64 c⁄° * 
	m¥ecisi⁄_°¨t
;

65 c⁄° * 
	m¥ecisi⁄_íd
;

66 
size_t
 
	m¥ecisi⁄_¨g_ödex
;

67 
	mc⁄vîsi⁄
;

68 
size_t
 
	m¨g_ödex
;

70 
	tch¨_dúe˘ive
;

75 
size_t
 
	mcou¡
;

76 
ch¨_dúe˘ive
 *
	mdú
;

77 
size_t
 
	mmax_width_Àngth
;

78 
size_t
 
	mmax_¥ecisi⁄_Àngth
;

79 
ch¨_dúe˘ive
 
	mdúe˘_Æloc_dú
[
N_DIRECT_ALLOC_DIRECTIVES
];

81 
	tch¨_dúe˘ives
;

83 #i‡
ENABLE_UNISTDIO


88 c⁄° 
uöt8_t
* 
	mdú_°¨t
;

89 c⁄° 
uöt8_t
* 
	mdú_íd
;

90 
	mÊags
;

91 c⁄° 
uöt8_t
* 
	mwidth_°¨t
;

92 c⁄° 
uöt8_t
* 
	mwidth_íd
;

93 
size_t
 
	mwidth_¨g_ödex
;

94 c⁄° 
uöt8_t
* 
	m¥ecisi⁄_°¨t
;

95 c⁄° 
uöt8_t
* 
	m¥ecisi⁄_íd
;

96 
size_t
 
	m¥ecisi⁄_¨g_ödex
;

97 
uöt8_t
 
	mc⁄vîsi⁄
;

98 
size_t
 
	m¨g_ödex
;

100 
	tu8_dúe˘ive
;

105 
size_t
 
	mcou¡
;

106 
u8_dúe˘ive
 *
	mdú
;

107 
size_t
 
	mmax_width_Àngth
;

108 
size_t
 
	mmax_¥ecisi⁄_Àngth
;

109 
u8_dúe˘ive
 
	mdúe˘_Æloc_dú
[
N_DIRECT_ALLOC_DIRECTIVES
];

111 
	tu8_dúe˘ives
;

116 c⁄° 
uöt16_t
* 
	mdú_°¨t
;

117 c⁄° 
uöt16_t
* 
	mdú_íd
;

118 
	mÊags
;

119 c⁄° 
uöt16_t
* 
	mwidth_°¨t
;

120 c⁄° 
uöt16_t
* 
	mwidth_íd
;

121 
size_t
 
	mwidth_¨g_ödex
;

122 c⁄° 
uöt16_t
* 
	m¥ecisi⁄_°¨t
;

123 c⁄° 
uöt16_t
* 
	m¥ecisi⁄_íd
;

124 
size_t
 
	m¥ecisi⁄_¨g_ödex
;

125 
uöt16_t
 
	mc⁄vîsi⁄
;

126 
size_t
 
	m¨g_ödex
;

128 
	tu16_dúe˘ive
;

133 
size_t
 
	mcou¡
;

134 
u16_dúe˘ive
 *
	mdú
;

135 
size_t
 
	mmax_width_Àngth
;

136 
size_t
 
	mmax_¥ecisi⁄_Àngth
;

137 
u16_dúe˘ive
 
	mdúe˘_Æloc_dú
[
N_DIRECT_ALLOC_DIRECTIVES
];

139 
	tu16_dúe˘ives
;

144 c⁄° 
uöt32_t
* 
	mdú_°¨t
;

145 c⁄° 
uöt32_t
* 
	mdú_íd
;

146 
	mÊags
;

147 c⁄° 
uöt32_t
* 
	mwidth_°¨t
;

148 c⁄° 
uöt32_t
* 
	mwidth_íd
;

149 
size_t
 
	mwidth_¨g_ödex
;

150 c⁄° 
uöt32_t
* 
	m¥ecisi⁄_°¨t
;

151 c⁄° 
uöt32_t
* 
	m¥ecisi⁄_íd
;

152 
size_t
 
	m¥ecisi⁄_¨g_ödex
;

153 
uöt32_t
 
	mc⁄vîsi⁄
;

154 
size_t
 
	m¨g_ödex
;

156 
	tu32_dúe˘ive
;

161 
size_t
 
	mcou¡
;

162 
u32_dúe˘ive
 *
	mdú
;

163 
size_t
 
	mmax_width_Àngth
;

164 
size_t
 
	mmax_¥ecisi⁄_Àngth
;

165 
u32_dúe˘ive
 
	mdúe˘_Æloc_dú
[
N_DIRECT_ALLOC_DIRECTIVES
];

167 
	tu32_dúe˘ives
;

176 #i‡
ENABLE_UNISTDIO


178 
ulc_¥ötf_∑r£
 (c⁄° *
f‹m©
, 
ch¨_dúe˘ives
 *
d
, 
¨gumíts
 *
a
);

180 
u8_¥ötf_∑r£
 (c⁄° 
uöt8_t
 *
f‹m©
, 
u8_dúe˘ives
 *
d
, 
¨gumíts
 *
a
);

182 
u16_¥ötf_∑r£
 (c⁄° 
uöt16_t
 *
f‹m©
, 
u16_dúe˘ives
 *
d
,

183 
¨gumíts
 *
a
);

185 
u32_¥ötf_∑r£
 (c⁄° 
uöt32_t
 *
f‹m©
, 
u32_dúe˘ives
 *
d
,

186 
¨gumíts
 *
a
);

188 #ifde‡
STATIC


189 
	gSTATIC


193 
¥ötf_∑r£
 (c⁄° *
f‹m©
, 
ch¨_dúe˘ives
 *
d
, 
¨gumíts
 *
a
);

	@lib/quote.c

21 
	~<c⁄fig.h
>

23 
	~"quŸórg.h
"

24 
	~"quŸe.h
"

29 
	$quŸe_n
 (
n
, c⁄° *
«me
)

31  
	`quŸórg_n_°yÀ
 (
n
, 
loˇÀ_quŸög_°yÀ
, 
«me
);

32 
	}
}

37 
	$quŸe
 (c⁄° *
«me
)

39  
	`quŸe_n
 (0, 
«me
);

40 
	}
}

	@lib/quote.h

19 c⁄° *
quŸe_n
 (
n
, c⁄° *
«me
);

20 c⁄° *
quŸe
 (c⁄° *
«me
);

	@lib/quotearg.c

20 
	~<c⁄fig.h
>

22 
	~"quŸórg.h
"

24 
	~"xÆloc.h
"

26 
	~<˘y≥.h
>

27 
	~<î∫o.h
>

28 
	~<limôs.h
>

29 
	~<°dboﬁ.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<wch¨.h
>

33 
	~<w˘y≥.h
>

35 
	~"gëãxt.h
"

36 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

37 
	#N_
(
msgid
Ë
	)
msgid

39 #i‚de‡
SIZE_MAX


40 
	#SIZE_MAX
 ((
size_t
Ë-1)

	)

43 
	#INT_BITS
 ( (Ë* 
CHAR_BIT
)

	)

45 
	squŸög_›ti⁄s


48 
quŸög_°yÀ
 
	m°yÀ
;

51 
	mÊags
;

55 
	mquŸe_the£_too
[(
UCHAR_MAX
 / 
INT_BITS
) + 1];

58 c⁄° *
	mÀ·_quŸe
;

61 c⁄° *
	mright_quŸe
;

65 c⁄° *c⁄° 
	gquŸög_°yÀ_¨gs
[] =

79 
quŸög_°yÀ
 c⁄° 
	gquŸög_°yÀ_vÆs
[] =

81 
lôîÆ_quŸög_°yÀ
,

82 
shñl_quŸög_°yÀ
,

83 
shñl_Æways_quŸög_°yÀ
,

84 
c_quŸög_°yÀ
,

85 
c_maybe_quŸög_°yÀ
,

86 
esˇ≥_quŸög_°yÀ
,

87 
loˇÀ_quŸög_°yÀ
,

88 
˛oˇÀ_quŸög_°yÀ


92 
quŸög_›ti⁄s
 
	gdeÁu…_quŸög_›ti⁄s
;

97 
quŸög_›ti⁄s
 *

98 
	$˛⁄e_quŸög_›ti⁄s
 (
quŸög_›ti⁄s
 *
o
)

100 
e
 = 
î∫o
;

101 
quŸög_›ti⁄s
 *
p
 = 
	`xmemdup
 (
o
 ? o : &
deÁu…_quŸög_›ti⁄s
,

102  *
o
);

103 
î∫o
 = 
e
;

104  
p
;

105 
	}
}

108 
quŸög_°yÀ


109 
	$gë_quŸög_°yÀ
 (
quŸög_›ti⁄s
 *
o
)

111  (
o
 ? o : &
deÁu…_quŸög_›ti⁄s
)->
°yÀ
;

112 
	}
}

117 
	$£t_quŸög_°yÀ
 (
quŸög_›ti⁄s
 *
o
, 
quŸög_°yÀ
 
s
)

119 (
o
 ? o : &
deÁu…_quŸög_›ti⁄s
)->
°yÀ
 = 
s
;

120 
	}
}

128 
	$£t_ch¨_quŸög
 (
quŸög_›ti⁄s
 *
o
, 
c
, 
i
)

130 
uc
 = 
c
;

131 *
p
 =

132 (
o
 ? o : &
deÁu…_quŸög_›ti⁄s
)->
quŸe_the£_too
 + 
uc
 / 
INT_BITS
;

133 
shi·
 = 
uc
 % 
INT_BITS
;

134 
r
 = (*
p
 >> 
shi·
) & 1;

135 *
p
 ^((
i
 & 1Ë^ 
r
Ë<< 
shi·
;

136  
r
;

137 
	}
}

144 
	$£t_quŸög_Êags
 (
quŸög_›ti⁄s
 *
o
, 
i
)

146 
r
;

147 i‡(!
o
)

148 
o
 = &
deÁu…_quŸög_›ti⁄s
;

149 
r
 = 
o
->
Êags
;

150 
o
->
Êags
 = 
i
;

151  
r
;

152 
	}
}

155 
	$£t_cu°om_quŸög
 (
quŸög_›ti⁄s
 *
o
,

156 c⁄° *
À·_quŸe
, c⁄° *
right_quŸe
)

158 i‡(!
o
)

159 
o
 = &
deÁu…_quŸög_›ti⁄s
;

160 
o
->
°yÀ
 = 
cu°om_quŸög_°yÀ
;

161 i‡(!
À·_quŸe
 || !
right_quŸe
)

162 
	`ab‹t
 ();

163 
o
->
À·_quŸe
 =Üeft_quote;

164 
o
->
right_quŸe
 =Ñight_quote;

165 
	}
}

168 
quŸög_›ti⁄s


169 
	$quŸög_›ti⁄s_‰om_°yÀ
 (
quŸög_°yÀ
 
°yÀ
)

171 
quŸög_›ti⁄s
 
o
 = { 0 };

172 i‡(
°yÀ
 =
cu°om_quŸög_°yÀ
)

173 
	`ab‹t
 ();

174 
o
.
°yÀ
 = style;

175  
o
;

176 
	}
}

181 
	$gëãxt_quŸe
 (c⁄° *
msgid
, 
quŸög_°yÀ
 
s
)

183 c⁄° *
å™¶©i⁄
 = 
	`_
(
msgid
);

184 i‡(
å™¶©i⁄
 =
msgid
 && 
s
 =
˛oˇÀ_quŸög_°yÀ
)

185 
å™¶©i⁄
 = "\"";

186  
å™¶©i⁄
;

187 
	}
}

202 
size_t


203 
	$quŸórg_buf„r_ª°yÀd
 (*
buf„r
, 
size_t
 
buf„rsize
,

204 c⁄° *
¨g
, 
size_t
 
¨gsize
,

205 
quŸög_°yÀ
 quŸög_°yÀ, 
Êags
,

206 c⁄° *
quŸe_the£_too
,

207 c⁄° *
À·_quŸe
,

208 c⁄° *
right_quŸe
)

210 
size_t
 
i
;

211 
size_t
 
Àn
 = 0;

212 c⁄° *
quŸe_°rög
 = 0;

213 
size_t
 
quŸe_°rög_Àn
 = 0;

214 
boﬁ
 
back¶ash_esˇ≥s
 = 
Ál£
;

215 
boﬁ
 
unibyã_loˇÀ
 = 
MB_CUR_MAX
 == 1;

216 
boﬁ
 
ñide_ouãr_quŸes
 = (
Êags
 & 
QA_ELIDE_OUTER_QUOTES
) != 0;

218 
	#STORE
(
c
) \

221 i‡(
Àn
 < 
buf„rsize
) \

222 
buf„r
[
Àn
] = (
c
); \

223 
Àn
++; \

225 0)

	)

227 
quŸög_°yÀ
)

229 
c_maybe_quŸög_°yÀ
:

230 
quŸög_°yÀ
 = 
c_quŸög_°yÀ
;

231 
ñide_ouãr_quŸes
 = 
åue
;

233 
c_quŸög_°yÀ
:

234 i‡(!
ñide_ouãr_quŸes
)

235 
	`STORE
 ('"');

236 
back¶ash_esˇ≥s
 = 
åue
;

237 
quŸe_°rög
 = "\"";

238 
quŸe_°rög_Àn
 = 1;

241 
esˇ≥_quŸög_°yÀ
:

242 
back¶ash_esˇ≥s
 = 
åue
;

243 
ñide_ouãr_quŸes
 = 
Ál£
;

246 
loˇÀ_quŸög_°yÀ
:

247 
˛oˇÀ_quŸög_°yÀ
:

248 
cu°om_quŸög_°yÀ
:

250 i‡(
quŸög_°yÀ
 !
cu°om_quŸög_°yÀ
)

271 
À·_quŸe
 = 
	`gëãxt_quŸe
 (
	`N_
("`"), 
quŸög_°yÀ
);

272 
right_quŸe
 = 
	`gëãxt_quŸe
 (
	`N_
("'"), 
quŸög_°yÀ
);

274 i‡(!
ñide_ouãr_quŸes
)

275 
quŸe_°rög
 = 
À·_quŸe
; *quote_string; quote_string++)

276 
	`STORE
 (*
quŸe_°rög
);

277 
back¶ash_esˇ≥s
 = 
åue
;

278 
quŸe_°rög
 = 
right_quŸe
;

279 
quŸe_°rög_Àn
 = 
	`°æí
 (
quŸe_°rög
);

283 
shñl_quŸög_°yÀ
:

284 
quŸög_°yÀ
 = 
shñl_Æways_quŸög_°yÀ
;

285 
ñide_ouãr_quŸes
 = 
åue
;

287 
shñl_Æways_quŸög_°yÀ
:

288 i‡(!
ñide_ouãr_quŸes
)

289 
	`STORE
 ('\'');

290 
quŸe_°rög
 = "'";

291 
quŸe_°rög_Àn
 = 1;

294 
lôîÆ_quŸög_°yÀ
:

295 
ñide_ouãr_quŸes
 = 
Ál£
;

299 
	`ab‹t
 ();

302 
i
 = 0; ! (
¨gsize
 =
SIZE_MAX
 ? 
¨g
[i] == '\0' : i ==árgsize); i++)

304 
c
;

305 
esc
;

306 
boﬁ
 
is_right_quŸe
 = 
Ál£
;

308 i‡(
back¶ash_esˇ≥s


309 && 
quŸe_°rög_Àn


310 && 
i
 + 
quŸe_°rög_Àn
 <
¨gsize


311 && 
	`memcmp
 (
¨g
 + 
i
, 
quŸe_°rög
, 
quŸe_°rög_Àn
) == 0)

313 i‡(
ñide_ouãr_quŸes
)

314 
f‹˚_ouãr_quŸög_°yÀ
;

315 
is_right_quŸe
 = 
åue
;

318 
c
 = 
¨g
[
i
];

319 
c
)

322 i‡(
back¶ash_esˇ≥s
)

324 i‡(
ñide_ouãr_quŸes
)

325 
f‹˚_ouãr_quŸög_°yÀ
;

326 
	`STORE
 ('\\');

332 i‡(
i
 + 1 < 
¨gsize
 && '0' <
¨g
[i + 1] &&árg[i + 1] <= '9')

334 
	`STORE
 ('0');

335 
	`STORE
 ('0');

337 
c
 = '0';

343 i‡(
Êags
 & 
QA_ELIDE_NULL_BYTES
)

348 
quŸög_°yÀ
)

350 
shñl_Æways_quŸög_°yÀ
:

351 i‡(
ñide_ouãr_quŸes
)

352 
f‹˚_ouãr_quŸög_°yÀ
;

355 
c_quŸög_°yÀ
:

356 i‡((
Êags
 & 
QA_SPLIT_TRIGRAPHS
)

357 && 
i
 + 2 < 
¨gsize
 && 
¨g
[i + 1] == '?')

358 
¨g
[
i
 + 2])

365 i‡(
ñide_ouãr_quŸes
)

366 
f‹˚_ouãr_quŸög_°yÀ
;

367 
c
 = 
¨g
[
i
 + 2];

368 
i
 += 2;

369 
	`STORE
 ('?');

370 
	`STORE
 ('"');

371 
	`STORE
 ('"');

372 
	`STORE
 ('?');

385 '\a': 
esc
 = 'a'; 
c_esˇ≥
;

386 '\b': 
esc
 = 'b'; 
c_esˇ≥
;

387 '\f': 
esc
 = 'f'; 
c_esˇ≥
;

388 '\n': 
esc
 = 'n'; 
c_™d_shñl_esˇ≥
;

389 '\r': 
esc
 = 'r'; 
c_™d_shñl_esˇ≥
;

390 '\t': 
esc
 = 't'; 
c_™d_shñl_esˇ≥
;

391 '\v': 
esc
 = 'v'; 
c_esˇ≥
;

392 '\\': 
esc
 = 
c
;

395 i‡(
back¶ash_esˇ≥s
 && 
ñide_ouãr_quŸes
 && 
quŸe_°rög_Àn
)

396 
°‹e_c
;

398 
c_™d_shñl_esˇ≥
:

399 i‡(
quŸög_°yÀ
 =
shñl_Æways_quŸög_°yÀ


400 && 
ñide_ouãr_quŸes
)

401 
f‹˚_ouãr_quŸög_°yÀ
;

403 
c_esˇ≥
:

404 i‡(
back¶ash_esˇ≥s
)

406 
c
 = 
esc
;

407 
°‹e_esˇ≥
;

412 i‡(! (
¨gsize
 =
SIZE_MAX
 ? 
¨g
[1] == '\0' :árgsize == 1))

416 i‡(
i
 != 0)

432 i‡(
quŸög_°yÀ
 =
shñl_Æways_quŸög_°yÀ


433 && 
ñide_ouãr_quŸes
)

434 
f‹˚_ouãr_quŸög_°yÀ
;

438 i‡(
quŸög_°yÀ
 =
shñl_Æways_quŸög_°yÀ
)

440 i‡(
ñide_ouãr_quŸes
)

441 
f‹˚_ouãr_quŸög_°yÀ
;

442 
	`STORE
 ('\'');

443 
	`STORE
 ('\\');

444 
	`STORE
 ('\'');

480 
size_t
 
m
;

482 
boﬁ
 
¥öèbÀ
;

484 i‡(
unibyã_loˇÀ
)

486 
m
 = 1;

487 
¥öèbÀ
 = 
	`i•röt
 (
c
) != 0;

491 
mb°©e_t
 
mb°©e
;

492 
	`mem£t
 (&
mb°©e
, 0,  mbstate);

494 
m
 = 0;

495 
¥öèbÀ
 = 
åue
;

496 i‡(
¨gsize
 =
SIZE_MAX
)

497 
¨gsize
 = 
	`°æí
 (
¨g
);

501 
wch¨_t
 
w
;

502 
size_t
 
byãs
 = 
	`mbπowc
 (&
w
, &
¨g
[
i
 + 
m
],

503 
¨gsize
 - (
i
 + 
m
), &
mb°©e
);

504 i‡(
byãs
 == 0)

506 i‡(
byãs
 =(
size_t
) -1)

508 
¥öèbÀ
 = 
Ál£
;

511 i‡(
byãs
 =(
size_t
) -2)

513 
¥öèbÀ
 = 
Ál£
;

514 
i
 + 
m
 < 
¨gsize
 && 
¨g
[i + m])

515 
m
++;

524 i‡('[' =0x5b && 
ñide_ouãr_quŸes


525 && 
quŸög_°yÀ
 =
shñl_Æways_quŸög_°yÀ
)

527 
size_t
 
j
;

528 
j
 = 1; j < 
byãs
; j++)

529 
¨g
[
i
 + 
m
 + 
j
])

533 
f‹˚_ouãr_quŸög_°yÀ
;

540 i‡(! 
	`isw¥öt
 (
w
))

541 
¥öèbÀ
 = 
Ál£
;

542 
m
 +
byãs
;

545 ! 
	`mbsöô
 (&
mb°©e
));

548 i‡(1 < 
m
 || (
back¶ash_esˇ≥s
 && ! 
¥öèbÀ
))

552 
size_t
 
ûim
 = 
i
 + 
m
;

556 i‡(
back¶ash_esˇ≥s
 && ! 
¥öèbÀ
)

558 i‡(
ñide_ouãr_quŸes
)

559 
f‹˚_ouãr_quŸög_°yÀ
;

560 
	`STORE
 ('\\');

561 
	`STORE
 ('0' + (
c
 >> 6));

562 
	`STORE
 ('0' + ((
c
 >> 3) & 7));

563 
c
 = '0' + (c & 7);

565 i‡(
is_right_quŸe
)

567 
	`STORE
 ('\\');

568 
is_right_quŸe
 = 
Ál£
;

570 i‡(
ûim
 <
i
 + 1)

572 
	`STORE
 (
c
);

573 
c
 = 
¨g
[++
i
];

576 
°‹e_c
;

581 i‡(! ((
back¶ash_esˇ≥s
 || 
ñide_ouãr_quŸes
)

582 && 
quŸe_the£_too


583 && 
quŸe_the£_too
[
c
 / 
INT_BITS
] & (1 << (c % INT_BITS)))

584 && !
is_right_quŸe
)

585 
°‹e_c
;

587 
°‹e_esˇ≥
:

588 i‡(
ñide_ouãr_quŸes
)

589 
f‹˚_ouãr_quŸög_°yÀ
;

590 
	`STORE
 ('\\');

592 
°‹e_c
:

593 
	`STORE
 (
c
);

596 i‡(
Àn
 =0 && 
quŸög_°yÀ
 =
shñl_Æways_quŸög_°yÀ


597 && 
ñide_ouãr_quŸes
)

598 
f‹˚_ouãr_quŸög_°yÀ
;

600 i‡(
quŸe_°rög
 && !
ñide_ouãr_quŸes
)

601 ; *
quŸe_°rög
; quote_string++)

602 
	`STORE
 (*
quŸe_°rög
);

604 i‡(
Àn
 < 
buf„rsize
)

605 
buf„r
[
Àn
] = '\0';

606  
Àn
;

608 
f‹˚_ouãr_quŸög_°yÀ
:

611  
	`quŸórg_buf„r_ª°yÀd
 (
buf„r
, 
buf„rsize
, 
¨g
, 
¨gsize
,

612 
quŸög_°yÀ
,

613 
Êags
 & ~
QA_ELIDE_OUTER_QUOTES
, 
NULL
,

614 
À·_quŸe
, 
right_quŸe
);

615 
	}
}

626 
size_t


627 
	$quŸórg_buf„r
 (*
buf„r
, 
size_t
 
buf„rsize
,

628 c⁄° *
¨g
, 
size_t
 
¨gsize
,

629 
quŸög_›ti⁄s
 c⁄° *
o
)

631 
quŸög_›ti⁄s
 c⁄° *
p
 = 
o
 ? o : &
deÁu…_quŸög_›ti⁄s
;

632 
e
 = 
î∫o
;

633 
size_t
 
r
 = 
	`quŸórg_buf„r_ª°yÀd
 (
buf„r
, 
buf„rsize
, 
¨g
, 
¨gsize
,

634 
p
->
°yÀ
,Ö->
Êags
,Ö->
quŸe_the£_too
,

635 
p
->
À·_quŸe
,Ö->
right_quŸe
);

636 
î∫o
 = 
e
;

637  
r
;

638 
	}
}

642 
	$quŸórg_Æloc
 (c⁄° *
¨g
, 
size_t
 
¨gsize
,

643 
quŸög_›ti⁄s
 c⁄° *
o
)

645  
	`quŸórg_Æloc_mem
 (
¨g
, 
¨gsize
, 
NULL
, 
o
);

646 
	}
}

655 
	$quŸórg_Æloc_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
, size_à*
size
,

656 
quŸög_›ti⁄s
 c⁄° *
o
)

658 
quŸög_›ti⁄s
 c⁄° *
p
 = 
o
 ? o : &
deÁu…_quŸög_›ti⁄s
;

659 
e
 = 
î∫o
;

661 
Êags
 = 
p
->Êag†| (
size
 ? 0 : 
QA_ELIDE_NULL_BYTES
);

662 
size_t
 
bufsize
 = 
	`quŸórg_buf„r_ª°yÀd
 (0, 0, 
¨g
, 
¨gsize
, 
p
->
°yÀ
,

663 
Êags
, 
p
->
quŸe_the£_too
,

664 
p
->
À·_quŸe
,

665 
p
->
right_quŸe
) + 1;

666 *
buf
 = 
	`xch¨Æloc
 (
bufsize
);

667 
	`quŸórg_buf„r_ª°yÀd
 (
buf
, 
bufsize
, 
¨g
, 
¨gsize
, 
p
->
°yÀ
, 
Êags
,

668 
p
->
quŸe_the£_too
,

669 
p
->
À·_quŸe
,Ö->
right_quŸe
);

670 
î∫o
 = 
e
;

671 i‡(
size
)

672 *
size
 = 
bufsize
 - 1;

673  
buf
;

674 
	}
}

677 
	s¶Ÿvec


679 
size_t
 
	msize
;

680 *
	mvÆ
;

685 
	g¶Ÿ0
[256];

686 
	gn¶Ÿs
 = 1;

687 
¶Ÿvec
 
	g¶Ÿvec0
 = { 
¶Ÿ0
, slot0};

688 
¶Ÿvec
 *
	g¶Ÿvec
 = &
¶Ÿvec0
;

691 
	$quŸórg_‰ì
 ()

693 
¶Ÿvec
 *
sv
 = slotvec;

694 
i
;

695 
i
 = 1; i < 
n¶Ÿs
; i++)

696 
	`‰ì
 (
sv
[
i
].
vÆ
);

697 i‡(
sv
[0].
vÆ
 !
¶Ÿ0
)

699 
	`‰ì
 (
sv
[0].
vÆ
);

700 
¶Ÿvec0
.
size
 =  
¶Ÿ0
;

701 
¶Ÿvec0
.
vÆ
 = 
¶Ÿ0
;

703 i‡(
sv
 !&
¶Ÿvec0
)

705 
	`‰ì
 (
sv
);

706 
¶Ÿvec
 = &
¶Ÿvec0
;

708 
n¶Ÿs
 = 1;

709 
	}
}

720 
	$quŸórg_n_›ti⁄s
 (
n
, c⁄° *
¨g
, 
size_t
 
¨gsize
,

721 
quŸög_›ti⁄s
 c⁄° *
›ti⁄s
)

723 
e
 = 
î∫o
;

725 
n0
 = 
n
;

726 
¶Ÿvec
 *
sv
 = slotvec;

728 i‡(
n
 < 0)

729 
	`ab‹t
 ();

731 i‡(
n¶Ÿs
 <
n0
)

738 
size_t
 
n1
 = 
n0
 + 1;

739 
boﬁ
 
¥óŒoˇãd
 = (
sv
 =&
¶Ÿvec0
);

741 i‡(
	`xÆloc_ovîsized
 (
n1
,  *
sv
))

742 
	`xÆloc_dõ
 ();

744 
¶Ÿvec
 = 
sv
 = 
	`xªÆloc
 (
¥óŒoˇãd
 ? 
NULL
 : sv, 
n1
 *  *sv);

745 i‡(
¥óŒoˇãd
)

746 *
sv
 = 
¶Ÿvec0
;

747 
	`mem£t
 (
sv
 + 
n¶Ÿs
, 0, (
n1
 -Çslots) *  *sv);

748 
n¶Ÿs
 = 
n1
;

752 
size_t
 
size
 = 
sv
[
n
].size;

753 *
vÆ
 = 
sv
[
n
].val;

755 
Êags
 = 
›ti⁄s
->Êag†| 
QA_ELIDE_NULL_BYTES
;

756 
size_t
 
qsize
 = 
	`quŸórg_buf„r_ª°yÀd
 (
vÆ
, 
size
, 
¨g
, 
¨gsize
,

757 
›ti⁄s
->
°yÀ
, 
Êags
,

758 
›ti⁄s
->
quŸe_the£_too
,

759 
›ti⁄s
->
À·_quŸe
,

760 
›ti⁄s
->
right_quŸe
);

762 i‡(
size
 <
qsize
)

764 
sv
[
n
].
size
 = sizê
qsize
 + 1;

765 i‡(
vÆ
 !
¶Ÿ0
)

766 
	`‰ì
 (
vÆ
);

767 
sv
[
n
].
vÆ
 = vÆ = 
	`xch¨Æloc
 (
size
);

768 
	`quŸórg_buf„r_ª°yÀd
 (
vÆ
, 
size
, 
¨g
, 
¨gsize
, 
›ti⁄s
->
°yÀ
,

769 
Êags
, 
›ti⁄s
->
quŸe_the£_too
,

770 
›ti⁄s
->
À·_quŸe
,

771 
›ti⁄s
->
right_quŸe
);

774 
î∫o
 = 
e
;

775  
vÆ
;

777 
	}
}

780 
	$quŸórg_n
 (
n
, c⁄° *
¨g
)

782  
	`quŸórg_n_›ti⁄s
 (
n
, 
¨g
, 
SIZE_MAX
, &
deÁu…_quŸög_›ti⁄s
);

783 
	}
}

786 
	$quŸórg_n_mem
 (
n
, c⁄° *
¨g
, 
size_t
 
¨gsize
)

788  
	`quŸórg_n_›ti⁄s
 (
n
, 
¨g
, 
¨gsize
, &
deÁu…_quŸög_›ti⁄s
);

789 
	}
}

792 
	$quŸórg
 (c⁄° *
¨g
)

794  
	`quŸórg_n
 (0, 
¨g
);

795 
	}
}

798 
	$quŸórg_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
)

800  
	`quŸórg_n_mem
 (0, 
¨g
, 
¨gsize
);

801 
	}
}

804 
	$quŸórg_n_°yÀ
 (
n
, 
quŸög_°yÀ
 
s
, c⁄° *
¨g
)

806 
quŸög_›ti⁄s
 c⁄° 
o
 = 
	`quŸög_›ti⁄s_‰om_°yÀ
 (
s
);

807  
	`quŸórg_n_›ti⁄s
 (
n
, 
¨g
, 
SIZE_MAX
, &
o
);

808 
	}
}

811 
	$quŸórg_n_°yÀ_mem
 (
n
, 
quŸög_°yÀ
 
s
,

812 c⁄° *
¨g
, 
size_t
 
¨gsize
)

814 
quŸög_›ti⁄s
 c⁄° 
o
 = 
	`quŸög_›ti⁄s_‰om_°yÀ
 (
s
);

815  
	`quŸórg_n_›ti⁄s
 (
n
, 
¨g
, 
¨gsize
, &
o
);

816 
	}
}

819 
	$quŸórg_°yÀ
 (
quŸög_°yÀ
 
s
, c⁄° *
¨g
)

821  
	`quŸórg_n_°yÀ
 (0, 
s
, 
¨g
);

822 
	}
}

825 
	$quŸórg_°yÀ_mem
 (
quŸög_°yÀ
 
s
, c⁄° *
¨g
, 
size_t
 
¨gsize
)

827  
	`quŸórg_n_°yÀ_mem
 (0, 
s
, 
¨g
, 
¨gsize
);

828 
	}
}

831 
	$quŸórg_ch¨_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
, 
ch
)

833 
quŸög_›ti⁄s
 
›ti⁄s
;

834 
›ti⁄s
 = 
deÁu…_quŸög_›ti⁄s
;

835 
	`£t_ch¨_quŸög
 (&
›ti⁄s
, 
ch
, 1);

836  
	`quŸórg_n_›ti⁄s
 (0, 
¨g
, 
¨gsize
, &
›ti⁄s
);

837 
	}
}

840 
	$quŸórg_ch¨
 (c⁄° *
¨g
, 
ch
)

842  
	`quŸórg_ch¨_mem
 (
¨g
, 
SIZE_MAX
, 
ch
);

843 
	}
}

846 
	$quŸórg_cﬁ⁄
 (c⁄° *
¨g
)

848  
	`quŸórg_ch¨
 (
¨g
, ':');

849 
	}
}

852 
	$quŸórg_cﬁ⁄_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
)

854  
	`quŸórg_ch¨_mem
 (
¨g
, 
¨gsize
, ':');

855 
	}
}

858 
	$quŸórg_n_cu°om
 (
n
, c⁄° *
À·_quŸe
,

859 c⁄° *
right_quŸe
, c⁄° *
¨g
)

861  
	`quŸórg_n_cu°om_mem
 (
n
, 
À·_quŸe
, 
right_quŸe
, 
¨g
,

862 
SIZE_MAX
);

863 
	}
}

866 
	$quŸórg_n_cu°om_mem
 (
n
, c⁄° *
À·_quŸe
,

867 c⁄° *
right_quŸe
,

868 c⁄° *
¨g
, 
size_t
 
¨gsize
)

870 
quŸög_›ti⁄s
 
o
 = 
deÁu…_quŸög_›ti⁄s
;

871 
	`£t_cu°om_quŸög
 (&
o
, 
À·_quŸe
, 
right_quŸe
);

872  
	`quŸórg_n_›ti⁄s
 (
n
, 
¨g
, 
¨gsize
, &
o
);

873 
	}
}

876 
	$quŸórg_cu°om
 (c⁄° *
À·_quŸe
, c⁄° *
right_quŸe
,

877 c⁄° *
¨g
)

879  
	`quŸórg_n_cu°om
 (0, 
À·_quŸe
, 
right_quŸe
, 
¨g
);

880 
	}
}

883 
	$quŸórg_cu°om_mem
 (c⁄° *
À·_quŸe
, c⁄° *
right_quŸe
,

884 c⁄° *
¨g
, 
size_t
 
¨gsize
)

886  
	`quŸórg_n_cu°om_mem
 (0, 
À·_quŸe
, 
right_quŸe
, 
¨g
,

887 
¨gsize
);

888 
	}
}

	@lib/quotearg.h

21 #i‚de‡
QUOTEARG_H_


22 
	#QUOTEARG_H_
 1

	)

24 
	~<°ddef.h
>

32 
	equŸög_°yÀ


45 
	mlôîÆ_quŸög_°yÀ
,

59 
	mshñl_quŸög_°yÀ
,

74 
	mshñl_Æways_quŸög_°yÀ
,

88 
	mc_quŸög_°yÀ
,

100 
	mc_maybe_quŸög_°yÀ
,

113 
	mesˇ≥_quŸög_°yÀ
,

137 
	mloˇÀ_quŸög_°yÀ
,

162 
	m˛oˇÀ_quŸög_°yÀ
,

205 
	mcu°om_quŸög_°yÀ


209 
	equŸög_Êags


214 
	mQA_ELIDE_NULL_BYTES
 = 0x01,

219 
	mQA_ELIDE_OUTER_QUOTES
 = 0x02,

225 
	mQA_SPLIT_TRIGRAPHS
 = 0x04

229 #i‚de‡
DEFAULT_QUOTING_STYLE


230 
	#DEFAULT_QUOTING_STYLE
 
lôîÆ_quŸög_°yÀ


	)

234 c⁄° *c⁄° 
quŸög_°yÀ_¨gs
[];

235 
quŸög_°yÀ
 c⁄° 
quŸög_°yÀ_vÆs
[];

237 
	gquŸög_›ti⁄s
;

245 
quŸög_›ti⁄s
 *
˛⁄e_quŸög_›ti⁄s
 (quŸög_›ti⁄†*
o
);

248 
quŸög_°yÀ
 
gë_quŸög_°yÀ
 (
quŸög_›ti⁄s
 *
o
);

252 
£t_quŸög_°yÀ
 (
quŸög_›ti⁄s
 *
o
, 
quŸög_°yÀ
 
s
);

261 
£t_ch¨_quŸög
 (
quŸög_›ti⁄s
 *
o
, 
c
, 
i
);

267 
£t_quŸög_Êags
 (
quŸög_›ti⁄s
 *
o
, 
i
);

278 
£t_cu°om_quŸög
 (
quŸög_›ti⁄s
 *
o
,

279 c⁄° *
À·_quŸe
,

280 c⁄° *
right_quŸe
);

293 
size_t
 
quŸórg_buf„r
 (*
buf„r
, size_à
buf„rsize
,

294 c⁄° *
¨g
, 
size_t
 
¨gsize
,

295 
quŸög_›ti⁄s
 c⁄° *
o
);

300 *
quŸórg_Æloc
 (c⁄° *
¨g
, 
size_t
 
¨gsize
,

301 
quŸög_›ti⁄s
 c⁄° *
o
);

309 *
quŸórg_Æloc_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
,

310 
size_t
 *
size
, 
quŸög_›ti⁄s
 c⁄° *
o
);

319 *
quŸórg_n
 (
n
, c⁄° *
¨g
);

322 *
quŸórg
 (c⁄° *
¨g
);

327 *
quŸórg_n_mem
 (
n
, c⁄° *
¨g
, 
size_t
 
¨gsize
);

330 *
quŸórg_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
);

335 *
quŸórg_n_°yÀ
 (
n
, 
quŸög_°yÀ
 
s
, c⁄° *
¨g
);

340 *
quŸórg_n_°yÀ_mem
 (
n
, 
quŸög_°yÀ
 
s
,

341 c⁄° *
¨g
, 
size_t
 
¨gsize
);

344 *
quŸórg_°yÀ
 (
quŸög_°yÀ
 
s
, c⁄° *
¨g
);

347 *
quŸórg_°yÀ_mem
 (
quŸög_°yÀ
 
s
,

348 c⁄° *
¨g
, 
size_t
 
¨gsize
);

352 *
quŸórg_ch¨
 (c⁄° *
¨g
, 
ch
);

355 *
quŸórg_ch¨_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
, 
ch
);

358 *
quŸórg_cﬁ⁄
 (c⁄° *
¨g
);

361 *
quŸórg_cﬁ⁄_mem
 (c⁄° *
¨g
, 
size_t
 
¨gsize
);

367 *
quŸórg_n_cu°om
 (
n
, c⁄° *
À·_quŸe
,

368 c⁄° *
right_quŸe
, c⁄° *
¨g
);

372 *
quŸórg_n_cu°om_mem
 (
n
, c⁄° *
À·_quŸe
,

373 c⁄° *
right_quŸe
,

374 c⁄° *
¨g
, 
size_t
 
¨gsize
);

377 *
quŸórg_cu°om
 (c⁄° *
À·_quŸe
, c⁄° *
right_quŸe
,

378 c⁄° *
¨g
);

382 *
quŸórg_cu°om_mem
 (c⁄° *
À·_quŸe
,

383 c⁄° *
right_quŸe
,

384 c⁄° *
¨g
, 
size_t
 
¨gsize
);

387 
quŸórg_‰ì
 ();

	@lib/rawmemchr.c

17 
	~<c⁄fig.h
>

20 
	~<°rög.h
>

24 
	$øwmemchr
 (c⁄° *
s
, 
c_ö
)

31 
	tl⁄gw‹d
;

33 c⁄° *
ch¨_±r
;

34 c⁄° 
l⁄gw‹d
 *
l⁄gw‹d_±r
;

35 
l⁄gw‹d
 
ª≥©ed_⁄e
;

36 
l⁄gw‹d
 
ª≥©ed_c
;

37 
c
;

39 
c
 = (Ë
c_ö
;

43 
ch¨_±r
 = (c⁄° *Ë
s
;

44 (
size_t
Ë
ch¨_±r
 %  (
l⁄gw‹d
) != 0;

45 ++
ch¨_±r
)

46 i‡(*
ch¨_±r
 =
c
)

47  (*Ë
ch¨_±r
;

49 
l⁄gw‹d_±r
 = (c⁄° 
l⁄gw‹d
 *Ë
ch¨_±r
;

57 
ª≥©ed_⁄e
 = 0x01010101;

58 
ª≥©ed_c
 = 
c
 | (c << 8);

59 
ª≥©ed_c
 |=Ñepeated_c << 16;

60 i‡(0xffffffffU < (
l⁄gw‹d
) -1)

62 
ª≥©ed_⁄e
 |=Ñepeated_one << 31 << 1;

63 
ª≥©ed_c
 |=Ñepeated_c << 31 << 1;

64 i‡(8 <  (
l⁄gw‹d
))

66 
size_t
 
i
;

68 
i
 = 64; i <  (
l⁄gw‹d
) * 8; i *= 2)

70 
ª≥©ed_⁄e
 |ª≥©ed_⁄ê<< 
i
;

71 
ª≥©ed_c
 |ª≥©ed_¯<< 
i
;

115 
l⁄gw‹d
 
l⁄gw‹d1
 = *
l⁄gw‹d_±r
 ^ 
ª≥©ed_c
;

117 i‡((((
l⁄gw‹d1
 - 
ª≥©ed_⁄e
) & ~longword1)

118 & (
ª≥©ed_⁄e
 << 7)) != 0)

120 
l⁄gw‹d_±r
++;

123 
ch¨_±r
 = (c⁄° *Ë
l⁄gw‹d_±r
;

132 
ch¨_±r
 = (*Ë
l⁄gw‹d_±r
;

133 *
ch¨_±r
 !
c
)

134 
ch¨_±r
++;

135  (*Ë
ch¨_±r
;

136 
	}
}

	@lib/realloc.c

21 
	#_GL_USE_STDLIB_ALLOC
 1

	)

22 
	~<c⁄fig.h
>

25 #ifde‡
ªÆloc


26 
	#NEED_REALLOC_GNU
 1

	)

28 #ñi‡
GNULIB_REALLOC_GNU
 && !
HAVE_REALLOC_GNU


29 
	#NEED_REALLOC_GNU
 1

	)

34 #i‡
GNULIB_MALLOC_GNU
 && 
HAVE_MALLOC_GNU


35 
	#SYSTEM_MALLOC_GLIBC_COMPATIBLE
 1

	)

38 
	~<°dlib.h
>

40 
	~<î∫o.h
>

47 
	$Ωl_ªÆloc
 (*
p
, 
size_t
 
n
)

49 *
ªsu…
;

51 #i‡
NEED_REALLOC_GNU


52 i‡(
n
 == 0)

54 
n
 = 1;

57 
	`‰ì
 (
p
);

58 
p
 = 
NULL
;

62 i‡(
p
 =
NULL
)

64 #i‡
GNULIB_REALLOC_GNU
 && !
NEED_REALLOC_GNU
 && !
SYSTEM_MALLOC_GLIBC_COMPATIBLE


65 i‡(
n
 == 0)

66 
n
 = 1;

68 
ªsu…
 = 
	`mÆloc
 (
n
);

71 
ªsu…
 = 
	`ªÆloc
 (
p
, 
n
);

73 #i‡!
HAVE_REALLOC_POSIX


74 i‡(
ªsu…
 =
NULL
)

75 
î∫o
 = 
ENOMEM
;

78  
ªsu…
;

79 
	}
}

	@lib/recv.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
ªcv


31 
ssize_t


32 
	$Ωl_ªcv
 (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`ªcv
 (
sock
, 
buf
, 
Àn
, 
Êags
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/sched.in.h

17 #i‚de‡
_
@
GUARD_PREFIX
@
_SCHED_H


19 #i‡
__GNUC__
 >= 3

20 @
	gPRAGMA_SYSTEM_HEADER
@

22 @
	gPRAGMA_COLUMNS
@

25 #i‡@
HAVE_SCHED_H
@

26 #@
INCLUDE_NEXT
@ @
NEXT_SCHED_H
@

29 #i‚de‡
_
@
GUARD_PREFIX
@
_SCHED_H


30 
	#_
@
GUARD_PREFIX
@
_SCHED_H


	)

32 #i‡!@
HAVE_STRUCT_SCHED_PARAM
@

34 #i‡!
GNULIB_deföed_°ru˘_sched_∑øm


35 
	ssched_∑øm


37 
	msched_¥i‹ôy
;

39 
	#GNULIB_deföed_°ru˘_sched_∑øm
 1

	)

44 #i‡!(
deföed
 
SCHED_FIFO
 && deföed 
SCHED_RR
 && deföed 
SCHED_OTHER
)

45 
	#SCHED_FIFO
 1

	)

46 
	#SCHED_RR
 2

	)

47 
	#SCHED_OTHER
 0

	)

	@lib/select.c

24 
	~<c⁄fig.h
>

25 
	~<Æloˇ.h
>

26 
	~<as£π.h
>

28 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


31 
	~<sys/ty≥s.h
>

32 
	~<°dboﬁ.h
>

33 
	~<î∫o.h
>

34 
	~<limôs.h
>

36 
	~<wösock2.h
>

37 
	~<wödows.h
>

38 
	~<io.h
>

39 
	~<°dio.h
>

40 
	~<c⁄io.h
>

41 
	~<time.h
>

43 
	sbô£t
 {

44 
	mö
[
FD_SETSIZE
 / 
CHAR_BIT
];

45 
	mout
[
FD_SETSIZE
 / 
CHAR_BIT
];

49 
	s_FILE_PIPE_LOCAL_INFORMATION
 {

50 
ULONG
 
	mNamedPùeTy≥
;

51 
ULONG
 
	mNamedPùeC⁄figuøti⁄
;

52 
ULONG
 
	mMaximumIn°™˚s
;

53 
ULONG
 
	mCuºítIn°™˚s
;

54 
ULONG
 
	mInboundQuŸa
;

55 
ULONG
 
	mRódD©aAvaûabÀ
;

56 
ULONG
 
	mOutboundQuŸa
;

57 
ULONG
 
	mWrôeQuŸaAvaûabÀ
;

58 
ULONG
 
	mNamedPùeSèã
;

59 
ULONG
 
	mNamedPùeEnd
;

60 } 
	tFILE_PIPE_LOCAL_INFORMATION
, *
	tPFILE_PIPE_LOCAL_INFORMATION
;

62 
	s_IO_STATUS_BLOCK


65 
DWORD
 
	mSètus
;

66 
PVOID
 
	mPoöãr
;

67 } 
	mu
;

68 
ULONG_PTR
 
	mInf‹m©i⁄
;

69 } 
	tIO_STATUS_BLOCK
, *
	tPIO_STATUS_BLOCK
;

71 
	e_FILE_INFORMATION_CLASS
 {

72 
	mFûePùeLoˇlInf‹m©i⁄
 = 24

73 } 
	tFILE_INFORMATION_CLASS
, *
	tPFILE_INFORMATION_CLASS
;

75 
	$DWORD
 (
	tWINAPI
 *
	tPNtQuîyInf‹m©i⁄Fûe
)

76 (
	tHANDLE
, 
	tIO_STATUS_BLOCK
 *, 
	tVOID
 *, 
	tULONG
, 
	tFILE_INFORMATION_CLASS
);

78 #i‚de‡
PIPE_BUF


79 
	#PIPE_BUF
 512

	)

82 
	#IsC⁄sﬁeH™dÀ
(
h
Ë(((Ë(hË& 3Ë=3)

	)

84 
BOOL


85 
	$IsSockëH™dÀ
 (
HANDLE
 
h
)

87 
WSANETWORKEVENTS
 
ev
;

89 i‡(
	`IsC⁄sﬁeH™dÀ
 (
h
))

90  
FALSE
;

94 
ev
.
lNëw‹kEvíts
 = 0xDEADBEEF;

95 
	`WSAEnumNëw‹kEvíts
 ((
SOCKET
Ë
h
, 
NULL
, &
ev
);

96  
ev
.
lNëw‹kEvíts
 != 0xDEADBEEF;

97 
	}
}

102 
	$wö32_pﬁl_h™dÀ
 (
HANDLE
 
h
, 
fd
, 
bô£t
 *
rbôs
, bô£à*
wbôs
,

103 
bô£t
 *
xbôs
)

105 
BOOL
 
ªad
, 
wrôe
, 
ex˚±
;

106 
i
, 
ªt
;

107 
INPUT_RECORD
 *
úbuf„r
;

108 
DWORD
 
avaû
, 
nbuf„r
;

109 
BOOL
 
bRë
;

110 
IO_STATUS_BLOCK
 
iosb
;

111 
FILE_PIPE_LOCAL_INFORMATION
 
Âli
;

112 
PNtQuîyInf‹m©i⁄Fûe
 
NtQuîyInf‹m©i⁄Fûe
;

113 
BOOL
 
⁄˚_⁄ly
;

115 
ªad
 = 
wrôe
 = 
ex˚±
 = 
FALSE
;

116 
	`GëFûeTy≥
 (
h
))

118 
FILE_TYPE_DISK
:

119 
ªad
 = 
TRUE
;

120 
wrôe
 = 
TRUE
;

123 
FILE_TYPE_PIPE
:

124 i‡(!
⁄˚_⁄ly
)

126 
NtQuîyInf‹m©i⁄Fûe
 = (
PNtQuîyInf‹m©i⁄Fûe
)

127 
	`GëProcAddªss
 (
	`GëModuÀH™dÀ
 ("ntdll.dll"),

129 
⁄˚_⁄ly
 = 
TRUE
;

132 i‡(
	`PìkNamedPùe
 (
h
, 
NULL
, 0, NULL, &
avaû
, NULL) != 0)

134 i‡(
avaû
)

135 
ªad
 = 
TRUE
;

137 i‡(
	`GëLa°Eº‹
 (Ë=
ERROR_BROKEN_PIPE
)

149 
	`mem£t
 (&
iosb
, 0,  (iosb));

150 
	`mem£t
 (&
Âli
, 0,  (fpli));

152 i‡(!
NtQuîyInf‹m©i⁄Fûe


153 || 
	`NtQuîyInf‹m©i⁄Fûe
 (
h
, &
iosb
, &
Âli
,  (fpli),

154 
FûePùeLoˇlInf‹m©i⁄
)

155 || 
Âli
.
WrôeQuŸaAvaûabÀ
 >
PIPE_BUF


156 || (
Âli
.
OutboundQuŸa
 < 
PIPE_BUF
 &&

157 
Âli
.
WrôeQuŸaAvaûabÀ
 =Âli.
OutboundQuŸa
))

158 
wrôe
 = 
TRUE
;

162 
FILE_TYPE_CHAR
:

163 
wrôe
 = 
TRUE
;

164 i‡(!(
rbôs
->
ö
[
fd
 / 
CHAR_BIT
] & (1 << (fd & (CHAR_BIT - 1)))))

167 
ªt
 = 
	`WaôF‹SögÀObje˘
 (
h
, 0);

168 i‡(
ªt
 =
WAIT_OBJECT_0
)

170 i‡(!
	`IsC⁄sﬁeH™dÀ
 (
h
))

172 
ªad
 = 
TRUE
;

176 
nbuf„r
 = 
avaû
 = 0;

177 
bRë
 = 
	`GëNumbîOfC⁄sﬁeI≈utEvíts
 (
h
, &
nbuf„r
);

180 
	`as£π
 (
bRë
);

181 i‡(
nbuf„r
 == 0)

183 
ex˚±
 = 
TRUE
;

187 
úbuf„r
 = (
INPUT_RECORD
 *Ë
	`Æloˇ
 (
nbuf„r
 *  (INPUT_RECORD));

188 
bRë
 = 
	`PìkC⁄sﬁeI≈ut
 (
h
, 
úbuf„r
, 
nbuf„r
, &
avaû
);

189 i‡(!
bRë
 || 
avaû
 == 0)

191 
ex˚±
 = 
TRUE
;

195 
i
 = 0; i < 
avaû
; i++)

196 i‡(
úbuf„r
[
i
].
EvítTy≥
 =
KEY_EVENT
)

197 
ªad
 = 
TRUE
;

202 
ªt
 = 
	`WaôF‹SögÀObje˘
 (
h
, 0);

203 
wrôe
 = 
TRUE
;

204 i‡(
ªt
 =
WAIT_OBJECT_0
)

205 
ªad
 = 
TRUE
;

210 
ªt
 = 0;

211 i‡(
ªad
 && (
rbôs
->
ö
[
fd
 / 
CHAR_BIT
] & (1 << (fd & (CHAR_BIT - 1)))))

213 
rbôs
->
out
[
fd
 / 
CHAR_BIT
] |= (1 << (fd & (CHAR_BIT - 1)));

214 
ªt
++;

217 i‡(
wrôe
 && (
wbôs
->
ö
[
fd
 / 
CHAR_BIT
] & (1 << (fd & (CHAR_BIT - 1)))))

219 
wbôs
->
out
[
fd
 / 
CHAR_BIT
] |= (1 << (fd & (CHAR_BIT - 1)));

220 
ªt
++;

223 i‡(
ex˚±
 && (
xbôs
->
ö
[
fd
 / 
CHAR_BIT
] & (1 << (fd & (CHAR_BIT - 1)))))

225 
xbôs
->
out
[
fd
 / 
CHAR_BIT
] |= (1 << (fd & (CHAR_BIT - 1)));

226 
ªt
++;

229  
ªt
;

230 
	}
}

233 
	$Ωl_£À˘
 (
nfds
, 
fd_£t
 *
rfds
, fd_£à*
wfds
, fd_£à*
xfds
,

234 
timevÆ
 *
timeout
)

236 
timevÆ
 
tv0
;

237 
HANDLE
 
hEvít
;

238 
HANDLE
 
h
, 
h™dÀ_¨øy
[
FD_SETSIZE
 + 2];

239 
fd_£t
 
h™dÀ_rfds
, 
h™dÀ_wfds
, 
h™dÀ_xfds
;

240 
bô£t
 
rbôs
, 
wbôs
, 
xbôs
;

241 
™yfds_ö
[
FD_SETSIZE
 / 
CHAR_BIT
];

242 
DWORD
 
ªt
, 
waô_timeout
, 
nh™dÀs
, 
nsock
, 
nbuf„r
;

243 
MSG
 
msg
;

244 
i
, 
fd
, 
rc
;

246 i‡(
nfds
 > 
FD_SETSIZE
)

247 
nfds
 = 
FD_SETSIZE
;

249 i‡(!
timeout
)

250 
waô_timeout
 = 
INFINITE
;

253 
waô_timeout
 = 
timeout
->
tv_£c
 * 1000 +Åimeout->
tv_u£c
 / 1000;

256 i‡(!
rfds
 && !
wfds
 && !
xfds
)

258 
	`SÀï
 (
waô_timeout
);

263 i‡(!
hEvít
)

264 
hEvít
 = 
	`Cª©eEvít
 (
NULL
, 
FALSE
, FALSE, NULL);

266 
h™dÀ_¨øy
[0] = 
hEvít
;

267 
nh™dÀs
 = 1;

268 
nsock
 = 0;

274 
	`mem£t
 (&
rbôs
, 0,  (rbits));

275 
	`mem£t
 (&
wbôs
, 0,  (wbits));

276 
	`mem£t
 (&
xbôs
, 0,  (xbits));

277 
	`mem£t
 (
™yfds_ö
, 0,  (anyfds_in));

278 i‡(
rfds
)

279 
i
 = 0; i < 
rfds
->
fd_cou¡
; i++)

281 
fd
 = 
rfds
->
fd_¨øy
[
i
];

282 
h
 = (
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
);

283 i‡(
	`IsC⁄sﬁeH™dÀ
 (
h
)

284 && !
	`GëNumbîOfC⁄sﬁeI≈utEvíts
 (
h
, &
nbuf„r
))

287 
rbôs
.
ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

288 
™yfds_ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

291 
rfds
 = (
fd_£t
 *Ë
	`Æloˇ
 ( (fd_set));

293 i‡(
wfds
)

294 
i
 = 0; i < 
wfds
->
fd_cou¡
; i++)

296 
fd
 = 
wfds
->
fd_¨øy
[
i
];

297 
h
 = (
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
);

298 i‡(
	`IsC⁄sﬁeH™dÀ
 (
h
)

299 && 
	`GëNumbîOfC⁄sﬁeI≈utEvíts
 (
h
, &
nbuf„r
))

302 
wbôs
.
ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

303 
™yfds_ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

306 
wfds
 = (
fd_£t
 *Ë
	`Æloˇ
 ( (fd_set));

308 i‡(
xfds
)

309 
i
 = 0; i < 
xfds
->
fd_cou¡
; i++)

311 
fd
 = 
xfds
->
fd_¨øy
[
i
];

312 
xbôs
.
ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

313 
™yfds_ö
[
fd
 / 
CHAR_BIT
] |= 1 << (fd & (CHAR_BIT - 1));

316 
xfds
 = (
fd_£t
 *Ë
	`Æloˇ
 ( (fd_set));

319 
	`FD_ZERO
 (
rfds
);

320 
	`FD_ZERO
 (
wfds
);

321 
	`FD_ZERO
 (
xfds
);

322 
	`FD_ZERO
 (&
h™dÀ_rfds
);

323 
	`FD_ZERO
 (&
h™dÀ_wfds
);

324 
	`FD_ZERO
 (&
h™dÀ_xfds
);

327 
i
 = 0; i < 
nfds
; i++)

329 i‡((
™yfds_ö
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1)))) == 0)

332 
h
 = (
HANDLE
Ë
	`_gë_osfh™dÀ
 (
i
);

333 i‡(!
h
)

335 
î∫o
 = 
EBADF
;

339 i‡(
	`IsSockëH™dÀ
 (
h
))

341 
ªque°ed
 = 
FD_CLOSE
;

345 i‡(
rbôs
.
ö
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

347 
ªque°ed
 |
FD_READ
 | 
FD_ACCEPT
;

348 
	`FD_SET
 ((
SOCKET
Ë
h
, 
rfds
);

349 
	`FD_SET
 ((
SOCKET
Ë
h
, &
h™dÀ_rfds
);

351 i‡(
wbôs
.
ö
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

353 
ªque°ed
 |
FD_WRITE
 | 
FD_CONNECT
;

354 
	`FD_SET
 ((
SOCKET
Ë
h
, 
wfds
);

355 
	`FD_SET
 ((
SOCKET
Ë
h
, &
h™dÀ_wfds
);

357 i‡(
xbôs
.
ö
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

359 
ªque°ed
 |
FD_OOB
;

360 
	`FD_SET
 ((
SOCKET
Ë
h
, 
xfds
);

361 
	`FD_SET
 ((
SOCKET
Ë
h
, &
h™dÀ_xfds
);

364 
	`WSAEvítSñe˘
 ((
SOCKET
Ë
h
, 
hEvít
, 
ªque°ed
);

365 
nsock
++;

369 
h™dÀ_¨øy
[
nh™dÀs
++] = 
h
;

372 i‡(
waô_timeout
 != 0

373 && 
	`wö32_pﬁl_h™dÀ
 (
h
, 
i
, &
rbôs
, &
wbôs
, &
xbôs
))

374 
waô_timeout
 = 0;

378 i‡(
waô_timeout
 =0 || 
nsock
 == 0)

379 
rc
 = 0;

385 
rc
 = 
	`£À˘
 (0, &
h™dÀ_rfds
, &
h™dÀ_wfds
, &
h™dÀ_xfds
, &
tv0
);

386 i‡(
rc
 == 0)

389 
	`mem˝y
 (&
h™dÀ_rfds
, 
rfds
,  (
fd_£t
));

390 
	`mem˝y
 (&
h™dÀ_wfds
, 
wfds
,  (
fd_£t
));

391 
	`mem˝y
 (&
h™dÀ_xfds
, 
xfds
,  (
fd_£t
));

394 
waô_timeout
 = 0;

399 
ªt
 = 
	`MsgWaôF‹Mu…ùÀObje˘s
 (
nh™dÀs
, 
h™dÀ_¨øy
, 
FALSE
,

400 
waô_timeout
, 
QS_ALLINPUT
);

402 i‡(
ªt
 =
WAIT_OBJECT_0
 + 
nh™dÀs
)

405 
BOOL
 
bRë
;

406 (
bRë
 = 
	`PìkMesßge
 (&
msg
, 
NULL
, 0, 0, 
PM_REMOVE
)) != 0)

408 
	`Tøn¶©eMesßge
 (&
msg
);

409 
	`Di•©chMesßge
 (&
msg
);

417 i‡(
rc
 =0 && 
nsock
 > 0)

418 
rc
 = 
	`£À˘
 (0, &
h™dÀ_rfds
, &
h™dÀ_wfds
, &
h™dÀ_xfds
, &
tv0
);

421 
	`FD_ZERO
 (
rfds
);

422 
	`FD_ZERO
 (
wfds
);

423 
	`FD_ZERO
 (
xfds
);

426 
h™dÀ_¨øy
[
nh™dÀs
] = 
NULL
;

427 
nh™dÀs
 = 1;

428 
i
 = 0; i < 
nfds
; i++)

430 i‡((
™yfds_ö
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1)))) == 0)

433 
h
 = (
HANDLE
Ë
	`_gë_osfh™dÀ
 (
i
);

434 i‡(
h
 !
h™dÀ_¨øy
[
nh™dÀs
])

438 
	`WSAEvítSñe˘
 ((
SOCKET
Ë
h
, 
NULL
, 0);

439 i‡(
	`FD_ISSET
 (
h
, &
h™dÀ_rfds
))

440 
	`FD_SET
 (
i
, 
rfds
);

441 i‡(
	`FD_ISSET
 (
h
, &
h™dÀ_wfds
))

442 
	`FD_SET
 (
i
, 
wfds
);

443 i‡(
	`FD_ISSET
 (
h
, &
h™dÀ_xfds
))

444 
	`FD_SET
 (
i
, 
xfds
);

449 
nh™dÀs
++;

450 
	`wö32_pﬁl_h™dÀ
 (
h
, 
i
, &
rbôs
, &
wbôs
, &
xbôs
);

451 i‡(
rbôs
.
out
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

453 
rc
++;

454 
	`FD_SET
 (
i
, 
rfds
);

456 i‡(
wbôs
.
out
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

458 
rc
++;

459 
	`FD_SET
 (
i
, 
wfds
);

461 i‡(
xbôs
.
out
[
i
 / 
CHAR_BIT
] & (1 << (i & (CHAR_BIT - 1))))

463 
rc
++;

464 
	`FD_SET
 (
i
, 
xfds
);

469  
rc
;

470 
	}
}

474 
	~<sys/£À˘.h
>

476 #unde‡
£À˘


479 
	$Ωl_£À˘
 (
nfds
, 
fd_£t
 *
rfds
, fd_£à*
wfds
, fd_£à*
xfds
,

480 
timevÆ
 *
timeout
)

483 i‡(
nfds
 == 0)

485 
nfds
 = 1;

486 
rfds
 = 
NULL
;

487 
wfds
 = 
NULL
;

488 
xfds
 = 
NULL
;

490  
	`£À˘
 (
nfds
, 
rfds
, 
wfds
, 
xfds
, 
timeout
);

491 
	}
}

	@lib/send.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 #unde‡
£nd


31 
ssize_t


32 
	$Ωl_£nd
 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
)

34 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

35 
r
 = 
	`£nd
 (
sock
, 
buf
, 
Àn
, 
Êags
);

36 i‡(
r
 < 0)

37 
	`£t_wösock_î∫o
 ();

39  
r
;

40 
	}
}

	@lib/setsockopt.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~<sys/time.h
>

30 
	~"w32sock.h
"

32 #unde‡
£tsock›t


35 
	$Ωl_£tsock›t
 (
fd
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

37 
r
;

38 
SOCKET
 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

40 i‡(
Àvñ
 =
SOL_SOCKET
 && (
›äame
 =
SO_RCVTIMEO
 || o±«mê=
SO_SNDTIMEO
))

42 c⁄° 
timevÆ
 *
tv
 = 
›tvÆ
;

43 
mûli£c⁄ds
 = 
tv
->
tv_£c
 * 1000 +Åv->
tv_u£c
 / 1000;

44 
›tvÆ
 = &
mûli£c⁄ds
;

45 
r
 = 
	`£tsock›t
 (
sock
, 
Àvñ
, 
›äame
, 
›tvÆ
,  ());

49 
r
 = 
	`£tsock›t
 (
sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

52 i‡(
r
 < 0)

53 
	`£t_wösock_î∫o
 ();

55  
r
;

56 
	}
}

	@lib/sig-handler.h

18 #i‚de‡
_GL_SIG_HANDLER_H


19 
	#_GL_SIG_HANDLER_H


	)

21 
	~<sig«l.h
>

24 (*
	tß_h™dÀr_t
) ();

29 
ölöe
 
ß_h™dÀr_t


30 
	$gë_h™dÀr
 (
siga˘i⁄
 c⁄° *
a
)

32 #ifde‡
SA_SIGINFO


38 i‡(
a
->
ß_Êags
 & 
SA_SIGINFO
)

39  (
ß_h™dÀr_t
Ë
a
->
ß_siga˘i⁄
;

41  
a
->
ß_h™dÀr
;

42 
	}
}

	@lib/sigaction.c

18 
	~<c⁄fig.h
>

21 
	~<sig«l.h
>

23 
	~<î∫o.h
>

24 
	~<°döt.h
>

25 
	~<°dlib.h
>

54 #i‡
deföed
 
SIGCHLD
 || deföed 
HAVE_SIGALTSTACK
 || deföed 
HAVE_SIGINTERRUPT


60 #i‚de‡
SIGKILL


61 
	#SIGKILL
 (-1)

	)

63 #i‚de‡
SIGSTOP


64 
	#SIGSTOP
 (-1)

	)

70 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


71 #unde‡
SIGABRT_COMPAT


72 
	#SIGABRT_COMPAT
 6

	)

76 (*
	th™dÀr_t
Ë(
	tsig«l
);

80 
siga˘i⁄
 vﬁ©ûê
a˘i⁄_¨øy
[
NSIG
] ;

84 
	$siga˘i⁄_h™dÀr
 (
sig
)

86 
h™dÀr_t
 
h™dÀr
;

87 
sig£t_t
 
mask
;

88 
sig£t_t
 
ﬁdmask
;

89 
ßved_î∫o
 = 
î∫o
;

90 i‡(
sig
 < 0 || 
NSIG
 <sig || !
a˘i⁄_¨øy
[sig].
ß_h™dÀr
)

93 i‡(
sig
 =
SIGABRT
)

94 
	`sig«l
 (
SIGABRT
, 
SIG_DFL
);

95 
	`ab‹t
 ();

106 
h™dÀr
 = 
a˘i⁄_¨øy
[
sig
].
ß_h™dÀr
;

107 i‡((
a˘i⁄_¨øy
[
sig
].
ß_Êags
 & 
SA_RESETHAND
) == 0)

108 
	`sig«l
 (
sig
, 
siga˘i⁄_h™dÀr
);

110 
a˘i⁄_¨øy
[
sig
].
ß_h™dÀr
 = 
NULL
;

113 
mask
 = 
a˘i⁄_¨øy
[
sig
].
ß_mask
;

114 i‡((
a˘i⁄_¨øy
[
sig
].
ß_Êags
 & 
SA_NODEFER
) == 0)

115 
	`sigadd£t
 (&
mask
, 
sig
);

116 
	`sig¥ocmask
 (
SIG_BLOCK
, &
mask
, &
ﬁdmask
);

119 
î∫o
 = 
ßved_î∫o
;

120 
	`h™dÀr
 (
sig
);

121 
ßved_î∫o
 = 
î∫o
;

122 
	`sig¥ocmask
 (
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

123 
î∫o
 = 
ßved_î∫o
;

124 
	}
}

131 
	$siga˘i⁄
 (
sig
, c⁄° 
siga˘i⁄
 *
ª°ri˘
 
a˘
,

132 
siga˘i⁄
 *
ª°ri˘
 
ﬂ˘
)

134 
sig£t_t
 
mask
;

135 
sig£t_t
 
ﬁdmask
;

136 
ßved_î∫o
;

138 i‡(
sig
 < 0 || 
NSIG
 <sig || sig =
SIGKILL
 || sig =
SIGSTOP


139 || (
a˘
 &&á˘->
ß_h™dÀr
 =
SIG_ERR
))

141 
î∫o
 = 
EINVAL
;

145 #ifde‡
SIGABRT_COMPAT


146 i‡(
sig
 =
SIGABRT_COMPAT
)

147 
sig
 = 
SIGABRT
;

158 i‡(!
a˘
 && !
ﬂ˘
)

160 
	`sigfûl£t
 (&
mask
);

161 
	`sig¥ocmask
 (
SIG_BLOCK
, &
mask
, &
ﬁdmask
);

162 i‡(
ﬂ˘
)

164 i‡(
a˘i⁄_¨øy
[
sig
].
ß_h™dÀr
)

165 *
ﬂ˘
 = 
a˘i⁄_¨øy
[
sig
];

170 
ﬂ˘
->
ß_h™dÀr
 = 
	`sig«l
 (
sig
, 
SIG_DFL
);

171 i‡(
ﬂ˘
->
ß_h™dÀr
 =
SIG_ERR
)

172 
Áûuª
;

173 
	`sig«l
 (
sig
, 
ﬂ˘
->
ß_h™dÀr
);

174 
ﬂ˘
->
ß_Êags
 = 
SA_RESETHAND
 | 
SA_NODEFER
;

175 
	`sigem±y£t
 (&
ﬂ˘
->
ß_mask
);

179 i‡(
a˘
)

183 i‡(
a˘
->
ß_h™dÀr
 =
SIG_DFL
 ||á˘->ß_h™dÀ∏=
SIG_IGN
)

185 i‡(
	`sig«l
 (
sig
, 
a˘
->
ß_h™dÀr
Ë=
SIG_ERR
)

186 
Áûuª
;

187 
a˘i⁄_¨øy
[
sig
].
ß_h™dÀr
 = 
NULL
;

191 i‡(
	`sig«l
 (
sig
, 
siga˘i⁄_h™dÀr
Ë=
SIG_ERR
)

192 
Áûuª
;

193 
a˘i⁄_¨øy
[
sig
] = *
a˘
;

196 
	`sig¥ocmask
 (
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

199 
Áûuª
:

200 
ßved_î∫o
 = 
î∫o
;

201 
	`sig¥ocmask
 (
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

202 
î∫o
 = 
ßved_î∫o
;

204 
	}
}

	@lib/signal.in.h

18 #i‡
__GNUC__
 >= 3

19 @
	gPRAGMA_SYSTEM_HEADER
@

21 @
	gPRAGMA_COLUMNS
@

23 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
__√ed_sig£t_t
 || deföed 
_GL_ALREADY_INCLUDING_SIGNAL_H
 || (deföed 
_SIGNAL_H
 && !deföed 
__SIZEOF_PTHREAD_MUTEX_T
)

35 #@
INCLUDE_NEXT
@ @
NEXT_SIGNAL_H
@

40 #i‚de‡
_
@
GUARD_PREFIX
@
_SIGNAL_H


42 
	#_GL_ALREADY_INCLUDING_SIGNAL_H


	)

48 
	~<sys/ty≥s.h
>

51 #@
INCLUDE_NEXT
@ @
NEXT_SIGNAL_H
@

53 #unde‡
_GL_ALREADY_INCLUDING_SIGNAL_H


55 #i‚de‡
_
@
GUARD_PREFIX
@
_SIGNAL_H


56 
	#_
@
GUARD_PREFIX
@
_SIGNAL_H


	)

61 #i‡(@
GNULIB_PTHREAD_SIGMASK
@ || 
deföed
 
GNULIB_POSIXCHECK
) \

62 && ((
deföed
 
	g__APPLE__
 && deföed 
	g__MACH__
Ë|| deföed 
	g__FªeBSD__
 || deföed 
	g__O≥nBSD__
 || deföed 
	g__osf__
 || deföed 
	g__sun
) \

63 && ! 
deföed
 
	g__GLIBC__


64 
	~<±hªad.h
>

76 #i‡! @
HAVE_TYPE_VOLATILE_SIG_ATOMIC_T
@

77 #i‡!
GNULIB_deföed_sig_©omic_t


78 
	tΩl_sig_©omic_t
;

79 #unde‡
sig_©omic_t


80 
	#sig_©omic_t
 
Ωl_sig_©omic_t


	)

81 
	#GNULIB_deföed_sig_©omic_t
 1

	)

86 #i‡!@
HAVE_SIGSET_T
@

87 #i‡!
GNULIB_deföed_sig£t_t


88 
	tsig£t_t
;

89 
	#GNULIB_deföed_sig£t_t
 1

	)

94 #i‡!@
HAVE_SIGHANDLER_T
@

95 #ifde‡
__˝lu•lus


98 #i‡!
GNULIB_deföed_sigh™dÀr_t


99 (*
	tsigh™dÀr_t
) ();

100 
	#GNULIB_deföed_sigh™dÀr_t
 1

	)

102 #ifde‡
__˝lu•lus


103 
	}
}

108 #i‡@
GNULIB_SIGNAL_H_SIGPIPE
@

109 #i‚de‡
SIGPIPE


111 
	#SIGPIPE
 13

	)

112 
	#GNULIB_deföed_SIGPIPE
 1

	)

120 #i‚de‡
NSIG


121 #i‡
deföed
 
__TANDEM


122 
	#NSIG
 32

	)

127 #i‡@
GNULIB_PTHREAD_SIGMASK
@

128 #i‡@
REPLACE_PTHREAD_SIGMASK
@

129 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

130 #unde‡
±hªad_sigmask


131 
	#±hªad_sigmask
 
Ωl_±hªad_sigmask


	)

133 
_GL_FUNCDECL_RPL
 (
±hªad_sigmask
, ,

134 (
how
, c⁄° 
sig£t_t
 *
√w_mask
, sig£t_à*
ﬁd_mask
));

135 
_GL_CXXALIAS_RPL
 (
±hªad_sigmask
, ,

136 (
how
, c⁄° 
sig£t_t
 *
√w_mask
, sig£t_à*
ﬁd_mask
));

138 #i‡!@
HAVE_PTHREAD_SIGMASK
@

139 
_GL_FUNCDECL_SYS
 (
±hªad_sigmask
, ,

140 (
how
, c⁄° 
sig£t_t
 *
√w_mask
, sig£t_à*
ﬁd_mask
));

142 
_GL_CXXALIAS_SYS
 (
±hªad_sigmask
, ,

143 (
how
, c⁄° 
sig£t_t
 *
√w_mask
, sig£t_à*
ﬁd_mask
));

145 
_GL_CXXALIASWARN
 (
±hªad_sigmask
);

146 #ñi‡
deföed
 
GNULIB_POSIXCHECK


147 #unde‡
±hªad_sigmask


148 #i‡
HAVE_RAW_DECL_PTHREAD_SIGMASK


149 
_GL_WARN_ON_USE
 (
±hªad_sigmask
, "pthread_sigmask isÇotÖortable - "

155 #i‡@
GNULIB_SIGPROCMASK
@

156 #i‡!@
HAVE_POSIX_SIGNALBLOCKING
@

159 #i‚de‡
NSIG


160 
	#NSIG
 32

	)

164 #i‡!
GNULIB_deföed_vîify_NSIG_c⁄°øöt


165 
	tvîify_NSIG_c⁄°øöt
[
NSIG
 <= 32 ? 1 : -1];

166 
	#GNULIB_deföed_vîify_NSIG_c⁄°øöt
 1

	)

172 #i‡@
HAVE_POSIX_SIGNALBLOCKING
@

174 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


175 #unde‡
sigismembî


178 
_GL_FUNCDECL_SYS
 (
sigismembî
, , (c⁄° 
sig£t_t
 *
£t
, 
sig
)

179 
_GL_ARG_NONNULL
 ((1)));

181 
_GL_CXXALIAS_SYS
 (
sigismembî
, , (c⁄° 
sig£t_t
 *
£t
, 
sig
));

182 
_GL_CXXALIASWARN
 (
sigismembî
);

185 #i‡@
HAVE_POSIX_SIGNALBLOCKING
@

187 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


188 #unde‡
sigem±y£t


191 
_GL_FUNCDECL_SYS
 (
sigem±y£t
, , (
sig£t_t
 *
£t
Ë
_GL_ARG_NONNULL
 ((1)));

193 
_GL_CXXALIAS_SYS
 (
sigem±y£t
, , (
sig£t_t
 *
£t
));

194 
_GL_CXXALIASWARN
 (
sigem±y£t
);

197 #i‡@
HAVE_POSIX_SIGNALBLOCKING
@

199 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


200 #unde‡
sigadd£t


203 
_GL_FUNCDECL_SYS
 (
sigadd£t
, , (
sig£t_t
 *
£t
, 
sig
)

204 
_GL_ARG_NONNULL
 ((1)));

206 
_GL_CXXALIAS_SYS
 (
sigadd£t
, , (
sig£t_t
 *
£t
, 
sig
));

207 
_GL_CXXALIASWARN
 (
sigadd£t
);

210 #i‡@
HAVE_POSIX_SIGNALBLOCKING
@

212 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


213 #unde‡
sigdñ£t


216 
_GL_FUNCDECL_SYS
 (
sigdñ£t
, , (
sig£t_t
 *
£t
, 
sig
)

217 
_GL_ARG_NONNULL
 ((1)));

219 
_GL_CXXALIAS_SYS
 (
sigdñ£t
, , (
sig£t_t
 *
£t
, 
sig
));

220 
_GL_CXXALIASWARN
 (
sigdñ£t
);

223 #i‡@
HAVE_POSIX_SIGNALBLOCKING
@

225 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


226 #unde‡
sigfûl£t


229 
_GL_FUNCDECL_SYS
 (
sigfûl£t
, , (
sig£t_t
 *
£t
Ë
_GL_ARG_NONNULL
 ((1)));

231 
_GL_CXXALIAS_SYS
 (
sigfûl£t
, , (
sig£t_t
 *
£t
));

232 
_GL_CXXALIASWARN
 (
sigfûl£t
);

235 #i‡!@
HAVE_POSIX_SIGNALBLOCKING
@

236 
_GL_FUNCDECL_SYS
 (
sig≥ndög
, , (
sig£t_t
 *
£t
Ë
_GL_ARG_NONNULL
 ((1)));

238 
_GL_CXXALIAS_SYS
 (
sig≥ndög
, , (
sig£t_t
 *
£t
));

239 
_GL_CXXALIASWARN
 (
sig≥ndög
);

246 #i‡!@
HAVE_POSIX_SIGNALBLOCKING
@

247 
	#SIG_BLOCK
 0

	)

248 
	#SIG_SETMASK
 1

	)

249 
	#SIG_UNBLOCK
 2

	)

250 
_GL_FUNCDECL_SYS
 (
sig¥ocmask
, ,

251 (
›î©i⁄
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
ﬁd_£t
));

253 
_GL_CXXALIAS_SYS
 (
sig¥ocmask
, ,

254 (
›î©i⁄
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
ﬁd_£t
));

255 
_GL_CXXALIASWARN
 (
sig¥ocmask
);

259 #ifde‡
__˝lu•lus


262 #i‡!
GNULIB_deföed_fun˘i⁄_èkög_öt_ªtu∫ög_void_t


263 (*
	t_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
) ();

264 
	#GNULIB_deföed_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
 1

	)

266 #ifde‡
__˝lu•lus


267 
	}
}

269 #i‡!@
HAVE_POSIX_SIGNALBLOCKING
@

270 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

271 
	#sig«l
 
Ωl_sig«l


	)

273 
_GL_FUNCDECL_RPL
 (
sig«l
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
,

274 (
sig
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
 
func
));

275 
_GL_CXXALIAS_RPL
 (
sig«l
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
,

276 (
sig
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
 
func
));

278 
_GL_CXXALIAS_SYS
 (
sig«l
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
,

279 (
sig
, 
_gl_fun˘i⁄_èkög_öt_ªtu∫ög_void_t
 
func
));

281 
_GL_CXXALIASWARN
 (
sig«l
);

284 #i‡!@
HAVE_POSIX_SIGNALBLOCKING
@ && 
GNULIB_deföed_SIGPIPE


285 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

286 #unde‡
øi£


287 
	#øi£
 
Ωl_øi£


	)

289 
_GL_FUNCDECL_RPL
 (
øi£
, , (
sig
));

290 
_GL_CXXALIAS_RPL
 (
øi£
, , (
sig
));

292 
_GL_CXXALIAS_SYS
 (
øi£
, , (
sig
));

294 
_GL_CXXALIASWARN
 (
øi£
);

296 #ñi‡
deföed
 
GNULIB_POSIXCHECK


297 #unde‡
sigadd£t


298 #i‡
HAVE_RAW_DECL_SIGADDSET


299 
_GL_WARN_ON_USE
 (
sigadd£t
, "sigaddset is unportable - "

302 #unde‡
sigdñ£t


303 #i‡
HAVE_RAW_DECL_SIGDELSET


304 
_GL_WARN_ON_USE
 (
sigdñ£t
, "sigdelset is unportable - "

307 #unde‡
sigem±y£t


308 #i‡
HAVE_RAW_DECL_SIGEMPTYSET


309 
_GL_WARN_ON_USE
 (
sigem±y£t
, "sigemptyset is unportable - "

312 #unde‡
sigfûl£t


313 #i‡
HAVE_RAW_DECL_SIGFILLSET


314 
_GL_WARN_ON_USE
 (
sigfûl£t
, "sigfillset is unportable - "

317 #unde‡
sigismembî


318 #i‡
HAVE_RAW_DECL_SIGISMEMBER


319 
_GL_WARN_ON_USE
 (
sigismembî
, "sigismember is unportable - "

322 #unde‡
sig≥ndög


323 #i‡
HAVE_RAW_DECL_SIGPENDING


324 
_GL_WARN_ON_USE
 (
sig≥ndög
, "sigpending is unportable - "

327 #unde‡
sig¥ocmask


328 #i‡
HAVE_RAW_DECL_SIGPROCMASK


329 
_GL_WARN_ON_USE
 (
sig¥ocmask
, "sigprocmask is unportable - "

335 #i‡@
GNULIB_SIGACTION
@

336 #i‡!@
HAVE_SIGACTION
@

338 #i‡!@
HAVE_SIGINFO_T
@

340 #i‡!
GNULIB_deföed_sigöfo_ty≥s


343 
	usigvÆ


345 
	msivÆ_öt
;

346 *
	msivÆ_±r
;

350 
	ssigöfo_t


352 
	msi_signo
;

353 
	msi_code
;

354 
	msi_î∫o
;

355 
pid_t
 
	msi_pid
;

356 
uid_t
 
	msi_uid
;

357 *
	msi_addr
;

358 
	msi_°©us
;

359 
	msi_b™d
;

360 
sigvÆ
 
	msi_vÆue
;

362 
sigöfo_t
 
	tsigöfo_t
;

364 
	#GNULIB_deföed_sigöfo_ty≥s
 1

	)

372 #i‡!
GNULIB_deföed_°ru˘_siga˘i⁄


374 
	ssiga˘i⁄


378 (*
	m_ß_h™dÀr
) ();

383 (*
	m_ß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

384 } 
	m_ß_func
;

385 
sig£t_t
 
	mß_mask
;

387 
	mß_Êags
;

389 
	#ß_h™dÀr
 
_ß_func
.
_ß_h™dÀr


	)

390 
	#ß_siga˘i⁄
 
_ß_func
.
_ß_siga˘i⁄


	)

392 
	#SA_RESETHAND
 1

	)

393 
	#SA_NODEFER
 2

	)

394 
	#SA_RESTART
 4

	)

396 
	#GNULIB_deföed_°ru˘_siga˘i⁄
 1

	)

399 
_GL_FUNCDECL_SYS
 (
siga˘i⁄
, , (, c⁄° siga˘i⁄ *
ª°ri˘
,

400 
siga˘i⁄
 *
ª°ri˘
));

402 #ñi‡!@
HAVE_STRUCT_SIGACTION_SA_SIGACTION
@

404 
	#ß_siga˘i⁄
 
ß_h™dÀr


	)

408 
_GL_CXXALIAS_SYS
 (
siga˘i⁄
, , (, c⁄° siga˘i⁄ *
ª°ri˘
,

409 
siga˘i⁄
 *
ª°ri˘
));

410 
_GL_CXXALIASWARN
 (
siga˘i⁄
);

412 #ñi‡
deföed
 
GNULIB_POSIXCHECK


413 #unde‡
siga˘i⁄


414 #i‡
HAVE_RAW_DECL_SIGACTION


415 
_GL_WARN_ON_USE
 (
siga˘i⁄
, "sigaction is unportable - "

421 #i‚de‡
SA_NODEFER


422 
	#SA_NODEFER
 0

	)

	@lib/sigprocmask.c

18 
	~<c⁄fig.h
>

21 
	~<sig«l.h
>

23 
	~<î∫o.h
>

24 
	~<°döt.h
>

25 
	~<°dlib.h
>

35 #unde‡
sig«l


39 #i‚de‡
SIGKILL


40 
	#SIGKILL
 (-1)

	)

42 #i‚de‡
SIGSTOP


43 
	#SIGSTOP
 (-1)

	)

49 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


50 #unde‡
SIGABRT_COMPAT


51 
	#SIGABRT_COMPAT
 6

	)

53 #ifde‡
SIGABRT_COMPAT


54 
	#SIGABRT_COMPAT_MASK
 (1U << 
SIGABRT_COMPAT
)

	)

56 
	#SIGABRT_COMPAT_MASK
 0

	)

59 (*
	th™dÀr_t
) ();

63 #i‡
GNULIB_deföed_SIGPIPE


64 
h™dÀr_t
 
SIGPIPE_h™dÀr
 = 
SIG_DFL
;

67 #i‡
GNULIB_deföed_SIGPIPE


68 
h™dÀr_t


69 
	$ext_sig«l
 (
sig
, 
h™dÀr_t
 
h™dÀr
)

71 
sig
)

73 
SIGPIPE
:

75 
h™dÀr_t
 
ﬁd_h™dÀr
 = 
SIGPIPE_h™dÀr
;

76 
SIGPIPE_h™dÀr
 = 
h™dÀr
;

77  
ﬁd_h™dÀr
;

80  
	`sig«l
 (
sig
, 
h™dÀr
);

82 
	}
}

83 
	#sig«l
 
ext_sig«l


	)

87 
	$sigismembî
 (c⁄° 
sig£t_t
 *
£t
, 
sig
)

89 i‡(
sig
 >0 && sig < 
NSIG
)

91 #ifde‡
SIGABRT_COMPAT


92 i‡(
sig
 =
SIGABRT_COMPAT
)

93 
sig
 = 
SIGABRT
;

96  (*
£t
 >> 
sig
) & 1;

100 
	}
}

103 
	$sigem±y£t
 (
sig£t_t
 *
£t
)

105 *
£t
 = 0;

107 
	}
}

110 
	$sigadd£t
 (
sig£t_t
 *
£t
, 
sig
)

112 i‡(
sig
 >0 && sig < 
NSIG
)

114 #ifde‡
SIGABRT_COMPAT


115 i‡(
sig
 =
SIGABRT_COMPAT
)

116 
sig
 = 
SIGABRT
;

119 *
£t
 |1U << 
sig
;

124 
î∫o
 = 
EINVAL
;

127 
	}
}

130 
	$sigdñ£t
 (
sig£t_t
 *
£t
, 
sig
)

132 i‡(
sig
 >0 && sig < 
NSIG
)

134 #ifde‡
SIGABRT_COMPAT


135 i‡(
sig
 =
SIGABRT_COMPAT
)

136 
sig
 = 
SIGABRT
;

139 *
£t
 &~(1U << 
sig
);

144 
î∫o
 = 
EINVAL
;

147 
	}
}

151 
	$sigfûl£t
 (
sig£t_t
 *
£t
)

153 *
£t
 = ((2U << (
NSIG
 - 1)Ë- 1Ë& ~ 
SIGABRT_COMPAT_MASK
;

155 
	}
}

158 vﬁ©ûê
sig£t_t
 
	gblocked_£t
 ;

161 vﬁ©ûê
sig_©omic_t
 
	g≥ndög_¨øy
[
NSIG
] ;

165 
	$blocked_h™dÀr
 (
sig
)

172 
	`sig«l
 (
sig
, 
blocked_h™dÀr
);

173 i‡(
sig
 >0 && sig < 
NSIG
)

174 
≥ndög_¨øy
[
sig
] = 1;

175 
	}
}

178 
	$sig≥ndög
 (
sig£t_t
 *
£t
)

180 
sig£t_t
 
≥ndög
 = 0;

181 
sig
;

183 
sig
 = 0; sig < 
NSIG
; sig++)

184 i‡(
≥ndög_¨øy
[
sig
])

185 
≥ndög
 |1U << 
sig
;

186 *
£t
 = 
≥ndög
;

188 
	}
}

192 vﬁ©ûê
h™dÀr_t
 
	gﬁd_h™dÀrs
[
NSIG
];

195 
	$sig¥ocmask
 (
›î©i⁄
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
ﬁd_£t
)

197 i‡(
ﬁd_£t
 !
NULL
)

198 *
ﬁd_£t
 = 
blocked_£t
;

200 i‡(
£t
 !
NULL
)

202 
sig£t_t
 
√w_blocked_£t
;

203 
sig£t_t
 
to_unblock
;

204 
sig£t_t
 
to_block
;

206 
›î©i⁄
)

208 
SIG_BLOCK
:

209 
√w_blocked_£t
 = 
blocked_£t
 | *
£t
;

211 
SIG_SETMASK
:

212 
√w_blocked_£t
 = *
£t
;

214 
SIG_UNBLOCK
:

215 
√w_blocked_£t
 = 
blocked_£t
 & ~*
£t
;

218 
î∫o
 = 
EINVAL
;

221 
to_unblock
 = 
blocked_£t
 & ~
√w_blocked_£t
;

222 
to_block
 = 
√w_blocked_£t
 & ~
blocked_£t
;

224 i‡(
to_block
 != 0)

226 
sig
;

228 
sig
 = 0; sig < 
NSIG
; sig++)

229 i‡((
to_block
 >> 
sig
) & 1)

231 
≥ndög_¨øy
[
sig
] = 0;

232 i‡((
ﬁd_h™dÀrs
[
sig
] = 
	`sig«l
 (sig, 
blocked_h™dÀr
)Ë!
SIG_ERR
)

233 
blocked_£t
 |1U << 
sig
;

237 i‡(
to_unblock
 != 0)

239 
sig_©omic_t
 
ª˚ived
[
NSIG
];

240 
sig
;

242 
sig
 = 0; sig < 
NSIG
; sig++)

243 i‡((
to_unblock
 >> 
sig
) & 1)

245 i‡(
	`sig«l
 (
sig
, 
ﬁd_h™dÀrs
[sig]Ë!
blocked_h™dÀr
)

249 
	`ab‹t
 ();

250 
ª˚ived
[
sig
] = 
≥ndög_¨øy
[sig];

251 
blocked_£t
 &~(1U << 
sig
);

252 
≥ndög_¨øy
[
sig
] = 0;

255 
ª˚ived
[
sig
] = 0;

257 
sig
 = 0; sig < 
NSIG
; sig++)

258 i‡(
ª˚ived
[
sig
])

259 
	`øi£
 (
sig
);

263 
	}
}

267 
h™dÀr_t


268 
	$Ωl_sig«l
 (
sig
, 
h™dÀr_t
 
h™dÀr
)

272 i‡(
sig
 >0 && sig < 
NSIG
 && sig !
SIGKILL
 && sig !
SIGSTOP


273 && 
h™dÀr
 !
SIG_ERR
)

275 #ifde‡
SIGABRT_COMPAT


276 i‡(
sig
 =
SIGABRT_COMPAT
)

277 
sig
 = 
SIGABRT
;

280 i‡(
blocked_£t
 & (1U << 
sig
))

291 
h™dÀr_t
 
ªsu…
 = 
ﬁd_h™dÀrs
[
sig
];

292 
ﬁd_h™dÀrs
[
sig
] = 
h™dÀr
;

293  
ªsu…
;

296  
	`sig«l
 (
sig
, 
h™dÀr
);

300 
î∫o
 = 
EINVAL
;

301  
SIG_ERR
;

303 
	}
}

305 #i‡
GNULIB_deföed_SIGPIPE


308 
	$Ωl_øi£
 (
sig
)

309 #unde‡
øi£


311 
sig
)

313 
SIGPIPE
:

314 i‡(
blocked_£t
 & (1U << 
sig
))

315 
≥ndög_¨øy
[
sig
] = 1;

318 
h™dÀr_t
 
h™dÀr
 = 
SIGPIPE_h™dÀr
;

319 i‡(
h™dÀr
 =
SIG_DFL
)

320 
	`exô
 (128 + 
SIGPIPE
);

321 i‡(
h™dÀr
 !
SIG_IGN
)

322 (*
h™dÀr
Ë(
sig
);

326  
	`øi£
 (
sig
);

328 
	}
}

	@lib/size_max.h

21 #i‚de‡
GNULIB_SIZE_MAX_H


22 
	#GNULIB_SIZE_MAX_H


	)

25 
	~<limôs.h
>

27 #i‡
HAVE_STDINT_H


28 
	~<°döt.h
>

	@lib/snprintf.c

21 
	~<c⁄fig.h
>

24 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<limôs.h
>

28 
	~<°d¨g.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	~"va¢¥ötf.h
"

40 
	$¢¥ötf
 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

42 *
ouçut
;

43 
size_t
 
Àn
;

44 
size_t
 
Ànbuf
 = 
size
;

45 
va_li°
 
¨gs
;

47 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

48 
ouçut
 = 
	`va¢¥ötf
 (
°r
, &
Ànbuf
, 
f‹m©
, 
¨gs
);

49 
Àn
 = 
Ànbuf
;

50 
	`va_íd
 (
¨gs
);

52 i‡(!
ouçut
)

55 i‡(
ouçut
 !
°r
)

57 i‡(
size
)

59 
size_t
 
¥u√d_Àn
 = (
Àn
 < 
size
 ?Üen : size - 1);

60 
	`mem˝y
 (
°r
, 
ouçut
, 
¥u√d_Àn
);

61 
°r
[
¥u√d_Àn
] = '\0';

64 
	`‰ì
 (
ouçut
);

67 i‡(
INT_MAX
 < 
Àn
)

69 
î∫o
 = 
EOVERFLOW
;

73  
Àn
;

74 
	}
}

	@lib/socket.c

20 
	~<c⁄fig.h
>

22 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<sys/sockë.h
>

27 
	~"w32sock.h
"

29 
	~"sockës.h
"

32 
	$Ωl_sockë
 (
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

34 
SOCKET
 
fh
;

36 
	`gl_sockës_°¨tup
 (
SOCKETS_1_1
);

40 
fh
 = 
	`WSASockë
 (
domaö
, 
ty≥
, 
¥Ÿocﬁ
, 
NULL
, 0, 0);

42 i‡(
fh
 =
INVALID_SOCKET
)

44 
	`£t_wösock_î∫o
 ();

48  
	`SOCKET_TO_FD
 (
fh
);

49 
	}
}

	@lib/sockets.c

20 
	~<c⁄fig.h
>

23 
	~"sockës.h
"

25 #i‡
WINDOWS_SOCKETS


28 
	~<sys/sockë.h
>

30 
	~"fd-hook.h
"

33 
	~"w32sock.h
"

36 
	$˛o£_fd_maybe_sockë
 (c⁄° 
fd_hook
 *
ªmaöög_li°
,

37 
gl_˛o£_‚
 
¥im¨y
,

38 
fd
)

44 
SOCKET
 
sock
;

45 
WSANETWORKEVENTS
 
ev
;

48 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

49 
ev
.
lNëw‹kEvíts
 = 0xDEADBEEF;

50 
	`WSAEnumNëw‹kEvíts
 (
sock
, 
NULL
, &
ev
);

51 i‡(
ev
.
lNëw‹kEvíts
 != 0xDEADBEEF)

58 i‡(
	`˛o£sockë
 (
sock
))

60 
	`£t_wösock_î∫o
 ();

67 
	`_˛o£
 (
fd
);

73  
	`execuã_˛o£_hooks
 (
ªmaöög_li°
, 
¥im¨y
, 
fd
);

74 
	}
}

77 
	$io˘l_fd_maybe_sockë
 (c⁄° 
fd_hook
 *
ªmaöög_li°
,

78 
gl_io˘l_‚
 
¥im¨y
,

79 
fd
, 
ªque°
, *
¨g
)

81 
SOCKET
 
sock
;

82 
WSANETWORKEVENTS
 
ev
;

85 
sock
 = 
	`FD_TO_SOCKET
 (
fd
);

86 
ev
.
lNëw‹kEvíts
 = 0xDEADBEEF;

87 
	`WSAEnumNëw‹kEvíts
 (
sock
, 
NULL
, &
ev
);

88 i‡(
ev
.
lNëw‹kEvíts
 != 0xDEADBEEF)

91 i‡(
	`io˘lsockë
 (
sock
, 
ªque°
, 
¨g
) < 0)

93 
	`£t_wösock_î∫o
 ();

101  
	`execuã_io˘l_hooks
 (
ªmaöög_li°
, 
¥im¨y
, 
fd
, 
ªque°
, 
¨g
);

102 
	}
}

104 
fd_hook
 
	gfd_sockës_hook
;

106 
	göôülized_sockës_vîsi⁄
 ;

111 
	$gl_sockës_°¨tup
 (
vîsi⁄
 
_GL_UNUSED
)

113 #i‡
WINDOWS_SOCKETS


114 i‡(
vîsi⁄
 > 
öôülized_sockës_vîsi⁄
)

116 
WSADATA
 
d©a
;

117 
îr
;

119 
îr
 = 
	`WSASèπup
 (
vîsi⁄
, &
d©a
);

120 i‡(
îr
 != 0)

123 i‡(
d©a
.
wVîsi⁄
 < 
vîsi⁄
)

126 i‡(
öôülized_sockës_vîsi⁄
 == 0)

127 
	`ªgi°î_fd_hook
 (
˛o£_fd_maybe_sockë
, 
io˘l_fd_maybe_sockë
,

128 &
fd_sockës_hook
);

130 
öôülized_sockës_vîsi⁄
 = 
vîsi⁄
;

135 
	}
}

138 
	$gl_sockës_˛ónup
 ()

140 #i‡
WINDOWS_SOCKETS


141 
îr
;

143 
öôülized_sockës_vîsi⁄
 = 0;

145 
	`uƒegi°î_fd_hook
 (&
fd_sockës_hook
);

147 
îr
 = 
	`WSACÀ™up
 ();

148 i‡(
îr
 != 0)

153 
	}
}

	@lib/sockets.h

20 #i‚de‡
SOCKETS_H


21 
	#SOCKETS_H
 1

	)

23 
	#SOCKETS_1_0
 0x100

	)

24 
	#SOCKETS_1_1
 0x101

	)

25 
	#SOCKETS_2_0
 0x200

	)

26 
	#SOCKETS_2_1
 0x201

	)

27 
	#SOCKETS_2_2
 0x202

	)

29 
gl_sockës_°¨tup
 (
vîsi⁄
);

30 
gl_sockës_˛ónup
 ();

35 #i‡
WINDOWS_SOCKETS


37 
	~<sys/sockë.h
>

39 
ölöe
 
SOCKET


40 
	$gl_fd_to_h™dÀ
 (
fd
)

42  
	`_gë_osfh™dÀ
 (
fd
);

43 
	}
}

47 
	#gl_fd_to_h™dÀ
(
x
Ë(x)

	)

	@lib/spawn-pipe.c

19 
	~<c⁄fig.h
>

22 
	~"•awn-pùe.h
"

24 
	~<î∫o.h
>

25 
	~<f˙é.h
>

26 
	~<°dlib.h
>

27 
	~<sig«l.h
>

28 
	~<uni°d.h
>

30 
	~"îr‹.h
"

31 
	~"Áèl-sig«l.h
"

32 
	~"uni°d-ß„r.h
"

33 
	~"waô-¥o˚ss.h
"

34 
	~"gëãxt.h
"

36 
	#_
(
°r
Ë
	`gëãxt
 (°r)

	)

38 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


41 
	~<¥o˚ss.h
>

42 
	~"w32•awn.h
"

47 
	~<•awn.h
>

53 #unde‡
›í


54 #unde‡
˛o£


57 #ifde‡
EINTR


63 
ölöe
 

64 
	$n⁄öå_˛o£
 (
fd
)

66 
ªtvÆ
;

69 
ªtvÆ
 = 
	`˛o£
 (
fd
);

70 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

72  
ªtvÆ
;

73 
	}
}

74 
	#˛o£
 
n⁄öå_˛o£


	)

76 
ölöe
 

77 
	$n⁄öå_›í
 (c⁄° *
∑th«me
, 
oÊag
, 
mode_t
 
mode
)

79 
ªtvÆ
;

82 
ªtvÆ
 = 
	`›í
 (
∑th«me
, 
oÊag
, 
mode
);

83 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

85  
ªtvÆ
;

86 
	}
}

87 #unde‡
›í


88 
	#›í
 
n⁄öå_›í


	)

106 
pid_t


107 
	$¸óã_pùe
 (c⁄° *
¥og«me
,

108 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

109 
boﬁ
 
pùe_°dö
, boﬁ 
pùe_°dout
,

110 c⁄° *
¥og_°dö
, c⁄° *
¥og_°dout
,

111 
boﬁ
 
nuŒ_°dîr
,

112 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

113 
fd
[2])

115 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


122 
ifd
[2];

123 
ofd
[2];

124 
‹ig_°dö
;

125 
‹ig_°dout
;

126 
‹ig_°dîr
;

127 
chûd
;

128 
nuŒoutfd
;

129 
°döfd
;

130 
°doutfd
;

131 
ßved_î∫o
;

134 
¥og_¨gv
 = 
	`¥ï¨e_•awn
 (prog_argv);

136 i‡(
pùe_°dout
)

137 i‡(
	`pùe2_ß„r
 (
ifd
, 
O_BINARY
 | 
O_CLOEXEC
) < 0)

138 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("cannot createÖipe"));

139 i‡(
pùe_°dö
)

140 i‡(
	`pùe2_ß„r
 (
ofd
, 
O_BINARY
 | 
O_CLOEXEC
) < 0)

141 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("cannot createÖipe"));

152 i‡(
pùe_°dö
 || 
¥og_°dö
 !
NULL
)

153 
‹ig_°dö
 = 
	`dup_ß„r_noöhîô
 (
STDIN_FILENO
);

154 i‡(
pùe_°dout
 || 
¥og_°dout
 !
NULL
)

155 
‹ig_°dout
 = 
	`dup_ß„r_noöhîô
 (
STDOUT_FILENO
);

156 i‡(
nuŒ_°dîr
)

157 
‹ig_°dîr
 = 
	`dup_ß„r_noöhîô
 (
STDERR_FILENO
);

158 
chûd
 = -1;

161 
nuŒoutfd
 = -1;

162 
°döfd
 = -1;

163 
°doutfd
 = -1;

164 i‡((!
pùe_°dö
 || 
	`dup2
 (
ofd
[0], 
STDIN_FILENO
) >= 0)

165 && (!
pùe_°dout
 || 
	`dup2
 (
ifd
[1], 
STDOUT_FILENO
) >= 0)

166 && (!
nuŒ_°dîr


167 || ((
nuŒoutfd
 = 
	`›í
 ("NUL", 
O_RDWR
, 0)) >= 0

168 && (
nuŒoutfd
 =
STDERR_FILENO


169 || (
	`dup2
 (
nuŒoutfd
, 
STDERR_FILENO
) >= 0

170 && 
	`˛o£
 (
nuŒoutfd
) >= 0))))

171 && (
pùe_°dö


172 || 
¥og_°dö
 =
NULL


173 || ((
°döfd
 = 
	`›í
 (
¥og_°dö
, 
O_RDONLY
, 0)) >= 0

174 && (
°döfd
 =
STDIN_FILENO


175 || (
	`dup2
 (
°döfd
, 
STDIN_FILENO
) >= 0

176 && 
	`˛o£
 (
°döfd
) >= 0))))

177 && (
pùe_°dout


178 || 
¥og_°dout
 =
NULL


179 || ((
°doutfd
 = 
	`›í
 (
¥og_°dout
, 
O_WRONLY
, 0)) >= 0

180 && (
°doutfd
 =
STDOUT_FILENO


181 || (
	`dup2
 (
°doutfd
, 
STDOUT_FILENO
) >= 0

182 && 
	`˛o£
 (
°doutfd
) >= 0)))))

195 
chûd
 = 
	`•awnv≥
 (
P_NOWAIT
, 
¥og_∑th
, (c⁄° **Ë
¥og_¨gv
,

196 (c⁄° **Ë
ívú⁄
);

197 i‡(
chûd
 < 0 && 
î∫o
 =
ENOEXEC
)

202 --
¥og_¨gv
;

203 
chûd
 = 
	`•awnv≥
 (
P_NOWAIT
, 
¥og_¨gv
[0], (const **)Örog_argv,

204 (c⁄° **Ë
ívú⁄
);

207 i‡(
chûd
 == -1)

208 
ßved_î∫o
 = 
î∫o
;

209 i‡(
°döfd
 >= 0)

210 
	`˛o£
 (
°döfd
);

211 i‡(
°doutfd
 >= 0)

212 
	`˛o£
 (
°doutfd
);

213 i‡(
nuŒoutfd
 >= 0)

214 
	`˛o£
 (
nuŒoutfd
);

217 i‡(
nuŒ_°dîr
)

218 
	`undup_ß„r_noöhîô
 (
‹ig_°dîr
, 
STDERR_FILENO
);

219 i‡(
pùe_°dout
 || 
¥og_°dout
 !
NULL
)

220 
	`undup_ß„r_noöhîô
 (
‹ig_°dout
, 
STDOUT_FILENO
);

221 i‡(
pùe_°dö
 || 
¥og_°dö
 !
NULL
)

222 
	`undup_ß„r_noöhîô
 (
‹ig_°dö
, 
STDIN_FILENO
);

224 i‡(
pùe_°dö
)

225 
	`˛o£
 (
ofd
[0]);

226 i‡(
pùe_°dout
)

227 
	`˛o£
 (
ifd
[1]);

228 i‡(
chûd
 == -1)

230 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

231 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 
ßved_î∫o
,

232 
	`_
("%†sub¥o˚s†Áûed"), 
¥og«me
);

233 i‡(
pùe_°dout
)

234 
	`˛o£
 (
ifd
[0]);

235 i‡(
pùe_°dö
)

236 
	`˛o£
 (
ofd
[1]);

237 
î∫o
 = 
ßved_î∫o
;

241 i‡(
pùe_°dout
)

242 
fd
[0] = 
ifd
[0];

243 i‡(
pùe_°dö
)

244 
fd
[1] = 
ofd
[1];

245  
chûd
;

250 
ifd
[2];

251 
ofd
[2];

252 
sig£t_t
 
blocked_sig«ls
;

253 
posix_•awn_fûe_a˘i⁄s_t
 
a˘i⁄s
;

254 
boﬁ
 
a˘i⁄s_Æloˇãd
;

255 
posix_•aw«âr_t
 
©ås
;

256 
boﬁ
 
©ås_Æloˇãd
;

257 
îr
;

258 
pid_t
 
chûd
;

260 i‡(
pùe_°dout
)

261 i‡(
	`pùe_ß„r
 (
ifd
) < 0)

262 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("cannot createÖipe"));

263 i‡(
pùe_°dö
)

264 i‡(
	`pùe_ß„r
 (
ofd
) < 0)

265 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("cannot createÖipe"));

275 i‡(
¶ave_¥o˚ss
)

277 
	`sig¥ocmask
 (
SIG_SETMASK
, 
NULL
, &
blocked_sig«ls
);

278 
	`block_Áèl_sig«ls
 ();

280 
a˘i⁄s_Æloˇãd
 = 
Ál£
;

281 
©ås_Æloˇãd
 = 
Ál£
;

282 i‡((
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_öô
 (&
a˘i⁄s
)) != 0

283 || (
a˘i⁄s_Æloˇãd
 = 
åue
,

284 (
pùe_°dö


285 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_adddup2
 (&
a˘i⁄s
,

286 
ofd
[0], 
STDIN_FILENO
))

288 || (
pùe_°dout


289 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_adddup2
 (&
a˘i⁄s
,

290 
ifd
[1], 
STDOUT_FILENO
))

292 || (
pùe_°dö


293 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add˛o£
 (&
a˘i⁄s
, 
ofd
[0]))

295 || (
pùe_°dout


296 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add˛o£
 (&
a˘i⁄s
, 
ifd
[1]))

298 || (
pùe_°dö


299 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add˛o£
 (&
a˘i⁄s
, 
ofd
[1]))

301 || (
pùe_°dout


302 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add˛o£
 (&
a˘i⁄s
, 
ifd
[0]))

304 || (
nuŒ_°dîr


305 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add›í
 (&
a˘i⁄s
,

306 
STDERR_FILENO
,

307 "/dev/nuŒ", 
O_RDWR
,

310 || (!
pùe_°dö


311 && 
¥og_°dö
 !
NULL


312 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add›í
 (&
a˘i⁄s
,

313 
STDIN_FILENO
,

314 
¥og_°dö
, 
O_RDONLY
,

317 || (!
pùe_°dout


318 && 
¥og_°dout
 !
NULL


319 && (
îr
 = 
	`posix_•awn_fûe_a˘i⁄s_add›í
 (&
a˘i⁄s
,

320 
STDOUT_FILENO
,

321 
¥og_°dout
, 
O_WRONLY
,

324 || (
¶ave_¥o˚ss


325 && ((
îr
 = 
	`posix_•aw«âr_öô
 (&
©ås
)) != 0

326 || (
©ås_Æloˇãd
 = 
åue
,

327 (
îr
 = 
	`posix_•aw«âr_£tsigmask
 (&
©ås
,

328 &
blocked_sig«ls
))

330 || (
îr
 = 
	`posix_•aw«âr_£tÊags
 (&
©ås
,

331 
POSIX_SPAWN_SETSIGMASK
))

333 || (
îr
 = 
	`posix_•aw≈
 (&
chûd
, 
¥og_∑th
, &
a˘i⁄s
,

334 
©ås_Æloˇãd
 ? &
©ås
 : 
NULL
, 
¥og_¨gv
,

335 
ívú⁄
))

338 i‡(
a˘i⁄s_Æloˇãd
)

339 
	`posix_•awn_fûe_a˘i⁄s_de°roy
 (&
a˘i⁄s
);

340 i‡(
©ås_Æloˇãd
)

341 
	`posix_•aw«âr_de°roy
 (&
©ås
);

342 i‡(
¶ave_¥o˚ss
)

343 
	`unblock_Áèl_sig«ls
 ();

344 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

345 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 
îr
,

346 
	`_
("%†sub¥o˚s†Áûed"), 
¥og«me
);

347 i‡(
pùe_°dout
)

349 
	`˛o£
 (
ifd
[0]);

350 
	`˛o£
 (
ifd
[1]);

352 i‡(
pùe_°dö
)

354 
	`˛o£
 (
ofd
[0]);

355 
	`˛o£
 (
ofd
[1]);

357 
î∫o
 = 
îr
;

360 
	`posix_•awn_fûe_a˘i⁄s_de°roy
 (&
a˘i⁄s
);

361 i‡(
©ås_Æloˇãd
)

362 
	`posix_•aw«âr_de°roy
 (&
©ås
);

363 i‡(
¶ave_¥o˚ss
)

365 
	`ªgi°î_¶ave_sub¥o˚ss
 (
chûd
);

366 
	`unblock_Áèl_sig«ls
 ();

368 i‡(
pùe_°dö
)

369 
	`˛o£
 (
ofd
[0]);

370 i‡(
pùe_°dout
)

371 
	`˛o£
 (
ifd
[1]);

373 i‡(
pùe_°dout
)

374 
fd
[0] = 
ifd
[0];

375 i‡(
pùe_°dö
)

376 
fd
[1] = 
ofd
[1];

377  
chûd
;

380 
	}
}

390 
pid_t


391 
	$¸óã_pùe_bidi
 (c⁄° *
¥og«me
,

392 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

393 
boﬁ
 
nuŒ_°dîr
,

394 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

395 
fd
[2])

397 
pid_t
 
ªsu…
 = 
	`¸óã_pùe
 (
¥og«me
, 
¥og_∑th
, 
¥og_¨gv
,

398 
åue
,Årue, 
NULL
, NULL,

399 
nuŒ_°dîr
, 
¶ave_¥o˚ss
, 
exô_⁄_îr‹
,

400 
fd
);

401  
ªsu…
;

402 
	}
}

411 
pid_t


412 
	$¸óã_pùe_ö
 (c⁄° *
¥og«me
,

413 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

414 c⁄° *
¥og_°dö
, 
boﬁ
 
nuŒ_°dîr
,

415 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

416 
fd
[1])

418 
iofd
[2];

419 
pid_t
 
ªsu…
 = 
	`¸óã_pùe
 (
¥og«me
, 
¥og_∑th
, 
¥og_¨gv
,

420 
Ál£
, 
åue
, 
¥og_°dö
, 
NULL
,

421 
nuŒ_°dîr
, 
¶ave_¥o˚ss
, 
exô_⁄_îr‹
,

422 
iofd
);

423 i‡(
ªsu…
 != -1)

424 
fd
[0] = 
iofd
[0];

425  
ªsu…
;

426 
	}
}

435 
pid_t


436 
	$¸óã_pùe_out
 (c⁄° *
¥og«me
,

437 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

438 c⁄° *
¥og_°dout
, 
boﬁ
 
nuŒ_°dîr
,

439 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

440 
fd
[1])

442 
iofd
[2];

443 
pid_t
 
ªsu…
 = 
	`¸óã_pùe
 (
¥og«me
, 
¥og_∑th
, 
¥og_¨gv
,

444 
åue
, 
Ál£
, 
NULL
, 
¥og_°dout
,

445 
nuŒ_°dîr
, 
¶ave_¥o˚ss
, 
exô_⁄_îr‹
,

446 
iofd
);

447 i‡(
ªsu…
 != -1)

448 
fd
[0] = 
iofd
[1];

449  
ªsu…
;

450 
	}
}

	@lib/spawn-pipe.h

18 #i‚de‡
_SPAWN_PIPE_H


19 
	#_SPAWN_PIPE_H


	)

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<sys/ty≥s.h
>

26 
	~<°dboﬁ.h
>

29 #ifde‡
__˝lu•lus


85 
pid_t
 
¸óã_pùe_out
 (c⁄° *
¥og«me
,

86 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

87 c⁄° *
¥og_°dout
, 
boﬁ
 
nuŒ_°dîr
,

88 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

89 
fd
[1]);

98 
pid_t
 
¸óã_pùe_ö
 (c⁄° *
¥og«me
,

99 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

100 c⁄° *
¥og_°dö
, 
boﬁ
 
nuŒ_°dîr
,

101 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

102 
fd
[1]);

126 
pid_t
 
¸óã_pùe_bidi
 (c⁄° *
¥og«me
,

127 c⁄° *
¥og_∑th
, **
¥og_¨gv
,

128 
boﬁ
 
nuŒ_°dîr
,

129 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

130 
fd
[2]);

133 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


135 
	#DEV_NULL
 "NUL"

	)

138 
	#DEV_NULL
 "/dev/nuŒ"

	)

142 #ifde‡
__˝lu•lus


	@lib/spawn.in.h

18 #i‚de‡
_
@
GUARD_PREFIX
@
_SPAWN_H


20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

26 #i‡@
HAVE_SPAWN_H
@

27 #@
INCLUDE_NEXT
@ @
NEXT_SPAWN_H
@

30 #i‚de‡
_
@
GUARD_PREFIX
@
_SPAWN_H


31 
	#_
@
GUARD_PREFIX
@
_SPAWN_H


	)

35 #i‡!(
deföed
 
__GLIBC__
 && !deföed 
__UCLIBC__
)

36 
	~<sched.h
>

37 
	~<sig«l.h
>

40 
	~<sys/ty≥s.h
>

42 #i‚de‡
__THROW


43 
	#__THROW


	)

51 #i‚de‡
_Re°ri˘_


52 #i‡199901L <
__STDC_VERSION__


53 
	#_Re°ri˘_
 
ª°ri˘


	)

54 #ñi‡2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
)

55 
	#_Re°ri˘_
 
__ª°ri˘


	)

57 
	#_Re°ri˘_


	)

63 #i‚de‡
_Re°ri˘_¨r_


64 #i‡((199901L <
__STDC_VERSION__
 \

65 || ((3 < 
	g__GNUC__
 || (3 =
__GNUC__
 && 1 <
__GNUC_MINOR__
)) \

66 && !
__STRICT_ANSI__
)) \

67 && !
deföed
 
__GNUG__
)

68 
	#_Re°ri˘_¨r_
 
_Re°ri˘_


	)

70 
	#_Re°ri˘_¨r_


	)

82 #i‡@
REPLACE_POSIX_SPAWN
@

83 
	#posix_•aw«âr_t
 
Ωl_posix_•aw«âr_t


	)

85 #i‡@
REPLACE_POSIX_SPAWN
@ || !@
HAVE_POSIX_SPAWNATTR_T
@

86 #i‡!
GNULIB_deföed_posix_•aw«âr_t


89 
_Êags
;

90 
pid_t
 
	m_pgΩ
;

91 
sig£t_t
 
	m_sd
;

92 
sig£t_t
 
	m_ss
;

93 
sched_∑øm
 
	m_•
;

94 
	m_pﬁicy
;

95 
	m__∑d
[16];

96 } 
	tposix_•aw«âr_t
;

97 
	#GNULIB_deföed_posix_•aw«âr_t
 1

	)

104 #i‡@
REPLACE_POSIX_SPAWN
@

105 
	#posix_•awn_fûe_a˘i⁄s_t
 
Ωl_posix_•awn_fûe_a˘i⁄s_t


	)

107 #i‡@
REPLACE_POSIX_SPAWN
@ || !@
HAVE_POSIX_SPAWN_FILE_ACTIONS_T
@

108 #i‡!
GNULIB_deföed_posix_•awn_fûe_a˘i⁄s_t


111 
	m_Æloˇãd
;

112 
	m_u£d
;

113 
__•awn_a˘i⁄
 *
	m_a˘i⁄s
;

114 
	m__∑d
[16];

115 } 
	tposix_•awn_fûe_a˘i⁄s_t
;

116 
	#GNULIB_deföed_posix_•awn_fûe_a˘i⁄s_t
 1

	)

122 #i‡@
HAVE_POSIX_SPAWN
@

124 #i‚de‡
POSIX_SPAWN_SETSCHEDPARAM


125 
	#POSIX_SPAWN_SETSCHEDPARAM
 0

	)

127 #i‚de‡
POSIX_SPAWN_SETSCHEDULER


128 
	#POSIX_SPAWN_SETSCHEDULER
 0

	)

131 #i‡@
REPLACE_POSIX_SPAWN
@

134 #unde‡
POSIX_SPAWN_FORK_HANDLERS


136 
	#POSIX_SPAWN_RESETIDS
 0x01

	)

137 
	#POSIX_SPAWN_SETPGROUP
 0x02

	)

138 
	#POSIX_SPAWN_SETSIGDEF
 0x04

	)

139 
	#POSIX_SPAWN_SETSIGMASK
 0x08

	)

140 
	#POSIX_SPAWN_SETSCHEDPARAM
 0x10

	)

141 
	#POSIX_SPAWN_SETSCHEDULER
 0x20

	)

145 
	#POSIX_SPAWN_USEVFORK
 \

146 ((
POSIX_SPAWN_RESETIDS
 | (POSIX_SPAWN_RESETIDS - 1) \

147 | 
POSIX_SPAWN_SETPGROUP
 | (POSIX_SPAWN_SETPGROUP - 1) \

148 | 
POSIX_SPAWN_SETSIGDEF
 | (POSIX_SPAWN_SETSIGDEF - 1) \

149 | 
POSIX_SPAWN_SETSIGMASK
 | (POSIX_SPAWN_SETSIGMASK - 1) \

150 | 
POSIX_SPAWN_SETSCHEDPARAM
 \

151 | (
POSIX_SPAWN_SETSCHEDPARAM
 > 0 ? POSIX_SPAWN_SETSCHEDPARAM - 1 : 0) \

152 | 
POSIX_SPAWN_SETSCHEDULER
 \

153 | (
POSIX_SPAWN_SETSCHEDULER
 > 0 ? POSIX_SPAWN_SETSCHEDULER - 1 : 0)) \

154 + 1)

	)

155 #i‡!
GNULIB_deföed_vîify_POSIX_SPAWN_USEVFORK_no_ovîœp


156 
	tvîify_POSIX_SPAWN_USEVFORK_no_ovîœp


157 [(((
POSIX_SPAWN_RESETIDS
 | 
POSIX_SPAWN_SETPGROUP


158 | 
POSIX_SPAWN_SETSIGDEF
 | 
POSIX_SPAWN_SETSIGMASK


159 | 
POSIX_SPAWN_SETSCHEDPARAM
 | 
POSIX_SPAWN_SETSCHEDULER
)

160 & 
POSIX_SPAWN_USEVFORK
)

163 
	#GNULIB_deföed_vîify_POSIX_SPAWN_USEVFORK_no_ovîœp
 1

	)

167 #i‡@
GNULIB_POSIX_SPAWN
@

173 #i‡@
REPLACE_POSIX_SPAWN
@

174 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

175 
	#posix_•awn
 
Ωl_posix_•awn


	)

177 
_GL_FUNCDECL_RPL
 (
posix_•awn
, ,

178 (
pid_t
 *
_Re°ri˘_
 
__pid
,

179 c⁄° *
_Re°ri˘_
 
__∑th
,

180 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

181 c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©åp
,

182 *c⁄° 
¨gv
[
_Re°ri˘_¨r_
],

183 *c⁄° 
ívp
[
_Re°ri˘_¨r_
])

184 
_GL_ARG_NONNULL
 ((2, 5, 6)));

185 
_GL_CXXALIAS_RPL
 (
posix_•awn
, ,

186 (
pid_t
 *
_Re°ri˘_
 
__pid
,

187 c⁄° *
_Re°ri˘_
 
__∑th
,

188 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

189 c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©åp
,

190 *c⁄° 
¨gv
[
_Re°ri˘_¨r_
],

191 *c⁄° 
ívp
[
_Re°ri˘_¨r_
]));

193 #i‡!@
HAVE_POSIX_SPAWN
@

194 
_GL_FUNCDECL_SYS
 (
posix_•awn
, ,

195 (
pid_t
 *
_Re°ri˘_
 
__pid
,

196 c⁄° *
_Re°ri˘_
 
__∑th
,

197 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

198 c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©åp
,

199 *c⁄° 
¨gv
[
_Re°ri˘_¨r_
],

200 *c⁄° 
ívp
[
_Re°ri˘_¨r_
])

201 
_GL_ARG_NONNULL
 ((2, 5, 6)));

203 
_GL_CXXALIAS_SYS
 (
posix_•awn
, ,

204 (
pid_t
 *
_Re°ri˘_
 
__pid
,

205 c⁄° *
_Re°ri˘_
 
__∑th
,

206 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

207 c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©åp
,

208 *c⁄° 
¨gv
[
_Re°ri˘_¨r_
],

209 *c⁄° 
ívp
[
_Re°ri˘_¨r_
]));

211 
_GL_CXXALIASWARN
 (
posix_•awn
);

212 #ñi‡
deföed
 
GNULIB_POSIXCHECK


213 #unde‡
posix_•awn


214 #i‡
HAVE_RAW_DECL_POSIX_SPAWN


215 
_GL_WARN_ON_USE
 (
posix_•awn
, "posix_spawn is unportable - "

220 #i‡@
GNULIB_POSIX_SPAWNP
@

225 #i‡@
REPLACE_POSIX_SPAWN
@

226 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

227 
	#posix_•aw≈
 
Ωl_posix_•aw≈


	)

229 
_GL_FUNCDECL_RPL
 (
posix_•aw≈
, ,

230 (
pid_t
 *
__pid
, c⁄° *
__fûe
,

231 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

232 c⁄° 
posix_•aw«âr_t
 *
__©åp
,

233 *c⁄° 
¨gv
[], *c⁄° 
ívp
[])

234 
_GL_ARG_NONNULL
 ((2, 5, 6)));

235 
_GL_CXXALIAS_RPL
 (
posix_•aw≈
, ,

236 (
pid_t
 *
__pid
, c⁄° *
__fûe
,

237 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

238 c⁄° 
posix_•aw«âr_t
 *
__©åp
,

239 *c⁄° 
¨gv
[], *c⁄° 
ívp
[]));

241 #i‡!@
HAVE_POSIX_SPAWN
@

242 
_GL_FUNCDECL_SYS
 (
posix_•aw≈
, ,

243 (
pid_t
 *
__pid
, c⁄° *
__fûe
,

244 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

245 c⁄° 
posix_•aw«âr_t
 *
__©åp
,

246 *c⁄° 
¨gv
[], *c⁄° 
ívp
[])

247 
_GL_ARG_NONNULL
 ((2, 5, 6)));

249 
_GL_CXXALIAS_SYS
 (
posix_•aw≈
, ,

250 (
pid_t
 *
__pid
, c⁄° *
__fûe
,

251 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

252 c⁄° 
posix_•aw«âr_t
 *
__©åp
,

253 *c⁄° 
¨gv
[], *c⁄° 
ívp
[]));

255 
_GL_CXXALIASWARN
 (
posix_•aw≈
);

256 #ñi‡
deföed
 
GNULIB_POSIXCHECK


257 #unde‡
posix_•aw≈


258 #i‡
HAVE_RAW_DECL_POSIX_SPAWNP


259 
_GL_WARN_ON_USE
 (
posix_•aw≈
, "posix_spawnp is unportable - "

265 #i‡@
GNULIB_POSIX_SPAWNATTR_INIT
@

267 #i‡@
REPLACE_POSIX_SPAWN
@

268 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

269 
	#posix_•aw«âr_öô
 
Ωl_posix_•aw«âr_öô


	)

271 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_öô
, , (
posix_•aw«âr_t
 *
__©å
)

272 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

273 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_öô
, , (
posix_•aw«âr_t
 *
__©å
));

275 #i‡!@
HAVE_POSIX_SPAWN
@

276 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_öô
, , (
posix_•aw«âr_t
 *
__©å
)

277 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

279 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_öô
, , (
posix_•aw«âr_t
 *
__©å
));

281 
_GL_CXXALIASWARN
 (
posix_•aw«âr_öô
);

282 #ñi‡
deföed
 
GNULIB_POSIXCHECK


283 #unde‡
posix_•aw«âr_öô


284 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_INIT


285 
_GL_WARN_ON_USE
 (
posix_•aw«âr_öô
, "posix_spawnattr_init is unportable - "

290 #i‡@
GNULIB_POSIX_SPAWNATTR_DESTROY
@

292 #i‡@
REPLACE_POSIX_SPAWN
@

293 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

294 
	#posix_•aw«âr_de°roy
 
Ωl_posix_•aw«âr_de°roy


	)

296 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_de°roy
, , (
posix_•aw«âr_t
 *
__©å
)

297 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

298 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_de°roy
, , (
posix_•aw«âr_t
 *
__©å
));

300 #i‡!@
HAVE_POSIX_SPAWN
@

301 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_de°roy
, , (
posix_•aw«âr_t
 *
__©å
)

302 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

304 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_de°roy
, , (
posix_•aw«âr_t
 *
__©å
));

306 
_GL_CXXALIASWARN
 (
posix_•aw«âr_de°roy
);

307 #ñi‡
deföed
 
GNULIB_POSIXCHECK


308 #unde‡
posix_•aw«âr_de°roy


309 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_DESTROY


310 
_GL_WARN_ON_USE
 (
posix_•aw«âr_de°roy
,

316 #i‡@
GNULIB_POSIX_SPAWNATTR_GETSIGDEFAULT
@

319 #i‡@
REPLACE_POSIX_SPAWN
@

320 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

321 
	#posix_•aw«âr_gësigdeÁu…
 
Ωl_posix_•aw«âr_gësigdeÁu…


	)

323 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gësigdeÁu…
, ,

324 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

325 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
)

326 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

327 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gësigdeÁu…
, ,

328 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

329 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
));

331 #i‡!@
HAVE_POSIX_SPAWN
@

332 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gësigdeÁu…
, ,

333 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

334 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
)

335 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

337 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gësigdeÁu…
, ,

338 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

339 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
));

341 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gësigdeÁu…
);

342 #ñi‡
deföed
 
GNULIB_POSIXCHECK


343 #unde‡
posix_•aw«âr_gësigdeÁu…


344 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETSIGDEFAULT


345 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gësigdeÁu…
,

351 #i‡@
GNULIB_POSIX_SPAWNATTR_SETSIGDEFAULT
@

353 #i‡@
REPLACE_POSIX_SPAWN
@

354 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

355 
	#posix_•aw«âr_£tsigdeÁu…
 
Ωl_posix_•aw«âr_£tsigdeÁu…


	)

357 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£tsigdeÁu…
, ,

358 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

359 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
)

360 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

361 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£tsigdeÁu…
, ,

362 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

363 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
));

365 #i‡!@
HAVE_POSIX_SPAWN
@

366 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£tsigdeÁu…
, ,

367 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

368 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
)

369 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

371 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£tsigdeÁu…
, ,

372 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

373 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigdeÁu…
));

375 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£tsigdeÁu…
);

376 #ñi‡
deföed
 
GNULIB_POSIXCHECK


377 #unde‡
posix_•aw«âr_£tsigdeÁu…


378 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETSIGDEFAULT


379 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£tsigdeÁu…
,

385 #i‡@
GNULIB_POSIX_SPAWNATTR_GETSIGMASK
@

387 #i‡@
REPLACE_POSIX_SPAWN
@

388 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

389 
	#posix_•aw«âr_gësigmask
 
Ωl_posix_•aw«âr_gësigmask


	)

391 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gësigmask
, ,

392 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

393 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
)

394 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

395 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gësigmask
, ,

396 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

397 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
));

399 #i‡!@
HAVE_POSIX_SPAWN
@

400 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gësigmask
, ,

401 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

402 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
)

403 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

405 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gësigmask
, ,

406 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

407 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
));

409 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gësigmask
);

410 #ñi‡
deföed
 
GNULIB_POSIXCHECK


411 #unde‡
posix_•aw«âr_gësigmask


412 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETSIGMASK


413 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gësigmask
,

419 #i‡@
GNULIB_POSIX_SPAWNATTR_SETSIGMASK
@

421 #i‡@
REPLACE_POSIX_SPAWN
@

422 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

423 
	#posix_•aw«âr_£tsigmask
 
Ωl_posix_•aw«âr_£tsigmask


	)

425 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£tsigmask
, ,

426 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

427 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
)

428 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

429 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£tsigmask
, ,

430 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

431 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
));

433 #i‡!@
HAVE_POSIX_SPAWN
@

434 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£tsigmask
, ,

435 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

436 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
)

437 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

439 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£tsigmask
, ,

440 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

441 c⁄° 
sig£t_t
 *
_Re°ri˘_
 
__sigmask
));

443 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£tsigmask
);

444 #ñi‡
deföed
 
GNULIB_POSIXCHECK


445 #unde‡
posix_•aw«âr_£tsigmask


446 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETSIGMASK


447 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£tsigmask
,

453 #i‡@
GNULIB_POSIX_SPAWNATTR_GETFLAGS
@

455 #i‡@
REPLACE_POSIX_SPAWN
@

456 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

457 
	#posix_•aw«âr_gëÊags
 
Ωl_posix_•aw«âr_gëÊags


	)

459 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gëÊags
, ,

460 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

461 *
_Re°ri˘_
 
__Êags
)

462 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

463 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gëÊags
, ,

464 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

465 *
_Re°ri˘_
 
__Êags
));

467 #i‡!@
HAVE_POSIX_SPAWN
@

468 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gëÊags
, ,

469 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

470 *
_Re°ri˘_
 
__Êags
)

471 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

473 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gëÊags
, ,

474 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

475 *
_Re°ri˘_
 
__Êags
));

477 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gëÊags
);

478 #ñi‡
deföed
 
GNULIB_POSIXCHECK


479 #unde‡
posix_•aw«âr_gëÊags


480 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETFLAGS


481 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gëÊags
,

487 #i‡@
GNULIB_POSIX_SPAWNATTR_SETFLAGS
@

489 #i‡@
REPLACE_POSIX_SPAWN
@

490 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

491 
	#posix_•aw«âr_£tÊags
 
Ωl_posix_•aw«âr_£tÊags


	)

493 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£tÊags
, ,

494 (
posix_•aw«âr_t
 *
__©å
, 
__Êags
)

495 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

496 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£tÊags
, ,

497 (
posix_•aw«âr_t
 *
__©å
, 
__Êags
));

499 #i‡!@
HAVE_POSIX_SPAWN
@

500 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£tÊags
, ,

501 (
posix_•aw«âr_t
 *
__©å
, 
__Êags
)

502 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

504 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£tÊags
, ,

505 (
posix_•aw«âr_t
 *
__©å
, 
__Êags
));

507 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£tÊags
);

508 #ñi‡
deföed
 
GNULIB_POSIXCHECK


509 #unde‡
posix_•aw«âr_£tÊags


510 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETFLAGS


511 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£tÊags
,

517 #i‡@
GNULIB_POSIX_SPAWNATTR_GETPGROUP
@

519 #i‡@
REPLACE_POSIX_SPAWN
@

520 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

521 
	#posix_•aw«âr_gëpgroup
 
Ωl_posix_•aw«âr_gëpgroup


	)

523 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gëpgroup
, ,

524 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

525 
pid_t
 *
_Re°ri˘_
 
__pgroup
)

526 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

527 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gëpgroup
, ,

528 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

529 
pid_t
 *
_Re°ri˘_
 
__pgroup
));

531 #i‡!@
HAVE_POSIX_SPAWN
@

532 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gëpgroup
, ,

533 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

534 
pid_t
 *
_Re°ri˘_
 
__pgroup
)

535 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

537 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gëpgroup
, ,

538 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

539 
pid_t
 *
_Re°ri˘_
 
__pgroup
));

541 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gëpgroup
);

542 #ñi‡
deföed
 
GNULIB_POSIXCHECK


543 #unde‡
posix_•aw«âr_gëpgroup


544 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETPGROUP


545 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gëpgroup
,

551 #i‡@
GNULIB_POSIX_SPAWNATTR_SETPGROUP
@

553 #i‡@
REPLACE_POSIX_SPAWN
@

554 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

555 
	#posix_•aw«âr_£çgroup
 
Ωl_posix_•aw«âr_£çgroup


	)

557 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£çgroup
, ,

558 (
posix_•aw«âr_t
 *
__©å
, 
pid_t
 
__pgroup
)

559 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

560 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£çgroup
, ,

561 (
posix_•aw«âr_t
 *
__©å
, 
pid_t
 
__pgroup
));

563 #i‡!@
HAVE_POSIX_SPAWN
@

564 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£çgroup
, ,

565 (
posix_•aw«âr_t
 *
__©å
, 
pid_t
 
__pgroup
)

566 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

568 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£çgroup
, ,

569 (
posix_•aw«âr_t
 *
__©å
, 
pid_t
 
__pgroup
));

571 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£çgroup
);

572 #ñi‡
deföed
 
GNULIB_POSIXCHECK


573 #unde‡
posix_•aw«âr_£çgroup


574 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETPGROUP


575 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£çgroup
,

581 #i‡@
GNULIB_POSIX_SPAWNATTR_GETSCHEDPOLICY
@

583 #i‡@
REPLACE_POSIX_SPAWN
@

584 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

585 
	#posix_•aw«âr_gëschedpﬁicy
 
Ωl_posix_•aw«âr_gëschedpﬁicy


	)

587 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gëschedpﬁicy
, ,

588 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

589 *
_Re°ri˘_
 
__schedpﬁicy
)

590 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

591 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gëschedpﬁicy
, ,

592 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

593 *
_Re°ri˘_
 
__schedpﬁicy
));

595 #i‡!@
HAVE_POSIX_SPAWN
@ || 
POSIX_SPAWN_SETSCHEDULER
 == 0

596 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gëschedpﬁicy
, ,

597 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

598 *
_Re°ri˘_
 
__schedpﬁicy
)

599 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

601 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gëschedpﬁicy
, ,

602 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

603 *
_Re°ri˘_
 
__schedpﬁicy
));

605 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gëschedpﬁicy
);

606 #ñi‡
deföed
 
GNULIB_POSIXCHECK


607 #unde‡
posix_•aw«âr_gëschedpﬁicy


608 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETSCHEDPOLICY


609 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gëschedpﬁicy
,

615 #i‡@
GNULIB_POSIX_SPAWNATTR_SETSCHEDPOLICY
@

617 #i‡@
REPLACE_POSIX_SPAWN
@

618 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

619 
	#posix_•aw«âr_£tschedpﬁicy
 
Ωl_posix_•aw«âr_£tschedpﬁicy


	)

621 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£tschedpﬁicy
, ,

622 (
posix_•aw«âr_t
 *
__©å
, 
__schedpﬁicy
)

623 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

624 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£tschedpﬁicy
, ,

625 (
posix_•aw«âr_t
 *
__©å
, 
__schedpﬁicy
));

627 #i‡!@
HAVE_POSIX_SPAWN
@ || 
POSIX_SPAWN_SETSCHEDULER
 == 0

628 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£tschedpﬁicy
, ,

629 (
posix_•aw«âr_t
 *
__©å
, 
__schedpﬁicy
)

630 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

632 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£tschedpﬁicy
, ,

633 (
posix_•aw«âr_t
 *
__©å
, 
__schedpﬁicy
));

635 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£tschedpﬁicy
);

636 #ñi‡
deföed
 
GNULIB_POSIXCHECK


637 #unde‡
posix_•aw«âr_£tschedpﬁicy


638 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETSCHEDPOLICY


639 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£tschedpﬁicy
,

645 #i‡@
GNULIB_POSIX_SPAWNATTR_GETSCHEDPARAM
@

647 #i‡@
REPLACE_POSIX_SPAWN
@

648 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

649 
	#posix_•aw«âr_gësched∑øm
 
Ωl_posix_•aw«âr_gësched∑øm


	)

651 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_gësched∑øm
, ,

652 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

653 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
)

654 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

655 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_gësched∑øm
, ,

656 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

657 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
));

659 #i‡!@
HAVE_POSIX_SPAWN
@ || 
POSIX_SPAWN_SETSCHEDPARAM
 == 0

660 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_gësched∑øm
, ,

661 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

662 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
)

663 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

665 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_gësched∑øm
, ,

666 (c⁄° 
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

667 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
));

669 
_GL_CXXALIASWARN
 (
posix_•aw«âr_gësched∑øm
);

670 #ñi‡
deföed
 
GNULIB_POSIXCHECK


671 #unde‡
posix_•aw«âr_gësched∑øm


672 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_GETSCHEDPARAM


673 
_GL_WARN_ON_USE
 (
posix_•aw«âr_gësched∑øm
,

679 #i‡@
GNULIB_POSIX_SPAWNATTR_SETSCHEDPARAM
@

681 #i‡@
REPLACE_POSIX_SPAWN
@

682 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

683 
	#posix_•aw«âr_£tsched∑øm
 
Ωl_posix_•aw«âr_£tsched∑øm


	)

685 
_GL_FUNCDECL_RPL
 (
posix_•aw«âr_£tsched∑øm
, ,

686 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

687 c⁄° 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
)

688 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

689 
_GL_CXXALIAS_RPL
 (
posix_•aw«âr_£tsched∑øm
, ,

690 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

691 c⁄° 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
));

693 #i‡!@
HAVE_POSIX_SPAWN
@ || 
POSIX_SPAWN_SETSCHEDPARAM
 == 0

694 
_GL_FUNCDECL_SYS
 (
posix_•aw«âr_£tsched∑øm
, ,

695 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

696 c⁄° 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
)

697 
__THROW
 
_GL_ARG_NONNULL
 ((1, 2)));

699 
_GL_CXXALIAS_SYS
 (
posix_•aw«âr_£tsched∑øm
, ,

700 (
posix_•aw«âr_t
 *
_Re°ri˘_
 
__©å
,

701 c⁄° 
sched_∑øm
 *
_Re°ri˘_
 
__sched∑øm
));

703 
_GL_CXXALIASWARN
 (
posix_•aw«âr_£tsched∑øm
);

704 #ñi‡
deföed
 
GNULIB_POSIXCHECK


705 #unde‡
posix_•aw«âr_£tsched∑øm


706 #i‡
HAVE_RAW_DECL_POSIX_SPAWNATTR_SETSCHEDPARAM


707 
_GL_WARN_ON_USE
 (
posix_•aw«âr_£tsched∑øm
,

714 #i‡@
GNULIB_POSIX_SPAWN_FILE_ACTIONS_INIT
@

716 #i‡@
REPLACE_POSIX_SPAWN
@

717 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

718 
	#posix_•awn_fûe_a˘i⁄s_öô
 
Ωl_posix_•awn_fûe_a˘i⁄s_öô


	)

720 
_GL_FUNCDECL_RPL
 (
posix_•awn_fûe_a˘i⁄s_öô
, ,

721 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
)

722 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

723 
_GL_CXXALIAS_RPL
 (
posix_•awn_fûe_a˘i⁄s_öô
, ,

724 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
));

726 #i‡!@
HAVE_POSIX_SPAWN
@

727 
_GL_FUNCDECL_SYS
 (
posix_•awn_fûe_a˘i⁄s_öô
, ,

728 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
)

729 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

731 
_GL_CXXALIAS_SYS
 (
posix_•awn_fûe_a˘i⁄s_öô
, ,

732 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
));

734 
_GL_CXXALIASWARN
 (
posix_•awn_fûe_a˘i⁄s_öô
);

735 #ñi‡
deföed
 
GNULIB_POSIXCHECK


736 #unde‡
posix_•awn_fûe_a˘i⁄s_öô


737 #i‡
HAVE_RAW_DECL_POSIX_SPAWN_FILE_ACTIONS_INIT


738 
_GL_WARN_ON_USE
 (
posix_•awn_fûe_a˘i⁄s_öô
,

744 #i‡@
GNULIB_POSIX_SPAWN_FILE_ACTIONS_DESTROY
@

746 #i‡@
REPLACE_POSIX_SPAWN
@

747 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

748 
	#posix_•awn_fûe_a˘i⁄s_de°roy
 
Ωl_posix_•awn_fûe_a˘i⁄s_de°roy


	)

750 
_GL_FUNCDECL_RPL
 (
posix_•awn_fûe_a˘i⁄s_de°roy
, ,

751 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
)

752 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

753 
_GL_CXXALIAS_RPL
 (
posix_•awn_fûe_a˘i⁄s_de°roy
, ,

754 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
));

756 #i‡!@
HAVE_POSIX_SPAWN
@

757 
_GL_FUNCDECL_SYS
 (
posix_•awn_fûe_a˘i⁄s_de°roy
, ,

758 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
)

759 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

761 
_GL_CXXALIAS_SYS
 (
posix_•awn_fûe_a˘i⁄s_de°roy
, ,

762 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
));

764 
_GL_CXXALIASWARN
 (
posix_•awn_fûe_a˘i⁄s_de°roy
);

765 #ñi‡
deföed
 
GNULIB_POSIXCHECK


766 #unde‡
posix_•awn_fûe_a˘i⁄s_de°roy


767 #i‡
HAVE_RAW_DECL_POSIX_SPAWN_FILE_ACTIONS_DESTROY


768 
_GL_WARN_ON_USE
 (
posix_•awn_fûe_a˘i⁄s_de°roy
,

774 #i‡@
GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN
@

777 #i‡@
REPLACE_POSIX_SPAWN
@

778 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

779 
	#posix_•awn_fûe_a˘i⁄s_add›í
 
Ωl_posix_•awn_fûe_a˘i⁄s_add›í


	)

781 
_GL_FUNCDECL_RPL
 (
posix_•awn_fûe_a˘i⁄s_add›í
, ,

782 (
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

783 
__fd
,

784 c⁄° *
_Re°ri˘_
 
__∑th
, 
__oÊag
, 
mode_t
 
__mode
)

785 
__THROW
 
_GL_ARG_NONNULL
 ((1, 3)));

786 
_GL_CXXALIAS_RPL
 (
posix_•awn_fûe_a˘i⁄s_add›í
, ,

787 (
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

788 
__fd
,

789 c⁄° *
_Re°ri˘_
 
__∑th
, 
__oÊag
, 
mode_t
 
__mode
));

791 #i‡!@
HAVE_POSIX_SPAWN
@

792 
_GL_FUNCDECL_SYS
 (
posix_•awn_fûe_a˘i⁄s_add›í
, ,

793 (
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

794 
__fd
,

795 c⁄° *
_Re°ri˘_
 
__∑th
, 
__oÊag
, 
mode_t
 
__mode
)

796 
__THROW
 
_GL_ARG_NONNULL
 ((1, 3)));

798 
_GL_CXXALIAS_SYS
 (
posix_•awn_fûe_a˘i⁄s_add›í
, ,

799 (
posix_•awn_fûe_a˘i⁄s_t
 *
_Re°ri˘_
 
__fûe_a˘i⁄s
,

800 
__fd
,

801 c⁄° *
_Re°ri˘_
 
__∑th
, 
__oÊag
, 
mode_t
 
__mode
));

803 
_GL_CXXALIASWARN
 (
posix_•awn_fûe_a˘i⁄s_add›í
);

804 #ñi‡
deföed
 
GNULIB_POSIXCHECK


805 #unde‡
posix_•awn_fûe_a˘i⁄s_add›í


806 #i‡
HAVE_RAW_DECL_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN


807 
_GL_WARN_ON_USE
 (
posix_•awn_fûe_a˘i⁄s_add›í
,

813 #i‡@
GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE
@

816 #i‡@
REPLACE_POSIX_SPAWN
@

817 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

818 
	#posix_•awn_fûe_a˘i⁄s_add˛o£
 
Ωl_posix_•awn_fûe_a˘i⁄s_add˛o£


	)

820 
_GL_FUNCDECL_RPL
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
, ,

821 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
, 
__fd
)

822 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

823 
_GL_CXXALIAS_RPL
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
, ,

824 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
, 
__fd
));

826 #i‡!@
HAVE_POSIX_SPAWN
@

827 
_GL_FUNCDECL_SYS
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
, ,

828 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
, 
__fd
)

829 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

831 
_GL_CXXALIAS_SYS
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
, ,

832 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
, 
__fd
));

834 
_GL_CXXALIASWARN
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
);

835 #ñi‡
deföed
 
GNULIB_POSIXCHECK


836 #unde‡
posix_•awn_fûe_a˘i⁄s_add˛o£


837 #i‡
HAVE_RAW_DECL_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE


838 
_GL_WARN_ON_USE
 (
posix_•awn_fûe_a˘i⁄s_add˛o£
,

844 #i‡@
GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2
@

847 #i‡@
REPLACE_POSIX_SPAWN
@

848 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

849 
	#posix_•awn_fûe_a˘i⁄s_adddup2
 
Ωl_posix_•awn_fûe_a˘i⁄s_adddup2


	)

851 
_GL_FUNCDECL_RPL
 (
posix_•awn_fûe_a˘i⁄s_adddup2
, ,

852 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

853 
__fd
, 
__√wfd
)

854 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

855 
_GL_CXXALIAS_RPL
 (
posix_•awn_fûe_a˘i⁄s_adddup2
, ,

856 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

857 
__fd
, 
__√wfd
));

859 #i‡!@
HAVE_POSIX_SPAWN
@

860 
_GL_FUNCDECL_SYS
 (
posix_•awn_fûe_a˘i⁄s_adddup2
, ,

861 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

862 
__fd
, 
__√wfd
)

863 
__THROW
 
_GL_ARG_NONNULL
 ((1)));

865 
_GL_CXXALIAS_SYS
 (
posix_•awn_fûe_a˘i⁄s_adddup2
, ,

866 (
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

867 
__fd
, 
__√wfd
));

869 
_GL_CXXALIASWARN
 (
posix_•awn_fûe_a˘i⁄s_adddup2
);

870 #ñi‡
deföed
 
GNULIB_POSIXCHECK


871 #unde‡
posix_•awn_fûe_a˘i⁄s_adddup2


872 #i‡
HAVE_RAW_DECL_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2


873 
_GL_WARN_ON_USE
 (
posix_•awn_fûe_a˘i⁄s_adddup2
,

	@lib/spawn_faction_addclose.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<î∫o.h
>

23 
	~<uni°d.h
>

25 #i‡!
_LIBC


26 
	#__sysc⁄f
(
›í_max
Ë
	`gëdèbÀsize
 ()

	)

29 
	~"•awn_öt.h
"

34 
	$posix_•awn_fûe_a˘i⁄s_add˛o£
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

35 
fd
)

37 
maxfd
 = 
	`__sysc⁄f
 (
_SC_OPEN_MAX
);

38 
__•awn_a˘i⁄
 *
ªc
;

41 i‡(
fd
 < 0 || fd >
maxfd
)

42  
EBADF
;

45 i‡(
fûe_a˘i⁄s
->
_u£d
 =fûe_a˘i⁄s->
_Æloˇãd


46 && 
	`__posix_•awn_fûe_a˘i⁄s_ªÆloc
 (
fûe_a˘i⁄s
) != 0)

48  
ENOMEM
;

51 
ªc
 = &
fûe_a˘i⁄s
->
_a˘i⁄s
[fûe_a˘i⁄s->
_u£d
];

52 
ªc
->
èg
 = 
•awn_do_˛o£
;

53 
ªc
->
a˘i⁄
.
›í_a˘i⁄
.
fd
 = fd;

56 ++
fûe_a˘i⁄s
->
_u£d
;

59 
	}
}

	@lib/spawn_faction_adddup2.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<î∫o.h
>

23 
	~<uni°d.h
>

25 #i‡!
_LIBC


26 
	#__sysc⁄f
(
›í_max
Ë
	`gëdèbÀsize
 ()

	)

29 
	~"•awn_öt.h
"

34 
	$posix_•awn_fûe_a˘i⁄s_adddup2
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

35 
fd
, 
√wfd
)

37 
maxfd
 = 
	`__sysc⁄f
 (
_SC_OPEN_MAX
);

38 
__•awn_a˘i⁄
 *
ªc
;

41 i‡(
fd
 < 0 || 
√wfd
 < 0 || fd >
maxfd
 ||Çewfd >= maxfd)

42  
EBADF
;

45 i‡(
fûe_a˘i⁄s
->
_u£d
 =fûe_a˘i⁄s->
_Æloˇãd


46 && 
	`__posix_•awn_fûe_a˘i⁄s_ªÆloc
 (
fûe_a˘i⁄s
) != 0)

48  
ENOMEM
;

51 
ªc
 = &
fûe_a˘i⁄s
->
_a˘i⁄s
[fûe_a˘i⁄s->
_u£d
];

52 
ªc
->
èg
 = 
•awn_do_dup2
;

53 
ªc
->
a˘i⁄
.
dup2_a˘i⁄
.
fd
 = fd;

54 
ªc
->
a˘i⁄
.
dup2_a˘i⁄
.
√wfd
 =Çewfd;

57 ++
fûe_a˘i⁄s
->
_u£d
;

60 
	}
}

	@lib/spawn_faction_addopen.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<î∫o.h
>

23 
	~<uni°d.h
>

25 #i‡!
_LIBC


26 
	#__sysc⁄f
(
›í_max
Ë
	`gëdèbÀsize
 ()

	)

29 
	~"•awn_öt.h
"

34 
	$posix_•awn_fûe_a˘i⁄s_add›í
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

35 
fd
, c⁄° *
∑th
, 
oÊag
,

36 
mode_t
 
mode
)

38 
maxfd
 = 
	`__sysc⁄f
 (
_SC_OPEN_MAX
);

39 
__•awn_a˘i⁄
 *
ªc
;

42 i‡(
fd
 < 0 || fd >
maxfd
)

43  
EBADF
;

46 i‡(
fûe_a˘i⁄s
->
_u£d
 =fûe_a˘i⁄s->
_Æloˇãd


47 && 
	`__posix_•awn_fûe_a˘i⁄s_ªÆloc
 (
fûe_a˘i⁄s
) != 0)

49  
ENOMEM
;

52 
ªc
 = &
fûe_a˘i⁄s
->
_a˘i⁄s
[fûe_a˘i⁄s->
_u£d
];

53 
ªc
->
èg
 = 
•awn_do_›í
;

54 
ªc
->
a˘i⁄
.
›í_a˘i⁄
.
fd
 = fd;

55 
ªc
->
a˘i⁄
.
›í_a˘i⁄
.
∑th
 =Öath;

56 
ªc
->
a˘i⁄
.
›í_a˘i⁄
.
oÊag
 = oflag;

57 
ªc
->
a˘i⁄
.
›í_a˘i⁄
.
mode
 = mode;

60 ++
fûe_a˘i⁄s
->
_u£d
;

63 
	}
}

	@lib/spawn_faction_destroy.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<°dlib.h
>

26 
	$posix_•awn_fûe_a˘i⁄s_de°roy
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
)

29 
	`‰ì
 (
fûe_a˘i⁄s
->
_a˘i⁄s
);

31 
	}
}

	@lib/spawn_faction_init.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"•awn_öt.h
"

32 
	$__posix_•awn_fûe_a˘i⁄s_ªÆloc
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
)

34 
√wÆloc
 = 
fûe_a˘i⁄s
->
_Æloˇãd
 + 8;

35 *
√wmem
 = 
	`ªÆloc
 (
fûe_a˘i⁄s
->
_a˘i⁄s
,

36 
√wÆloc
 *  (
__•awn_a˘i⁄
));

38 i‡(
√wmem
 =
NULL
)

40  
ENOMEM
;

42 
fûe_a˘i⁄s
->
_a˘i⁄s
 = (
__•awn_a˘i⁄
 *Ë
√wmem
;

43 
fûe_a˘i⁄s
->
_Æloˇãd
 = 
√wÆloc
;

46 
	}
}

51 
	$posix_•awn_fûe_a˘i⁄s_öô
 (
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
)

54 
	`mem£t
 (
fûe_a˘i⁄s
, '\0',  (*file_actions));

56 
	}
}

	@lib/spawn_int.h

17 
	~<sys/ty≥s.h
>

20 
	s__•awn_a˘i⁄


24 
	m•awn_do_˛o£
,

25 
	m•awn_do_dup2
,

26 
	m•awn_do_›í


27 } 
	mèg
;

33 
	mfd
;

34 } 
	m˛o£_a˘i⁄
;

37 
	mfd
;

38 
	m√wfd
;

39 } 
	mdup2_a˘i⁄
;

42 
	mfd
;

43 c⁄° *
	m∑th
;

44 
	moÊag
;

45 
mode_t
 
	mmode
;

46 } 
	m›í_a˘i⁄
;

47 } 
	ma˘i⁄
;

50 #i‡!
_LIBC


51 
	#__posix_•awn_fûe_a˘i⁄s_ªÆloc
 
gl_posix_•awn_fûe_a˘i⁄s_ªÆloc


	)

53 
__posix_•awn_fûe_a˘i⁄s_ªÆloc
 (
posix_•awn_fûe_a˘i⁄s_t
 *

54 
fûe_a˘i⁄s
);

56 #i‡!
_LIBC


57 
	#__•awni
 
gl_posix_•awn_öã∫Æ


	)

59 
__•awni
 (
pid_t
 *
pid
, c⁄° *
∑th
,

60 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

61 c⁄° 
posix_•aw«âr_t
 *
©åp
, *c⁄° 
¨gv
[],

62 *c⁄° 
ívp
[], 
u£_∑th
);

	@lib/spawnattr_destroy.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

24 
	$posix_•aw«âr_de°roy
 (
posix_•aw«âr_t
 *
©å
)

28 
	}
}

	@lib/spawnattr_init.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<°rög.h
>

26 
	$posix_•aw«âr_öô
 (
posix_•aw«âr_t
 *
©å
)

30 
	`mem£t
 (
©å
, '\0',  (*attr));

33 
	}
}

	@lib/spawnattr_setflags.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

25 
	#ALL_FLAGS
 (
POSIX_SPAWN_RESETIDS
 \

26 | 
POSIX_SPAWN_SETPGROUP
 \

27 | 
POSIX_SPAWN_SETSIGDEF
 \

28 | 
POSIX_SPAWN_SETSIGMASK
 \

29 | 
POSIX_SPAWN_SETSCHEDPARAM
 \

30 | 
POSIX_SPAWN_SETSCHEDULER
 \

31 | 
POSIX_SPAWN_USEVFORK
)

	)

35 
	$posix_•aw«âr_£tÊags
 (
posix_•aw«âr_t
 *
©å
, 
Êags
)

38 i‡(
Êags
 & ~
ALL_FLAGS
)

39  
EINVAL
;

42 
©å
->
_Êags
 = 
Êags
;

45 
	}
}

	@lib/spawnattr_setsigmask.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~<°rög.h
>

26 
	$posix_•aw«âr_£tsigmask
 (
posix_•aw«âr_t
 *
©å
,

27 c⁄° 
sig£t_t
 *
sigmask
)

30 
	`mem˝y
 (&
©å
->
_ss
, 
sigmask
,  (
sig£t_t
));

33 
	}
}

	@lib/spawni.c

18 
	~<c⁄fig.h
>

21 
	~<•awn.h
>

22 
	~"•awn_öt.h
"

24 
	~<Æloˇ.h
>

25 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 #i‚de‡
O_LARGEFILE


29 
	#O_LARGEFILE
 0

	)

32 #i‡
_LIBC
 || 
HAVE_PATHS_H


33 
	~<∑ths.h
>

35 
	#_PATH_BSHELL
 "/bö/sh"

	)

38 
	~<sig«l.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<uni°d.h
>

43 #i‡
_LIBC


44 
	~<nŸ-ˇn˚l.h
>

46 
	#˛o£_nŸ_ˇn˚l
 
˛o£


	)

47 
	#›í_nŸ_ˇn˚l
 
›í


	)

50 #i‡
_LIBC


51 
	~<loˇl-£txid.h
>

53 #i‡!
HAVE_SETEUID


54 
	#£ãuid
(
id
Ë
	`£åesuid
 (-1, id, -1)

	)

56 #i‡!
HAVE_SETEGID


57 
	#£ãgid
(
id
Ë
	`£åesgid
 (-1, id, -1)

	)

59 
	#loˇl_£ãuid
(
id
Ë
	`£ãuid
 (id)

	)

60 
	#loˇl_£ãgid
(
id
Ë
	`£ãgid
 (id)

	)

63 #i‡
_LIBC


64 
	#Æloˇ
 
__Æloˇ


	)

65 
	#execve
 
__execve


	)

66 
	#dup2
 
__dup2


	)

67 
	#f‹k
 
__f‹k


	)

68 
	#gëgid
 
__gëgid


	)

69 
	#gëuid
 
__gëuid


	)

70 
	#sched_£ç¨am
 
__sched_£ç¨am


	)

71 
	#sched_£tscheduÀr
 
__sched_£tscheduÀr


	)

72 
	#£çgid
 
__£çgid


	)

73 
	#siga˘i⁄
 
__siga˘i⁄


	)

74 
	#sigismembî
 
__sigismembî


	)

75 
	#sig¥ocmask
 
__sig¥ocmask


	)

76 
	#°rch∫ul
 
__°rch∫ul


	)

77 
	#vf‹k
 
__vf‹k


	)

79 #unde‡
öã∫Æ_fun˘i⁄


80 
	#öã∫Æ_fun˘i⁄


	)

89 
	#SPAWN_ERROR
 127

	)

92 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


96 
	$__•awni
 (
pid_t
 *
pid
, c⁄° *
fûe
,

97 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

98 c⁄° 
posix_•aw«âr_t
 *
©åp
, *c⁄° 
¨gv
[],

99 *c⁄° 
ívp
[], 
u£_∑th
)

102  
ENOSYS
;

103 
	}
}

111 
öã∫Æ_fun˘i⁄


112 
	$s¸ùt_execuã
 (c⁄° *
fûe
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[])

115 
¨gc
 = 0;

116 
¨gv
[
¨gc
++])

121 **
√w_¨gv
 = (**Ë
	`Æloˇ
 ((
¨gc
 + 1) *  (*));

122 
√w_¨gv
[0] = (*Ë
_PATH_BSHELL
;

123 
√w_¨gv
[1] = (*Ë
fûe
;

124 
¨gc
 > 1)

126 
√w_¨gv
[
¨gc
] = 
¨gv
[argc - 1];

127 --
¨gc
;

131 
	`execve
 (
√w_¨gv
[0],Çew_¨gv, 
ívp
);

133 
	}
}

139 
	$__•awni
 (
pid_t
 *
pid
, c⁄° *
fûe
,

140 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

141 c⁄° 
posix_•aw«âr_t
 *
©åp
, *c⁄° 
¨gv
[],

142 *c⁄° 
ívp
[], 
u£_∑th
)

144 
pid_t
 
√w_pid
;

145 *
∑th
, *
p
, *
«me
;

146 
size_t
 
Àn
;

147 
size_t
 
∑thÀn
;

150 
Êags
 = 
©åp
 =
NULL
 ? 0 :áâΩ->
_Êags
;

154 (Ë&
Êags
;

157 #i‡
HAVE_VFORK


158 i‡((
Êags
 & 
POSIX_SPAWN_USEVFORK
) != 0

163 || ((
Êags
 & (
POSIX_SPAWN_SETSIGMASK
 | 
POSIX_SPAWN_SETSIGDEF


164 | 
POSIX_SPAWN_SETSCHEDPARAM
 | 
POSIX_SPAWN_SETSCHEDULER


165 | 
POSIX_SPAWN_SETPGROUP
 | 
POSIX_SPAWN_RESETIDS
)) == 0

166 && 
fûe_a˘i⁄s
 =
NULL
))

167 
√w_pid
 = 
	`vf‹k
 ();

170 
√w_pid
 = 
	`f‹k
 ();

172 i‡(
√w_pid
 != 0)

174 i‡(
√w_pid
 < 0)

175  
î∫o
;

178 i‡(
pid
 !
NULL
)

179 *
pid
 = 
√w_pid
;

185 i‡((
Êags
 & 
POSIX_SPAWN_SETSIGMASK
) != 0

186 && 
	`sig¥ocmask
 (
SIG_SETMASK
, &
©åp
->
_ss
, 
NULL
) != 0)

187 
	`_exô
 (
SPAWN_ERROR
);

190 i‡((
Êags
 & 
POSIX_SPAWN_SETSIGDEF
) != 0)

196 
sig
;

197 
siga˘i⁄
 
ß
;

199 
	`mem£t
 (&
ß
, '\0',  (sa));

200 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

202 
sig
 = 1; sig <
NSIG
; ++sig)

203 i‡(
	`sigismembî
 (&
©åp
->
_sd
, 
sig
) != 0

204 && 
	`siga˘i⁄
 (
sig
, &
ß
, 
NULL
) != 0)

205 
	`_exô
 (
SPAWN_ERROR
);

209 #i‡(
_LIBC
 ? 
deföed
 
_POSIX_PRIORITY_SCHEDULING
 : 
HAVE_SCHED_SETPARAM
 && 
HAVE_SCHED_SETSCHEDULER
)

211 i‡((
Êags
 & (
POSIX_SPAWN_SETSCHEDPARAM
 | 
POSIX_SPAWN_SETSCHEDULER
))

212 =
POSIX_SPAWN_SETSCHEDPARAM
)

214 i‡(
	`sched_£ç¨am
 (0, &
©åp
->
_•
) == -1)

215 
	`_exô
 (
SPAWN_ERROR
);

217 i‡((
Êags
 & 
POSIX_SPAWN_SETSCHEDULER
) != 0)

219 i‡(
	`sched_£tscheduÀr
 (0, 
©åp
->
_pﬁicy
,

220 (
Êags
 & 
POSIX_SPAWN_SETSCHEDPARAM
) != 0

221 ? &
©åp
->
_•
 : 
NULL
) == -1)

222 
	`_exô
 (
SPAWN_ERROR
);

227 i‡((
Êags
 & 
POSIX_SPAWN_SETPGROUP
) != 0

228 && 
	`£çgid
 (0, 
©åp
->
_pgΩ
) != 0)

229 
	`_exô
 (
SPAWN_ERROR
);

232 i‡((
Êags
 & 
POSIX_SPAWN_RESETIDS
) != 0

233 && (
	`loˇl_£ãuid
 (
	`gëuid
 ()) != 0

234 || 
	`loˇl_£ãgid
 (
	`gëgid
 ()) != 0))

235 
	`_exô
 (
SPAWN_ERROR
);

238 i‡(
fûe_a˘i⁄s
 !
NULL
)

240 
˙t
;

242 
˙t
 = 0; c¡ < 
fûe_a˘i⁄s
->
_u£d
; ++cnt)

244 
__•awn_a˘i⁄
 *
a˘i⁄
 = &
fûe_a˘i⁄s
->
_a˘i⁄s
[
˙t
];

246 
a˘i⁄
->
èg
)

248 
•awn_do_˛o£
:

249 i‡(
	`˛o£_nŸ_ˇn˚l
 (
a˘i⁄
->a˘i⁄.
˛o£_a˘i⁄
.
fd
) != 0)

251 
	`_exô
 (
SPAWN_ERROR
);

254 
•awn_do_›í
:

256 
√w_fd
 = 
	`›í_nŸ_ˇn˚l
 (
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
∑th
,

257 
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
oÊag


258 | 
O_LARGEFILE
,

259 
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
mode
);

261 i‡(
√w_fd
 == -1)

263 
	`_exô
 (
SPAWN_ERROR
);

266 i‡(
√w_fd
 !
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
fd
)

268 i‡(
	`dup2
 (
√w_fd
, 
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
fd
)

269 !
a˘i⁄
->a˘i⁄.
›í_a˘i⁄
.
fd
)

271 
	`_exô
 (
SPAWN_ERROR
);

273 i‡(
	`˛o£_nŸ_ˇn˚l
 (
√w_fd
) != 0)

275 
	`_exô
 (
SPAWN_ERROR
);

280 
•awn_do_dup2
:

281 i‡(
	`dup2
 (
a˘i⁄
->a˘i⁄.
dup2_a˘i⁄
.
fd
,

282 
a˘i⁄
->a˘i⁄.
dup2_a˘i⁄
.
√wfd
)

283 !
a˘i⁄
->a˘i⁄.
dup2_a˘i⁄
.
√wfd
)

285 
	`_exô
 (
SPAWN_ERROR
);

291 i‡(! 
u£_∑th
 || 
	`°rchr
 (
fûe
, '/'Ë!
NULL
)

294 
	`execve
 (
fûe
, 
¨gv
, 
ívp
);

296 i‡(
î∫o
 =
ENOEXEC
)

297 
	`s¸ùt_execuã
 (
fûe
, 
¨gv
, 
ívp
);

300 
	`_exô
 (
SPAWN_ERROR
);

304 
∑th
 = 
	`gëív
 ("PATH");

305 i‡(
∑th
 =
NULL
)

307 #i‡
HAVE_CONFSTR


311 
Àn
 = 
	`c⁄f°r
 (
_CS_PATH
, (*Ë
NULL
, 0);

312 
∑th
 = (*Ë
	`Æloˇ
 (1 + 
Àn
);

313 
∑th
[0] = ':';

314 (Ë
	`c⁄f°r
 (
_CS_PATH
, 
∑th
 + 1, 
Àn
);

317 
∑th
 = "";

321 
Àn
 = 
	`°æí
 (
fûe
) + 1;

322 
∑thÀn
 = 
	`°æí
 (
∑th
);

323 
«me
 = 
	`Æloˇ
 (
∑thÀn
 + 
Àn
 + 1);

325 
«me
 = (*Ë
	`mem˝y
 («mê+ 
∑thÀn
 + 1, 
fûe
, 
Àn
);

327 *--
«me
 = '/';

329 
p
 = 
∑th
;

332 *
°¨ç
;

334 
∑th
 = 
p
;

335 
p
 = 
	`°rch∫ul
 (
∑th
, ':');

337 i‡(
p
 =
∑th
)

340 
°¨ç
 = 
«me
 + 1;

342 
°¨ç
 = (*Ë
	`mem˝y
 (
«me
 - (
p
 - 
∑th
),Öath,Ö -Öath);

345 
	`execve
 (
°¨ç
, 
¨gv
, 
ívp
);

347 i‡(
î∫o
 =
ENOEXEC
)

348 
	`s¸ùt_execuã
 (
°¨ç
, 
¨gv
, 
ívp
);

350 
î∫o
)

352 
EACCES
:

353 
ENOENT
:

354 
ESTALE
:

355 
ENOTDIR
:

365 
	`_exô
 (
SPAWN_ERROR
);

368 *
p
++ != '\0');

371 
	`_exô
 (
SPAWN_ERROR
);

372 
	}
}

	@lib/spawnp.c

17 
	~<c⁄fig.h
>

20 
	~<•awn.h
>

22 
	~"•awn_öt.h
"

27 
	$posix_•aw≈
 (
pid_t
 *
pid
, c⁄° *
fûe
,

28 c⁄° 
posix_•awn_fûe_a˘i⁄s_t
 *
fûe_a˘i⁄s
,

29 c⁄° 
posix_•aw«âr_t
 *
©åp
, *c⁄° 
¨gv
[],

30 *c⁄° 
ívp
[])

32  
	`__•awni
 (
pid
, 
fûe
, 
fûe_a˘i⁄s
, 
©åp
, 
¨gv
, 
ívp
, 1);

33 
	}
}

	@lib/stat-time.h

20 #i‚de‡
STAT_TIME_H


21 
	#STAT_TIME_H
 1

	)

23 
	~<sys/°©.h
>

24 
	~<time.h
>

34 #i‡
deföed
 
HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC


35 #ifde‡
TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC


36 
	#STAT_TIMESPEC
(
°
, 
°_xtim
Ë((°)->°_xtim)

	)

38 
	#STAT_TIMESPEC_NS
(
°
, 
°_xtim
Ë((°)->°_xtim.
tv_n£c
)

	)

40 #ñi‡
deföed
 
HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC


41 
	#STAT_TIMESPEC
(
°
, 
°_xtim
Ë((°)->°_xtim##
e•ec
)

	)

42 #ñi‡
deföed
 
HAVE_STRUCT_STAT_ST_ATIMENSEC


43 
	#STAT_TIMESPEC_NS
(
°
, 
°_xtim
Ë((°)->°_xtim##
í£c
)

	)

44 #ñi‡
deföed
 
HAVE_STRUCT_STAT_ST_ATIM_ST__TIM_TV_NSEC


45 
	#STAT_TIMESPEC_NS
(
°
, 
°_xtim
Ë((°)->°_xtim.
°__tim
.
tv_n£c
)

	)

49 
ölöe
 

50 
	$gë_°©_©ime_ns
 (
°©
 c⁄° *
°
)

52 #i‡
deföed
 
STAT_TIMESPEC


53  
	`STAT_TIMESPEC
 (
°
, 
°_©im
).
tv_n£c
;

54 #ñi‡
deföed
 
STAT_TIMESPEC_NS


55  
	`STAT_TIMESPEC_NS
 (
°
, 
°_©im
);

59 
	}
}

62 
ölöe
 

63 
	$gë_°©_˘ime_ns
 (
°©
 c⁄° *
°
)

65 #i‡
deföed
 
STAT_TIMESPEC


66  
	`STAT_TIMESPEC
 (
°
, 
°_˘im
).
tv_n£c
;

67 #ñi‡
deföed
 
STAT_TIMESPEC_NS


68  
	`STAT_TIMESPEC_NS
 (
°
, 
°_˘im
);

72 
	}
}

75 
ölöe
 

76 
	$gë_°©_mtime_ns
 (
°©
 c⁄° *
°
)

78 #i‡
deföed
 
STAT_TIMESPEC


79  
	`STAT_TIMESPEC
 (
°
, 
°_mtim
).
tv_n£c
;

80 #ñi‡
deföed
 
STAT_TIMESPEC_NS


81  
	`STAT_TIMESPEC_NS
 (
°
, 
°_mtim
);

85 
	}
}

88 
ölöe
 

89 
	$gë_°©_búthtime_ns
 (
°©
 c⁄° *
°
)

91 #i‡
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC


92  
	`STAT_TIMESPEC
 (
°
, 
°_búthtim
).
tv_n£c
;

93 #ñi‡
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMENSEC


94  
	`STAT_TIMESPEC_NS
 (
°
, 
°_búthtim
);

97 (Ë
°
;

100 
	}
}

103 
ölöe
 
time•ec


104 
	$gë_°©_©ime
 (
°©
 c⁄° *
°
)

106 #ifde‡
STAT_TIMESPEC


107  
	`STAT_TIMESPEC
 (
°
, 
°_©im
);

109 
time•ec
 
t
;

110 
t
.
tv_£c
 = 
°
->
°_©ime
;

111 
t
.
tv_n£c
 = 
	`gë_°©_©ime_ns
 (
°
);

112  
t
;

114 
	}
}

117 
ölöe
 
time•ec


118 
	$gë_°©_˘ime
 (
°©
 c⁄° *
°
)

120 #ifde‡
STAT_TIMESPEC


121  
	`STAT_TIMESPEC
 (
°
, 
°_˘im
);

123 
time•ec
 
t
;

124 
t
.
tv_£c
 = 
°
->
°_˘ime
;

125 
t
.
tv_n£c
 = 
	`gë_°©_˘ime_ns
 (
°
);

126  
t
;

128 
	}
}

131 
ölöe
 
time•ec


132 
	$gë_°©_mtime
 (
°©
 c⁄° *
°
)

134 #ifde‡
STAT_TIMESPEC


135  
	`STAT_TIMESPEC
 (
°
, 
°_mtim
);

137 
time•ec
 
t
;

138 
t
.
tv_£c
 = 
°
->
°_mtime
;

139 
t
.
tv_n£c
 = 
	`gë_°©_mtime_ns
 (
°
);

140  
t
;

142 
	}
}

146 
ölöe
 
time•ec


147 
	$gë_°©_búthtime
 (
°©
 c⁄° *
°
)

149 
time•ec
 
t
;

151 #i‡(
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC
 \

152 || 
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIM_TV_NSEC
)

153 
t
 = 
	`STAT_TIMESPEC
 (
°
, 
°_búthtim
);

154 #ñi‡
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMENSEC


155 
t
.
tv_£c
 = 
°
->
°_búthtime
;

156 
t
.
tv_n£c
 = 
°
->
°_búthtimí£c
;

157 #ñi‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


161 
t
.
tv_£c
 = 
°
->
°_˘ime
;

162 
t
.
tv_n£c
 = 0;

165 
t
.
tv_£c
 = -1;

166 
t
.
tv_n£c
 = -1;

168 (Ë
°
;

171 #i‡(
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC
 \

172 || 
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIM_TV_NSEC
 \

173 || 
deföed
 
HAVE_STRUCT_STAT_ST_BIRTHTIMENSEC
)

179 i‡(! (
t
.
tv_£c
 && 0 <t.
tv_n£c
 &&Å.tv_nsec < 1000000000))

181 
t
.
tv_£c
 = -1;

182 
t
.
tv_n£c
 = -1;

186  
t
;

187 
	}
}

	@lib/stat.c

22 
	#__√ed_sy°em_sys_°©_h


	)

23 
	~<c⁄fig.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 #unde‡
__√ed_sy°em_sys_°©_h


30 
ölöe
 

31 
	$‹ig_°©
 (c⁄° *
fûíame
, 
°©
 *
buf
)

33  
	`°©
 (
fûíame
, 
buf
);

34 
	}
}

40 
	~"sys/°©.h
"

42 
	~<î∫o.h
>

43 
	~<limôs.h
>

44 
	~<°dboﬁ.h
>

45 
	~<°rög.h
>

46 
	~"do¢ame.h
"

47 
	~"vîify.h
"

56 
	$Ωl_°©
 (c⁄° *
«me
, 
°©
 *
°
)

58 
ªsu…
 = 
	`‹ig_°©
 (
«me
, 
°
);

59 #i‡
REPLACE_FUNC_STAT_FILE


62 i‡(
ªsu…
 =0 && !
	`S_ISDIR
 (
°
->
°_mode
))

64 
size_t
 
Àn
 = 
	`°æí
 (
«me
);

65 i‡(
	`ISSLASH
 (
«me
[
Àn
 - 1]))

67 
î∫o
 = 
ENOTDIR
;

72 #i‡
REPLACE_FUNC_STAT_DIR


75 #i‚de‡
PATH_MAX


79 i‡(
ªsu…
 =-1 && 
î∫o
 =
ENOENT
)

90 
fixed_«me
[
PATH_MAX
 + 1] = {0};

91 
size_t
 
Àn
 = 
	`°æí
 (
«me
);

92 
boﬁ
 
check_dú
 = 
Ál£
;

93 
	`vîify
 (
PATH_MAX
 <= 4096);

94 i‡(
PATH_MAX
 <
Àn
)

95 
î∫o
 = 
ENAMETOOLONG
;

96 i‡(
Àn
)

98 
	`°r˝y
 (
fixed_«me
, 
«me
);

99 i‡(
	`ISSLASH
 (
fixed_«me
[
Àn
 - 1]))

101 
check_dú
 = 
åue
;

102 
Àn
 && 
	`ISSLASH
 (
fixed_«me
[len - 1]))

103 
fixed_«me
[--
Àn
] = '\0';

104 i‡(!
Àn
)

105 
fixed_«me
[0] = '/';

108 
fixed_«me
[
Àn
++] = '/';

109 
ªsu…
 = 
	`‹ig_°©
 (
fixed_«me
, 
°
);

110 i‡(
ªsu…
 =0 && 
check_dú
 && !
	`S_ISDIR
 (
°
->
°_mode
))

112 
ªsu…
 = -1;

113 
î∫o
 = 
ENOTDIR
;

118  
ªsu…
;

119 
	}
}

	@lib/stdbool.in.h

20 #i‚de‡
_GL_STDBOOL_H


21 
	#_GL_STDBOOL_H


	)

66 #i‡
deföed
 
__BEOS__
 && !deföed 
__HAIKU__


67 
	~<OS.h
>

68 #unde‡
Ál£


69 #unde‡
åue


81 #i‡
deföed
 
__˝lu•lus
 || (deföed 
__BEOS__
 && !deföed 
__HAIKU__
)

85 #i‡!@
HAVE__BOOL
@

86 
boﬁ
 
	t_Boﬁ
;

89 #i‡!
deföed
 
__GNUC__


109 
	#_Boﬁ
 sig√d 

	)

112 #i‡!@
HAVE__BOOL
@

113 íum { 
	m_Boﬁ_mu°_¥omŸe_to_öt
 = -1, 
	mÁl£
 = 0, 
	måue
 = 1 } 
	t_Boﬁ
;

117 
	#boﬁ
 
_Boﬁ


	)

120 
	#Ál£
 0

	)

121 
	#åue
 1

	)

122 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

	@lib/stddef.in.h

28 #i‡
__GNUC__
 >= 3

29 @
	gPRAGMA_SYSTEM_HEADER
@

31 @
	gPRAGMA_COLUMNS
@

33 #i‡
deföed
 
__√ed_wch¨_t
 || deföed 
__√ed_size_t
 \

34 || 
deföed
 
	g__√ed_±rdiff_t
 || deföed 
	g__√ed_NULL
 \

35 || 
deföed
 
	g__√ed_wöt_t


43 #i‡!(
deföed
 
_
@
GUARD_PREFIX
@
_STDDEF_H
 && deföed 
_GL_STDDEF_WINT_T
)

44 #ifde‡
__√ed_wöt_t


45 #unde‡
_
@
GUARD_PREFIX
@
_STDDEF_H


46 
	#_GL_STDDEF_WINT_T


	)

48 #@
INCLUDE_NEXT
@ @
NEXT_STDDEF_H
@

54 #i‚de‡
_
@
GUARD_PREFIX
@
_STDDEF_H


58 #@
INCLUDE_NEXT
@ @
NEXT_STDDEF_H
@

60 #i‚de‡
_
@
GUARD_PREFIX
@
_STDDEF_H


61 
	#_
@
GUARD_PREFIX
@
_STDDEF_H


	)

64 #i‡@
REPLACE_NULL
@

65 #unde‡
NULL


66 #ifde‡
__˝lu•lus


69 #i‡
__GNUG__
 >= 3

73 
	#NULL
 
__nuŒ


	)

75 
	#NULL
 0L

	)

78 
	#NULL
 ((*Ë0)

	)

83 #i‡!@
HAVE_WCHAR_T
@

84 
	#wch¨_t
 

	)

	@lib/stdint.in.h

26 #i‚de‡
_
@
GUARD_PREFIX
@
_STDINT_H


28 #i‡
__GNUC__
 >= 3

29 @
	gPRAGMA_SYSTEM_HEADER
@

31 @
	gPRAGMA_COLUMNS
@

37 
	#_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H


	)

47 #i‡@
HAVE_STDINT_H
@

48 #i‡
deföed
 
__sgi
 && ! deföed 
__c99


52 
	#__STDINT_H__


	)

59 #@
INCLUDE_NEXT
@ @
NEXT_STDINT_H
@

62 #i‡! 
deföed
 
_
@
GUARD_PREFIX
@
_STDINT_H
 && ! deföed 
_GL_JUST_INCLUDE_SYSTEM_STDINT_H


63 
	#_
@
GUARD_PREFIX
@
_STDINT_H


	)

71 #i‡@
HAVE_SYS_TYPES_H
@ && ! 
deföed
 
_AIX


72 
	~<sys/ty≥s.h
>

76 
	~<limôs.h
>

78 #i‡@
HAVE_INTTYPES_H
@

82 
	~<öây≥s.h
>

83 #ñi‡@
HAVE_SYS_INTTYPES_H
@

86 
	~<sys/öây≥s.h
>

89 #i‡@
HAVE_SYS_BITYPES_H
@ && ! 
deföed
 
__BIT_TYPES_DEFINED__


93 
	~<sys/bôy≥s.h
>

96 #unde‡
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H


102 
	#_STDINT_MIN
(sig√d, 
bôs
, 
zîo
) \

103 ((sig√dË? (- ((
zîo
Ë+ 1Ë<< ((
bôs
Ë? (bôsË- 1 : 0)Ë: (zîo))

	)

105 
	#_STDINT_MAX
(sig√d, 
bôs
, 
zîo
) \

107 ? ~ 
	`_STDINT_MIN
 (sig√d, 
bôs
, 
zîo
) \

111 ((((
zîo
Ë+ 1Ë<< ((
bôs
Ë? (bôsË- 1 - (sig√dË: 0)Ë- 1Ë* 2 + 1)

	)

113 #i‡!
GNULIB_deföed_°döt_ty≥s


120 #unde‡
öt8_t


121 #unde‡
uöt8_t


122 sig√d 
	tgl_öt8_t
;

123 
	tgl_uöt8_t
;

124 
	#öt8_t
 
gl_öt8_t


	)

125 
	#uöt8_t
 
gl_uöt8_t


	)

127 #unde‡
öt16_t


128 #unde‡
uöt16_t


129 
	tgl_öt16_t
;

130 
	tgl_uöt16_t
;

131 
	#öt16_t
 
gl_öt16_t


	)

132 
	#uöt16_t
 
gl_uöt16_t


	)

134 #unde‡
öt32_t


135 #unde‡
uöt32_t


136 
	tgl_öt32_t
;

137 
	tgl_uöt32_t
;

138 
	#öt32_t
 
gl_öt32_t


	)

139 
	#uöt32_t
 
gl_uöt32_t


	)

147 #ifde‡
INT64_MAX


148 
	#GL_INT64_T


	)

152 #i‡
LONG_MAX
 >> 31 >> 31 == 1

153 #unde‡
öt64_t


154 
	tgl_öt64_t
;

155 
	#öt64_t
 
gl_öt64_t


	)

156 
	#GL_INT64_T


	)

157 #ñi‡
deföed
 
_MSC_VER


158 #unde‡
öt64_t


159 
__öt64
 
	tgl_öt64_t
;

160 
	#öt64_t
 
gl_öt64_t


	)

161 
	#GL_INT64_T


	)

162 #ñi‡@
HAVE_LONG_LONG_INT
@

163 #unde‡
öt64_t


164 
	tgl_öt64_t
;

165 
	#öt64_t
 
gl_öt64_t


	)

166 
	#GL_INT64_T


	)

170 #ifde‡
UINT64_MAX


171 
	#GL_UINT64_T


	)

173 #i‡
ULONG_MAX
 >> 31 >> 31 >> 1 == 1

174 #unde‡
uöt64_t


175 
	tgl_uöt64_t
;

176 
	#uöt64_t
 
gl_uöt64_t


	)

177 
	#GL_UINT64_T


	)

178 #ñi‡
deföed
 
_MSC_VER


179 #unde‡
uöt64_t


180 
	t__öt64
 
	tgl_uöt64_t
;

181 
	#uöt64_t
 
gl_uöt64_t


	)

182 
	#GL_UINT64_T


	)

183 #ñi‡@
HAVE_UNSIGNED_LONG_LONG_INT
@

184 #unde‡
uöt64_t


185 
	tgl_uöt64_t
;

186 
	#uöt64_t
 
gl_uöt64_t


	)

187 
	#GL_UINT64_T


	)

192 
	#_UINT8_T


	)

193 
	#_UINT32_T


	)

194 
	#_UINT64_T


	)

203 #unde‡
öt_Àa°8_t


204 #unde‡
uöt_Àa°8_t


205 #unde‡
öt_Àa°16_t


206 #unde‡
uöt_Àa°16_t


207 #unde‡
öt_Àa°32_t


208 #unde‡
uöt_Àa°32_t


209 #unde‡
öt_Àa°64_t


210 #unde‡
uöt_Àa°64_t


211 
	#öt_Àa°8_t
 
öt8_t


	)

212 
	#uöt_Àa°8_t
 
uöt8_t


	)

213 
	#öt_Àa°16_t
 
öt16_t


	)

214 
	#uöt_Àa°16_t
 
uöt16_t


	)

215 
	#öt_Àa°32_t
 
öt32_t


	)

216 
	#uöt_Àa°32_t
 
uöt32_t


	)

217 #ifde‡
GL_INT64_T


218 
	#öt_Àa°64_t
 
öt64_t


	)

220 #ifde‡
GL_UINT64_T


221 
	#uöt_Àa°64_t
 
uöt64_t


	)

234 #unde‡
öt_Á°8_t


235 #unde‡
uöt_Á°8_t


236 #unde‡
öt_Á°16_t


237 #unde‡
uöt_Á°16_t


238 #unde‡
öt_Á°32_t


239 #unde‡
uöt_Á°32_t


240 #unde‡
öt_Á°64_t


241 #unde‡
uöt_Á°64_t


242 
	tgl_öt_Á°8_t
;

243 
	tgl_uöt_Á°8_t
;

244 
	tgl_öt_Á°16_t
;

245 
	tgl_uöt_Á°16_t
;

246 
	tgl_öt_Á°32_t
;

247 
	tgl_uöt_Á°32_t
;

248 
	#öt_Á°8_t
 
gl_öt_Á°8_t


	)

249 
	#uöt_Á°8_t
 
gl_uöt_Á°8_t


	)

250 
	#öt_Á°16_t
 
gl_öt_Á°16_t


	)

251 
	#uöt_Á°16_t
 
gl_uöt_Á°16_t


	)

252 
	#öt_Á°32_t
 
gl_öt_Á°32_t


	)

253 
	#uöt_Á°32_t
 
gl_uöt_Á°32_t


	)

254 #ifde‡
GL_INT64_T


255 
	#öt_Á°64_t
 
öt64_t


	)

257 #ifde‡
GL_UINT64_T


258 
	#uöt_Á°64_t
 
uöt64_t


	)

263 #unde‡
öçå_t


264 #unde‡
uöçå_t


265 
	tgl_öçå_t
;

266 
	tgl_uöçå_t
;

267 
	#öçå_t
 
gl_öçå_t


	)

268 
	#uöçå_t
 
gl_uöçå_t


	)

279 #i‚de‡
INTMAX_MAX


280 #unde‡
INTMAX_C


281 #unde‡
ötmax_t


282 #i‡@
HAVE_LONG_LONG_INT
@ && 
LONG_MAX
 >> 30 == 1

283 
	tgl_ötmax_t
;

284 
	#ötmax_t
 
gl_ötmax_t


	)

285 #ñi‡
deföed
 
GL_INT64_T


286 
	#ötmax_t
 
öt64_t


	)

288 
	tgl_ötmax_t
;

289 
	#ötmax_t
 
gl_ötmax_t


	)

293 #i‚de‡
UINTMAX_MAX


294 #unde‡
UINTMAX_C


295 #unde‡
uötmax_t


296 #i‡@
HAVE_UNSIGNED_LONG_LONG_INT
@ && 
ULONG_MAX
 >> 31 == 1

297 
	tgl_uötmax_t
;

298 
	#uötmax_t
 
gl_uötmax_t


	)

299 #ñi‡
deföed
 
GL_UINT64_T


300 
	#uötmax_t
 
uöt64_t


	)

302 
	tgl_uötmax_t
;

303 
	#uötmax_t
 
gl_uötmax_t


	)

310 
	t_vîify_ötmax_size
[ (
ötmax_t
Ë= (
uötmax_t
)

313 
	#GNULIB_deföed_°döt_ty≥s
 1

	)

318 #i‡! 
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


325 #unde‡
INT8_MIN


326 #unde‡
INT8_MAX


327 #unde‡
UINT8_MAX


328 
	#INT8_MIN
 (~ 
INT8_MAX
)

	)

329 
	#INT8_MAX
 127

	)

330 
	#UINT8_MAX
 255

	)

332 #unde‡
INT16_MIN


333 #unde‡
INT16_MAX


334 #unde‡
UINT16_MAX


335 
	#INT16_MIN
 (~ 
INT16_MAX
)

	)

336 
	#INT16_MAX
 32767

	)

337 
	#UINT16_MAX
 65535

	)

339 #unde‡
INT32_MIN


340 #unde‡
INT32_MAX


341 #unde‡
UINT32_MAX


342 
	#INT32_MIN
 (~ 
INT32_MAX
)

	)

343 
	#INT32_MAX
 2147483647

	)

344 
	#UINT32_MAX
 4294967295U

	)

346 #i‡
deföed
 
GL_INT64_T
 && ! deföed 
INT64_MAX


349 
	#INT64_MIN
 (- 
	`INTMAX_C
 (1Ë<< 63)

	)

350 
	#INT64_MAX
 
	`INTMAX_C
 (9223372036854775807)

	)

353 #i‡
deföed
 
GL_UINT64_T
 && ! deföed 
UINT64_MAX


354 
	#UINT64_MAX
 
	`UINTMAX_C
 (18446744073709551615)

	)

363 #unde‡
INT_LEAST8_MIN


364 #unde‡
INT_LEAST8_MAX


365 #unde‡
UINT_LEAST8_MAX


366 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

367 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

368 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

370 #unde‡
INT_LEAST16_MIN


371 #unde‡
INT_LEAST16_MAX


372 #unde‡
UINT_LEAST16_MAX


373 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

374 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

375 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

377 #unde‡
INT_LEAST32_MIN


378 #unde‡
INT_LEAST32_MAX


379 #unde‡
UINT_LEAST32_MAX


380 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

381 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

382 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

384 #unde‡
INT_LEAST64_MIN


385 #unde‡
INT_LEAST64_MAX


386 #ifde‡
GL_INT64_T


387 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

388 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

391 #unde‡
UINT_LEAST64_MAX


392 #ifde‡
GL_UINT64_T


393 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

402 #unde‡
INT_FAST8_MIN


403 #unde‡
INT_FAST8_MAX


404 #unde‡
UINT_FAST8_MAX


405 
	#INT_FAST8_MIN
 
LONG_MIN


	)

406 
	#INT_FAST8_MAX
 
LONG_MAX


	)

407 
	#UINT_FAST8_MAX
 
ULONG_MAX


	)

409 #unde‡
INT_FAST16_MIN


410 #unde‡
INT_FAST16_MAX


411 #unde‡
UINT_FAST16_MAX


412 
	#INT_FAST16_MIN
 
LONG_MIN


	)

413 
	#INT_FAST16_MAX
 
LONG_MAX


	)

414 
	#UINT_FAST16_MAX
 
ULONG_MAX


	)

416 #unde‡
INT_FAST32_MIN


417 #unde‡
INT_FAST32_MAX


418 #unde‡
UINT_FAST32_MAX


419 
	#INT_FAST32_MIN
 
LONG_MIN


	)

420 
	#INT_FAST32_MAX
 
LONG_MAX


	)

421 
	#UINT_FAST32_MAX
 
ULONG_MAX


	)

423 #unde‡
INT_FAST64_MIN


424 #unde‡
INT_FAST64_MAX


425 #ifde‡
GL_INT64_T


426 
	#INT_FAST64_MIN
 
INT64_MIN


	)

427 
	#INT_FAST64_MAX
 
INT64_MAX


	)

430 #unde‡
UINT_FAST64_MAX


431 #ifde‡
GL_UINT64_T


432 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

437 #unde‡
INTPTR_MIN


438 #unde‡
INTPTR_MAX


439 #unde‡
UINTPTR_MAX


440 
	#INTPTR_MIN
 
LONG_MIN


	)

441 
	#INTPTR_MAX
 
LONG_MAX


	)

442 
	#UINTPTR_MAX
 
ULONG_MAX


	)

446 #i‚de‡
INTMAX_MAX


447 #unde‡
INTMAX_MIN


448 #ifde‡
INT64_MAX


449 
	#INTMAX_MIN
 
INT64_MIN


	)

450 
	#INTMAX_MAX
 
INT64_MAX


	)

452 
	#INTMAX_MIN
 
INT32_MIN


	)

453 
	#INTMAX_MAX
 
INT32_MAX


	)

457 #i‚de‡
UINTMAX_MAX


458 #ifde‡
UINT64_MAX


459 
	#UINTMAX_MAX
 
UINT64_MAX


	)

461 
	#UINTMAX_MAX
 
UINT32_MAX


	)

468 #unde‡
PTRDIFF_MIN


469 #unde‡
PTRDIFF_MAX


470 #i‡@
APPLE_UNIVERSAL_BUILD
@

471 #ifde‡
_LP64


472 
	#PTRDIFF_MIN
 
	`_STDINT_MIN
 (1, 64, 0l)

	)

473 
	#PTRDIFF_MAX
 
	`_STDINT_MAX
 (1, 64, 0l)

	)

475 
	#PTRDIFF_MIN
 
	`_STDINT_MIN
 (1, 32, 0)

	)

476 
	#PTRDIFF_MAX
 
	`_STDINT_MAX
 (1, 32, 0)

	)

479 
	#PTRDIFF_MIN
 \

480 
	`_STDINT_MIN
 (1, @
BITSIZEOF_PTRDIFF_T
@, 0@
PTRDIFF_T_SUFFIX
@)

	)

481 
	#PTRDIFF_MAX
 \

482 
	`_STDINT_MAX
 (1, @
BITSIZEOF_PTRDIFF_T
@, 0@
PTRDIFF_T_SUFFIX
@)

	)

486 #unde‡
SIG_ATOMIC_MIN


487 #unde‡
SIG_ATOMIC_MAX


488 
	#SIG_ATOMIC_MIN
 \

489 
	`_STDINT_MIN
 (@
HAVE_SIGNED_SIG_ATOMIC_T
@, @
BITSIZEOF_SIG_ATOMIC_T
@, \

490 0@
SIG_ATOMIC_T_SUFFIX
@)

	)

491 
	#SIG_ATOMIC_MAX
 \

492 
	`_STDINT_MAX
 (@
HAVE_SIGNED_SIG_ATOMIC_T
@, @
BITSIZEOF_SIG_ATOMIC_T
@, \

493 0@
SIG_ATOMIC_T_SUFFIX
@)

	)

497 #unde‡
SIZE_MAX


498 #i‡@
APPLE_UNIVERSAL_BUILD
@

499 #ifde‡
_LP64


500 
	#SIZE_MAX
 
	`_STDINT_MAX
 (0, 64, 0ul)

	)

502 
	#SIZE_MAX
 
	`_STDINT_MAX
 (0, 32, 0ul)

	)

505 
	#SIZE_MAX
 
	`_STDINT_MAX
 (0, @
BITSIZEOF_SIZE_T
@, 0@
SIZE_T_SUFFIX
@)

	)

514 #i‡@
HAVE_WCHAR_H
@ && ! (
deföed
 
WCHAR_MIN
 && deföed 
WCHAR_MAX
)

517 
	~<°ddef.h
>

518 
	~<°dio.h
>

519 
	~<time.h
>

520 
	#_GL_JUST_INCLUDE_SYSTEM_WCHAR_H


	)

521 
	~<wch¨.h
>

522 #unde‡
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H


524 #unde‡
WCHAR_MIN


525 #unde‡
WCHAR_MAX


526 
	#WCHAR_MIN
 \

527 
	`_STDINT_MIN
 (@
HAVE_SIGNED_WCHAR_T
@, @
BITSIZEOF_WCHAR_T
@, 0@
WCHAR_T_SUFFIX
@)

	)

528 
	#WCHAR_MAX
 \

529 
	`_STDINT_MAX
 (@
HAVE_SIGNED_WCHAR_T
@, @
BITSIZEOF_WCHAR_T
@, 0@
WCHAR_T_SUFFIX
@)

	)

532 #unde‡
WINT_MIN


533 #unde‡
WINT_MAX


534 
	#WINT_MIN
 \

535 
	`_STDINT_MIN
 (@
HAVE_SIGNED_WINT_T
@, @
BITSIZEOF_WINT_T
@, 0@
WINT_T_SUFFIX
@)

	)

536 
	#WINT_MAX
 \

537 
	`_STDINT_MAX
 (@
HAVE_SIGNED_WINT_T
@, @
BITSIZEOF_WINT_T
@, 0@
WINT_T_SUFFIX
@)

	)

543 #i‡! 
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


551 #unde‡
INT8_C


552 #unde‡
UINT8_C


553 
	#INT8_C
(
x
Ë
	)
x

554 
	#UINT8_C
(
x
Ë
	)
x

556 #unde‡
INT16_C


557 #unde‡
UINT16_C


558 
	#INT16_C
(
x
Ë
	)
x

559 
	#UINT16_C
(
x
Ë
	)
x

561 #unde‡
INT32_C


562 #unde‡
UINT32_C


563 
	#INT32_C
(
x
Ë
	)
x

564 
	#UINT32_C
(
x
Ëx ## 
U


	)

566 #unde‡
INT64_C


567 #unde‡
UINT64_C


568 #i‡
LONG_MAX
 >> 31 >> 31 == 1

569 
	#INT64_C
(
x
Ëx##
L


	)

570 #ñi‡
deföed
 
_MSC_VER


571 
	#INT64_C
(
x
Ëx##
i64


	)

572 #ñi‡@
HAVE_LONG_LONG_INT
@

573 
	#INT64_C
(
x
Ëx##
LL


	)

575 #i‡
ULONG_MAX
 >> 31 >> 31 >> 1 == 1

576 
	#UINT64_C
(
x
Ëx##
UL


	)

577 #ñi‡
deföed
 
_MSC_VER


578 
	#UINT64_C
(
x
Ëx##
ui64


	)

579 #ñi‡@
HAVE_UNSIGNED_LONG_LONG_INT
@

580 
	#UINT64_C
(
x
Ëx##
ULL


	)

585 #i‚de‡
INTMAX_C


586 #i‡@
HAVE_LONG_LONG_INT
@ && 
LONG_MAX
 >> 30 == 1

587 
	#INTMAX_C
(
x
Ëx##
LL


	)

588 #ñi‡
deföed
 
GL_INT64_T


589 
	#INTMAX_C
(
x
Ë
	`INT64_C
(x)

	)

591 
	#INTMAX_C
(
x
Ëx##
L


	)

595 #i‚de‡
UINTMAX_C


596 #i‡@
HAVE_UNSIGNED_LONG_LONG_INT
@ && 
ULONG_MAX
 >> 31 == 1

597 
	#UINTMAX_C
(
x
Ëx##
ULL


	)

598 #ñi‡
deföed
 
GL_UINT64_T


599 
	#UINTMAX_C
(
x
Ë
	`UINT64_C
(x)

	)

601 
	#UINTMAX_C
(
x
Ëx##
UL


	)

	@lib/stdio-impl.h

24 #i‡
deföed
 
__NëBSD__


26 
	~<sys/∑øm.h
>

29 #i‡
deföed
 
__s„º‹
 || deföed 
__Døg⁄Fly__


31 #i‡
deföed
 
__Døg⁄Fly__


33 
	#Â_
 ((°ru˘ { 
__FILE_public
 
pub
; \

34 °ru˘ { *
_ba£
; 
_size
; } 
_bf
; \

35 *
cookõ
; \

36 *
_˛o£
; \

37 *
_ªad
; \

38 *
_£ek
; \

39 *
_wrôe
; \

40 °ru˘ { *
_ba£
; 
_size
; } 
_ub
; \

41 
_ur
; \

42 
_ubuf
[3]; \

43 
_nbuf
[1]; \

44 °ru˘ { *
_ba£
; 
_size
; } 
_lb
; \

45 
_blksize
; \

46 
Âos_t
 
_off£t
; \

48 } *Ë
Â
)

	)

50 
	#_p
 
pub
.
_p


	)

51 
	#_Êags
 
pub
.
_Êags


	)

52 
	#_r
 
pub
.
_r


	)

53 
	#_w
 
pub
.
_w


	)

55 
	#Â_
 
Â


	)

58 #i‡(
deföed
 
__NëBSD__
 && 
__NëBSD_Vîsi⁄__
 >105270000Ë|| deföed 
__O≥nBSD__


61 
	s__sfûìxt


63 
__sbuf
 
	m_ub
;

66 
	#Â_ub
 ((
__sfûìxt
 *Ë
Â
->
_ext
.
_ba£
)->
_ub


	)

68 
	#Â_ub
 
Â_
->
_ub


	)

71 
	#HASUB
(
Â
Ë(
Â_ub
.
_ba£
 !
NULL
)

	)

78 #ifde‡
__TANDEM


79 #i‚de‡
_IOERR


82 
	#_IOERR
 0x40

	)

83 
	#_IOREAD
 0x80

	)

84 
	#_IOWRT
 0x4

	)

85 
	#_IORW
 0x100

	)

89 #i‡
deföed
 
_IOERR


91 #i‡
deföed
 
__sun
 && deföed 
_LP64


92 
	#Â_
 ((°ru˘ { *
_±r
; \

93 *
_ba£
; \

94 *
_íd
; \

95 
_˙t
; \

96 
_fûe
; \

97 
_Êag
; \

98 } *Ë
Â
)

	)

100 
	#Â_
 
Â


	)

103 #i‡
deföed
 
_SCO_DS


104 
	#_˙t
 
__˙t


	)

105 
	#_±r
 
__±r


	)

106 
	#_ba£
 
__ba£


	)

107 
	#_Êag
 
__Êag


	)

	@lib/stdio-write.c

18 
	~<c⁄fig.h
>

21 
	~<°dio.h
>

25 #i‡
GNULIB_NONBLOCKING
 || 
GNULIB_SIGPIPE


33 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


35 
	~<î∫o.h
>

36 
	~<sig«l.h
>

37 
	~<io.h
>

39 
	#WIN32_LEAN_AND_MEAN


	)

40 
	~<wödows.h
>

42 #i‡
GNULIB_NONBLOCKING


43 
	#CLEAR_ERRNO
 \

44 
î∫o
 = 0;

	)

45 
	#HANDLE_ENOSPC
 \

46 i‡(
î∫o
 =
ENOSPC
 && 
	`„º‹
 (
°ªam
)) \

48 
fd
 = 
	`fûío
 (
°ªam
); \

49 i‡(
fd
 >= 0) \

51 
HANDLE
 
h
 = (HANDLEË
	`_gë_osfh™dÀ
 (
fd
); \

52 i‡(
	`GëFûeTy≥
 (
h
Ë=
FILE_TYPE_PIPE
) \

55 
DWORD
 
°©e
; \

56 i‡(
	`GëNamedPùeH™dÀSèã
 (
h
, &
°©e
, 
NULL
, NULL, \

57 
NULL
, NULL, 0) \

58 && (
°©e
 & 
PIPE_NOWAIT
) != 0) \

61 
î∫o
 = 
EAGAIN
; \

65 

	)

67 
	#CLEAR_ERRNO


	)

68 
	#HANDLE_ENOSPC


	)

71 #i‡
GNULIB_SIGPIPE


72 
	#CLEAR_La°Eº‹
 \

73 
	`SëLa°Eº‹
 (0);

	)

74 
	#HANDLE_ERROR_NO_DATA
 \

75 i‡(
	`GëLa°Eº‹
 (Ë=
ERROR_NO_DATA
 && 
	`„º‹
 (
°ªam
)) \

77 
fd
 = 
	`fûío
 (
°ªam
); \

78 i‡(
fd
 >= 0 \

79 && 
	`GëFûeTy≥
 ((
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
)) \

80 =
FILE_TYPE_PIPE
) \

83 
	`øi£
 (
SIGPIPE
); \

86 
î∫o
 = 
EPIPE
; \

89 

	)

91 
	#CLEAR_La°Eº‹


	)

92 
	#HANDLE_ERROR_NO_DATA


	)

95 
	#CALL_WITH_SIGPIPE_EMULATION
(
RETTYPE
, 
EXPRESSION
, 
FAILED
) \

96 i‡(
	`„º‹
 (
°ªam
)) \

97  (
EXPRESSION
); \

100 
RETTYPE
 
ªt
; \

101 
CLEAR_ERRNO
 \

102 
CLEAR_La°Eº‹
 \

103 
ªt
 = (
EXPRESSION
); \

104 i‡(
FAILED
) \

106 
HANDLE_ENOSPC
 \

107 
HANDLE_ERROR_NO_DATA
 \

110  
ªt
; \

111 }

	)

113 #i‡!
REPLACE_PRINTF_POSIX


115 
	$¥ötf
 (c⁄° *
f‹m©
, ...)

117 
ªtvÆ
;

118 
va_li°
 
¨gs
;

120 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

121 
ªtvÆ
 = 
	`vÂrötf
 (
°dout
, 
f‹m©
, 
¨gs
);

122 
	`va_íd
 (
¨gs
);

124  
ªtvÆ
;

125 
	}
}

128 #i‡!
REPLACE_FPRINTF_POSIX


130 
	$Ârötf
 (
FILE
 *
°ªam
, c⁄° *
f‹m©
, ...)

132 
ªtvÆ
;

133 
va_li°
 
¨gs
;

135 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

136 
ªtvÆ
 = 
	`vÂrötf
 (
°ªam
, 
f‹m©
, 
¨gs
);

137 
	`va_íd
 (
¨gs
);

139  
ªtvÆ
;

140 
	}
}

143 #i‡!
REPLACE_VPRINTF_POSIX


145 
	$v¥ötf
 (c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

147  
	`vÂrötf
 (
°dout
, 
f‹m©
, 
¨gs
);

148 
	}
}

151 #i‡!
REPLACE_VFPRINTF_POSIX


153 
	$vÂrötf
 (
FILE
 *
°ªam
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

154 #unde‡
vÂrötf


156 
	`CALL_WITH_SIGPIPE_EMULATION
 (, 
	`vÂrötf
 (
°ªam
, 
f‹m©
, 
¨gs
), 
ªt
 =
EOF
)

157 
	}
}

161 
	$putch¨
 (
c
)

163  
	`Âutc
 (
c
, 
°dout
);

164 
	}
}

167 
	$Âutc
 (
c
, 
FILE
 *
°ªam
)

168 #unde‡
Âutc


170 
	`CALL_WITH_SIGPIPE_EMULATION
 (, 
	`Âutc
 (
c
, 
°ªam
), 
ªt
 =
EOF
)

171 
	}
}

174 
	$Âuts
 (c⁄° *
°rög
, 
FILE
 *
°ªam
)

175 #unde‡
Âuts


177 
	`CALL_WITH_SIGPIPE_EMULATION
 (, 
	`Âuts
 (
°rög
, 
°ªam
), 
ªt
 =
EOF
)

178 
	}
}

181 
	$puts
 (c⁄° *
°rög
)

182 #unde‡
puts


184 
FILE
 *
°ªam
 = 
°dout
;

185 
	`CALL_WITH_SIGPIPE_EMULATION
 (, 
	`puts
 (
°rög
), 
ªt
 =
EOF
)

186 
	}
}

188 
size_t


189 
	$fwrôe
 (c⁄° *
±r
, 
size_t
 
s
, size_à
n
, 
FILE
 *
°ªam
)

190 #unde‡
fwrôe


192 
	`CALL_WITH_SIGPIPE_EMULATION
 (
size_t
, 
	`fwrôe
 (
±r
, 
s
, 
n
, 
°ªam
), 
ªt
 <Ç)

193 
	}
}

	@lib/stdio.in.h

21 #i‡
__GNUC__
 >= 3

22 @
	gPRAGMA_SYSTEM_HEADER
@

24 @
	gPRAGMA_COLUMNS
@

26 #i‡
deföed
 
__√ed_FILE
 || deföed 
__√ed___FILE
 || deföed 
_GL_ALREADY_INCLUDING_STDIO_H


35 #@
INCLUDE_NEXT
@ @
NEXT_STDIO_H
@

40 #i‚de‡
_
@
GUARD_PREFIX
@
_STDIO_H


42 
	#_GL_ALREADY_INCLUDING_STDIO_H


	)

45 #@
INCLUDE_NEXT
@ @
NEXT_STDIO_H
@

47 #unde‡
_GL_ALREADY_INCLUDING_STDIO_H


49 #i‚de‡
_
@
GUARD_PREFIX
@
_STDIO_H


50 
	#_
@
GUARD_PREFIX
@
_STDIO_H


	)

53 
	~<°d¨g.h
>

55 
	~<°ddef.h
>

59 
	~<sys/ty≥s.h
>

67 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 7)

68 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë
	`__©åibuã__
 ((
__f‹m©__
 s≥c))

	)

70 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë

	)

77 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4)

78 
	#_GL_ATTRIBUTE_FORMAT_PRINTF
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

79 
	`_GL_ATTRIBUTE_FORMAT
 ((
__gnu_¥ötf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

81 
	#_GL_ATTRIBUTE_FORMAT_PRINTF
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

82 
	`_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

89 
	#_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

90 
	`_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

96 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4)

97 
	#_GL_ATTRIBUTE_FORMAT_SCANF
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

98 
	`_GL_ATTRIBUTE_FORMAT
 ((
__gnu_sˇnf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

100 
	#_GL_ATTRIBUTE_FORMAT_SCANF
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

101 
	`_GL_ATTRIBUTE_FORMAT
 ((
__sˇnf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

108 
	#_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
(
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
) \

109 
	`_GL_ATTRIBUTE_FORMAT
 ((
__sˇnf__
, 
f‹m©°rög_∑ømëî
, 
fú°_¨gumít
))

	)

113 #i‡(@
GNULIB_RENAMEAT
@ || 
deföed
 
GNULIB_POSIXCHECK
Ë&& deföed 
__sun
 \

114 && ! 
deföed
 
	g__GLIBC__


115 
	~<uni°d.h
>

126 
	#_GL_STDIO_STRINGIZE
(
tokí
Ë#tokí

	)

127 
	#_GL_STDIO_MACROEXPAND_AND_STRINGIZE
(
tokí
Ë
	`_GL_STDIO_STRINGIZE
—okí)

	)

130 #i‡@
GNULIB_DPRINTF
@

131 #i‡@
REPLACE_DPRINTF
@

132 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

133 
	#d¥ötf
 
Ωl_d¥ötf


	)

135 
_GL_FUNCDECL_RPL
 (
d¥ötf
, , (
fd
, c⁄° *
f‹m©
, ...)

136 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

137 
	`_GL_ARG_NONNULL
 ((2)));

138 
	`_GL_CXXALIAS_RPL
 (
d¥ötf
, , (
fd
, c⁄° *
f‹m©
, ...));

140 #i‡!@
HAVE_DPRINTF
@

141 
	`_GL_FUNCDECL_SYS
 (
d¥ötf
, , (
fd
, c⁄° *
f‹m©
, ...)

142 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

143 
	`_GL_ARG_NONNULL
 ((2)));

145 
	`_GL_CXXALIAS_SYS
 (
d¥ötf
, , (
fd
, c⁄° *
f‹m©
, ...));

147 
	`_GL_CXXALIASWARN
 (
d¥ötf
);

148 #ñi‡
deföed
 
GNULIB_POSIXCHECK


149 #unde‡
d¥ötf


150 #i‡
HAVE_RAW_DECL_DPRINTF


151 
	`_GL_WARN_ON_USE
 (
d¥ötf
, "dprintf is unportable - "

156 #i‡@
GNULIB_FCLOSE
@

158 #i‡@
REPLACE_FCLOSE
@

159 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

160 
	#f˛o£
 
Ωl_f˛o£


	)

162 
	`_GL_FUNCDECL_RPL
 (
f˛o£
, , (
FILE
 *
°ªam
Ë
	`_GL_ARG_NONNULL
 ((1)));

163 
	`_GL_CXXALIAS_RPL
 (
f˛o£
, , (
FILE
 *
°ªam
));

165 
	`_GL_CXXALIAS_SYS
 (
f˛o£
, , (
FILE
 *
°ªam
));

167 
	`_GL_CXXALIASWARN
 (
f˛o£
);

168 #ñi‡
deföed
 
GNULIB_POSIXCHECK


169 #unde‡
f˛o£


171 
	`_GL_WARN_ON_USE
 (
f˛o£
, "fclose isÇotálways POSIX compliant - "

175 #i‡@
GNULIB_FFLUSH
@

182 #i‡@
REPLACE_FFLUSH
@

183 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

184 
	#fÊush
 
Ωl_fÊush


	)

186 
	`_GL_FUNCDECL_RPL
 (
fÊush
, , (
FILE
 *
gl_°ªam
));

187 
	`_GL_CXXALIAS_RPL
 (
fÊush
, , (
FILE
 *
gl_°ªam
));

189 
	`_GL_CXXALIAS_SYS
 (
fÊush
, , (
FILE
 *
gl_°ªam
));

191 
	`_GL_CXXALIASWARN
 (
fÊush
);

192 #ñi‡
deföed
 
GNULIB_POSIXCHECK


193 #unde‡
fÊush


195 
	`_GL_WARN_ON_USE
 (
fÊush
, "fflush isÇotálways POSIX compliant - "

199 #i‡@
GNULIB_FGETC
@

200 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

201 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

202 #unde‡
fgëc


203 
	#fgëc
 
Ωl_fgëc


	)

205 
	`_GL_FUNCDECL_RPL
 (
fgëc
, , (
FILE
 *
°ªam
Ë
	`_GL_ARG_NONNULL
 ((1)));

206 
	`_GL_CXXALIAS_RPL
 (
fgëc
, , (
FILE
 *
°ªam
));

208 
	`_GL_CXXALIAS_SYS
 (
fgëc
, , (
FILE
 *
°ªam
));

210 
	`_GL_CXXALIASWARN
 (
fgëc
);

213 #i‡@
GNULIB_FGETS
@

214 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

215 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

216 #unde‡
fgës


217 
	#fgës
 
Ωl_fgës


	)

219 
	`_GL_FUNCDECL_RPL
 (
fgës
, *, (*
s
, 
n
, 
FILE
 *
°ªam
)

220 
	`_GL_ARG_NONNULL
 ((1, 3)));

221 
	`_GL_CXXALIAS_RPL
 (
fgës
, *, (*
s
, 
n
, 
FILE
 *
°ªam
));

223 
	`_GL_CXXALIAS_SYS
 (
fgës
, *, (*
s
, 
n
, 
FILE
 *
°ªam
));

225 
	`_GL_CXXALIASWARN
 (
fgës
);

228 #i‡@
GNULIB_FOPEN
@

229 #i‡@
REPLACE_FOPEN
@

230 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

231 #unde‡
f›í


232 
	#f›í
 
Ωl_f›í


	)

234 
	`_GL_FUNCDECL_RPL
 (
f›í
, 
FILE
 *, (c⁄° *
fûíame
, c⁄° *
mode
)

235 
	`_GL_ARG_NONNULL
 ((1, 2)));

236 
	`_GL_CXXALIAS_RPL
 (
f›í
, 
FILE
 *, (c⁄° *
fûíame
, c⁄° *
mode
));

238 
	`_GL_CXXALIAS_SYS
 (
f›í
, 
FILE
 *, (c⁄° *
fûíame
, c⁄° *
mode
));

240 
	`_GL_CXXALIASWARN
 (
f›í
);

241 #ñi‡
deföed
 
GNULIB_POSIXCHECK


242 #unde‡
f›í


244 
	`_GL_WARN_ON_USE
 (
f›í
, "fopen on Win32Ölatforms isÇot POSIX compatible - "

248 #i‡@
GNULIB_FPRINTF_POSIX
@ || @
GNULIB_FPRINTF
@

249 #i‡(@
GNULIB_FPRINTF_POSIX
@ && @
REPLACE_FPRINTF
@) \

250 || (@
GNULIB_FPRINTF
@ && @
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@))

251 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

252 
	#Ârötf
 
Ωl_Ârötf


	)

254 
	#GNULIB_ovîrides_Ârötf
 1

	)

255 #i‡@
GNULIB_FPRINTF_POSIX
@ || @
GNULIB_VFPRINTF_POSIX
@

256 
	`_GL_FUNCDECL_RPL
 (
Ârötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, ...)

257 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

258 
	`_GL_ARG_NONNULL
 ((1, 2)));

260 
	`_GL_FUNCDECL_RPL
 (
Ârötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, ...)

261 
	$_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM
 (2, 3)

262 
	`_GL_ARG_NONNULL
 ((1, 2)));

264 
	`_GL_CXXALIAS_RPL
 (
Ârötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, ...));

266 
	`_GL_CXXALIAS_SYS
 (
Ârötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, ...));

268 
	`_GL_CXXALIASWARN
 (
Ârötf
);

270 #i‡!@
GNULIB_FPRINTF_POSIX
@ && 
deföed
 
GNULIB_POSIXCHECK


271 #i‡!
GNULIB_ovîrides_Ârötf


272 #unde‡
Ârötf


275 
	`_GL_WARN_ON_USE
 (
Ârötf
, "fprintf isÇotálways POSIX compliant - "

280 #i‡@
GNULIB_FPURGE
@

287 #i‡@
REPLACE_FPURGE
@

288 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

289 
	#Âurge
 
Ωl_Âurge


	)

291 
	`_GL_FUNCDECL_RPL
 (
Âurge
, , (
FILE
 *
gl_°ªam
Ë
	`_GL_ARG_NONNULL
 ((1)));

292 
	`_GL_CXXALIAS_RPL
 (
Âurge
, , (
FILE
 *
gl_°ªam
));

294 #i‡!@
HAVE_DECL_FPURGE
@

295 
	`_GL_FUNCDECL_SYS
 (
Âurge
, , (
FILE
 *
gl_°ªam
Ë
	`_GL_ARG_NONNULL
 ((1)));

297 
	`_GL_CXXALIAS_SYS
 (
Âurge
, , (
FILE
 *
gl_°ªam
));

299 
	`_GL_CXXALIASWARN
 (
Âurge
);

300 #ñi‡
deföed
 
GNULIB_POSIXCHECK


301 #unde‡
Âurge


302 #i‡
HAVE_RAW_DECL_FPURGE


303 
	`_GL_WARN_ON_USE
 (
Âurge
, "fpurge isÇotálwaysÖresent - "

308 #i‡@
GNULIB_FPUTC
@

309 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

310 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

311 #unde‡
Âutc


312 
	#Âutc
 
Ωl_Âutc


	)

314 
	`_GL_FUNCDECL_RPL
 (
Âutc
, , (
c
, 
FILE
 *
°ªam
Ë
	`_GL_ARG_NONNULL
 ((2)));

315 
	`_GL_CXXALIAS_RPL
 (
Âutc
, , (
c
, 
FILE
 *
°ªam
));

317 
	`_GL_CXXALIAS_SYS
 (
Âutc
, , (
c
, 
FILE
 *
°ªam
));

319 
	`_GL_CXXALIASWARN
 (
Âutc
);

322 #i‡@
GNULIB_FPUTS
@

323 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

324 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

325 #unde‡
Âuts


326 
	#Âuts
 
Ωl_Âuts


	)

328 
	`_GL_FUNCDECL_RPL
 (
Âuts
, , (c⁄° *
°rög
, 
FILE
 *
°ªam
)

329 
	`_GL_ARG_NONNULL
 ((1, 2)));

330 
	`_GL_CXXALIAS_RPL
 (
Âuts
, , (c⁄° *
°rög
, 
FILE
 *
°ªam
));

332 
	`_GL_CXXALIAS_SYS
 (
Âuts
, , (c⁄° *
°rög
, 
FILE
 *
°ªam
));

334 
	`_GL_CXXALIASWARN
 (
Âuts
);

337 #i‡@
GNULIB_FREAD
@

338 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

339 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

340 #unde‡
‰ód


341 
	#‰ód
 
Ωl_‰ód


	)

343 
	`_GL_FUNCDECL_RPL
 (
‰ód
, 
size_t
, (*
±r
, size_à
s
, size_à
n
, 
FILE
 *
°ªam
)

344 
	`_GL_ARG_NONNULL
 ((4)));

345 
	`_GL_CXXALIAS_RPL
 (
‰ód
, 
size_t
, (*
±r
, size_à
s
, size_à
n
, 
FILE
 *
°ªam
));

347 
	`_GL_CXXALIAS_SYS
 (
‰ód
, 
size_t
, (*
±r
, size_à
s
, size_à
n
, 
FILE
 *
°ªam
));

349 
	`_GL_CXXALIASWARN
 (
‰ód
);

352 #i‡@
GNULIB_FREOPEN
@

353 #i‡@
REPLACE_FREOPEN
@

354 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

355 #unde‡
‰e›í


356 
	#‰e›í
 
Ωl_‰e›í


	)

358 
	`_GL_FUNCDECL_RPL
 (
‰e›í
, 
FILE
 *,

359 (c⁄° *
fûíame
, c⁄° *
mode
, 
FILE
 *
°ªam
)

360 
	`_GL_ARG_NONNULL
 ((2, 3)));

361 
	`_GL_CXXALIAS_RPL
 (
‰e›í
, 
FILE
 *,

362 (c⁄° *
fûíame
, c⁄° *
mode
, 
FILE
 *
°ªam
));

364 
	`_GL_CXXALIAS_SYS
 (
‰e›í
, 
FILE
 *,

365 (c⁄° *
fûíame
, c⁄° *
mode
, 
FILE
 *
°ªam
));

367 
	`_GL_CXXALIASWARN
 (
‰e›í
);

368 #ñi‡
deföed
 
GNULIB_POSIXCHECK


369 #unde‡
‰e›í


371 
	`_GL_WARN_ON_USE
 (
‰e›í
,

376 #i‡@
GNULIB_FSCANF
@

377 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

378 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

379 #unde‡
fsˇnf


380 
	#fsˇnf
 
Ωl_fsˇnf


	)

382 
	`_GL_FUNCDECL_RPL
 (
fsˇnf
, , (
FILE
 *
°ªam
, c⁄° *
f‹m©
, ...)

383 
	$_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
 (2, 3)

384 
	`_GL_ARG_NONNULL
 ((1, 2)));

385 
	`_GL_CXXALIAS_RPL
 (
fsˇnf
, , (
FILE
 *
°ªam
, c⁄° *
f‹m©
, ...));

387 
	`_GL_CXXALIAS_SYS
 (
fsˇnf
, , (
FILE
 *
°ªam
, c⁄° *
f‹m©
, ...));

389 
	`_GL_CXXALIASWARN
 (
fsˇnf
);

424 #i‡@
GNULIB_FSEEK
@

425 #i‡
deföed
 
GNULIB_POSIXCHECK
 && !deföed 
_GL_NO_LARGE_FILES


426 
	#_GL_FSEEK_WARN


	)

427 #unde‡
f£ek


429 #i‡@
REPLACE_FSEEK
@

430 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

431 #unde‡
f£ek


432 
	#f£ek
 
Ωl_f£ek


	)

434 
	`_GL_FUNCDECL_RPL
 (
f£ek
, , (
FILE
 *
Â
, 
off£t
, 
whí˚
)

435 
	`_GL_ARG_NONNULL
 ((1)));

436 
	`_GL_CXXALIAS_RPL
 (
f£ek
, , (
FILE
 *
Â
, 
off£t
, 
whí˚
));

438 
	`_GL_CXXALIAS_SYS
 (
f£ek
, , (
FILE
 *
Â
, 
off£t
, 
whí˚
));

440 
	`_GL_CXXALIASWARN
 (
f£ek
);

443 #i‡@
GNULIB_FSEEKO
@

444 #i‡!@
GNULIB_FSEEK
@ && !
deföed
 
_GL_NO_LARGE_FILES


445 
	#_GL_FSEEK_WARN


	)

446 #unde‡
f£ek


448 #i‡@
REPLACE_FSEEKO
@

451 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

452 #unde‡
f£eko


453 
	#f£eko
 
Ωl_f£eko


	)

455 
	`_GL_FUNCDECL_RPL
 (
f£eko
, , (
FILE
 *
Â
, 
off_t
 
off£t
, 
whí˚
)

456 
	`_GL_ARG_NONNULL
 ((1)));

457 
	`_GL_CXXALIAS_RPL
 (
f£eko
, , (
FILE
 *
Â
, 
off_t
 
off£t
, 
whí˚
));

459 #i‡! @
HAVE_DECL_FSEEKO
@

460 
	`_GL_FUNCDECL_SYS
 (
f£eko
, , (
FILE
 *
Â
, 
off_t
 
off£t
, 
whí˚
)

461 
	`_GL_ARG_NONNULL
 ((1)));

463 
	`_GL_CXXALIAS_SYS
 (
f£eko
, , (
FILE
 *
Â
, 
off_t
 
off£t
, 
whí˚
));

465 
	`_GL_CXXALIASWARN
 (
f£eko
);

466 #ñi‡
deföed
 
GNULIB_POSIXCHECK


467 
	#_GL_FSEEK_WARN


	)

468 #unde‡
f£ek


469 #unde‡
f£eko


470 #i‡
HAVE_RAW_DECL_FSEEKO


471 
	`_GL_WARN_ON_USE
 (
f£eko
, "fseeko is unportable - "

476 #ifde‡
_GL_FSEEK_WARN


477 #unde‡
_GL_FSEEK_WARN


480 
	`_GL_WARN_ON_USE
 (
f£ek
, "fseek cannot handle filesÜargerÅhan 4 GB "

488 #i‡@
GNULIB_FTELL
@

489 #i‡
deföed
 
GNULIB_POSIXCHECK
 && !deföed 
_GL_NO_LARGE_FILES


490 
	#_GL_FTELL_WARN


	)

491 #unde‡
·ñl


493 #i‡@
REPLACE_FTELL
@

494 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

495 #unde‡
·ñl


496 
	#·ñl
 
Ωl_·ñl


	)

498 
	`_GL_FUNCDECL_RPL
 (
·ñl
, , (
FILE
 *
Â
Ë
	`_GL_ARG_NONNULL
 ((1)));

499 
	`_GL_CXXALIAS_RPL
 (
·ñl
, , (
FILE
 *
Â
));

501 
	`_GL_CXXALIAS_SYS
 (
·ñl
, , (
FILE
 *
Â
));

503 
	`_GL_CXXALIASWARN
 (
·ñl
);

506 #i‡@
GNULIB_FTELLO
@

507 #i‡!@
GNULIB_FTELL
@ && !
deföed
 
_GL_NO_LARGE_FILES


508 
	#_GL_FTELL_WARN


	)

509 #unde‡
·ñl


511 #i‡@
REPLACE_FTELLO
@

512 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

513 #unde‡
·ñlo


514 
	#·ñlo
 
Ωl_·ñlo


	)

516 
	`_GL_FUNCDECL_RPL
 (
·ñlo
, 
off_t
, (
FILE
 *
Â
Ë
	`_GL_ARG_NONNULL
 ((1)));

517 
	`_GL_CXXALIAS_RPL
 (
·ñlo
, 
off_t
, (
FILE
 *
Â
));

519 #i‡! @
HAVE_DECL_FTELLO
@

520 
	`_GL_FUNCDECL_SYS
 (
·ñlo
, 
off_t
, (
FILE
 *
Â
Ë
	`_GL_ARG_NONNULL
 ((1)));

522 
	`_GL_CXXALIAS_SYS
 (
·ñlo
, 
off_t
, (
FILE
 *
Â
));

524 
	`_GL_CXXALIASWARN
 (
·ñlo
);

525 #ñi‡
deföed
 
GNULIB_POSIXCHECK


526 
	#_GL_FTELL_WARN


	)

527 #unde‡
·ñl


528 #unde‡
·ñlo


529 #i‡
HAVE_RAW_DECL_FTELLO


530 
	`_GL_WARN_ON_USE
 (
·ñlo
, "ftello is unportable - "

535 #ifde‡
_GL_FTELL_WARN


536 #unde‡
_GL_FTELL_WARN


539 
	`_GL_WARN_ON_USE
 (
·ñl
, "ftell cannot handle filesÜargerÅhan 4 GB "

545 #i‡@
GNULIB_FWRITE
@

546 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

547 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

548 #unde‡
fwrôe


549 
	#fwrôe
 
Ωl_fwrôe


	)

551 
	`_GL_FUNCDECL_RPL
 (
fwrôe
, 
size_t
,

552 (c⁄° *
±r
, 
size_t
 
s
, size_à
n
, 
FILE
 *
°ªam
)

553 
	`_GL_ARG_NONNULL
 ((1, 4)));

554 
	`_GL_CXXALIAS_RPL
 (
fwrôe
, 
size_t
,

555 (c⁄° *
±r
, 
size_t
 
s
, size_à
n
, 
FILE
 *
°ªam
));

557 
	`_GL_CXXALIAS_SYS
 (
fwrôe
, 
size_t
,

558 (c⁄° *
±r
, 
size_t
 
s
, size_à
n
, 
FILE
 *
°ªam
));

565 #i‡!
deföed
 
__˝lu•lus
 && 0 < 
__USE_FORTIFY_LEVEL


566 
ölöe
 
size_t
 
	`_GL_ARG_NONNULL
 ((1, 4))

567 
	$Ωl_fwrôe
 (c⁄° *
±r
, 
size_t
 
s
, size_à
n
, 
FILE
 *
°ªam
)

569 
size_t
 
r
 = 
	`fwrôe
 (
±r
, 
s
, 
n
, 
°ªam
);

570 (Ë
r
;

571  
r
;

572 
	}
}

573 #unde‡
fwrôe


574 
	#fwrôe
 
Ωl_fwrôe


	)

577 
_GL_CXXALIASWARN
 (
fwrôe
);

580 #i‡@
GNULIB_GETC
@

581 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

582 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

583 #unde‡
gëc


584 
	#gëc
 
Ωl_fgëc


	)

586 
_GL_FUNCDECL_RPL
 (
fgëc
, , (
FILE
 *
°ªam
Ë
_GL_ARG_NONNULL
 ((1)));

587 
_GL_CXXALIAS_RPL_1
 (
gëc
, 
Ωl_fgëc
, , (
FILE
 *
°ªam
));

589 
_GL_CXXALIAS_SYS
 (
gëc
, , (
FILE
 *
°ªam
));

591 
_GL_CXXALIASWARN
 (
gëc
);

594 #i‡@
GNULIB_GETCHAR
@

595 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

596 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

597 #unde‡
gëch¨


598 
	#gëch¨
 
Ωl_gëch¨


	)

600 
_GL_FUNCDECL_RPL
 (
gëch¨
, , ());

601 
_GL_CXXALIAS_RPL
 (
gëch¨
, , ());

603 
_GL_CXXALIAS_SYS
 (
gëch¨
, , ());

605 
_GL_CXXALIASWARN
 (
gëch¨
);

608 #i‡@
GNULIB_GETDELIM
@

615 #i‡@
REPLACE_GETDELIM
@

616 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

617 #unde‡
gëdñim


618 
	#gëdñim
 
Ωl_gëdñim


	)

620 
_GL_FUNCDECL_RPL
 (
gëdñim
, 
ssize_t
,

621 (**
löïå
, 
size_t
 *
löesize
, 
dñimôî
,

622 
FILE
 *
°ªam
)

623 
_GL_ARG_NONNULL
 ((1, 2, 4)));

624 
_GL_CXXALIAS_RPL
 (
gëdñim
, 
ssize_t
,

625 (**
löïå
, 
size_t
 *
löesize
, 
dñimôî
,

626 
FILE
 *
°ªam
));

628 #i‡!@
HAVE_DECL_GETDELIM
@

629 
_GL_FUNCDECL_SYS
 (
gëdñim
, 
ssize_t
,

630 (**
löïå
, 
size_t
 *
löesize
, 
dñimôî
,

631 
FILE
 *
°ªam
)

632 
_GL_ARG_NONNULL
 ((1, 2, 4)));

634 
_GL_CXXALIAS_SYS
 (
gëdñim
, 
ssize_t
,

635 (**
löïå
, 
size_t
 *
löesize
, 
dñimôî
,

636 
FILE
 *
°ªam
));

638 
_GL_CXXALIASWARN
 (
gëdñim
);

639 #ñi‡
deföed
 
GNULIB_POSIXCHECK


640 #unde‡
gëdñim


641 #i‡
HAVE_RAW_DECL_GETDELIM


642 
_GL_WARN_ON_USE
 (
gëdñim
, "getdelim is unportable - "

647 #i‡@
GNULIB_GETLINE
@

654 #i‡@
REPLACE_GETLINE
@

655 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

656 #unde‡
gëlöe


657 
	#gëlöe
 
Ωl_gëlöe


	)

659 
_GL_FUNCDECL_RPL
 (
gëlöe
, 
ssize_t
,

660 (**
löïå
, 
size_t
 *
löesize
, 
FILE
 *
°ªam
)

661 
_GL_ARG_NONNULL
 ((1, 2, 3)));

662 
_GL_CXXALIAS_RPL
 (
gëlöe
, 
ssize_t
,

663 (**
löïå
, 
size_t
 *
löesize
, 
FILE
 *
°ªam
));

665 #i‡!@
HAVE_DECL_GETLINE
@

666 
_GL_FUNCDECL_SYS
 (
gëlöe
, 
ssize_t
,

667 (**
löïå
, 
size_t
 *
löesize
, 
FILE
 *
°ªam
)

668 
_GL_ARG_NONNULL
 ((1, 2, 3)));

670 
_GL_CXXALIAS_SYS
 (
gëlöe
, 
ssize_t
,

671 (**
löïå
, 
size_t
 *
löesize
, 
FILE
 *
°ªam
));

673 #i‡@
HAVE_DECL_GETLINE
@

674 
_GL_CXXALIASWARN
 (
gëlöe
);

676 #ñi‡
deföed
 
GNULIB_POSIXCHECK


677 #unde‡
gëlöe


678 #i‡
HAVE_RAW_DECL_GETLINE


679 
_GL_WARN_ON_USE
 (
gëlöe
, "getline is unportable - "

684 #i‡@
GNULIB_GETS
@

685 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

686 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

687 #unde‡
gës


688 
	#gës
 
Ωl_gës


	)

690 
_GL_FUNCDECL_RPL
 (
gës
, *, (*
s
Ë
_GL_ARG_NONNULL
 ((1)));

691 
_GL_CXXALIAS_RPL
 (
gës
, *, (*
s
));

693 
_GL_CXXALIAS_SYS
 (
gës
, *, (*
s
));

694 #unde‡
gës


696 
_GL_CXXALIASWARN
 (
gës
);

700 
_GL_WARN_ON_USE
 (
gës
, "gets isá security hole - use fgets instead");

704 #i‡@
GNULIB_OBSTACK_PRINTF
@ || @
GNULIB_OBSTACK_PRINTF_POSIX
@

705 
	gob°ack
;

711 #i‡@
REPLACE_OBSTACK_PRINTF
@

712 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

713 
	#ob°ack_¥ötf
 
Ωl_ob°ack_¥ötf


	)

715 
_GL_FUNCDECL_RPL
 (
ob°ack_¥ötf
, ,

716 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, ...)

717 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

718 
	`_GL_ARG_NONNULL
 ((1, 2)));

719 
	`_GL_CXXALIAS_RPL
 (
ob°ack_¥ötf
, ,

720 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, ...));

722 #i‡!@
HAVE_DECL_OBSTACK_PRINTF
@

723 
	`_GL_FUNCDECL_SYS
 (
ob°ack_¥ötf
, ,

724 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, ...)

725 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

726 
	`_GL_ARG_NONNULL
 ((1, 2)));

728 
	`_GL_CXXALIAS_SYS
 (
ob°ack_¥ötf
, ,

729 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, ...));

731 
	`_GL_CXXALIASWARN
 (
ob°ack_¥ötf
);

732 #i‡@
REPLACE_OBSTACK_PRINTF
@

733 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

734 
	#ob°ack_v¥ötf
 
Ωl_ob°ack_v¥ötf


	)

736 
	`_GL_FUNCDECL_RPL
 (
ob°ack_v¥ötf
, ,

737 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

738 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

739 
	`_GL_ARG_NONNULL
 ((1, 2)));

740 
	`_GL_CXXALIAS_RPL
 (
ob°ack_v¥ötf
, ,

741 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

743 #i‡!@
HAVE_DECL_OBSTACK_PRINTF
@

744 
	`_GL_FUNCDECL_SYS
 (
ob°ack_v¥ötf
, ,

745 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

746 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

747 
	`_GL_ARG_NONNULL
 ((1, 2)));

749 
	`_GL_CXXALIAS_SYS
 (
ob°ack_v¥ötf
, ,

750 (
ob°ack
 *
obs
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

752 
	`_GL_CXXALIASWARN
 (
ob°ack_v¥ötf
);

755 #i‡@
GNULIB_PERROR
@

759 #i‡@
REPLACE_PERROR
@

760 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

761 
	#≥º‹
 
Ωl_≥º‹


	)

763 
	`_GL_FUNCDECL_RPL
 (
≥º‹
, , (c⁄° *
°rög
));

764 
	`_GL_CXXALIAS_RPL
 (
≥º‹
, , (c⁄° *
°rög
));

766 
	`_GL_CXXALIAS_SYS
 (
≥º‹
, , (c⁄° *
°rög
));

768 
	`_GL_CXXALIASWARN
 (
≥º‹
);

769 #ñi‡
deföed
 
GNULIB_POSIXCHECK


770 #unde‡
≥º‹


772 
	`_GL_WARN_ON_USE
 (
≥º‹
, "perror isÇotálways POSIX compliant - "

776 #i‡@
GNULIB_POPEN
@

777 #i‡@
REPLACE_POPEN
@

778 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

779 #unde‡
p›í


780 
	#p›í
 
Ωl_p›í


	)

782 
	`_GL_FUNCDECL_RPL
 (
p›í
, 
FILE
 *, (c⁄° *
cmd
, c⁄° *
mode
)

783 
	`_GL_ARG_NONNULL
 ((1, 2)));

784 
	`_GL_CXXALIAS_RPL
 (
p›í
, 
FILE
 *, (c⁄° *
cmd
, c⁄° *
mode
));

786 
	`_GL_CXXALIAS_SYS
 (
p›í
, 
FILE
 *, (c⁄° *
cmd
, c⁄° *
mode
));

788 
	`_GL_CXXALIASWARN
 (
p›í
);

789 #ñi‡
deföed
 
GNULIB_POSIXCHECK


790 #unde‡
p›í


791 #i‡
HAVE_RAW_DECL_POPEN


792 
	`_GL_WARN_ON_USE
 (
p›í
, "popen is buggy on someÖlatforms - "

797 #i‡@
GNULIB_PRINTF_POSIX
@ || @
GNULIB_PRINTF
@

798 #i‡(@
GNULIB_PRINTF_POSIX
@ && @
REPLACE_PRINTF
@) \

799 || (@
GNULIB_PRINTF
@ && @
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@))

800 #i‡
deföed
 
__GNUC__


801 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

803 
	#¥ötf
 
__¥ötf__


	)

805 #i‡@
GNULIB_PRINTF_POSIX
@ || @
GNULIB_VFPRINTF_POSIX
@

806 
	`_GL_FUNCDECL_RPL_1
 (
__¥ötf__
, ,

807 (c⁄° *
f‹m©
, ...)

808 
	`__asm__
 (@
ASM_SYMBOL_PREFIX
@

809 
	$_GL_STDIO_MACROEXPAND_AND_STRINGIZE
(
Ωl_¥ötf
))

810 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (1, 2)

811 
	`_GL_ARG_NONNULL
 ((1)));

813 
	`_GL_FUNCDECL_RPL_1
 (
__¥ötf__
, ,

814 (c⁄° *
f‹m©
, ...)

815 
	`__asm__
 (@
ASM_SYMBOL_PREFIX
@

816 
	$_GL_STDIO_MACROEXPAND_AND_STRINGIZE
(
Ωl_¥ötf
))

817 
	$_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM
 (1, 2)

818 
	`_GL_ARG_NONNULL
 ((1)));

820 
	`_GL_CXXALIAS_RPL_1
 (
¥ötf
, 
__¥ötf__
, , (c⁄° *
f‹m©
, ...));

822 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

823 
	#¥ötf
 
Ωl_¥ötf


	)

825 
	`_GL_FUNCDECL_RPL
 (
¥ötf
, ,

826 (c⁄° *
f‹m©
, ...)

827 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (1, 2)

828 
	`_GL_ARG_NONNULL
 ((1)));

829 
	`_GL_CXXALIAS_RPL
 (
¥ötf
, , (c⁄° *
f‹m©
, ...));

831 
	#GNULIB_ovîrides_¥ötf
 1

	)

833 
	`_GL_CXXALIAS_SYS
 (
¥ötf
, , (c⁄° *
f‹m©
, ...));

835 
	`_GL_CXXALIASWARN
 (
¥ötf
);

837 #i‡!@
GNULIB_PRINTF_POSIX
@ && 
deföed
 
GNULIB_POSIXCHECK


838 #i‡!
GNULIB_ovîrides_¥ötf


839 #unde‡
¥ötf


842 
	`_GL_WARN_ON_USE
 (
¥ötf
, "printf isÇotálways POSIX compliant - "

847 #i‡@
GNULIB_PUTC
@

848 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

849 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

850 #unde‡
putc


851 
	#putc
 
Ωl_Âutc


	)

853 
	`_GL_FUNCDECL_RPL
 (
Âutc
, , (
c
, 
FILE
 *
°ªam
Ë
	`_GL_ARG_NONNULL
 ((2)));

854 
	`_GL_CXXALIAS_RPL_1
 (
putc
, 
Ωl_Âutc
, , (
c
, 
FILE
 *
°ªam
));

856 
	`_GL_CXXALIAS_SYS
 (
putc
, , (
c
, 
FILE
 *
°ªam
));

858 
	`_GL_CXXALIASWARN
 (
putc
);

861 #i‡@
GNULIB_PUTCHAR
@

862 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

863 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

864 #unde‡
putch¨


865 
	#putch¨
 
Ωl_putch¨


	)

867 
	`_GL_FUNCDECL_RPL
 (
putch¨
, , (
c
));

868 
	`_GL_CXXALIAS_RPL
 (
putch¨
, , (
c
));

870 
	`_GL_CXXALIAS_SYS
 (
putch¨
, , (
c
));

872 
	`_GL_CXXALIASWARN
 (
putch¨
);

875 #i‡@
GNULIB_PUTS
@

876 #i‡@
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@)

877 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

878 #unde‡
puts


879 
	#puts
 
Ωl_puts


	)

881 
	`_GL_FUNCDECL_RPL
 (
puts
, , (c⁄° *
°rög
Ë
	`_GL_ARG_NONNULL
 ((1)));

882 
	`_GL_CXXALIAS_RPL
 (
puts
, , (c⁄° *
°rög
));

884 
	`_GL_CXXALIAS_SYS
 (
puts
, , (c⁄° *
°rög
));

886 
	`_GL_CXXALIASWARN
 (
puts
);

889 #i‡@
GNULIB_REMOVE
@

890 #i‡@
REPLACE_REMOVE
@

891 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

892 #unde‡
ªmove


893 
	#ªmove
 
Ωl_ªmove


	)

895 
	`_GL_FUNCDECL_RPL
 (
ªmove
, , (c⁄° *
«me
Ë
	`_GL_ARG_NONNULL
 ((1)));

896 
	`_GL_CXXALIAS_RPL
 (
ªmove
, , (c⁄° *
«me
));

898 
	`_GL_CXXALIAS_SYS
 (
ªmove
, , (c⁄° *
«me
));

900 
	`_GL_CXXALIASWARN
 (
ªmove
);

901 #ñi‡
deföed
 
GNULIB_POSIXCHECK


902 #unde‡
ªmove


904 
	`_GL_WARN_ON_USE
 (
ªmove
, "remove cannot handle directories on someÖlatforms - "

908 #i‡@
GNULIB_RENAME
@

909 #i‡@
REPLACE_RENAME
@

910 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

911 #unde‡
ª«me


912 
	#ª«me
 
Ωl_ª«me


	)

914 
	`_GL_FUNCDECL_RPL
 (
ª«me
, ,

915 (c⁄° *
ﬁd_fûíame
, c⁄° *
√w_fûíame
)

916 
	`_GL_ARG_NONNULL
 ((1, 2)));

917 
	`_GL_CXXALIAS_RPL
 (
ª«me
, ,

918 (c⁄° *
ﬁd_fûíame
, c⁄° *
√w_fûíame
));

920 
	`_GL_CXXALIAS_SYS
 (
ª«me
, ,

921 (c⁄° *
ﬁd_fûíame
, c⁄° *
√w_fûíame
));

923 
	`_GL_CXXALIASWARN
 (
ª«me
);

924 #ñi‡
deföed
 
GNULIB_POSIXCHECK


925 #unde‡
ª«me


927 
	`_GL_WARN_ON_USE
 (
ª«me
, "rename is buggy on someÖlatforms - "

931 #i‡@
GNULIB_RENAMEAT
@

932 #i‡@
REPLACE_RENAMEAT
@

933 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

934 #unde‡
ª«mót


935 
	#ª«mót
 
Ωl_ª«mót


	)

937 
	`_GL_FUNCDECL_RPL
 (
ª«mót
, ,

938 (
fd1
, c⁄° *
fûe1
, 
fd2
, c⁄° *
fûe2
)

939 
	`_GL_ARG_NONNULL
 ((2, 4)));

940 
	`_GL_CXXALIAS_RPL
 (
ª«mót
, ,

941 (
fd1
, c⁄° *
fûe1
, 
fd2
, c⁄° *
fûe2
));

943 #i‡!@
HAVE_RENAMEAT
@

944 
	`_GL_FUNCDECL_SYS
 (
ª«mót
, ,

945 (
fd1
, c⁄° *
fûe1
, 
fd2
, c⁄° *
fûe2
)

946 
	`_GL_ARG_NONNULL
 ((2, 4)));

948 
	`_GL_CXXALIAS_SYS
 (
ª«mót
, ,

949 (
fd1
, c⁄° *
fûe1
, 
fd2
, c⁄° *
fûe2
));

951 
	`_GL_CXXALIASWARN
 (
ª«mót
);

952 #ñi‡
deföed
 
GNULIB_POSIXCHECK


953 #unde‡
ª«mót


954 #i‡
HAVE_RAW_DECL_RENAMEAT


955 
	`_GL_WARN_ON_USE
 (
ª«mót
, "renameat isÇotÖortable - "

960 #i‡@
GNULIB_SCANF
@

961 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

962 #i‡
deföed
 
__GNUC__


963 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

964 #unde‡
sˇnf


966 
	#sˇnf
 
__sˇnf__


	)

968 
	`_GL_FUNCDECL_RPL_1
 (
__sˇnf__
, ,

969 (c⁄° *
f‹m©
, ...)

970 
	`__asm__
 (@
ASM_SYMBOL_PREFIX
@

971 
	$_GL_STDIO_MACROEXPAND_AND_STRINGIZE
(
Ωl_sˇnf
))

972 
	$_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
 (1, 2)

973 
	`_GL_ARG_NONNULL
 ((1)));

974 
	`_GL_CXXALIAS_RPL_1
 (
sˇnf
, 
__sˇnf__
, , (c⁄° *
f‹m©
, ...));

976 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

977 #unde‡
sˇnf


978 
	#sˇnf
 
Ωl_sˇnf


	)

980 
	`_GL_FUNCDECL_RPL
 (
sˇnf
, , (c⁄° *
f‹m©
, ...)

981 
	$_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
 (1, 2)

982 
	`_GL_ARG_NONNULL
 ((1)));

983 
	`_GL_CXXALIAS_RPL
 (
sˇnf
, , (c⁄° *
f‹m©
, ...));

986 
	`_GL_CXXALIAS_SYS
 (
sˇnf
, , (c⁄° *
f‹m©
, ...));

988 
	`_GL_CXXALIASWARN
 (
sˇnf
);

991 #i‡@
GNULIB_SNPRINTF
@

992 #i‡@
REPLACE_SNPRINTF
@

993 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

994 
	#¢¥ötf
 
Ωl_¢¥ötf


	)

996 
	`_GL_FUNCDECL_RPL
 (
¢¥ötf
, ,

997 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

998 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (3, 4)

999 
	`_GL_ARG_NONNULL
 ((3)));

1000 
	`_GL_CXXALIAS_RPL
 (
¢¥ötf
, ,

1001 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...));

1003 #i‡!@
HAVE_DECL_SNPRINTF
@

1004 
	`_GL_FUNCDECL_SYS
 (
¢¥ötf
, ,

1005 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

1006 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (3, 4)

1007 
	`_GL_ARG_NONNULL
 ((3)));

1009 
	`_GL_CXXALIAS_SYS
 (
¢¥ötf
, ,

1010 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...));

1012 
	`_GL_CXXALIASWARN
 (
¢¥ötf
);

1013 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1014 #unde‡
¢¥ötf


1015 #i‡
HAVE_RAW_DECL_SNPRINTF


1016 
	`_GL_WARN_ON_USE
 (
¢¥ötf
, "snprintf is unportable - "

1030 #i‡@
GNULIB_SPRINTF_POSIX
@

1031 #i‡@
REPLACE_SPRINTF
@

1032 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1033 
	#•rötf
 
Ωl_•rötf


	)

1035 
	`_GL_FUNCDECL_RPL
 (
•rötf
, , (*
°r
, c⁄° *
f‹m©
, ...)

1036 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

1037 
	`_GL_ARG_NONNULL
 ((1, 2)));

1038 
	`_GL_CXXALIAS_RPL
 (
•rötf
, , (*
°r
, c⁄° *
f‹m©
, ...));

1040 
	`_GL_CXXALIAS_SYS
 (
•rötf
, , (*
°r
, c⁄° *
f‹m©
, ...));

1042 
	`_GL_CXXALIASWARN
 (
•rötf
);

1043 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1044 #unde‡
•rötf


1046 
	`_GL_WARN_ON_USE
 (
•rötf
, "sprintf isÇotálways POSIX compliant - "

1051 #i‡@
GNULIB_TMPFILE
@

1052 #i‡@
REPLACE_TMPFILE
@

1053 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1054 
	#tmpfûe
 
Ωl_tmpfûe


	)

1056 
	`_GL_FUNCDECL_RPL
 (
tmpfûe
, 
FILE
 *, ());

1057 
	`_GL_CXXALIAS_RPL
 (
tmpfûe
, 
FILE
 *, ());

1059 
	`_GL_CXXALIAS_SYS
 (
tmpfûe
, 
FILE
 *, ());

1061 
	`_GL_CXXALIASWARN
 (
tmpfûe
);

1062 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1063 #unde‡
tmpfûe


1064 #i‡
HAVE_RAW_DECL_TMPFILE


1065 
	`_GL_WARN_ON_USE
 (
tmpfûe
, "tmpfile isÇot usable on mingw - "

1070 #i‡@
GNULIB_VASPRINTF
@

1075 #i‡@
REPLACE_VASPRINTF
@

1076 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1077 
	#a•rötf
 
Ωl_a•rötf


	)

1079 
	`_GL_FUNCDECL_RPL
 (
a•rötf
, ,

1080 (**
ªsu…
, c⁄° *
f‹m©
, ...)

1081 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

1082 
	`_GL_ARG_NONNULL
 ((1, 2)));

1083 
	`_GL_CXXALIAS_RPL
 (
a•rötf
, ,

1084 (**
ªsu…
, c⁄° *
f‹m©
, ...));

1086 #i‡!@
HAVE_VASPRINTF
@

1087 
	`_GL_FUNCDECL_SYS
 (
a•rötf
, ,

1088 (**
ªsu…
, c⁄° *
f‹m©
, ...)

1089 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 3)

1090 
	`_GL_ARG_NONNULL
 ((1, 2)));

1092 
	`_GL_CXXALIAS_SYS
 (
a•rötf
, ,

1093 (**
ªsu…
, c⁄° *
f‹m©
, ...));

1095 
	`_GL_CXXALIASWARN
 (
a•rötf
);

1096 #i‡@
REPLACE_VASPRINTF
@

1097 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1098 
	#va•rötf
 
Ωl_va•rötf


	)

1100 
	`_GL_FUNCDECL_RPL
 (
va•rötf
, ,

1101 (**
ªsu…
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1102 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1103 
	`_GL_ARG_NONNULL
 ((1, 2)));

1104 
	`_GL_CXXALIAS_RPL
 (
va•rötf
, ,

1105 (**
ªsu…
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1107 #i‡!@
HAVE_VASPRINTF
@

1108 
	`_GL_FUNCDECL_SYS
 (
va•rötf
, ,

1109 (**
ªsu…
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1110 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1111 
	`_GL_ARG_NONNULL
 ((1, 2)));

1113 
	`_GL_CXXALIAS_SYS
 (
va•rötf
, ,

1114 (**
ªsu…
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1116 
	`_GL_CXXALIASWARN
 (
va•rötf
);

1119 #i‡@
GNULIB_VDPRINTF
@

1120 #i‡@
REPLACE_VDPRINTF
@

1121 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1122 
	#vd¥ötf
 
Ωl_vd¥ötf


	)

1124 
	`_GL_FUNCDECL_RPL
 (
vd¥ötf
, , (
fd
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1125 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1126 
	`_GL_ARG_NONNULL
 ((2)));

1127 
	`_GL_CXXALIAS_RPL
 (
vd¥ötf
, , (
fd
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1129 #i‡!@
HAVE_VDPRINTF
@

1130 
	`_GL_FUNCDECL_SYS
 (
vd¥ötf
, , (
fd
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1131 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1132 
	`_GL_ARG_NONNULL
 ((2)));

1136 
	`_GL_CXXALIAS_SYS_CAST
 (
vd¥ötf
, ,

1137 (
fd
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1139 
	`_GL_CXXALIASWARN
 (
vd¥ötf
);

1140 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1141 #unde‡
vd¥ötf


1142 #i‡
HAVE_RAW_DECL_VDPRINTF


1143 
	`_GL_WARN_ON_USE
 (
vd¥ötf
, "vdprintf is unportable - "

1148 #i‡@
GNULIB_VFPRINTF_POSIX
@ || @
GNULIB_VFPRINTF
@

1149 #i‡(@
GNULIB_VFPRINTF_POSIX
@ && @
REPLACE_VFPRINTF
@) \

1150 || (@
GNULIB_VFPRINTF
@ && @
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@))

1151 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1152 
	#vÂrötf
 
Ωl_vÂrötf


	)

1154 
	#GNULIB_ovîrides_vÂrötf
 1

	)

1155 #i‡@
GNULIB_VFPRINTF_POSIX
@

1156 
	`_GL_FUNCDECL_RPL
 (
vÂrötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1157 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1158 
	`_GL_ARG_NONNULL
 ((1, 2)));

1160 
	`_GL_FUNCDECL_RPL
 (
vÂrötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1161 
	$_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM
 (2, 0)

1162 
	`_GL_ARG_NONNULL
 ((1, 2)));

1164 
	`_GL_CXXALIAS_RPL
 (
vÂrötf
, , (
FILE
 *
Â
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1169 
	`_GL_CXXALIAS_SYS_CAST
 (
vÂrötf
, ,

1170 (
FILE
 *
Â
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1172 
	`_GL_CXXALIASWARN
 (
vÂrötf
);

1174 #i‡!@
GNULIB_VFPRINTF_POSIX
@ && 
deföed
 
GNULIB_POSIXCHECK


1175 #i‡!
GNULIB_ovîrides_vÂrötf


1176 #unde‡
vÂrötf


1179 
	`_GL_WARN_ON_USE
 (
vÂrötf
, "vfprintf isÇotálways POSIX compliant - "

1184 #i‡@
GNULIB_VFSCANF
@

1185 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

1186 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1187 #unde‡
vfsˇnf


1188 
	#vfsˇnf
 
Ωl_vfsˇnf


	)

1190 
	`_GL_FUNCDECL_RPL
 (
vfsˇnf
, ,

1191 (
FILE
 *
°ªam
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1192 
	$_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
 (2, 0)

1193 
	`_GL_ARG_NONNULL
 ((1, 2)));

1194 
	`_GL_CXXALIAS_RPL
 (
vfsˇnf
, ,

1195 (
FILE
 *
°ªam
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1197 
	`_GL_CXXALIAS_SYS
 (
vfsˇnf
, ,

1198 (
FILE
 *
°ªam
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1200 
	`_GL_CXXALIASWARN
 (
vfsˇnf
);

1203 #i‡@
GNULIB_VPRINTF_POSIX
@ || @
GNULIB_VPRINTF
@

1204 #i‡(@
GNULIB_VPRINTF_POSIX
@ && @
REPLACE_VPRINTF
@) \

1205 || (@
GNULIB_VPRINTF
@ && @
REPLACE_STDIO_WRITE_FUNCS
@ && (@
GNULIB_STDIO_H_NONBLOCKING
@ || @
GNULIB_STDIO_H_SIGPIPE
@))

1206 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1207 
	#v¥ötf
 
Ωl_v¥ötf


	)

1209 
	#GNULIB_ovîrides_v¥ötf
 1

	)

1210 #i‡@
GNULIB_VPRINTF_POSIX
@ || @
GNULIB_VFPRINTF_POSIX
@

1211 
	`_GL_FUNCDECL_RPL
 (
v¥ötf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1212 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (1, 0)

1213 
	`_GL_ARG_NONNULL
 ((1)));

1215 
	`_GL_FUNCDECL_RPL
 (
v¥ötf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1216 
	$_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM
 (1, 0)

1217 
	`_GL_ARG_NONNULL
 ((1)));

1219 
	`_GL_CXXALIAS_RPL
 (
v¥ötf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1224 
	`_GL_CXXALIAS_SYS_CAST
 (
v¥ötf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1226 
	`_GL_CXXALIASWARN
 (
v¥ötf
);

1228 #i‡!@
GNULIB_VPRINTF_POSIX
@ && 
deföed
 
GNULIB_POSIXCHECK


1229 #i‡!
GNULIB_ovîrides_v¥ötf


1230 #unde‡
v¥ötf


1233 
	`_GL_WARN_ON_USE
 (
v¥ötf
, "vprintf isÇotálways POSIX compliant - "

1238 #i‡@
GNULIB_VSCANF
@

1239 #i‡@
REPLACE_STDIO_READ_FUNCS
@ && @
GNULIB_STDIO_H_NONBLOCKING
@

1240 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1241 #unde‡
vsˇnf


1242 
	#vsˇnf
 
Ωl_vsˇnf


	)

1244 
	`_GL_FUNCDECL_RPL
 (
vsˇnf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1245 
	$_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM
 (1, 0)

1246 
	`_GL_ARG_NONNULL
 ((1)));

1247 
	`_GL_CXXALIAS_RPL
 (
vsˇnf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1249 
	`_GL_CXXALIAS_SYS
 (
vsˇnf
, , (c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1251 
	`_GL_CXXALIASWARN
 (
vsˇnf
);

1254 #i‡@
GNULIB_VSNPRINTF
@

1255 #i‡@
REPLACE_VSNPRINTF
@

1256 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1257 
	#v¢¥ötf
 
Ωl_v¢¥ötf


	)

1259 
	`_GL_FUNCDECL_RPL
 (
v¢¥ötf
, ,

1260 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1261 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (3, 0)

1262 
	`_GL_ARG_NONNULL
 ((3)));

1263 
	`_GL_CXXALIAS_RPL
 (
v¢¥ötf
, ,

1264 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1266 #i‡!@
HAVE_DECL_VSNPRINTF
@

1267 
	`_GL_FUNCDECL_SYS
 (
v¢¥ötf
, ,

1268 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1269 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (3, 0)

1270 
	`_GL_ARG_NONNULL
 ((3)));

1272 
	`_GL_CXXALIAS_SYS
 (
v¢¥ötf
, ,

1273 (*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1275 
	`_GL_CXXALIASWARN
 (
v¢¥ötf
);

1276 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1277 #unde‡
v¢¥ötf


1278 #i‡
HAVE_RAW_DECL_VSNPRINTF


1279 
	`_GL_WARN_ON_USE
 (
v¢¥ötf
, "vsnprintf is unportable - "

1284 #i‡@
GNULIB_VSPRINTF_POSIX
@

1285 #i‡@
REPLACE_VSPRINTF
@

1286 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1287 
	#v•rötf
 
Ωl_v•rötf


	)

1289 
	`_GL_FUNCDECL_RPL
 (
v•rötf
, ,

1290 (*
°r
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

1291 
	$_GL_ATTRIBUTE_FORMAT_PRINTF
 (2, 0)

1292 
	`_GL_ARG_NONNULL
 ((1, 2)));

1293 
	`_GL_CXXALIAS_RPL
 (
v•rötf
, ,

1294 (*
°r
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1299 
	`_GL_CXXALIAS_SYS_CAST
 (
v•rötf
, ,

1300 (*
°r
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
));

1302 
	`_GL_CXXALIASWARN
 (
v•rötf
);

1303 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1304 #unde‡
v•rötf


1306 
	`_GL_WARN_ON_USE
 (
v•rötf
, "vsprintf isÇotálways POSIX compliant - "

	@lib/stdlib.in.h

18 #i‡
__GNUC__
 >= 3

19 @
	gPRAGMA_SYSTEM_HEADER
@

21 @
	gPRAGMA_COLUMNS
@

23 #i‡
deföed
 
__√ed_mÆloc_™d_ˇŒoc


26 #@
INCLUDE_NEXT
@ @
NEXT_STDLIB_H
@

31 #i‚de‡
_
@
GUARD_PREFIX
@
_STDLIB_H


34 #@
INCLUDE_NEXT
@ @
NEXT_STDLIB_H
@

36 #i‚de‡
_
@
GUARD_PREFIX
@
_STDLIB_H


37 
	#_
@
GUARD_PREFIX
@
_STDLIB_H


	)

40 
	~<°ddef.h
>

43 #i‡@
GNULIB_SYSTEM_POSIX
@ && !
deföed
 
WEXITSTATUS


44 
	~<sys/waô.h
>

48 #i‡(@
GNULIB_GETLOADAVG
@ || 
deföed
 
GNULIB_POSIXCHECK
Ë&& @
HAVE_SYS_LOADAVG_H
@

49 
	~<sys/lﬂdavg.h
>

52 #i‡@
GNULIB_RANDOM_R
@

57 #i‡@
HAVE_RANDOM_H
@

58 
	~<øndom.h
>

61 #i‡!@
HAVE_STRUCT_RANDOM_DATA
@ || !@
HAVE_RANDOM_R
@

62 
	~<°döt.h
>

65 #i‡!@
HAVE_STRUCT_RANDOM_DATA
@

68 #i‡!
GNULIB_deföed_°ru˘_øndom_d©a


69 
	søndom_d©a


71 
öt32_t
 *
	mÂå
;

72 
öt32_t
 *
	mΩå
;

73 
öt32_t
 *
	m°©e
;

74 
	mønd_ty≥
;

75 
	mønd_deg
;

76 
	mønd_£p
;

77 
öt32_t
 *
	míd_±r
;

79 
	#GNULIB_deföed_°ru˘_øndom_d©a
 1

	)

84 #i‡(@
GNULIB_MKSTEMP
@ || @
GNULIB_MKSTEMPS
@ || @
GNULIB_GETSUBOPT
@ || 
deföed
 
GNULIB_POSIXCHECK
Ë&& ! deföed 
__GLIBC__
 && !((deföed 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
)

89 
	~<uni°d.h
>

102 #i‚de‡
EXIT_SUCCESS


103 
	#EXIT_SUCCESS
 0

	)

107 #i‚de‡
EXIT_FAILURE


108 
	#EXIT_FAILURE
 1

	)

109 #ñi‡
EXIT_FAILURE
 != 1

110 #unde‡
EXIT_FAILURE


111 
	#EXIT_FAILURE
 1

	)

115 #i‡@
GNULIB__EXIT
@

118 #i‡!@
HAVE__EXIT
@

119 
_GL_FUNCDECL_SYS
 (
_Exô
, 
_N‹ëu∫
 , (
°©us
));

121 
_GL_CXXALIAS_SYS
 (
_Exô
, , (
°©us
));

122 
_GL_CXXALIASWARN
 (
_Exô
);

123 #ñi‡
deföed
 
GNULIB_POSIXCHECK


124 #unde‡
_Exô


125 #i‡
HAVE_RAW_DECL__EXIT


126 
_GL_WARN_ON_USE
 (
_Exô
, "_Exit is unportable - "

132 #i‡@
GNULIB_ATOLL
@

135 #i‡!@
HAVE_ATOLL
@

136 
_GL_FUNCDECL_SYS
 (
©ﬁl
, , (c⁄° *
°rög
Ë
_GL_ARG_NONNULL
 ((1)));

138 
_GL_CXXALIAS_SYS
 (
©ﬁl
, , (c⁄° *
°rög
));

139 
_GL_CXXALIASWARN
 (
©ﬁl
);

140 #ñi‡
deföed
 
GNULIB_POSIXCHECK


141 #unde‡
©ﬁl


142 #i‡
HAVE_RAW_DECL_ATOLL


143 
_GL_WARN_ON_USE
 (
©ﬁl
, "atoll is unportable - "

148 #i‡@
GNULIB_CALLOC_POSIX
@

149 #i‡@
REPLACE_CALLOC
@

150 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

151 #unde‡
ˇŒoc


152 
	#ˇŒoc
 
Ωl_ˇŒoc


	)

154 
_GL_FUNCDECL_RPL
 (
ˇŒoc
, *, (
size_t
 
nmemb
, size_à
size
));

155 
_GL_CXXALIAS_RPL
 (
ˇŒoc
, *, (
size_t
 
nmemb
, size_à
size
));

157 
_GL_CXXALIAS_SYS
 (
ˇŒoc
, *, (
size_t
 
nmemb
, size_à
size
));

159 
_GL_CXXALIASWARN
 (
ˇŒoc
);

160 #ñi‡
deföed
 
GNULIB_POSIXCHECK


161 #unde‡
ˇŒoc


163 
_GL_WARN_ON_USE
 (
ˇŒoc
, "calloc isÇot POSIX compliantÉverywhere - "

167 #i‡@
GNULIB_CANONICALIZE_FILE_NAME
@

168 #i‡@
REPLACE_CANONICALIZE_FILE_NAME
@

169 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

170 
	#ˇn⁄iˇlize_fûe_«me
 
Ωl_ˇn⁄iˇlize_fûe_«me


	)

172 
_GL_FUNCDECL_RPL
 (
ˇn⁄iˇlize_fûe_«me
, *, (c⁄° *
«me
)

173 
_GL_ARG_NONNULL
 ((1)));

174 
_GL_CXXALIAS_RPL
 (
ˇn⁄iˇlize_fûe_«me
, *, (c⁄° *
«me
));

176 #i‡!@
HAVE_CANONICALIZE_FILE_NAME
@

177 
_GL_FUNCDECL_SYS
 (
ˇn⁄iˇlize_fûe_«me
, *, (c⁄° *
«me
)

178 
_GL_ARG_NONNULL
 ((1)));

180 
_GL_CXXALIAS_SYS
 (
ˇn⁄iˇlize_fûe_«me
, *, (c⁄° *
«me
));

182 
_GL_CXXALIASWARN
 (
ˇn⁄iˇlize_fûe_«me
);

183 #ñi‡
deföed
 
GNULIB_POSIXCHECK


184 #unde‡
ˇn⁄iˇlize_fûe_«me


185 #i‡
HAVE_RAW_DECL_CANONICALIZE_FILE_NAME


186 
_GL_WARN_ON_USE
 (
ˇn⁄iˇlize_fûe_«me
,

192 #i‡@
GNULIB_GETLOADAVG
@

197 #i‡!@
HAVE_DECL_GETLOADAVG
@

198 
_GL_FUNCDECL_SYS
 (
gëlﬂdavg
, , (
lﬂdavg
[], 
√Àm
)

199 
_GL_ARG_NONNULL
 ((1)));

201 
_GL_CXXALIAS_SYS
 (
gëlﬂdavg
, , (
lﬂdavg
[], 
√Àm
));

202 
_GL_CXXALIASWARN
 (
gëlﬂdavg
);

203 #ñi‡
deföed
 
GNULIB_POSIXCHECK


204 #unde‡
gëlﬂdavg


205 #i‡
HAVE_RAW_DECL_GETLOADAVG


206 
_GL_WARN_ON_USE
 (
gëlﬂdavg
, "getloadavg isÇotÖortable - "

211 #i‡@
GNULIB_GETSUBOPT
@

223 #i‡!@
HAVE_GETSUBOPT
@

224 
_GL_FUNCDECL_SYS
 (
gësub›t
, ,

225 (**
›ti⁄p
, *c⁄° *
tokís
, **
vÆuï
)

226 
_GL_ARG_NONNULL
 ((1, 2, 3)));

228 
_GL_CXXALIAS_SYS
 (
gësub›t
, ,

229 (**
›ti⁄p
, *c⁄° *
tokís
, **
vÆuï
));

230 
_GL_CXXALIASWARN
 (
gësub›t
);

231 #ñi‡
deföed
 
GNULIB_POSIXCHECK


232 #unde‡
gësub›t


233 #i‡
HAVE_RAW_DECL_GETSUBOPT


234 
_GL_WARN_ON_USE
 (
gësub›t
, "getsubopt is unportable - "

239 #i‡@
GNULIB_GRANTPT
@

242 #i‡!@
HAVE_GRANTPT
@

243 
_GL_FUNCDECL_SYS
 (
gø¡±
, , (
fd
));

245 
_GL_CXXALIAS_SYS
 (
gø¡±
, , (
fd
));

246 
_GL_CXXALIASWARN
 (
gø¡±
);

247 #ñi‡
deföed
 
GNULIB_POSIXCHECK


248 #unde‡
gø¡±


249 #i‡
HAVE_RAW_DECL_GRANTPT


250 
_GL_WARN_ON_USE
 (
±¢ame
, "grantpt isÇotÖortable - "

259 #i‡@
GNULIB_MALLOC_POSIX
@

260 #i‡@
REPLACE_MALLOC
@

261 #i‡!((
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
) \

262 || 
	g_GL_USE_STDLIB_ALLOC
)

263 #unde‡
mÆloc


264 
	#mÆloc
 
Ωl_mÆloc


	)

266 
_GL_FUNCDECL_RPL
 (
mÆloc
, *, (
size_t
 
size
));

267 
_GL_CXXALIAS_RPL
 (
mÆloc
, *, (
size_t
 
size
));

269 
_GL_CXXALIAS_SYS
 (
mÆloc
, *, (
size_t
 
size
));

271 
_GL_CXXALIASWARN
 (
mÆloc
);

272 #ñi‡
deföed
 
GNULIB_POSIXCHECK
 && !
_GL_USE_STDLIB_ALLOC


273 #unde‡
mÆloc


275 
_GL_WARN_ON_USE
 (
mÆloc
, "malloc isÇot POSIX compliantÉverywhere - "

280 #i‡@
GNULIB_MBTOWC
@

281 #i‡@
REPLACE_MBTOWC
@

282 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

283 #unde‡
mbtowc


284 
	#mbtowc
 
Ωl_mbtowc


	)

286 
_GL_FUNCDECL_RPL
 (
mbtowc
, , (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
));

287 
_GL_CXXALIAS_RPL
 (
mbtowc
, , (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
));

289 
_GL_CXXALIAS_SYS
 (
mbtowc
, , (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
));

291 
_GL_CXXALIASWARN
 (
mbtowc
);

294 #i‡@
GNULIB_MKDTEMP
@

300 #i‡!@
HAVE_MKDTEMP
@

301 
_GL_FUNCDECL_SYS
 (
mkdãmp
, *, (* ) 
_GL_ARG_NONNULL
 ((1)));

303 
_GL_CXXALIAS_SYS
 (
mkdãmp
, *, (* ));

304 
_GL_CXXALIASWARN
 (
mkdãmp
);

305 #ñi‡
deföed
 
GNULIB_POSIXCHECK


306 #unde‡
mkdãmp


307 #i‡
HAVE_RAW_DECL_MKDTEMP


308 
_GL_WARN_ON_USE
 (
mkdãmp
, "mkdtemp is unportable - "

313 #i‡@
GNULIB_MKOSTEMP
@

326 #i‡!@
HAVE_MKOSTEMP
@

327 
_GL_FUNCDECL_SYS
 (
mko°emp
, , (* , )

328 
_GL_ARG_NONNULL
 ((1)));

330 
_GL_CXXALIAS_SYS
 (
mko°emp
, , (* , ));

331 
_GL_CXXALIASWARN
 (
mko°emp
);

332 #ñi‡
deföed
 
GNULIB_POSIXCHECK


333 #unde‡
mko°emp


334 #i‡
HAVE_RAW_DECL_MKOSTEMP


335 
_GL_WARN_ON_USE
 (
mko°emp
, "mkostemp is unportable - "

340 #i‡@
GNULIB_MKOSTEMPS
@

354 #i‡!@
HAVE_MKOSTEMPS
@

355 
_GL_FUNCDECL_SYS
 (
mko°emps
, ,

357 
_GL_ARG_NONNULL
 ((1)));

359 
_GL_CXXALIAS_SYS
 (
mko°emps
, ,

361 
_GL_CXXALIASWARN
 (
mko°emps
);

362 #ñi‡
deföed
 
GNULIB_POSIXCHECK


363 #unde‡
mko°emps


364 #i‡
HAVE_RAW_DECL_MKOSTEMPS


365 
_GL_WARN_ON_USE
 (
mko°emps
, "mkostemps is unportable - "

370 #i‡@
GNULIB_MKSTEMP
@

380 #i‡@
REPLACE_MKSTEMP
@

381 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

382 
	#mk°emp
 
Ωl_mk°emp


	)

384 
_GL_FUNCDECL_RPL
 (
mk°emp
, , (* ) 
_GL_ARG_NONNULL
 ((1)));

385 
_GL_CXXALIAS_RPL
 (
mk°emp
, , (* ));

387 #i‡! @
HAVE_MKSTEMP
@

388 
_GL_FUNCDECL_SYS
 (
mk°emp
, , (* ) 
_GL_ARG_NONNULL
 ((1)));

390 
_GL_CXXALIAS_SYS
 (
mk°emp
, , (* ));

392 
_GL_CXXALIASWARN
 (
mk°emp
);

393 #ñi‡
deföed
 
GNULIB_POSIXCHECK


394 #unde‡
mk°emp


395 #i‡
HAVE_RAW_DECL_MKSTEMP


396 
_GL_WARN_ON_USE
 (
mk°emp
, "mkstemp is unportable - "

401 #i‡@
GNULIB_MKSTEMPS
@

412 #i‡!@
HAVE_MKSTEMPS
@

413 
_GL_FUNCDECL_SYS
 (
mk°emps
, , (* , )

414 
_GL_ARG_NONNULL
 ((1)));

416 
_GL_CXXALIAS_SYS
 (
mk°emps
, , (* , ));

417 
_GL_CXXALIASWARN
 (
mk°emps
);

418 #ñi‡
deföed
 
GNULIB_POSIXCHECK


419 #unde‡
mk°emps


420 #i‡
HAVE_RAW_DECL_MKSTEMPS


421 
_GL_WARN_ON_USE
 (
mk°emps
, "mkstemps is unportable - "

426 #i‡@
GNULIB_PTSNAME
@

429 #i‡!@
HAVE_PTSNAME
@

430 
_GL_FUNCDECL_SYS
 (
±¢ame
, *, (
fd
));

432 
_GL_CXXALIAS_SYS
 (
±¢ame
, *, (
fd
));

433 
_GL_CXXALIASWARN
 (
±¢ame
);

434 #ñi‡
deföed
 
GNULIB_POSIXCHECK


435 #unde‡
±¢ame


436 #i‡
HAVE_RAW_DECL_PTSNAME


437 
_GL_WARN_ON_USE
 (
±¢ame
, "ptsname isÇotÖortable - "

442 #i‡@
GNULIB_PUTENV
@

443 #i‡@
REPLACE_PUTENV
@

444 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

445 #unde‡
puãnv


446 
	#puãnv
 
Ωl_puãnv


	)

448 
_GL_FUNCDECL_RPL
 (
puãnv
, , (*
°rög
Ë
_GL_ARG_NONNULL
 ((1)));

449 
_GL_CXXALIAS_RPL
 (
puãnv
, , (*
°rög
));

451 
_GL_CXXALIAS_SYS
 (
puãnv
, , (*
°rög
));

453 
_GL_CXXALIASWARN
 (
puãnv
);

457 #i‡@
GNULIB_RANDOM_R
@

458 #i‡!@
HAVE_RANDOM_R
@

459 #i‚de‡
RAND_MAX


460 
	#RAND_MAX
 2147483647

	)

465 #i‡@
GNULIB_RANDOM_R
@

466 #i‡!@
HAVE_RANDOM_R
@

467 
_GL_FUNCDECL_SYS
 (
øndom_r
, , (
øndom_d©a
 *
buf
, 
öt32_t
 *
ªsu…
)

468 
_GL_ARG_NONNULL
 ((1, 2)));

470 
_GL_CXXALIAS_SYS
 (
øndom_r
, , (
øndom_d©a
 *
buf
, 
öt32_t
 *
ªsu…
));

471 
_GL_CXXALIASWARN
 (
øndom_r
);

472 #ñi‡
deföed
 
GNULIB_POSIXCHECK


473 #unde‡
øndom_r


474 #i‡
HAVE_RAW_DECL_RANDOM_R


475 
_GL_WARN_ON_USE
 (
øndom_r
, "random_r is unportable - "

480 #i‡@
GNULIB_RANDOM_R
@

481 #i‡!@
HAVE_RANDOM_R
@

482 
_GL_FUNCDECL_SYS
 (
§™dom_r
, ,

483 (
£ed
, 
øndom_d©a
 *
ønd_°©e
)

484 
_GL_ARG_NONNULL
 ((2)));

486 
_GL_CXXALIAS_SYS
 (
§™dom_r
, ,

487 (
£ed
, 
øndom_d©a
 *
ønd_°©e
));

488 
_GL_CXXALIASWARN
 (
§™dom_r
);

489 #ñi‡
deföed
 
GNULIB_POSIXCHECK


490 #unde‡
§™dom_r


491 #i‡
HAVE_RAW_DECL_SRANDOM_R


492 
_GL_WARN_ON_USE
 (
§™dom_r
, "srandom_r is unportable - "

497 #i‡@
GNULIB_RANDOM_R
@

498 #i‡!@
HAVE_RANDOM_R
@

499 
_GL_FUNCDECL_SYS
 (
öô°©e_r
, ,

500 (
£ed
, *
buf
, 
size_t
 
buf_size
,

501 
øndom_d©a
 *
ønd_°©e
)

502 
_GL_ARG_NONNULL
 ((2, 4)));

504 
_GL_CXXALIAS_SYS
 (
öô°©e_r
, ,

505 (
£ed
, *
buf
, 
size_t
 
buf_size
,

506 
øndom_d©a
 *
ønd_°©e
));

507 
_GL_CXXALIASWARN
 (
öô°©e_r
);

508 #ñi‡
deföed
 
GNULIB_POSIXCHECK


509 #unde‡
öô°©e_r


510 #i‡
HAVE_RAW_DECL_INITSTATE_R


511 
_GL_WARN_ON_USE
 (
öô°©e_r
, "initstate_r is unportable - "

516 #i‡@
GNULIB_RANDOM_R
@

517 #i‡!@
HAVE_RANDOM_R
@

518 
_GL_FUNCDECL_SYS
 (
£t°©e_r
, ,

519 (*
¨g_°©e
, 
øndom_d©a
 *
ønd_°©e
)

520 
_GL_ARG_NONNULL
 ((1, 2)));

522 
_GL_CXXALIAS_SYS
 (
£t°©e_r
, ,

523 (*
¨g_°©e
, 
øndom_d©a
 *
ønd_°©e
));

524 
_GL_CXXALIASWARN
 (
£t°©e_r
);

525 #ñi‡
deföed
 
GNULIB_POSIXCHECK


526 #unde‡
£t°©e_r


527 #i‡
HAVE_RAW_DECL_SETSTATE_R


528 
_GL_WARN_ON_USE
 (
£t°©e_r
, "setstate_r is unportable - "

534 #i‡@
GNULIB_REALLOC_POSIX
@

535 #i‡@
REPLACE_REALLOC
@

536 #i‡!((
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
) \

537 || 
	g_GL_USE_STDLIB_ALLOC
)

538 #unde‡
ªÆloc


539 
	#ªÆloc
 
Ωl_ªÆloc


	)

541 
_GL_FUNCDECL_RPL
 (
ªÆloc
, *, (*
±r
, 
size_t
 
size
));

542 
_GL_CXXALIAS_RPL
 (
ªÆloc
, *, (*
±r
, 
size_t
 
size
));

544 
_GL_CXXALIAS_SYS
 (
ªÆloc
, *, (*
±r
, 
size_t
 
size
));

546 
_GL_CXXALIASWARN
 (
ªÆloc
);

547 #ñi‡
deföed
 
GNULIB_POSIXCHECK
 && !
_GL_USE_STDLIB_ALLOC


548 #unde‡
ªÆloc


550 
_GL_WARN_ON_USE
 (
ªÆloc
, "realloc isÇot POSIX compliantÉverywhere - "

554 #i‡@
GNULIB_REALPATH
@

555 #i‡@
REPLACE_REALPATH
@

556 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

557 
	#ªÆ∑th
 
Ωl_ªÆ∑th


	)

559 
_GL_FUNCDECL_RPL
 (
ªÆ∑th
, *, (c⁄° *
«me
, *
ªsﬁved
)

560 
_GL_ARG_NONNULL
 ((1)));

561 
_GL_CXXALIAS_RPL
 (
ªÆ∑th
, *, (c⁄° *
«me
, *
ªsﬁved
));

563 #i‡!@
HAVE_REALPATH
@

564 
_GL_FUNCDECL_SYS
 (
ªÆ∑th
, *, (c⁄° *
«me
, *
ªsﬁved
)

565 
_GL_ARG_NONNULL
 ((1)));

567 
_GL_CXXALIAS_SYS
 (
ªÆ∑th
, *, (c⁄° *
«me
, *
ªsﬁved
));

569 
_GL_CXXALIASWARN
 (
ªÆ∑th
);

570 #ñi‡
deföed
 
GNULIB_POSIXCHECK


571 #unde‡
ªÆ∑th


572 #i‡
HAVE_RAW_DECL_REALPATH


573 
_GL_WARN_ON_USE
 (
ªÆ∑th
, "realpath is unportable - use gnulib module "

578 #i‡@
GNULIB_RPMATCH
@

581 #i‡!@
HAVE_RPMATCH
@

582 
_GL_FUNCDECL_SYS
 (
Ωm©ch
, , (c⁄° *
ª•⁄£
Ë
_GL_ARG_NONNULL
 ((1)));

584 
_GL_CXXALIAS_SYS
 (
Ωm©ch
, , (c⁄° *
ª•⁄£
));

585 
_GL_CXXALIASWARN
 (
Ωm©ch
);

586 #ñi‡
deföed
 
GNULIB_POSIXCHECK


587 #unde‡
Ωm©ch


588 #i‡
HAVE_RAW_DECL_RPMATCH


589 
_GL_WARN_ON_USE
 (
Ωm©ch
, "rpmatch is unportable - "

594 #i‡@
GNULIB_SETENV
@

597 #i‡@
REPLACE_SETENV
@

598 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

599 #unde‡
£ãnv


600 
	#£ãnv
 
Ωl_£ãnv


	)

602 
_GL_FUNCDECL_RPL
 (
£ãnv
, ,

603 (c⁄° *
«me
, c⁄° *
vÆue
, 
ª∂a˚
)

604 
_GL_ARG_NONNULL
 ((1)));

605 
_GL_CXXALIAS_RPL
 (
£ãnv
, ,

606 (c⁄° *
«me
, c⁄° *
vÆue
, 
ª∂a˚
));

608 #i‡!@
HAVE_DECL_SETENV
@

609 
_GL_FUNCDECL_SYS
 (
£ãnv
, ,

610 (c⁄° *
«me
, c⁄° *
vÆue
, 
ª∂a˚
)

611 
_GL_ARG_NONNULL
 ((1)));

613 
_GL_CXXALIAS_SYS
 (
£ãnv
, ,

614 (c⁄° *
«me
, c⁄° *
vÆue
, 
ª∂a˚
));

616 #i‡!(@
REPLACE_SETENV
@ && !@
HAVE_DECL_SETENV
@)

617 
_GL_CXXALIASWARN
 (
£ãnv
);

619 #ñi‡
deföed
 
GNULIB_POSIXCHECK


620 #unde‡
£ãnv


621 #i‡
HAVE_RAW_DECL_SETENV


622 
_GL_WARN_ON_USE
 (
£ãnv
, "setenv is unportable - "

627 #i‡@
GNULIB_STRTOD
@

629 #i‡@
REPLACE_STRTOD
@

630 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

631 
	#°πod
 
Ωl_°πod


	)

633 
_GL_FUNCDECL_RPL
 (
°πod
, , (c⁄° *
°r
, **
ídp
)

634 
_GL_ARG_NONNULL
 ((1)));

635 
_GL_CXXALIAS_RPL
 (
°πod
, , (c⁄° *
°r
, **
ídp
));

637 #i‡!@
HAVE_STRTOD
@

638 
_GL_FUNCDECL_SYS
 (
°πod
, , (c⁄° *
°r
, **
ídp
)

639 
_GL_ARG_NONNULL
 ((1)));

641 
_GL_CXXALIAS_SYS
 (
°πod
, , (c⁄° *
°r
, **
ídp
));

643 
_GL_CXXALIASWARN
 (
°πod
);

644 #ñi‡
deföed
 
GNULIB_POSIXCHECK


645 #unde‡
°πod


646 #i‡
HAVE_RAW_DECL_STRTOD


647 
_GL_WARN_ON_USE
 (
°πod
, "strtod is unportable - "

652 #i‡@
GNULIB_STRTOLL
@

661 #i‡!@
HAVE_STRTOLL
@

662 
_GL_FUNCDECL_SYS
 (
°πﬁl
, ,

663 (c⁄° *
°rög
, **
íd±r
, 
ba£
)

664 
_GL_ARG_NONNULL
 ((1)));

666 
_GL_CXXALIAS_SYS
 (
°πﬁl
, ,

667 (c⁄° *
°rög
, **
íd±r
, 
ba£
));

668 
_GL_CXXALIASWARN
 (
°πﬁl
);

669 #ñi‡
deföed
 
GNULIB_POSIXCHECK


670 #unde‡
°πﬁl


671 #i‡
HAVE_RAW_DECL_STRTOLL


672 
_GL_WARN_ON_USE
 (
°πﬁl
, "strtoll is unportable - "

677 #i‡@
GNULIB_STRTOULL
@

686 #i‡!@
HAVE_STRTOULL
@

687 
_GL_FUNCDECL_SYS
 (
°πouŒ
, ,

688 (c⁄° *
°rög
, **
íd±r
, 
ba£
)

689 
_GL_ARG_NONNULL
 ((1)));

691 
_GL_CXXALIAS_SYS
 (
°πouŒ
, ,

692 (c⁄° *
°rög
, **
íd±r
, 
ba£
));

693 
_GL_CXXALIASWARN
 (
°πouŒ
);

694 #ñi‡
deföed
 
GNULIB_POSIXCHECK


695 #unde‡
°πouŒ


696 #i‡
HAVE_RAW_DECL_STRTOULL


697 
_GL_WARN_ON_USE
 (
°πouŒ
, "strtoull is unportable - "

702 #i‡@
GNULIB_UNLOCKPT
@

705 #i‡!@
HAVE_UNLOCKPT
@

706 
_GL_FUNCDECL_SYS
 (
u∆ock±
, , (
fd
));

708 
_GL_CXXALIAS_SYS
 (
u∆ock±
, , (
fd
));

709 
_GL_CXXALIASWARN
 (
u∆ock±
);

710 #ñi‡
deföed
 
GNULIB_POSIXCHECK


711 #unde‡
u∆ock±


712 #i‡
HAVE_RAW_DECL_UNLOCKPT


713 
_GL_WARN_ON_USE
 (
u∆ock±
, "unlockpt isÇotÖortable - "

718 #i‡@
GNULIB_UNSETENV
@

720 #i‡@
REPLACE_UNSETENV
@

721 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

722 #unde‡
un£ãnv


723 
	#un£ãnv
 
Ωl_un£ãnv


	)

725 
_GL_FUNCDECL_RPL
 (
un£ãnv
, , (c⁄° *
«me
Ë
_GL_ARG_NONNULL
 ((1)));

726 
_GL_CXXALIAS_RPL
 (
un£ãnv
, , (c⁄° *
«me
));

728 #i‡!@
HAVE_DECL_UNSETENV
@

729 
_GL_FUNCDECL_SYS
 (
un£ãnv
, , (c⁄° *
«me
Ë
_GL_ARG_NONNULL
 ((1)));

731 
_GL_CXXALIAS_SYS
 (
un£ãnv
, , (c⁄° *
«me
));

733 #i‡!(@
REPLACE_UNSETENV
@ && !@
HAVE_DECL_UNSETENV
@)

734 
_GL_CXXALIASWARN
 (
un£ãnv
);

736 #ñi‡
deföed
 
GNULIB_POSIXCHECK


737 #unde‡
un£ãnv


738 #i‡
HAVE_RAW_DECL_UNSETENV


739 
_GL_WARN_ON_USE
 (
un£ãnv
, "unsetenv is unportable - "

745 #i‡@
GNULIB_WCTOMB
@

746 #i‡@
REPLACE_WCTOMB
@

747 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

748 #unde‡
w˘omb


749 
	#w˘omb
 
Ωl_w˘omb


	)

751 
_GL_FUNCDECL_RPL
 (
w˘omb
, , (*
s
, 
wch¨_t
 
wc
));

752 
_GL_CXXALIAS_RPL
 (
w˘omb
, , (*
s
, 
wch¨_t
 
wc
));

754 
_GL_CXXALIAS_SYS
 (
w˘omb
, , (*
s
, 
wch¨_t
 
wc
));

756 
_GL_CXXALIASWARN
 (
w˘omb
);

	@lib/str-two-way.h

46 
	~<limôs.h
>

47 
	~<°döt.h
>

67 #i‡
CHAR_BIT
 < 10

68 
	#LONG_NEEDLE_THRESHOLD
 32U

	)

70 
	#LONG_NEEDLE_THRESHOLD
 
SIZE_MAX


	)

73 #i‚de‡
MAX


74 
	#MAX
(
a
, 
b
Ë(◊ < bË? (bË: (a))

	)

77 #i‚de‡
CANON_ELEMENT


78 
	#CANON_ELEMENT
(
c
Ë
	)
c

80 #i‚de‡
CMP_FUNC


81 
	#CMP_FUNC
 
memcmp


	)

110 
size_t


111 
	$¸ôiˇl_Á˘‹iz©i⁄
 (c⁄° *
√edÀ
, 
size_t
 
√edÀ_Àn
,

112 
size_t
 *
≥riod
)

115 
size_t
 
max_suffix
, 
max_suffix_ªv
;

116 
size_t
 
j
;

117 
size_t
 
k
;

118 
size_t
 
p
;

119 
a
, 
b
;

123 i‡(
√edÀ_Àn
 < 3)

125 *
≥riod
 = 1;

126  
√edÀ_Àn
 - 1;

139 
max_suffix
 = 
SIZE_MAX
;

140 
j
 = 0;

141 
k
 = 
p
 = 1;

142 
j
 + 
k
 < 
√edÀ_Àn
)

144 
a
 = 
	`CANON_ELEMENT
 (
√edÀ
[
j
 + 
k
]);

145 
b
 = 
	`CANON_ELEMENT
 (
√edÀ
[
max_suffix
 + 
k
]);

146 i‡(
a
 < 
b
)

149 
j
 +
k
;

150 
k
 = 1;

151 
p
 = 
j
 - 
max_suffix
;

153 i‡(
a
 =
b
)

156 i‡(
k
 !
p
)

157 ++
k
;

160 
j
 +
p
;

161 
k
 = 1;

167 
max_suffix
 = 
j
++;

168 
k
 = 
p
 = 1;

171 *
≥riod
 = 
p
;

174 
max_suffix_ªv
 = 
SIZE_MAX
;

175 
j
 = 0;

176 
k
 = 
p
 = 1;

177 
j
 + 
k
 < 
√edÀ_Àn
)

179 
a
 = 
	`CANON_ELEMENT
 (
√edÀ
[
j
 + 
k
]);

180 
b
 = 
	`CANON_ELEMENT
 (
√edÀ
[
max_suffix_ªv
 + 
k
]);

181 i‡(
b
 < 
a
)

184 
j
 +
k
;

185 
k
 = 1;

186 
p
 = 
j
 - 
max_suffix_ªv
;

188 i‡(
a
 =
b
)

191 i‡(
k
 !
p
)

192 ++
k
;

195 
j
 +
p
;

196 
k
 = 1;

202 
max_suffix_ªv
 = 
j
++;

203 
k
 = 
p
 = 1;

221 i‡(
max_suffix_ªv
 + 1 < 
max_suffix
 + 1)

222  
max_suffix
 + 1;

223 *
≥riod
 = 
p
;

224  
max_suffix_ªv
 + 1;

225 
	}
}

237 
RETURN_TYPE


238 
	$two_way_sh‹t_√edÀ
 (c⁄° *
hay°ack
, 
size_t
 
hay°ack_Àn
,

239 c⁄° *
√edÀ
, 
size_t
 
√edÀ_Àn
)

241 
size_t
 
i
;

242 
size_t
 
j
;

243 
size_t
 
≥riod
;

244 
size_t
 
suffix
;

249 
suffix
 = 
	`¸ôiˇl_Á˘‹iz©i⁄
 (
√edÀ
, 
√edÀ_Àn
, &
≥riod
);

253 i‡(
	`CMP_FUNC
 (
√edÀ
,ÇìdÀ + 
≥riod
, 
suffix
) == 0)

258 
size_t
 
mem‹y
 = 0;

259 
j
 = 0;

260 
	`AVAILABLE
 (
hay°ack
, 
hay°ack_Àn
, 
j
, 
√edÀ_Àn
))

263 
i
 = 
	`MAX
 (
suffix
, 
mem‹y
);

264 
i
 < 
√edÀ_Àn
 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

265 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

266 ++
i
;

267 i‡(
√edÀ_Àn
 <
i
)

270 
i
 = 
suffix
 - 1;

271 
mem‹y
 < 
i
 + 1 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

272 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

273 --
i
;

274 i‡(
i
 + 1 < 
mem‹y
 + 1)

275  (
RETURN_TYPE
Ë(
hay°ack
 + 
j
);

278 
j
 +
≥riod
;

279 
mem‹y
 = 
√edÀ_Àn
 - 
≥riod
;

283 
j
 +
i
 - 
suffix
 + 1;

284 
mem‹y
 = 0;

292 
≥riod
 = 
	`MAX
 (
suffix
, 
√edÀ_Àn
 - suffix) + 1;

293 
j
 = 0;

294 
	`AVAILABLE
 (
hay°ack
, 
hay°ack_Àn
, 
j
, 
√edÀ_Àn
))

297 
i
 = 
suffix
;

298 
i
 < 
√edÀ_Àn
 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

299 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

300 ++
i
;

301 i‡(
√edÀ_Àn
 <
i
)

304 
i
 = 
suffix
 - 1;

305 
i
 !
SIZE_MAX
 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

306 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

307 --
i
;

308 i‡(
i
 =
SIZE_MAX
)

309  (
RETURN_TYPE
Ë(
hay°ack
 + 
j
);

310 
j
 +
≥riod
;

313 
j
 +
i
 - 
suffix
 + 1;

316  
NULL
;

317 
	}
}

331 
RETURN_TYPE


332 
	$two_way_l⁄g_√edÀ
 (c⁄° *
hay°ack
, 
size_t
 
hay°ack_Àn
,

333 c⁄° *
√edÀ
, 
size_t
 
√edÀ_Àn
)

335 
size_t
 
i
;

336 
size_t
 
j
;

337 
size_t
 
≥riod
;

338 
size_t
 
suffix
;

339 
size_t
 
shi·_èbÀ
[1U << 
CHAR_BIT
];

344 
suffix
 = 
	`¸ôiˇl_Á˘‹iz©i⁄
 (
√edÀ
, 
√edÀ_Àn
, &
≥riod
);

350 
i
 = 0; i < 1U << 
CHAR_BIT
; i++)

351 
shi·_èbÀ
[
i
] = 
√edÀ_Àn
;

352 
i
 = 0; i < 
√edÀ_Àn
; i++)

353 
shi·_èbÀ
[
	`CANON_ELEMENT
 (
√edÀ
[
i
])] = 
√edÀ_Àn
 - i - 1;

357 i‡(
	`CMP_FUNC
 (
√edÀ
,ÇìdÀ + 
≥riod
, 
suffix
) == 0)

362 
size_t
 
mem‹y
 = 0;

363 
size_t
 
shi·
;

364 
j
 = 0;

365 
	`AVAILABLE
 (
hay°ack
, 
hay°ack_Àn
, 
j
, 
√edÀ_Àn
))

369 
shi·
 = 
shi·_èbÀ
[
	`CANON_ELEMENT
 (
hay°ack
[
j
 + 
√edÀ_Àn
 - 1])];

370 i‡(0 < 
shi·
)

372 i‡(
mem‹y
 && 
shi·
 < 
≥riod
)

377 
shi·
 = 
√edÀ_Àn
 - 
≥riod
;

379 
mem‹y
 = 0;

380 
j
 +
shi·
;

385 
i
 = 
	`MAX
 (
suffix
, 
mem‹y
);

386 
i
 < 
√edÀ_Àn
 - 1 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

387 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

388 ++
i
;

389 i‡(
√edÀ_Àn
 - 1 <
i
)

392 
i
 = 
suffix
 - 1;

393 
mem‹y
 < 
i
 + 1 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

394 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

395 --
i
;

396 i‡(
i
 + 1 < 
mem‹y
 + 1)

397  (
RETURN_TYPE
Ë(
hay°ack
 + 
j
);

400 
j
 +
≥riod
;

401 
mem‹y
 = 
√edÀ_Àn
 - 
≥riod
;

405 
j
 +
i
 - 
suffix
 + 1;

406 
mem‹y
 = 0;

414 
size_t
 
shi·
;

415 
≥riod
 = 
	`MAX
 (
suffix
, 
√edÀ_Àn
 - suffix) + 1;

416 
j
 = 0;

417 
	`AVAILABLE
 (
hay°ack
, 
hay°ack_Àn
, 
j
, 
√edÀ_Àn
))

421 
shi·
 = 
shi·_èbÀ
[
	`CANON_ELEMENT
 (
hay°ack
[
j
 + 
√edÀ_Àn
 - 1])];

422 i‡(0 < 
shi·
)

424 
j
 +
shi·
;

429 
i
 = 
suffix
;

430 
i
 < 
√edÀ_Àn
 - 1 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

431 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

432 ++
i
;

433 i‡(
√edÀ_Àn
 - 1 <
i
)

436 
i
 = 
suffix
 - 1;

437 
i
 !
SIZE_MAX
 && (
	`CANON_ELEMENT
 (
√edÀ
[i])

438 =
	`CANON_ELEMENT
 (
hay°ack
[
i
 + 
j
])))

439 --
i
;

440 i‡(
i
 =
SIZE_MAX
)

441  (
RETURN_TYPE
Ë(
hay°ack
 + 
j
);

442 
j
 +
≥riod
;

445 
j
 +
i
 - 
suffix
 + 1;

448  
NULL
;

449 
	}
}

451 #unde‡
AVAILABLE


452 #unde‡
CANON_ELEMENT


453 #unde‡
CMP_FUNC


454 #unde‡
MAX


455 #unde‡
RETURN_TYPE


	@lib/strcasecmp.c

20 
	~<c⁄fig.h
>

23 
	~<°rög.h
>

25 
	~<˘y≥.h
>

26 
	~<limôs.h
>

28 
	#TOLOWER
(
Ch
Ë(
	`isuµî
 (ChË? 
	`tﬁowî
 (ChË: (Ch))

	)

36 
	$°rˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
)

38 c⁄° *
p1
 = (c⁄° *Ë
s1
;

39 c⁄° *
p2
 = (c⁄° *Ë
s2
;

40 
c1
, 
c2
;

42 i‡(
p1
 =
p2
)

47 
c1
 = 
	`TOLOWER
 (*
p1
);

48 
c2
 = 
	`TOLOWER
 (*
p2
);

50 i‡(
c1
 == '\0')

53 ++
p1
;

54 ++
p2
;

56 
c1
 =
c2
);

58 i‡(
UCHAR_MAX
 <
INT_MAX
)

59  
c1
 - 
c2
;

64  (
c1
 > 
c2
 ? 1 : c1 < c2 ? -1 : 0);

65 
	}
}

	@lib/strcasestr.c

21 
	~<c⁄fig.h
>

24 
	~<°rög.h
>

26 
	~<˘y≥.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°rögs.h
>

30 
	#TOLOWER
(
Ch
Ë(
	`isuµî
 (ChË? 
	`tﬁowî
 (ChË: (Ch))

	)

33 
	#RETURN_TYPE
 *

	)

34 
	#AVAILABLE
(
h
, 
h_l
, 
j
, 
n_l
) \

35 (!
	`memchr
 ((
h
Ë+ (
h_l
), '\0', (
j
Ë+ (
n_l
) - (h_l)) \

36 && ((
h_l
Ë(
j
Ë+ (
n_l
)))

	)

37 
	#CANON_ELEMENT
(
c
Ë
	`TOLOWER
 (c)

	)

38 
	#CMP_FUNC
(
p1
, 
p2
, 
l
) \

39 
	`°∫ˇ£cmp
 ((c⁄° *Ë(
p1
), (c⁄° *Ë(
p2
), 
l
)

	)

40 
	~"°r-two-way.h
"

46 
	$°rˇ£°r
 (c⁄° *
hay°ack_°¨t
, c⁄° *
√edÀ_°¨t
)

48 c⁄° *
hay°ack
 = 
hay°ack_°¨t
;

49 c⁄° *
√edÀ
 = 
√edÀ_°¨t
;

50 
size_t
 
√edÀ_Àn
;

51 
size_t
 
hay°ack_Àn
;

52 
boﬁ
 
ok
 = 
åue
;

57 *
hay°ack
 && *
√edÀ
)

59 
ok
 &(
	`TOLOWER
 ((Ë*
hay°ack
)

60 =
	`TOLOWER
 ((Ë*
√edÀ
));

61 
hay°ack
++;

62 
√edÀ
++;

64 i‡(*
√edÀ
)

65  
NULL
;

66 i‡(
ok
)

67  (*Ë
hay°ack_°¨t
;

68 
√edÀ_Àn
 = 
√edÀ
 - 
√edÀ_°¨t
;

69 
hay°ack
 = 
hay°ack_°¨t
 + 1;

70 
hay°ack_Àn
 = 
√edÀ_Àn
 - 1;

75 i‡(
√edÀ_Àn
 < 
LONG_NEEDLE_THRESHOLD
)

76  
	`two_way_sh‹t_√edÀ
 ((c⁄° *Ë
hay°ack
,

77 
hay°ack_Àn
,

78 (c⁄° *Ë
√edÀ_°¨t
,

79 
√edÀ_Àn
);

80  
	`two_way_l⁄g_√edÀ
 ((c⁄° *Ë
hay°ack
, 
hay°ack_Àn
,

81 (c⁄° *Ë
√edÀ_°¨t
,

82 
√edÀ_Àn
);

83 
	}
}

85 #unde‡
LONG_NEEDLE_THRESHOLD


	@lib/strchrnul.c

17 
	~<c⁄fig.h
>

20 
	~<°rög.h
>

24 
	$°rch∫ul
 (c⁄° *
s
, 
c_ö
)

31 
	tl⁄gw‹d
;

33 c⁄° *
ch¨_±r
;

34 c⁄° 
l⁄gw‹d
 *
l⁄gw‹d_±r
;

35 
l⁄gw‹d
 
ª≥©ed_⁄e
;

36 
l⁄gw‹d
 
ª≥©ed_c
;

37 
c
;

39 
c
 = (Ë
c_ö
;

40 i‡(!
c
)

41  
	`øwmemchr
 (
s
, 0);

45 
ch¨_±r
 = (c⁄° *Ë
s
;

46 (
size_t
Ë
ch¨_±r
 %  (
l⁄gw‹d
) != 0;

47 ++
ch¨_±r
)

48 i‡(!*
ch¨_±r
 || *ch¨_±∏=
c
)

49  (*Ë
ch¨_±r
;

51 
l⁄gw‹d_±r
 = (c⁄° 
l⁄gw‹d
 *Ë
ch¨_±r
;

59 
ª≥©ed_⁄e
 = 0x01010101;

60 
ª≥©ed_c
 = 
c
 | (c << 8);

61 
ª≥©ed_c
 |=Ñepeated_c << 16;

62 i‡(0xffffffffU < (
l⁄gw‹d
) -1)

64 
ª≥©ed_⁄e
 |=Ñepeated_one << 31 << 1;

65 
ª≥©ed_c
 |=Ñepeated_c << 31 << 1;

66 i‡(8 <  (
l⁄gw‹d
))

68 
size_t
 
i
;

70 
i
 = 64; i <  (
l⁄gw‹d
) * 8; i *= 2)

72 
ª≥©ed_⁄e
 |ª≥©ed_⁄ê<< 
i
;

73 
ª≥©ed_c
 |ª≥©ed_¯<< 
i
;

119 
l⁄gw‹d
 
l⁄gw‹d1
 = *
l⁄gw‹d_±r
 ^ 
ª≥©ed_c
;

120 
l⁄gw‹d
 
l⁄gw‹d2
 = *
l⁄gw‹d_±r
;

122 i‡(((((
l⁄gw‹d1
 - 
ª≥©ed_⁄e
) & ~longword1)

123 | ((
l⁄gw‹d2
 - 
ª≥©ed_⁄e
) & ~longword2))

124 & (
ª≥©ed_⁄e
 << 7)) != 0)

126 
l⁄gw‹d_±r
++;

129 
ch¨_±r
 = (c⁄° *Ë
l⁄gw‹d_±r
;

138 
ch¨_±r
 = (*Ë
l⁄gw‹d_±r
;

139 *
ch¨_±r
 && (*ch¨_±∏!
c
))

140 
ch¨_±r
++;

141  (*Ë
ch¨_±r
;

142 
	}
}

	@lib/streq.h

21 #i‚de‡
_GL_STREQ_H


22 
	#_GL_STREQ_H


	)

24 
	~<°rög.h
>

34 #i‡
deföed
 (
__GNUC__
Ë&& deföed (
__OPTIMIZE__
)

36 
ölöe
 

37 
	$°ªq9
 (c⁄° *
s1
, c⁄° *
s2
)

39  
	`°rcmp
 (
s1
 + 9, 
s2
 + 9) == 0;

40 
	}
}

42 
ölöe
 

43 
	$°ªq8
 (c⁄° *
s1
, c⁄° *
s2
, 
s28
)

45 i‡(
s1
[8] =
s28
)

47 i‡(
s28
 == 0)

50  
	`°ªq9
 (
s1
, 
s2
);

54 
	}
}

56 
ölöe
 

57 
	$°ªq7
 (c⁄° *
s1
, c⁄° *
s2
, 
s27
, 
s28
)

59 i‡(
s1
[7] =
s27
)

61 i‡(
s27
 == 0)

64  
	`°ªq8
 (
s1
, 
s2
, 
s28
);

68 
	}
}

70 
ölöe
 

71 
	$°ªq6
 (c⁄° *
s1
, c⁄° *
s2
, 
s26
, 
s27
, 
s28
)

73 i‡(
s1
[6] =
s26
)

75 i‡(
s26
 == 0)

78  
	`°ªq7
 (
s1
, 
s2
, 
s27
, 
s28
);

82 
	}
}

84 
ölöe
 

85 
	$°ªq5
 (c⁄° *
s1
, c⁄° *
s2
, 
s25
, 
s26
, 
s27
, 
s28
)

87 i‡(
s1
[5] =
s25
)

89 i‡(
s25
 == 0)

92  
	`°ªq6
 (
s1
, 
s2
, 
s26
, 
s27
, 
s28
);

96 
	}
}

98 
ölöe
 

99 
	$°ªq4
 (c⁄° *
s1
, c⁄° *
s2
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

101 i‡(
s1
[4] =
s24
)

103 i‡(
s24
 == 0)

106  
	`°ªq5
 (
s1
, 
s2
, 
s25
, 
s26
, 
s27
, 
s28
);

110 
	}
}

112 
ölöe
 

113 
	$°ªq3
 (c⁄° *
s1
, c⁄° *
s2
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

115 i‡(
s1
[3] =
s23
)

117 i‡(
s23
 == 0)

120  
	`°ªq4
 (
s1
, 
s2
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
);

124 
	}
}

126 
ölöe
 

127 
	$°ªq2
 (c⁄° *
s1
, c⁄° *
s2
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

129 i‡(
s1
[2] =
s22
)

131 i‡(
s22
 == 0)

134  
	`°ªq3
 (
s1
, 
s2
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
);

138 
	}
}

140 
ölöe
 

141 
	$°ªq1
 (c⁄° *
s1
, c⁄° *
s2
, 
s21
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

143 i‡(
s1
[1] =
s21
)

145 i‡(
s21
 == 0)

148  
	`°ªq2
 (
s1
, 
s2
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
);

152 
	}
}

154 
ölöe
 

155 
	$°ªq0
 (c⁄° *
s1
, c⁄° *
s2
, 
s20
, 
s21
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

157 i‡(
s1
[0] =
s20
)

159 i‡(
s20
 == 0)

162  
	`°ªq1
 (
s1
, 
s2
, 
s21
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
);

166 
	}
}

168 
	#STREQ
(
s1
,
s2
,
s20
,
s21
,
s22
,
s23
,
s24
,
s25
,
s26
,
s27
,
s28
) \

169 
	`°ªq0
 (
s1
, 
s2
, 
s20
, 
s21
, 
s22
, 
s23
, 
s24
, 
s25
, 
s26
, 
s27
, 
s28
)

	)

173 
	#STREQ
(
s1
,
s2
,
s20
,
s21
,
s22
,
s23
,
s24
,
s25
,
s26
,
s27
,
s28
) \

174 (
	`°rcmp
 (
s1
, 
s2
Ë=0)

	)

	@lib/strerror-override.c

20 
	~<c⁄fig.h
>

22 
	~"°ªº‹-ovîride.h
"

24 
	~<î∫o.h
>

26 #i‡
GNULIB_deföed_ESOCK


27 #i‡
HAVE_WINSOCK2_H


28 
	~<wösock2.h
>

35 
	$°ªº‹_ovîride
 (
î∫um
)

38 
î∫um
)

40 #i‡
REPLACE_STRERROR_0


45 #i‡
GNULIB_deföed_ETXTBSY


46 
ETXTBSY
:

50 #i‡
GNULIB_deföed_ESOCK


52 
EINPROGRESS
:

54 
EALREADY
:

56 
ENOTSOCK
:

58 
EDESTADDRREQ
:

60 
EMSGSIZE
:

62 
EPROTOTYPE
:

64 
ENOPROTOOPT
:

66 
EPROTONOSUPPORT
:

68 
ESOCKTNOSUPPORT
:

70 
EOPNOTSUPP
:

72 
EPFNOSUPPORT
:

74 
EAFNOSUPPORT
:

76 
EADDRINUSE
:

78 
EADDRNOTAVAIL
:

80 
ENETDOWN
:

82 
ENETUNREACH
:

84 
ENETRESET
:

86 
ECONNABORTED
:

88 
ECONNRESET
:

90 
ENOBUFS
:

92 
EISCONN
:

94 
ENOTCONN
:

96 
ESHUTDOWN
:

98 
ETOOMANYREFS
:

100 
ETIMEDOUT
:

102 
ECONNREFUSED
:

104 
ELOOP
:

106 
EHOSTDOWN
:

108 
EHOSTUNREACH
:

110 
EPROCLIM
:

112 
EUSERS
:

114 
EDQUOT
:

116 
ESTALE
:

118 
EREMOTE
:

120 #i‡
HAVE_WINSOCK2_H


124 
WSA_OPERATION_ABORTED
:

126 
WSA_IO_INCOMPLETE
:

128 
WSA_IO_PENDING
:

173 
WSASYSNOTREADY
:

175 
WSAVERNOTSUPPORTED
:

177 
WSANOTINITIALISED
:

179 
WSAEDISCON
:

181 
WSAENOMORE
: 
WSA_E_NO_MORE
:

183 
WSAECANCELLED
: 
WSA_E_CANCELLED
:

185 
WSAEINVALIDPROCTABLE
:

187 
WSAEINVALIDPROVIDER
:

189 
WSAEPROVIDERFAILEDINIT
:

191 
WSASYSCALLFAILURE
:

193 
WSASERVICE_NOT_FOUND
:

195 
WSATYPE_NOT_FOUND
:

197 
WSAEREFUSED
:

199 
WSAHOST_NOT_FOUND
:

201 
WSATRY_AGAIN
:

203 
WSANO_RECOVERY
:

205 
WSANO_DATA
:

211 #i‡
GNULIB_deföed_ENOMSG


212 
ENOMSG
:

216 #i‡
GNULIB_deföed_EIDRM


217 
EIDRM
:

221 #i‡
GNULIB_deföed_ENOLINK


222 
ENOLINK
:

226 #i‡
GNULIB_deföed_EPROTO


227 
EPROTO
:

231 #i‡
GNULIB_deföed_EMULTIHOP


232 
EMULTIHOP
:

236 #i‡
GNULIB_deföed_EBADMSG


237 
EBADMSG
:

241 #i‡
GNULIB_deföed_EOVERFLOW


242 
EOVERFLOW
:

246 #i‡
GNULIB_deföed_ENOTSUP


247 
ENOTSUP
:

251 #i‡
GNULIB_deföed_ENETRESET


252 
ENETRESET
:

256 #i‡
GNULIB_deföed_ECONNABORTED


257 
ECONNABORTED
:

261 #i‡
GNULIB_deföed_ESTALE


262 
ESTALE
:

266 #i‡
GNULIB_deföed_EDQUOT


267 
EDQUOT
:

271 #i‡
GNULIB_deföed_ECANCELED


272 
ECANCELED
:

277  
NULL
;

279 
	}
}

	@lib/strerror-override.h

18 #i‚de‡
_GL_STRERROR_OVERRIDE_H


19 
	#_GL_STRERROR_OVERRIDE_H


	)

21 
	~<î∫o.h
>

22 
	~<°ddef.h
>

27 
	#STACKBUF_LEN
 256

	)

31 #i‡
REPLACE_STRERROR_0
 \

32 || 
	gGNULIB_deföed_ETXTBSY
 \

33 || 
	gGNULIB_deföed_ESOCK
 \

34 || 
	gGNULIB_deföed_ENOMSG
 \

35 || 
	gGNULIB_deföed_EIDRM
 \

36 || 
	gGNULIB_deföed_ENOLINK
 \

37 || 
	gGNULIB_deföed_EPROTO
 \

38 || 
	gGNULIB_deföed_EMULTIHOP
 \

39 || 
	gGNULIB_deföed_EBADMSG
 \

40 || 
	gGNULIB_deföed_EOVERFLOW
 \

41 || 
	gGNULIB_deföed_ENOTSUP
 \

42 || 
	gGNULIB_deföed_ENETRESET
 \

43 || 
	gGNULIB_deföed_ECONNABORTED
 \

44 || 
	gGNULIB_deföed_ESTALE
 \

45 || 
	gGNULIB_deföed_EDQUOT
 \

46 || 
GNULIB_deföed_ECANCELED


47 c⁄° *
°ªº‹_ovîride
 (
î∫um
);

49 
	#°ªº‹_ovîride
(
ign‹ed
Ë
NULL


	)

	@lib/strerror.c

18 
	~<c⁄fig.h
>

21 
	~<°rög.h
>

23 
	~<î∫o.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

28 
	~"öçr›s.h
"

29 
	~"°ªº‹-ovîride.h
"

30 
	~"vîify.h
"

33 #unde‡
•rötf


36 
	$°ªº‹
 (
n
)

37 #unde‡
°ªº‹


39 
buf
[
STACKBUF_LEN
];

40 
size_t
 
Àn
;

44 c⁄° *
msg
 = 
	`°ªº‹_ovîride
 (
n
);

45 i‡(
msg
)

46  (*Ë
msg
;

48 
msg
 = 
	`°ªº‹
 (
n
);

55 i‡(!
msg
 || !*msg)

57 c⁄° 
fmt
[] = "UnknownÉrror %d";

58 
	`vîify
 ( 
buf
 > (
fmt
Ë+ 
	`INT_STRLEN_BOUND
 (
n
));

59 
	`•rötf
 (
buf
, 
fmt
, 
n
);

60 
î∫o
 = 
EINVAL
;

61  
buf
;

65 
Àn
 = 
	`°æí
 (
msg
);

66 i‡( 
buf
 <
Àn
)

67 
	`ab‹t
 ();

69  
	`mem˝y
 (
buf
, 
msg
, 
Àn
 + 1);

70 
	}
}

	@lib/strerror_r.c

20 
	~<c⁄fig.h
>

23 
	#_NETBSD_SOURCE
 1

	)

26 
	~<°rög.h
>

28 
	~<î∫o.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

32 
	~"°ªº‹-ovîride.h
"

34 #i‡(
__GLIBC__
 >2 || 
deföed
 
__UCLIBC__
 || deföed 
__CYGWIN__
Ë&& 
HAVE___XPG_STRERROR_R


36 
	#USE_XPG_STRERROR_R
 1

	)

38 #ñi‡
HAVE_DECL_STRERROR_R
 && !(
__GLIBC__
 >2 || 
deföed
 
__UCLIBC__
 || deföed 
__CYGWIN__
)

43 
	~<limôs.h
>

45 
	#USE_SYSTEM_STRERROR_R
 1

	)

52 #unde‡
°ªº‹


54 
	#USE_SYSTEM_STRERROR
 1

	)

56 #i‡
deföed
 
__NëBSD__
 || deföed 
__hpux
 || ((deföed 
_WIN32
 || deföed 
__WIN32__
Ë&& !deföed 
__CYGWIN__
Ë|| deföed 
__sgi
 || (deföed 
__sun
 && !deföed 
_LP64
) || defined __CYGWIN__

61 #i‡
HAVE_CATGETS


62 
	~<∆_ty≥s.h
>

67 #i‡
deföed
 
__hpux
 || deföed 
__sgi


68 
sys_√º
;

69 *
sys_îæi°
[];

73 #i‡
deföed
 
__sun
 && !deföed 
_LP64


74 
sys_√º
;

79 
	~"g…hªad/lock.h
"

83 
	$gl_lock_deföe_öôülized
(, 
°ªº‹_lock
)

92 
	$ß„_c›y
 (*
buf
, 
size_t
 
buÊí
, c⁄° *
msg
)

94 
size_t
 
Àn
 = 
	`°æí
 (
msg
);

95 
ªt
;

97 i‡(
Àn
 < 
buÊí
)

101 
	`mem˝y
 (
buf
, 
msg
, 
Àn
 + 1);

102 
ªt
 = 0;

106 
	`mem˝y
 (
buf
, 
msg
, 
buÊí
 - 1);

107 
buf
[
buÊí
 - 1] = '\0';

108 
ªt
 = 
ERANGE
;

110  
ªt
;

111 
	}
}

115 
	$°ªº‹_r
 (
î∫um
, *
buf
, 
size_t
 
buÊí
)

116 #unde‡
°ªº‹_r


120 i‡(
buÊí
 <= 1)

122 i‡(
buÊí
)

123 *
buf
 = '\0';

124  
ERANGE
;

126 *
buf
 = '\0';

130 c⁄° *
msg
 = 
	`°ªº‹_ovîride
 (
î∫um
);

132 i‡(
msg
)

133  
	`ß„_c›y
 (
buf
, 
buÊí
, 
msg
);

137 
ªt
;

138 
ßved_î∫o
 = 
î∫o
;

140 #i‡
USE_XPG_STRERROR_R


143 
	`__xpg_°ªº‹_r
 (
î∫um
, *
buf
, 
size_t
 
buÊí
);

145 
ªt
 = 
	`__xpg_°ªº‹_r
 (
î∫um
, 
buf
, 
buÊí
);

146 i‡(
ªt
 < 0)

147 
ªt
 = 
î∫o
;

148 i‡(!*
buf
)

153 
	`ß„_c›y
 (
buf
, 
buÊí
, 
	`°ªº‹_r
 (
î∫um
, buf, buflen));

157 #ñi‡
USE_SYSTEM_STRERROR_R


159 i‡(
buÊí
 > 
INT_MAX
)

160 
buÊí
 = 
INT_MAX
;

162 #ifde‡
__hpux


166 
°ackbuf
[80];

168 i‡(
buÊí
 <  
°ackbuf
)

170 
ªt
 = 
	`°ªº‹_r
 (
î∫um
, 
°ackbuf
,  stackbuf);

171 i‡(
ªt
 == 0)

172 
ªt
 = 
	`ß„_c›y
 (
buf
, 
buÊí
, 
°ackbuf
);

175 
ªt
 = 
	`°ªº‹_r
 (
î∫um
, 
buf
, 
buÊí
);

178 
ªt
 = 
	`°ªº‹_r
 (
î∫um
, 
buf
, 
buÊí
);

181 i‡(
ªt
 < 0)

182 
ªt
 = 
î∫o
;

185 #ifde‡
_AIX


188 i‡(!
ªt
 && 
	`°æí
 (
buf
Ë=
buÊí
 - 1)

190 
°ackbuf
[
STACKBUF_LEN
];

191 
size_t
 
Àn
;

192 
	`°ªº‹_r
 (
î∫um
, 
°ackbuf
,  stackbuf);

193 
Àn
 = 
	`°æí
 (
°ackbuf
);

195 i‡(
Àn
 + 1 = 
°ackbuf
)

196 
	`ab‹t
 ();

197 i‡(
buÊí
 <
Àn
)

198 
ªt
 = 
ERANGE
;

207 i‡(
ªt
 =
ERANGE
 && 
	`°æí
 (
buf
Ë< 
buÊí
 - 1)

209 
°ackbuf
[
STACKBUF_LEN
];

212 i‡(
	`°ªº‹_r
 (
î∫um
, 
°ackbuf
,  sèckbufË=
ERANGE
)

213 
	`ab‹t
 ();

214 
	`ß„_c›y
 (
buf
, 
buÊí
, 
°ackbuf
);

223 #i‡
deföed
 
__NëBSD__
 || deföed 
__hpux
 || ((deföed 
_WIN32
 || deföed 
__WIN32__
Ë&& !deföed 
__CYGWIN__
) || defined __CYGWIN__

230 i‡(
î∫um
 >0 &&Éºnum < 
sys_√º
)

232 #i‡
HAVE_CATGETS
 && (
deföed
 
__NëBSD__
 || deföed 
__hpux
)

233 #i‡
deföed
 
__NëBSD__


234 
∆_ˇtd
 
ˇtd
 = 
	`ˇt›í
 ("libc", 
NL_CAT_LOCALE
);

235 c⁄° *
îrmsg
 =

236 (
ˇtd
 !(
∆_ˇtd
)-1

237 ? 
	`ˇtgës
 (
ˇtd
, 1, 
î∫um
, 
sys_îæi°
[errnum])

238 : 
sys_îæi°
[
î∫um
]);

240 #i‡
deföed
 
__hpux


241 
∆_ˇtd
 
ˇtd
 = 
	`ˇt›í
 ("≥º‹", 
NL_CAT_LOCALE
);

242 c⁄° *
îrmsg
 =

243 (
ˇtd
 !(
∆_ˇtd
)-1

244 ? 
	`ˇtgës
 (
ˇtd
, 1, 1 + 
î∫um
, 
sys_îæi°
[errnum])

245 : 
sys_îæi°
[
î∫um
]);

248 c⁄° *
îrmsg
 = 
sys_îæi°
[
î∫um
];

250 i‡(
îrmsg
 =
NULL
 || *errmsg == '\0')

251 
ªt
 = 
EINVAL
;

253 
ªt
 = 
	`ß„_c›y
 (
buf
, 
buÊí
, 
îrmsg
);

254 #i‡
HAVE_CATGETS
 && (
deföed
 
__NëBSD__
 || deföed 
__hpux
)

255 i‡(
ˇtd
 !(
∆_ˇtd
)-1)

256 
	`ˇt˛o£
 (
ˇtd
);

260 
ªt
 = 
EINVAL
;

262 #ñi‡
deföed
 
__sgi
 || (deföed 
__sun
 && !deföed 
_LP64
)

266 i‡(
î∫um
 >0 &&Éºnum < 
sys_√º
)

268 *
îrmsg
 = 
	`°ªº‹
 (
î∫um
);

270 i‡(
îrmsg
 =
NULL
 || *errmsg == '\0')

271 
ªt
 = 
EINVAL
;

273 
ªt
 = 
	`ß„_c›y
 (
buf
, 
buÊí
, 
îrmsg
);

276 
ªt
 = 
EINVAL
;

280 
	`gl_lock_lock
 (
°ªº‹_lock
);

283 *
îrmsg
 = 
	`°ªº‹
 (
î∫um
);

288 i‡(
îrmsg
 =
NULL
 || *errmsg == '\0')

289 
ªt
 = 
EINVAL
;

291 
ªt
 = 
	`ß„_c›y
 (
buf
, 
buÊí
, 
îrmsg
);

294 
	`gl_lock_u∆ock
 (
°ªº‹_lock
);

300 i‡(
ªt
 =
EINVAL
 && !*
buf
)

301 
	`¢¥ötf
 (
buf
, 
buÊí
, "Unknow¿îr‹ %d", 
î∫um
);

303 
î∫o
 = 
ßved_î∫o
;

304  
ªt
;

306 
	}
}

	@lib/string.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_STRING_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

29 #@
INCLUDE_NEXT
@ @
NEXT_STRING_H
@

31 #i‚de‡
_
@
GUARD_PREFIX
@
_STRING_H


32 
	#_
@
GUARD_PREFIX
@
_STRING_H


	)

35 
	~<°ddef.h
>

38 #i‡@
GNULIB_MBSLEN
@ && 
deföed
 
__MúBSD__


39 
	~<wch¨.h
>

44 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 96)

45 
	#_GL_ATTRIBUTE_PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

47 
	#_GL_ATTRIBUTE_PURE


	)

52 #i‡(@
GNULIB_STRSIGNAL
@ || 
deföed
 
GNULIB_POSIXCHECK
Ë&& deföed 
__NëBSD__
 \

53 && ! 
deföed
 
	g__GLIBC__


54 
	~<uni°d.h
>

65 #i‡@
GNULIB_FFSL
@

66 #i‡!@
HAVE_FFSL
@

67 
_GL_FUNCDECL_SYS
 (
ff¶
, , (
i
));

69 
_GL_CXXALIAS_SYS
 (
ff¶
, , (
i
));

70 
_GL_CXXALIASWARN
 (
ff¶
);

71 #ñi‡
deföed
 
GNULIB_POSIXCHECK


72 #unde‡
ff¶


73 #i‡
HAVE_RAW_DECL_FFSL


74 
_GL_WARN_ON_USE
 (
ff¶
, "ffsl isÇotÖortable - useÅhe ffsl module");

80 #i‡@
GNULIB_FFSLL
@

81 #i‡!@
HAVE_FFSLL
@

82 
_GL_FUNCDECL_SYS
 (
ff¶l
, , (
i
));

84 
_GL_CXXALIAS_SYS
 (
ff¶l
, , (
i
));

85 
_GL_CXXALIASWARN
 (
ff¶l
);

86 #ñi‡
deföed
 
GNULIB_POSIXCHECK


87 #unde‡
ff¶l


88 #i‡
HAVE_RAW_DECL_FFSLL


89 
_GL_WARN_ON_USE
 (
ff¶l
, "ffsll isÇotÖortable - useÅhe ffsll module");

95 #i‡@
GNULIB_MEMCHR
@

96 #i‡@
REPLACE_MEMCHR
@

97 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

98 
	#memchr
 
Ωl_memchr


	)

100 
_GL_FUNCDECL_RPL
 (
memchr
, *, (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

101 
_GL_ATTRIBUTE_PURE


102 
_GL_ARG_NONNULL
 ((1)));

103 
_GL_CXXALIAS_RPL
 (
memchr
, *, (c⁄° *
__s
, 
__c
, 
size_t
 
__n
));

105 #i‡! @
HAVE_MEMCHR
@

106 
_GL_FUNCDECL_SYS
 (
memchr
, *, (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

107 
_GL_ATTRIBUTE_PURE


108 
_GL_ARG_NONNULL
 ((1)));

113 
_GL_CXXALIAS_SYS_CAST2
 (
memchr
,

114 *, (c⁄° *
__s
, 
__c
, 
size_t
 
__n
),

115 c⁄° *, (c⁄° *
__s
, 
__c
, 
size_t
 
__n
));

117 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

118 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

119 
_GL_CXXALIASWARN1
 (
memchr
, *, (*
__s
, 
__c
, 
size_t
 
__n
));

120 
_GL_CXXALIASWARN1
 (
memchr
, const *,

121 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
));

123 
_GL_CXXALIASWARN
 (
memchr
);

125 #ñi‡
deföed
 
GNULIB_POSIXCHECK


126 #unde‡
memchr


128 
_GL_WARN_ON_USE
 (
memchr
, "memchr hasÖlatform-specific bugs - "

133 #i‡@
GNULIB_MEMMEM
@

134 #i‡@
REPLACE_MEMMEM
@

135 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

136 
	#memmem
 
Ωl_memmem


	)

138 
_GL_FUNCDECL_RPL
 (
memmem
, *,

139 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ack_Àn
,

140 c⁄° *
__√edÀ
, 
size_t
 
__√edÀ_Àn
)

141 
_GL_ATTRIBUTE_PURE


142 
_GL_ARG_NONNULL
 ((1, 3)));

143 
_GL_CXXALIAS_RPL
 (
memmem
, *,

144 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ack_Àn
,

145 c⁄° *
__√edÀ
, 
size_t
 
__√edÀ_Àn
));

147 #i‡! @
HAVE_DECL_MEMMEM
@

148 
_GL_FUNCDECL_SYS
 (
memmem
, *,

149 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ack_Àn
,

150 c⁄° *
__√edÀ
, 
size_t
 
__√edÀ_Àn
)

151 
_GL_ATTRIBUTE_PURE


152 
_GL_ARG_NONNULL
 ((1, 3)));

154 
_GL_CXXALIAS_SYS
 (
memmem
, *,

155 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ack_Àn
,

156 c⁄° *
__√edÀ
, 
size_t
 
__√edÀ_Àn
));

158 
_GL_CXXALIASWARN
 (
memmem
);

159 #ñi‡
deföed
 
GNULIB_POSIXCHECK


160 #unde‡
memmem


161 #i‡
HAVE_RAW_DECL_MEMMEM


162 
_GL_WARN_ON_USE
 (
memmem
, "memmem is unportableánd often quadratic - "

170 #i‡@
GNULIB_MEMPCPY
@

171 #i‡! @
HAVE_MEMPCPY
@

172 
_GL_FUNCDECL_SYS
 (
memp˝y
, *,

173 (*
ª°ri˘
 
__de°
, c⁄° *ª°ri˘ 
__§c
,

174 
size_t
 
__n
)

175 
_GL_ARG_NONNULL
 ((1, 2)));

177 
_GL_CXXALIAS_SYS
 (
memp˝y
, *,

178 (*
ª°ri˘
 
__de°
, c⁄° *ª°ri˘ 
__§c
,

179 
size_t
 
__n
));

180 
_GL_CXXALIASWARN
 (
memp˝y
);

181 #ñi‡
deföed
 
GNULIB_POSIXCHECK


182 #unde‡
memp˝y


183 #i‡
HAVE_RAW_DECL_MEMPCPY


184 
_GL_WARN_ON_USE
 (
memp˝y
, "mempcpy is unportable - "

190 #i‡@
GNULIB_MEMRCHR
@

191 #i‡! @
HAVE_DECL_MEMRCHR
@

192 
_GL_FUNCDECL_SYS
 (
memrchr
, *, (c⁄° *, , 
size_t
)

193 
_GL_ATTRIBUTE_PURE


194 
_GL_ARG_NONNULL
 ((1)));

199 
_GL_CXXALIAS_SYS_CAST2
 (
memrchr
,

200 *, (c⁄° *, , 
size_t
),

201 c⁄° *, (c⁄° *, , 
size_t
));

202 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

203 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

204 
_GL_CXXALIASWARN1
 (
memrchr
, *, (*, , 
size_t
));

205 
_GL_CXXALIASWARN1
 (
memrchr
, c⁄° *, (c⁄° *, , 
size_t
));

207 
_GL_CXXALIASWARN
 (
memrchr
);

209 #ñi‡
deföed
 
GNULIB_POSIXCHECK


210 #unde‡
memrchr


211 #i‡
HAVE_RAW_DECL_MEMRCHR


212 
_GL_WARN_ON_USE
 (
memrchr
, "memrchr is unportable - "

220 #i‡@
GNULIB_RAWMEMCHR
@

221 #i‡! @
HAVE_RAWMEMCHR
@

222 
_GL_FUNCDECL_SYS
 (
øwmemchr
, *, (c⁄° *
__s
, 
__c_ö
)

223 
_GL_ATTRIBUTE_PURE


224 
_GL_ARG_NONNULL
 ((1)));

229 
_GL_CXXALIAS_SYS_CAST2
 (
øwmemchr
,

230 *, (c⁄° *
__s
, 
__c_ö
),

231 c⁄° *, (c⁄° *
__s
, 
__c_ö
));

232 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

233 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

234 
_GL_CXXALIASWARN1
 (
øwmemchr
, *, (*
__s
, 
__c_ö
));

235 
_GL_CXXALIASWARN1
 (
øwmemchr
, c⁄° *, (c⁄° *
__s
, 
__c_ö
));

237 
_GL_CXXALIASWARN
 (
øwmemchr
);

239 #ñi‡
deföed
 
GNULIB_POSIXCHECK


240 #unde‡
øwmemchr


241 #i‡
HAVE_RAW_DECL_RAWMEMCHR


242 
_GL_WARN_ON_USE
 (
øwmemchr
, "rawmemchr is unportable - "

248 #i‡@
GNULIB_STPCPY
@

249 #i‡! @
HAVE_STPCPY
@

250 
_GL_FUNCDECL_SYS
 (
°p˝y
, *,

251 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
)

252 
_GL_ARG_NONNULL
 ((1, 2)));

254 
_GL_CXXALIAS_SYS
 (
°p˝y
, *,

255 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
));

256 
_GL_CXXALIASWARN
 (
°p˝y
);

257 #ñi‡
deföed
 
GNULIB_POSIXCHECK


258 #unde‡
°p˝y


259 #i‡
HAVE_RAW_DECL_STPCPY


260 
_GL_WARN_ON_USE
 (
°p˝y
, "stpcpy is unportable - "

267 #i‡@
GNULIB_STPNCPY
@

268 #i‡@
REPLACE_STPNCPY
@

269 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

270 #unde‡
°≤˝y


271 
	#°≤˝y
 
Ωl_°≤˝y


	)

273 
_GL_FUNCDECL_RPL
 (
°≤˝y
, *,

274 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
,

275 
size_t
 
__n
)

276 
_GL_ARG_NONNULL
 ((1, 2)));

277 
_GL_CXXALIAS_RPL
 (
°≤˝y
, *,

278 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
,

279 
size_t
 
__n
));

281 #i‡! @
HAVE_STPNCPY
@

282 
_GL_FUNCDECL_SYS
 (
°≤˝y
, *,

283 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
,

284 
size_t
 
__n
)

285 
_GL_ARG_NONNULL
 ((1, 2)));

287 
_GL_CXXALIAS_SYS
 (
°≤˝y
, *,

288 (*
ª°ri˘
 
__d°
, c⁄° *ª°ri˘ 
__§c
,

289 
size_t
 
__n
));

291 
_GL_CXXALIASWARN
 (
°≤˝y
);

292 #ñi‡
deföed
 
GNULIB_POSIXCHECK


293 #unde‡
°≤˝y


294 #i‡
HAVE_RAW_DECL_STPNCPY


295 
_GL_WARN_ON_USE
 (
°≤˝y
, "stpncpy is unportable - "

300 #i‡
deföed
 
GNULIB_POSIXCHECK


303 #unde‡
°rchr


305 
_GL_WARN_ON_USE
 (
°rchr
, "strchr cannot work correctly on character strings "

311 #i‡@
GNULIB_STRCHRNUL
@

312 #i‡@
REPLACE_STRCHRNUL
@

313 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

314 
	#°rch∫ul
 
Ωl_°rch∫ul


	)

316 
_GL_FUNCDECL_RPL
 (
°rch∫ul
, *, (c⁄° *
__s
, 
__c_ö
)

317 
_GL_ATTRIBUTE_PURE


318 
_GL_ARG_NONNULL
 ((1)));

319 
_GL_CXXALIAS_RPL
 (
°rch∫ul
, *,

320 (c⁄° *
°r
, 
ch
));

322 #i‡! @
HAVE_STRCHRNUL
@

323 
_GL_FUNCDECL_SYS
 (
°rch∫ul
, *, (c⁄° *
__s
, 
__c_ö
)

324 
_GL_ATTRIBUTE_PURE


325 
_GL_ARG_NONNULL
 ((1)));

330 
_GL_CXXALIAS_SYS_CAST2
 (
°rch∫ul
,

331 *, (c⁄° *
__s
, 
__c_ö
),

332 c⁄° *, (c⁄° *
__s
, 
__c_ö
));

334 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

335 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

336 
_GL_CXXALIASWARN1
 (
°rch∫ul
, *, (*
__s
, 
__c_ö
));

337 
_GL_CXXALIASWARN1
 (
°rch∫ul
, c⁄° *, (c⁄° *
__s
, 
__c_ö
));

339 
_GL_CXXALIASWARN
 (
°rch∫ul
);

341 #ñi‡
deföed
 
GNULIB_POSIXCHECK


342 #unde‡
°rch∫ul


343 #i‡
HAVE_RAW_DECL_STRCHRNUL


344 
_GL_WARN_ON_USE
 (
°rch∫ul
, "strchrnul is unportable - "

350 #i‡@
GNULIB_STRDUP
@

351 #i‡@
REPLACE_STRDUP
@

352 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

353 #unde‡
°rdup


354 
	#°rdup
 
Ωl_°rdup


	)

356 
_GL_FUNCDECL_RPL
 (
°rdup
, *, (c⁄° *
__s
Ë
_GL_ARG_NONNULL
 ((1)));

357 
_GL_CXXALIAS_RPL
 (
°rdup
, *, (c⁄° *
__s
));

359 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
 && deföed 
°rdup


361 #unde‡
°rdup


363 #i‡!(@
HAVE_DECL_STRDUP
@ || 
deföed
 
°rdup
)

364 
_GL_FUNCDECL_SYS
 (
°rdup
, *, (c⁄° *
__s
Ë
_GL_ARG_NONNULL
 ((1)));

366 
_GL_CXXALIAS_SYS
 (
°rdup
, *, (c⁄° *
__s
));

368 
_GL_CXXALIASWARN
 (
°rdup
);

369 #ñi‡
deföed
 
GNULIB_POSIXCHECK


370 #unde‡
°rdup


371 #i‡
HAVE_RAW_DECL_STRDUP


372 
_GL_WARN_ON_USE
 (
°rdup
, "strdup is unportable - "

378 #i‡@
GNULIB_STRNCAT
@

379 #i‡@
REPLACE_STRNCAT
@

380 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

381 #unde‡
°∫ˇt


382 
	#°∫ˇt
 
Ωl_°∫ˇt


	)

384 
_GL_FUNCDECL_RPL
 (
°∫ˇt
, *, (*
de°
, c⁄° *
§c
, 
size_t
 
n
)

385 
_GL_ARG_NONNULL
 ((1, 2)));

386 
_GL_CXXALIAS_RPL
 (
°∫ˇt
, *, (*
de°
, c⁄° *
§c
, 
size_t
 
n
));

388 
_GL_CXXALIAS_SYS
 (
°∫ˇt
, *, (*
de°
, c⁄° *
§c
, 
size_t
 
n
));

390 
_GL_CXXALIASWARN
 (
°∫ˇt
);

391 #ñi‡
deföed
 
GNULIB_POSIXCHECK


392 #unde‡
°∫ˇt


393 #i‡
HAVE_RAW_DECL_STRNCAT


394 
_GL_WARN_ON_USE
 (
°∫ˇt
, "strncat is unportable - "

400 #i‡@
GNULIB_STRNDUP
@

401 #i‡@
REPLACE_STRNDUP
@

402 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

403 #unde‡
°∫dup


404 
	#°∫dup
 
Ωl_°∫dup


	)

406 
_GL_FUNCDECL_RPL
 (
°∫dup
, *, (c⁄° *
__°rög
, 
size_t
 
__n
)

407 
_GL_ARG_NONNULL
 ((1)));

408 
_GL_CXXALIAS_RPL
 (
°∫dup
, *, (c⁄° *
__°rög
, 
size_t
 
__n
));

410 #i‡! @
HAVE_DECL_STRNDUP
@

411 
_GL_FUNCDECL_SYS
 (
°∫dup
, *, (c⁄° *
__°rög
, 
size_t
 
__n
)

412 
_GL_ARG_NONNULL
 ((1)));

414 
_GL_CXXALIAS_SYS
 (
°∫dup
, *, (c⁄° *
__°rög
, 
size_t
 
__n
));

416 
_GL_CXXALIASWARN
 (
°∫dup
);

417 #ñi‡
deföed
 
GNULIB_POSIXCHECK


418 #unde‡
°∫dup


419 #i‡
HAVE_RAW_DECL_STRNDUP


420 
_GL_WARN_ON_USE
 (
°∫dup
, "strndup is unportable - "

428 #i‡@
GNULIB_STRNLEN
@

429 #i‡@
REPLACE_STRNLEN
@

430 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

431 #unde‡
°∫Àn


432 
	#°∫Àn
 
Ωl_°∫Àn


	)

434 
_GL_FUNCDECL_RPL
 (
°∫Àn
, 
size_t
, (c⁄° *
__°rög
, size_à
__maxÀn
)

435 
_GL_ATTRIBUTE_PURE


436 
_GL_ARG_NONNULL
 ((1)));

437 
_GL_CXXALIAS_RPL
 (
°∫Àn
, 
size_t
, (c⁄° *
__°rög
, size_à
__maxÀn
));

439 #i‡! @
HAVE_DECL_STRNLEN
@

440 
_GL_FUNCDECL_SYS
 (
°∫Àn
, 
size_t
, (c⁄° *
__°rög
, size_à
__maxÀn
)

441 
_GL_ATTRIBUTE_PURE


442 
_GL_ARG_NONNULL
 ((1)));

444 
_GL_CXXALIAS_SYS
 (
°∫Àn
, 
size_t
, (c⁄° *
__°rög
, size_à
__maxÀn
));

446 
_GL_CXXALIASWARN
 (
°∫Àn
);

447 #ñi‡
deföed
 
GNULIB_POSIXCHECK


448 #unde‡
°∫Àn


449 #i‡
HAVE_RAW_DECL_STRNLEN


450 
_GL_WARN_ON_USE
 (
°∫Àn
, "strnlen is unportable - "

455 #i‡
deföed
 
GNULIB_POSIXCHECK


460 #unde‡
°rc•n


462 
_GL_WARN_ON_USE
 (
°rc•n
, "strcspn cannot work correctly on character strings "

468 #i‡@
GNULIB_STRPBRK
@

469 #i‡! @
HAVE_STRPBRK
@

470 
_GL_FUNCDECL_SYS
 (
°Ωbrk
, *, (c⁄° *
__s
, c⁄° *
__ac˚±
)

471 
_GL_ATTRIBUTE_PURE


472 
_GL_ARG_NONNULL
 ((1, 2)));

477 
_GL_CXXALIAS_SYS_CAST2
 (
°Ωbrk
,

478 *, (c⁄° *
__s
, c⁄° *
__ac˚±
),

479 c⁄° *, (c⁄° *
__s
, c⁄° *
__ac˚±
));

480 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

481 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

482 
_GL_CXXALIASWARN1
 (
°Ωbrk
, *, (*
__s
, c⁄° *
__ac˚±
));

483 
_GL_CXXALIASWARN1
 (
°Ωbrk
, const *,

484 (c⁄° *
__s
, c⁄° *
__ac˚±
));

486 
_GL_CXXALIASWARN
 (
°Ωbrk
);

488 #i‡
deföed
 
GNULIB_POSIXCHECK


493 #unde‡
°Ωbrk


494 
_GL_WARN_ON_USE
 (
°Ωbrk
, "strpbrk cannot work correctly on character strings "

498 #ñi‡
deföed
 
GNULIB_POSIXCHECK


499 #unde‡
°Ωbrk


500 #i‡
HAVE_RAW_DECL_STRPBRK


501 
_GL_WARN_ON_USE
 (
°Ωbrk
, "strpbrk is unportable - "

506 #i‡
deföed
 
GNULIB_POSIXCHECK


509 #unde‡
°r•n


511 
_GL_WARN_ON_USE
 (
°r•n
, "strspn cannot work correctly on character strings "

516 #i‡
deföed
 
GNULIB_POSIXCHECK


519 #unde‡
°ºchr


521 
_GL_WARN_ON_USE
 (
°ºchr
, "strrchr cannot work correctly on character strings "

542 #i‡@
GNULIB_STRSEP
@

543 #i‡! @
HAVE_STRSEP
@

544 
_GL_FUNCDECL_SYS
 (
°r£p
, *,

545 (**
ª°ri˘
 
__°rögp
, c⁄° *ª°ri˘ 
__dñim
)

546 
_GL_ARG_NONNULL
 ((1, 2)));

548 
_GL_CXXALIAS_SYS
 (
°r£p
, *,

549 (**
ª°ri˘
 
__°rögp
, c⁄° *ª°ri˘ 
__dñim
));

550 
_GL_CXXALIASWARN
 (
°r£p
);

551 #i‡
deföed
 
GNULIB_POSIXCHECK


552 #unde‡
°r£p


553 
_GL_WARN_ON_USE
 (
°r£p
, "strsep cannot work correctly on character strings "

557 #ñi‡
deföed
 
GNULIB_POSIXCHECK


558 #unde‡
°r£p


559 #i‡
HAVE_RAW_DECL_STRSEP


560 
_GL_WARN_ON_USE
 (
°r£p
, "strsep is unportable - "

565 #i‡@
GNULIB_STRSTR
@

566 #i‡@
REPLACE_STRSTR
@

567 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

568 
	#°r°r
 
Ωl_°r°r


	)

570 
_GL_FUNCDECL_RPL
 (
°r°r
, *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

571 
_GL_ATTRIBUTE_PURE


572 
_GL_ARG_NONNULL
 ((1, 2)));

573 
_GL_CXXALIAS_RPL
 (
°r°r
, *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

578 
_GL_CXXALIAS_SYS_CAST2
 (
°r°r
,

579 *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
),

580 c⁄° *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

582 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

583 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

584 
_GL_CXXALIASWARN1
 (
°r°r
, *, (*
hay°ack
, c⁄° *
√edÀ
));

585 
_GL_CXXALIASWARN1
 (
°r°r
, const *,

586 (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

588 
_GL_CXXALIASWARN
 (
°r°r
);

590 #ñi‡
deföed
 
GNULIB_POSIXCHECK


595 #unde‡
°r°r


597 
_GL_WARN_ON_USE
 (
°r°r
, "strstr is quadratic on many systems,ánd cannot "

606 #i‡@
GNULIB_STRCASESTR
@

607 #i‡@
REPLACE_STRCASESTR
@

608 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

609 
	#°rˇ£°r
 
Ωl_°rˇ£°r


	)

611 
_GL_FUNCDECL_RPL
 (
°rˇ£°r
, *,

612 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

613 
_GL_ATTRIBUTE_PURE


614 
_GL_ARG_NONNULL
 ((1, 2)));

615 
_GL_CXXALIAS_RPL
 (
°rˇ£°r
, *,

616 (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

618 #i‡! @
HAVE_STRCASESTR
@

619 
_GL_FUNCDECL_SYS
 (
°rˇ£°r
, *,

620 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

621 
_GL_ATTRIBUTE_PURE


622 
_GL_ARG_NONNULL
 ((1, 2)));

627 
_GL_CXXALIAS_SYS_CAST2
 (
°rˇ£°r
,

628 *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
),

629 c⁄° *, (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

631 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

632 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

633 
_GL_CXXALIASWARN1
 (
°rˇ£°r
, *, (*
hay°ack
, c⁄° *
√edÀ
));

634 
_GL_CXXALIASWARN1
 (
°rˇ£°r
, const *,

635 (c⁄° *
hay°ack
, c⁄° *
√edÀ
));

637 
_GL_CXXALIASWARN
 (
°rˇ£°r
);

639 #ñi‡
deföed
 
GNULIB_POSIXCHECK


643 #unde‡
°rˇ£°r


644 #i‡
HAVE_RAW_DECL_STRCASESTR


645 
_GL_WARN_ON_USE
 (
°rˇ£°r
, "strcasestr does work correctly on character "

675 #i‡@
GNULIB_STRTOK_R
@

676 #i‡@
REPLACE_STRTOK_R
@

677 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

678 #unde‡
°πok_r


679 
	#°πok_r
 
Ωl_°πok_r


	)

681 
_GL_FUNCDECL_RPL
 (
°πok_r
, *,

682 (*
ª°ri˘
 
s
, c⁄° *ª°ri˘ 
dñim
,

683 **
ª°ri˘
 
ßve_±r
)

684 
_GL_ARG_NONNULL
 ((2, 3)));

685 
_GL_CXXALIAS_RPL
 (
°πok_r
, *,

686 (*
ª°ri˘
 
s
, c⁄° *ª°ri˘ 
dñim
,

687 **
ª°ri˘
 
ßve_±r
));

689 #i‡@
UNDEFINE_STRTOK_R
@ || 
deföed
 
GNULIB_POSIXCHECK


690 #unde‡
°πok_r


692 #i‡! @
HAVE_DECL_STRTOK_R
@

693 
_GL_FUNCDECL_SYS
 (
°πok_r
, *,

694 (*
ª°ri˘
 
s
, c⁄° *ª°ri˘ 
dñim
,

695 **
ª°ri˘
 
ßve_±r
)

696 
_GL_ARG_NONNULL
 ((2, 3)));

698 
_GL_CXXALIAS_SYS
 (
°πok_r
, *,

699 (*
ª°ri˘
 
s
, c⁄° *ª°ri˘ 
dñim
,

700 **
ª°ri˘
 
ßve_±r
));

702 
_GL_CXXALIASWARN
 (
°πok_r
);

703 #i‡
deföed
 
GNULIB_POSIXCHECK


704 
_GL_WARN_ON_USE
 (
°πok_r
, "strtok_r cannot work correctly on character "

708 #ñi‡
deföed
 
GNULIB_POSIXCHECK


709 #unde‡
°πok_r


710 #i‡
HAVE_RAW_DECL_STRTOK_R


711 
_GL_WARN_ON_USE
 (
°πok_r
, "strtok_r is unportable - "

720 #i‡@
GNULIB_MBSLEN
@

723 #ifde‡
__MúBSD__


724 #unde‡
mb¶í


726 #i‡@
HAVE_MBSLEN
@

727 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

728 
	#mb¶í
 
Ωl_mb¶í


	)

730 
_GL_FUNCDECL_RPL
 (
mb¶í
, 
size_t
, (c⁄° *
°rög
Ë
_GL_ARG_NONNULL
 ((1)));

731 
_GL_CXXALIAS_RPL
 (
mb¶í
, 
size_t
, (c⁄° *
°rög
));

733 
_GL_FUNCDECL_SYS
 (
mb¶í
, 
size_t
, (c⁄° *
°rög
Ë
_GL_ARG_NONNULL
 ((1)));

734 
_GL_CXXALIAS_SYS
 (
mb¶í
, 
size_t
, (c⁄° *
°rög
));

736 
_GL_CXXALIASWARN
 (
mb¶í
);

739 #i‡@
GNULIB_MBSNLEN
@

742 
_GL_EXTERN_C
 
size_t
 
	$mb¢Àn
 (c⁄° *
°rög
, 
size_t
 
Àn
)

743 
	`_GL_ARG_NONNULL
 ((1));

746 #i‡@
GNULIB_MBSCHR
@

751 #i‡
deföed
 
__hpux


752 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

753 
	#mbschr
 
Ωl_mbschr


	)

755 
	`_GL_FUNCDECL_RPL
 (
mbschr
, *, (c⁄° *
°rög
, 
c
)

756 
	`_GL_ARG_NONNULL
 ((1)));

757 
	`_GL_CXXALIAS_RPL
 (
mbschr
, *, (c⁄° *
°rög
, 
c
));

759 
	`_GL_FUNCDECL_SYS
 (
mbschr
, *, (c⁄° *
°rög
, 
c
)

760 
	`_GL_ARG_NONNULL
 ((1)));

761 
	`_GL_CXXALIAS_SYS
 (
mbschr
, *, (c⁄° *
°rög
, 
c
));

763 
	`_GL_CXXALIASWARN
 (
mbschr
);

766 #i‡@
GNULIB_MBSRCHR
@

771 #i‡
deföed
 
__hpux
 || deföed 
__INTERIX


772 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

773 
	#mb§chr
 
Ωl_mb§chr


	)

775 
	`_GL_FUNCDECL_RPL
 (
mb§chr
, *, (c⁄° *
°rög
, 
c
)

776 
	`_GL_ARG_NONNULL
 ((1)));

777 
	`_GL_CXXALIAS_RPL
 (
mb§chr
, *, (c⁄° *
°rög
, 
c
));

779 
	`_GL_FUNCDECL_SYS
 (
mb§chr
, *, (c⁄° *
°rög
, 
c
)

780 
	`_GL_ARG_NONNULL
 ((1)));

781 
	`_GL_CXXALIAS_SYS
 (
mb§chr
, *, (c⁄° *
°rög
, 
c
));

783 
	`_GL_CXXALIASWARN
 (
mb§chr
);

786 #i‡@
GNULIB_MBSSTR
@

791 
_GL_EXTERN_C
 * 
	$mbs°r
 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

792 
	`_GL_ARG_NONNULL
 ((1, 2));

795 #i‡@
GNULIB_MBSCASECMP
@

802 
_GL_EXTERN_C
 
	$mbsˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
)

803 
	`_GL_ARG_NONNULL
 ((1, 2));

806 #i‡@
GNULIB_MBSNCASECMP
@

816 
_GL_EXTERN_C
 
	$mb¢ˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

817 
	`_GL_ARG_NONNULL
 ((1, 2));

820 #i‡@
GNULIB_MBSPCASECMP
@

829 
_GL_EXTERN_C
 * 
	$mb•ˇ£cmp
 (c⁄° *
°rög
, c⁄° *
¥efix
)

830 
	`_GL_ARG_NONNULL
 ((1, 2));

833 #i‡@
GNULIB_MBSCASESTR
@

839 
_GL_EXTERN_C
 * 
	$mbsˇ£°r
 (c⁄° *
hay°ack
, c⁄° *
√edÀ
)

840 
	`_GL_ARG_NONNULL
 ((1, 2));

843 #i‡@
GNULIB_MBSCSPN
@

849 
_GL_EXTERN_C
 
size_t
 
	$mbsc•n
 (c⁄° *
°rög
, c⁄° *
ac˚±
)

850 
	`_GL_ARG_NONNULL
 ((1, 2));

853 #i‡@
GNULIB_MBSPBRK
@

858 #i‡
deföed
 
__hpux


859 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

860 
	#mb•brk
 
Ωl_mb•brk


	)

862 
	`_GL_FUNCDECL_RPL
 (
mb•brk
, *, (c⁄° *
°rög
, c⁄° *
ac˚±
)

863 
	`_GL_ARG_NONNULL
 ((1, 2)));

864 
	`_GL_CXXALIAS_RPL
 (
mb•brk
, *, (c⁄° *
°rög
, c⁄° *
ac˚±
));

866 
	`_GL_FUNCDECL_SYS
 (
mb•brk
, *, (c⁄° *
°rög
, c⁄° *
ac˚±
)

867 
	`_GL_ARG_NONNULL
 ((1, 2)));

868 
	`_GL_CXXALIAS_SYS
 (
mb•brk
, *, (c⁄° *
°rög
, c⁄° *
ac˚±
));

870 
	`_GL_CXXALIASWARN
 (
mb•brk
);

873 #i‡@
GNULIB_MBSSPN
@

879 
_GL_EXTERN_C
 
size_t
 
	$mbs•n
 (c⁄° *
°rög
, c⁄° *
ªje˘
)

880 
	`_GL_ARG_NONNULL
 ((1, 2));

883 #i‡@
GNULIB_MBSSEP
@

898 
_GL_EXTERN_C
 * 
	$mbs£p
 (**
°rögp
, c⁄° *
dñim
)

899 
	`_GL_ARG_NONNULL
 ((1, 2));

902 #i‡@
GNULIB_MBSTOK_R
@

919 
_GL_EXTERN_C
 * 
	$mb°ok_r
 (*
°rög
, c⁄° *
dñim
, **
ßve_±r
)

920 
	`_GL_ARG_NONNULL
 ((2, 3));

924 #i‡@
GNULIB_STRERROR
@

925 #i‡@
REPLACE_STRERROR
@

926 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

927 #unde‡
°ªº‹


928 
	#°ªº‹
 
Ωl_°ªº‹


	)

930 
	`_GL_FUNCDECL_RPL
 (
°ªº‹
, *, ());

931 
	`_GL_CXXALIAS_RPL
 (
°ªº‹
, *, ());

933 
	`_GL_CXXALIAS_SYS
 (
°ªº‹
, *, ());

935 
	`_GL_CXXALIASWARN
 (
°ªº‹
);

936 #ñi‡
deföed
 
GNULIB_POSIXCHECK


937 #unde‡
°ªº‹


939 
	`_GL_WARN_ON_USE
 (
°ªº‹
, "strerror is unportable - "

945 #i‡@
GNULIB_STRERROR_R
@

946 #i‡@
REPLACE_STRERROR_R
@

947 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

948 #unde‡
°ªº‹_r


949 
	#°ªº‹_r
 
Ωl_°ªº‹_r


	)

951 
	`_GL_FUNCDECL_RPL
 (
°ªº‹_r
, , (
î∫um
, *
buf
, 
size_t
 
buÊí
)

952 
	`_GL_ARG_NONNULL
 ((2)));

953 
	`_GL_CXXALIAS_RPL
 (
°ªº‹_r
, , (
î∫um
, *
buf
, 
size_t
 
buÊí
));

955 #i‡!@
HAVE_DECL_STRERROR_R
@

956 
	`_GL_FUNCDECL_SYS
 (
°ªº‹_r
, , (
î∫um
, *
buf
, 
size_t
 
buÊí
)

957 
	`_GL_ARG_NONNULL
 ((2)));

959 
	`_GL_CXXALIAS_SYS
 (
°ªº‹_r
, , (
î∫um
, *
buf
, 
size_t
 
buÊí
));

961 #i‡@
HAVE_DECL_STRERROR_R
@

962 
	`_GL_CXXALIASWARN
 (
°ªº‹_r
);

964 #ñi‡
deföed
 
GNULIB_POSIXCHECK


965 #unde‡
°ªº‹_r


966 #i‡
HAVE_RAW_DECL_STRERROR_R


967 
	`_GL_WARN_ON_USE
 (
°ªº‹_r
, "strerror_r is unportable - "

972 #i‡@
GNULIB_STRSIGNAL
@

973 #i‡@
REPLACE_STRSIGNAL
@

974 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

975 
	#°rsig«l
 
Ωl_°rsig«l


	)

977 
	`_GL_FUNCDECL_RPL
 (
°rsig«l
, *, (
__sig
));

978 
	`_GL_CXXALIAS_RPL
 (
°rsig«l
, *, (
__sig
));

980 #i‡! @
HAVE_DECL_STRSIGNAL
@

981 
	`_GL_FUNCDECL_SYS
 (
°rsig«l
, *, (
__sig
));

985 
	`_GL_CXXALIAS_SYS_CAST
 (
°rsig«l
, *, (
__sig
));

987 
	`_GL_CXXALIASWARN
 (
°rsig«l
);

988 #ñi‡
deföed
 
GNULIB_POSIXCHECK


989 #unde‡
°rsig«l


990 #i‡
HAVE_RAW_DECL_STRSIGNAL


991 
	`_GL_WARN_ON_USE
 (
°rsig«l
, "strsignal is unportable - "

996 #i‡@
GNULIB_STRVERSCMP
@

997 #i‡!@
HAVE_STRVERSCMP
@

998 
	`_GL_FUNCDECL_SYS
 (
°rvîscmp
, , (const *, const *)

999 
	`_GL_ARG_NONNULL
 ((1, 2)));

1001 
	`_GL_CXXALIAS_SYS
 (
°rvîscmp
, , (const *, const *));

1002 
	`_GL_CXXALIASWARN
 (
°rvîscmp
);

1003 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1004 #unde‡
°rvîscmp


1005 #i‡
HAVE_RAW_DECL_STRVERSCMP


1006 
	`_GL_WARN_ON_USE
 (
°rvîscmp
, "strverscmp is unportable - "

	@lib/strings.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_STRINGS_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

30 #i‡
deföed
 
__möix
 && !deföed 
__GLIBC__


31 
	~<sys/ty≥s.h
>

35 #i‡@
HAVE_STRINGS_H
@

36 #@
INCLUDE_NEXT
@ @
NEXT_STRINGS_H
@

39 #i‚de‡
_
@
GUARD_PREFIX
@
_STRINGS_H


40 
	#_
@
GUARD_PREFIX
@
_STRINGS_H


	)

49 #ifde‡
__˝lu•lus


55 #i‡@
GNULIB_FFS
@

56 #i‡!@
HAVE_FFS
@

57 
_GL_FUNCDECL_SYS
 (
ffs
, , (
i
));

59 
_GL_CXXALIAS_SYS
 (
ffs
, , (
i
));

60 
_GL_CXXALIASWARN
 (
ffs
);

61 #ñi‡
deföed
 
GNULIB_POSIXCHECK


62 #unde‡
ffs


63 #i‡
HAVE_RAW_DECL_FFS


64 
_GL_WARN_ON_USE
 (
ffs
, "ffs isÇotÖortable - useÅhe ffs module");

72 #i‡! @
HAVE_STRCASECMP
@

73 
	$°rˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
)

74 
	`_GL_ARG_NONNULL
 ((1, 2));

76 #i‡
deföed
 
GNULIB_POSIXCHECK


80 #unde‡
°rˇ£cmp


81 #i‡
HAVE_RAW_DECL_STRCASECMP


82 
	`_GL_WARN_ON_USE
 (
°rˇ£cmp
, "strcasecmp cannot work correctly on character "

95 #i‡! @
HAVE_DECL_STRNCASECMP
@

96 
	$°∫ˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

97 
	`_GL_ARG_NONNULL
 ((1, 2));

99 #i‡
deföed
 
GNULIB_POSIXCHECK


103 #unde‡
°∫ˇ£cmp


104 #i‡
HAVE_RAW_DECL_STRNCASECMP


105 
	`_GL_WARN_ON_USE
 (
°∫ˇ£cmp
, "strncasecmp cannot work correctly on character "

115 #ifde‡
__˝lu•lus


116 
	}
}

	@lib/stripslash.c

19 
	~<c⁄fig.h
>

21 
	~"dú«me.h
"

30 
boﬁ


31 
	$°rù_åaûög_¶ashes
 (*
fûe
)

33 *
ba£
 = 
	`œ°_comp⁄ít
 (
fûe
);

34 *
ba£_lim
;

35 
boﬁ
 
had_¶ash
;

39 i‡(! *
ba£
)

40 
ba£
 = 
fûe
;

41 
ba£_lim
 = 
ba£
 + 
	`ba£_Àn
 (base);

42 
had_¶ash
 = (*
ba£_lim
 != '\0');

43 *
ba£_lim
 = '\0';

44  
had_¶ash
;

45 
	}
}

	@lib/strncasecmp.c

20 
	~<c⁄fig.h
>

23 
	~<°rög.h
>

25 
	~<˘y≥.h
>

26 
	~<limôs.h
>

28 
	#TOLOWER
(
Ch
Ë(
	`isuµî
 (ChË? 
	`tﬁowî
 (ChË: (Ch))

	)

36 
	$°∫ˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

38 c⁄° *
p1
 = (c⁄° *Ë
s1
;

39 c⁄° *
p2
 = (c⁄° *Ë
s2
;

40 
c1
, 
c2
;

42 i‡(
p1
 =
p2
 || 
n
 == 0)

47 
c1
 = 
	`TOLOWER
 (*
p1
);

48 
c2
 = 
	`TOLOWER
 (*
p2
);

50 i‡(--
n
 =0 || 
c1
 == '\0')

53 ++
p1
;

54 ++
p2
;

56 
c1
 =
c2
);

58 i‡(
UCHAR_MAX
 <
INT_MAX
)

59  
c1
 - 
c2
;

64  (
c1
 > 
c2
 ? 1 : c1 < c2 ? -1 : 0);

65 
	}
}

	@lib/sys_ioctl.in.h

20 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_IOCTL_H


22 #i‡
__GNUC__
 >= 3

23 @
	gPRAGMA_SYSTEM_HEADER
@

25 @
	gPRAGMA_COLUMNS
@

28 #i‡@
HAVE_SYS_IOCTL_H
@

29 #@
INCLUDE_NEXT
@ @
NEXT_SYS_IOCTL_H
@

32 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_IOCTL_H


33 
	#_
@
GUARD_PREFIX
@
_SYS_IOCTL_H


	)

38 #i‚de‡
__GLIBC__


39 
	~<uni°d.h
>

49 #i‡@
GNULIB_IOCTL
@

50 #i‡@
REPLACE_IOCTL
@

51 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

52 #unde‡
io˘l


53 
	#io˘l
 
Ωl_io˘l


	)

55 
_GL_FUNCDECL_RPL
 (
io˘l
, ,

56 (
fd
, 
ªque°
, ... ));

57 
_GL_CXXALIAS_RPL
 (
io˘l
, ,

58 (
fd
, 
ªque°
, ... ));

60 #i‡@
SYS_IOCTL_H_HAVE_WINSOCK2_H
@ || 1

61 
_GL_FUNCDECL_SYS
 (
io˘l
, ,

62 (
fd
, 
ªque°
, ... ));

64 
_GL_CXXALIAS_SYS
 (
io˘l
, ,

65 (
fd
, 
ªque°
, ... ));

67 
_GL_CXXALIASWARN
 (
io˘l
);

68 #ñi‡@
SYS_IOCTL_H_HAVE_WINSOCK2_H_AND_USE_SOCKETS
@

69 #unde‡
io˘l


70 
	#io˘l
 
io˘l_u£d_wôhout_ªque°ög_gnulib_moduÀ_io˘l


	)

71 #ñi‡
deföed
 
GNULIB_POSIXCHECK


72 #unde‡
io˘l


73 #i‡
HAVE_RAW_DECL_IOCTL


74 
_GL_WARN_ON_USE
 (
io˘l
, "ioctl doesÇotÖortably work on sockets - "

	@lib/sys_select.in.h

20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

27 #i‡@
HAVE_SYS_SELECT_H
@ && 
deföed
 
__osf__
 && (deföed 
_SYS_TYPES_H_
 && !deföed 
_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_TYPES_H
Ë&& deföed 
_OSF_SOURCE


29 
	#_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_TYPES_H


	)

30 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SELECT_H
@

32 #ñi‡@
HAVE_SYS_SELECT_H
@ && 
deföed
 
__osf__
 && (deföed 
_SYS_TIME_H_
 && !deföed 
_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_TIME_H
Ë&& deföed 
_OSF_SOURCE


34 
	#_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_TIME_H


	)

35 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SELECT_H
@

42 #ñi‡@
HAVE_SYS_SELECT_H
@ && 
deföed
 
__sgi
 && (deföed 
_SYS_BSD_TYPES_H
 && !deföed 
_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_BSD_TYPES_H
)

44 
	#_GL_SYS_SELECT_H_REDIRECT_FROM_SYS_BSD_TYPES_H


	)

45 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SELECT_H
@

49 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_SELECT_H


54 
	~<sys/ty≥s.h
>

58 #i‡!(
deföed
 
__GLIBC__
 && !deföed 
__UCLIBC__
)

59 
	~<sig«l.h
>

62 #i‡@
HAVE_SYS_SELECT_H
@

69 #i‚de‡
__GLIBC__


70 
	~<sys/time.h
>

76 #i‡(
deföed
 
__O≥nBSD__
 || deföed 
_AIX
 || deföed 
__sun
 || deföed 
__osf__
 || deföed 
__BEOS__
) \

77 && ! 
deföed
 
	g__GLIBC__


78 
	~<°rög.h
>

82 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SELECT_H
@

86 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_SELECT_H


87 
	#_
@
GUARD_PREFIX
@
_SYS_SELECT_H


	)

89 #i‡!@
HAVE_SYS_SELECT_H
@

93 
	~<sys/time.h
>

96 #i‡
deföed
 
__hpux


97 
	~<°rög.h
>

101 #i‡@
HAVE_WINSOCK2_H
@ && !
deföed
 
_GL_INCLUDING_WINSOCK2_H


102 
	#_GL_INCLUDING_WINSOCK2_H


	)

103 
	~<wösock2.h
>

104 #unde‡
_GL_INCLUDING_WINSOCK2_H


115 #i‡@
HAVE_WINSOCK2_H
@

117 #i‡!
GNULIB_deföed_Ωl_fd_is£t


121 
ölöe
 

122 
	$Ωl_fd_is£t
 (
SOCKET
 
fd
, 
fd_£t
 * 
£t
)

124 
u_öt
 
i
;

125 i‡(
£t
 =
NULL
)

128 
i
 = 0; i < 
£t
->
fd_cou¡
; i++)

129 i‡(
£t
->
fd_¨øy
[
i
] =
fd
)

133 
	}
}

135 
	#GNULIB_deföed_Ωl_fd_is£t
 1

	)

138 #unde‡
FD_ISSET


139 
	#FD_ISSET
(
fd
, 
£t
Ë
	`Ωl_fd_is£t
(fd, së)

	)

145 #i‡@
HAVE_WINSOCK2_H
@

146 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_UNISTD_H


147 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

148 #unde‡
˛o£


149 
	#˛o£
 
˛o£_u£d_wôhout_ö˛udög_uni°d_h


	)

151 
_GL_WARN_ON_USE
 (
˛o£
,

154 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

155 #unde‡
gëho°«me


156 
	#gëho°«me
 
gëho°«me_u£d_wôhout_ö˛udög_uni°d_h


	)

158 
_GL_WARN_ON_USE
 (
gëho°«me
,

162 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_SYS_SOCKET_H


163 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

164 #unde‡
sockë


165 
	#sockë
 
sockë_u£d_wôhout_ö˛udög_sys_sockë_h


	)

166 #unde‡
c⁄√˘


167 
	#c⁄√˘
 
c⁄√˘_u£d_wôhout_ö˛udög_sys_sockë_h


	)

168 #unde‡
ac˚±


169 
	#ac˚±
 
ac˚±_u£d_wôhout_ö˛udög_sys_sockë_h


	)

170 #unde‡
böd


171 
	#böd
 
böd_u£d_wôhout_ö˛udög_sys_sockë_h


	)

172 #unde‡
gë≥î«me


173 
	#gë≥î«me
 
gë≥î«me_u£d_wôhout_ö˛udög_sys_sockë_h


	)

174 #unde‡
gësock«me


175 
	#gësock«me
 
gësock«me_u£d_wôhout_ö˛udög_sys_sockë_h


	)

176 #unde‡
gësock›t


177 
	#gësock›t
 
gësock›t_u£d_wôhout_ö˛udög_sys_sockë_h


	)

178 #unde‡
li°í


179 
	#li°í
 
li°í_u£d_wôhout_ö˛udög_sys_sockë_h


	)

180 #unde‡
ªcv


181 
	#ªcv
 
ªcv_u£d_wôhout_ö˛udög_sys_sockë_h


	)

182 #unde‡
£nd


183 
	#£nd
 
£nd_u£d_wôhout_ö˛udög_sys_sockë_h


	)

184 #unde‡
ªcv‰om


185 
	#ªcv‰om
 
ªcv‰om_u£d_wôhout_ö˛udög_sys_sockë_h


	)

186 #unde‡
£ndto


187 
	#£ndto
 
£ndto_u£d_wôhout_ö˛udög_sys_sockë_h


	)

188 #unde‡
£tsock›t


189 
	#£tsock›t
 
£tsock›t_u£d_wôhout_ö˛udög_sys_sockë_h


	)

190 #unde‡
shutdown


191 
	#shutdown
 
shutdown_u£d_wôhout_ö˛udög_sys_sockë_h


	)

193 
_GL_WARN_ON_USE
 (
sockë
,

195 
_GL_WARN_ON_USE
 (
c⁄√˘
,

197 
_GL_WARN_ON_USE
 (
ac˚±
,

199 
_GL_WARN_ON_USE
 (
böd
,

201 
_GL_WARN_ON_USE
 (
gë≥î«me
,

203 
_GL_WARN_ON_USE
 (
gësock«me
,

205 
_GL_WARN_ON_USE
 (
gësock›t
,

207 
_GL_WARN_ON_USE
 (
li°í
,

209 
_GL_WARN_ON_USE
 (
ªcv
,

211 
_GL_WARN_ON_USE
 (
£nd
,

213 
_GL_WARN_ON_USE
 (
ªcv‰om
,

215 
_GL_WARN_ON_USE
 (
£ndto
,

217 
_GL_WARN_ON_USE
 (
£tsock›t
,

219 
_GL_WARN_ON_USE
 (
shutdown
,

226 #i‡@
GNULIB_PSELECT
@

227 #i‡@
REPLACE_PSELECT
@

228 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

229 #unde‡
p£À˘


230 
	#p£À˘
 
Ωl_p£À˘


	)

232 
_GL_FUNCDECL_RPL
 (
p£À˘
, ,

233 (, 
fd_£t
 *
ª°ri˘
, fd_set *restrict, fd_set *restrict,

234 
time•ec
 c⁄° *
ª°ri˘
, c⁄° 
sig£t_t
 *restrict));

235 
_GL_CXXALIAS_RPL
 (
p£À˘
, ,

236 (, 
fd_£t
 *
ª°ri˘
, fd_set *restrict, fd_set *restrict,

237 
time•ec
 c⁄° *
ª°ri˘
, c⁄° 
sig£t_t
 *restrict));

239 #i‡!@
HAVE_PSELECT
@

240 
_GL_FUNCDECL_SYS
 (
p£À˘
, ,

241 (, 
fd_£t
 *
ª°ri˘
, fd_set *restrict, fd_set *restrict,

242 
time•ec
 c⁄° *
ª°ri˘
, c⁄° 
sig£t_t
 *restrict));

244 
_GL_CXXALIAS_SYS
 (
p£À˘
, ,

245 (, 
fd_£t
 *
ª°ri˘
, fd_set *restrict, fd_set *restrict,

246 
time•ec
 c⁄° *
ª°ri˘
, c⁄° 
sig£t_t
 *restrict));

248 
_GL_CXXALIASWARN
 (
p£À˘
);

249 #ñi‡
deföed
 
GNULIB_POSIXCHECK


250 #unde‡
p£À˘


251 #i‡
HAVE_RAW_DECL_PSELECT


252 
_GL_WARN_ON_USE
 (
p£À˘
, "pselect isÇotÖortable - "

257 #i‡@
GNULIB_SELECT
@

258 #i‡@
REPLACE_SELECT
@

259 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

260 #unde‡
£À˘


261 
	#£À˘
 
Ωl_£À˘


	)

263 
_GL_FUNCDECL_RPL
 (
£À˘
, ,

264 (, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *));

265 
_GL_CXXALIAS_RPL
 (
£À˘
, ,

266 (, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *));

268 
_GL_CXXALIAS_SYS
 (
£À˘
, ,

269 (, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *));

271 
_GL_CXXALIASWARN
 (
£À˘
);

272 #ñi‡@
HAVE_WINSOCK2_H
@

273 #unde‡
£À˘


274 
	#£À˘
 
£À˘_u£d_wôhout_ªque°ög_gnulib_moduÀ_£À˘


	)

275 #ñi‡
deföed
 
GNULIB_POSIXCHECK


276 #unde‡
£À˘


277 #i‡
HAVE_RAW_DECL_SELECT


278 
_GL_WARN_ON_USE
 (
£À˘
, "select isÇotálways POSIX compliant - "

	@lib/sys_socket.in.h

28 #i‡
__GNUC__
 >= 3

29 @
	gPRAGMA_SYSTEM_HEADER
@

31 @
	gPRAGMA_COLUMNS
@

33 #i‡
deföed
 
_GL_ALREADY_INCLUDING_SYS_SOCKET_H


40 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SOCKET_H
@

45 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_SOCKET_H


47 #i‡@
HAVE_SYS_SOCKET_H
@

49 
	#_GL_ALREADY_INCLUDING_SYS_SOCKET_H


	)

53 
	~<sys/ty≥s.h
>

57 
	~<°ddef.h
>

60 #@
INCLUDE_NEXT
@ @
NEXT_SYS_SOCKET_H
@

62 #unde‡
_GL_ALREADY_INCLUDING_SYS_SOCKET_H


66 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_SOCKET_H


67 
	#_
@
GUARD_PREFIX
@
_SYS_SOCKET_H


	)

75 #i‡!@
HAVE_SA_FAMILY_T
@

76 #i‡!
GNULIB_deföed_ß_Ámûy_t


77 
	tß_Ámûy_t
;

78 
	#GNULIB_deföed_ß_Ámûy_t
 1

	)

82 #i‡@
HAVE_STRUCT_SOCKADDR_STORAGE
@

84 #i‡!@
HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
@

85 #i‚de‡
ss_Ámûy


86 
	#ss_Ámûy
 
__ss_Ámûy


	)

90 
	~<Æignof.h
>

93 
	#__ss_Æig¡y≥
 

	)

94 
	#_SS_SIZE
 256

	)

95 
	#_SS_PADSIZE
 \

96 (
_SS_SIZE
 - (( (
ß_Ámûy_t
Ë>
	`Æignof
 (
__ss_Æig¡y≥
) \

97 ?  (
ß_Ámûy_t
) \

98 : 
	`Æignof
 (
__ss_Æig¡y≥
)) \

99 +  (
__ss_Æig¡y≥
)))

	)

101 #i‡!
GNULIB_deföed_°ru˘_sockaddr_°‹age


102 
	ssockaddr_°‹age


104 
ß_Ámûy_t
 
	mss_Ámûy
;

105 
__ss_Æig¡y≥
 
	m__ss_Æign
;

106 
	m__ss_∑ddög
[
_SS_PADSIZE
];

108 
	#GNULIB_deföed_°ru˘_sockaddr_°‹age
 1

	)

115 #i‡! 
deföed
 
__GLIBC__


116 
	~<sys/uio.h
>

119 #i‡@
HAVE_SYS_SOCKET_H
@

124 #i‡!
deföed
 
SHUT_RD


125 
	#SHUT_RD
 0

	)

127 #i‡!
deföed
 
SHUT_WR


128 
	#SHUT_WR
 1

	)

130 #i‡!
deföed
 
SHUT_RDWR


131 
	#SHUT_RDWR
 2

	)

136 #ifde‡
__CYGWIN__


157 #i‡@
HAVE_WINSOCK2_H
@

158 
	~<wösock2.h
>

160 #i‡@
HAVE_WS2TCPIP_H
@

161 
	~<ws2t˝ù.h
>

165 #i‡!
deföed
 
SHUT_RD
 && deföed 
SD_RECEIVE


166 
	#SHUT_RD
 
SD_RECEIVE


	)

168 #i‡!
deföed
 
SHUT_WR
 && deföed 
SD_SEND


169 
	#SHUT_WR
 
SD_SEND


	)

171 #i‡!
deföed
 
SHUT_RDWR
 && deföed 
SD_BOTH


172 
	#SHUT_RDWR
 
SD_BOTH


	)

175 #i‡@
HAVE_WINSOCK2_H
@

177 
	~<sys/ty≥s.h
>

178 
	~<io.h
>

180 #i‡!
GNULIB_deföed_sockÀn_t


181 
	tsockÀn_t
;

182 
	#GNULIB_deföed_sockÀn_t
 1

	)

189 
	smsghdr
 {

190 *
	mmsg_«me
;

191 
sockÀn_t
 
	mmsg_«mñí
;

192 
iovec
 *
	mmsg_iov
;

193 
	mmsg_iovÀn
;

194 
	mmsg_Êags
;

201 #i‡@
HAVE_WINSOCK2_H
@

203 #i‡!
GNULIB_deföed_Ωl_fd_is£t


207 
ölöe
 

208 
	$Ωl_fd_is£t
 (
SOCKET
 
fd
, 
fd_£t
 * 
£t
)

210 
u_öt
 
i
;

211 i‡(
£t
 =
NULL
)

214 
i
 = 0; i < 
£t
->
fd_cou¡
; i++)

215 i‡(
£t
->
fd_¨øy
[
i
] =
fd
)

219 
	}
}

221 
	#GNULIB_deföed_Ωl_fd_is£t
 1

	)

224 #unde‡
FD_ISSET


225 
	#FD_ISSET
(
fd
, 
£t
Ë
	`Ωl_fd_is£t
(fd, së)

	)

231 #i‡@
HAVE_WINSOCK2_H
@

232 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_UNISTD_H


233 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

234 #unde‡
˛o£


235 
	#˛o£
 
˛o£_u£d_wôhout_ö˛udög_uni°d_h


	)

237 
_GL_WARN_ON_USE
 (
˛o£
,

240 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

241 #unde‡
gëho°«me


242 
	#gëho°«me
 
gëho°«me_u£d_wôhout_ö˛udög_uni°d_h


	)

244 
_GL_WARN_ON_USE
 (
gëho°«me
,

248 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_SYS_SELECT_H


249 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

250 #unde‡
£À˘


251 
	#£À˘
 
£À˘_u£d_wôhout_ö˛udög_sys_£À˘_h


	)

253 
_GL_WARN_ON_USE
 (
£À˘
,

261 #i‡@
GNULIB_SOCKET
@

262 #i‡@
HAVE_WINSOCK2_H
@

263 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

264 #unde‡
sockë


265 
	#sockë
 
Ωl_sockë


	)

267 
_GL_FUNCDECL_RPL
 (
sockë
, , (
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

268 
_GL_CXXALIAS_RPL
 (
sockë
, , (
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

270 
_GL_CXXALIAS_SYS
 (
sockë
, , (
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

272 
_GL_CXXALIASWARN
 (
sockë
);

273 #ñi‡@
HAVE_WINSOCK2_H
@

274 #unde‡
sockë


275 
	#sockë
 
sockë_u£d_wôhout_ªque°ög_gnulib_moduÀ_sockë


	)

276 #ñi‡
deföed
 
GNULIB_POSIXCHECK


277 #unde‡
sockë


278 #i‡
HAVE_RAW_DECL_SOCKET


279 
_GL_WARN_ON_USE
 (
sockë
, "socket isÇotálways POSIX compliant - "

284 #i‡@
GNULIB_CONNECT
@

285 #i‡@
HAVE_WINSOCK2_H
@

286 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

287 #unde‡
c⁄√˘


288 
	#c⁄√˘
 
Ωl_c⁄√˘


	)

290 
_GL_FUNCDECL_RPL
 (
c⁄√˘
, ,

291 (
fd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

292 
_GL_ARG_NONNULL
 ((2)));

293 
_GL_CXXALIAS_RPL
 (
c⁄√˘
, ,

294 (
fd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
));

298 
_GL_CXXALIAS_SYS_CAST
 (
c⁄√˘
, ,

299 (
fd
,

300 c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
));

302 
_GL_CXXALIASWARN
 (
c⁄√˘
);

303 #ñi‡@
HAVE_WINSOCK2_H
@

304 #unde‡
c⁄√˘


305 
	#c⁄√˘
 
sockë_u£d_wôhout_ªque°ög_gnulib_moduÀ_c⁄√˘


	)

306 #ñi‡
deföed
 
GNULIB_POSIXCHECK


307 #unde‡
c⁄√˘


308 #i‡
HAVE_RAW_DECL_CONNECT


309 
_GL_WARN_ON_USE
 (
c⁄√˘
, "connect isÇotálways POSIX compliant - "

314 #i‡@
GNULIB_ACCEPT
@

315 #i‡@
HAVE_WINSOCK2_H
@

316 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

317 #unde‡
ac˚±


318 
	#ac˚±
 
Ωl_ac˚±


	)

320 
_GL_FUNCDECL_RPL
 (
ac˚±
, ,

321 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

322 
_GL_CXXALIAS_RPL
 (
ac˚±
, ,

323 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

327 
_GL_CXXALIAS_SYS_CAST
 (
ac˚±
, ,

328 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

330 
_GL_CXXALIASWARN
 (
ac˚±
);

331 #ñi‡@
HAVE_WINSOCK2_H
@

332 #unde‡
ac˚±


333 
	#ac˚±
 
ac˚±_u£d_wôhout_ªque°ög_gnulib_moduÀ_ac˚±


	)

334 #ñi‡
deföed
 
GNULIB_POSIXCHECK


335 #unde‡
ac˚±


336 #i‡
HAVE_RAW_DECL_ACCEPT


337 
_GL_WARN_ON_USE
 (
ac˚±
, "accept isÇotálways POSIX compliant - "

342 #i‡@
GNULIB_BIND
@

343 #i‡@
HAVE_WINSOCK2_H
@

344 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

345 #unde‡
böd


346 
	#böd
 
Ωl_böd


	)

348 
_GL_FUNCDECL_RPL
 (
böd
, ,

349 (
fd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

350 
_GL_ARG_NONNULL
 ((2)));

351 
_GL_CXXALIAS_RPL
 (
böd
, ,

352 (
fd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
));

356 
_GL_CXXALIAS_SYS_CAST
 (
böd
, ,

357 (
fd
,

358 c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
));

360 
_GL_CXXALIASWARN
 (
böd
);

361 #ñi‡@
HAVE_WINSOCK2_H
@

362 #unde‡
böd


363 
	#böd
 
böd_u£d_wôhout_ªque°ög_gnulib_moduÀ_böd


	)

364 #ñi‡
deföed
 
GNULIB_POSIXCHECK


365 #unde‡
böd


366 #i‡
HAVE_RAW_DECL_BIND


367 
_GL_WARN_ON_USE
 (
böd
, "bind isÇotálways POSIX compliant - "

372 #i‡@
GNULIB_GETPEERNAME
@

373 #i‡@
HAVE_WINSOCK2_H
@

374 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

375 #unde‡
gë≥î«me


376 
	#gë≥î«me
 
Ωl_gë≥î«me


	)

378 
_GL_FUNCDECL_RPL
 (
gë≥î«me
, ,

379 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

380 
_GL_ARG_NONNULL
 ((2, 3)));

381 
_GL_CXXALIAS_RPL
 (
gë≥î«me
, ,

382 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

386 
_GL_CXXALIAS_SYS_CAST
 (
gë≥î«me
, ,

387 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

389 
_GL_CXXALIASWARN
 (
gë≥î«me
);

390 #ñi‡@
HAVE_WINSOCK2_H
@

391 #unde‡
gë≥î«me


392 
	#gë≥î«me
 
gë≥î«me_u£d_wôhout_ªque°ög_gnulib_moduÀ_gë≥î«me


	)

393 #ñi‡
deföed
 
GNULIB_POSIXCHECK


394 #unde‡
gë≥î«me


395 #i‡
HAVE_RAW_DECL_GETPEERNAME


396 
_GL_WARN_ON_USE
 (
gë≥î«me
, "getpeername isÇotálways POSIX compliant - "

401 #i‡@
GNULIB_GETSOCKNAME
@

402 #i‡@
HAVE_WINSOCK2_H
@

403 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

404 #unde‡
gësock«me


405 
	#gësock«me
 
Ωl_gësock«me


	)

407 
_GL_FUNCDECL_RPL
 (
gësock«me
, ,

408 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

409 
_GL_ARG_NONNULL
 ((2, 3)));

410 
_GL_CXXALIAS_RPL
 (
gësock«me
, ,

411 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

415 
_GL_CXXALIAS_SYS_CAST
 (
gësock«me
, ,

416 (
fd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
));

418 
_GL_CXXALIASWARN
 (
gësock«me
);

419 #ñi‡@
HAVE_WINSOCK2_H
@

420 #unde‡
gësock«me


421 
	#gësock«me
 
gësock«me_u£d_wôhout_ªque°ög_gnulib_moduÀ_gësock«me


	)

422 #ñi‡
deföed
 
GNULIB_POSIXCHECK


423 #unde‡
gësock«me


424 #i‡
HAVE_RAW_DECL_GETSOCKNAME


425 
_GL_WARN_ON_USE
 (
gësock«me
, "getsockname isÇotálways POSIX compliant - "

430 #i‡@
GNULIB_GETSOCKOPT
@

431 #i‡@
HAVE_WINSOCK2_H
@

432 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

433 #unde‡
gësock›t


434 
	#gësock›t
 
Ωl_gësock›t


	)

436 
_GL_FUNCDECL_RPL
 (
gësock›t
, , (
fd
, 
Àvñ
, 
›äame
,

437 *
›tvÆ
, 
sockÀn_t
 *
›éí
)

438 
_GL_ARG_NONNULL
 ((4, 5)));

439 
_GL_CXXALIAS_RPL
 (
gësock›t
, , (
fd
, 
Àvñ
, 
›äame
,

440 *
›tvÆ
, 
sockÀn_t
 *
›éí
));

444 
_GL_CXXALIAS_SYS_CAST
 (
gësock›t
, , (
fd
, 
Àvñ
, 
›äame
,

445 *
›tvÆ
, 
sockÀn_t
 *
›éí
));

447 
_GL_CXXALIASWARN
 (
gësock›t
);

448 #ñi‡@
HAVE_WINSOCK2_H
@

449 #unde‡
gësock›t


450 
	#gësock›t
 
gësock›t_u£d_wôhout_ªque°ög_gnulib_moduÀ_gësock›t


	)

451 #ñi‡
deföed
 
GNULIB_POSIXCHECK


452 #unde‡
gësock›t


453 #i‡
HAVE_RAW_DECL_GETSOCKOPT


454 
_GL_WARN_ON_USE
 (
gësock›t
, "getsockopt isÇotálways POSIX compliant - "

459 #i‡@
GNULIB_LISTEN
@

460 #i‡@
HAVE_WINSOCK2_H
@

461 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

462 #unde‡
li°í


463 
	#li°í
 
Ωl_li°í


	)

465 
_GL_FUNCDECL_RPL
 (
li°í
, , (
fd
, 
backlog
));

466 
_GL_CXXALIAS_RPL
 (
li°í
, , (
fd
, 
backlog
));

468 
_GL_CXXALIAS_SYS
 (
li°í
, , (
fd
, 
backlog
));

470 
_GL_CXXALIASWARN
 (
li°í
);

471 #ñi‡@
HAVE_WINSOCK2_H
@

472 #unde‡
li°í


473 
	#li°í
 
li°í_u£d_wôhout_ªque°ög_gnulib_moduÀ_li°í


	)

474 #ñi‡
deföed
 
GNULIB_POSIXCHECK


475 #unde‡
li°í


476 #i‡
HAVE_RAW_DECL_LISTEN


477 
_GL_WARN_ON_USE
 (
li°í
, "listen isÇotálways POSIX compliant - "

482 #i‡@
GNULIB_RECV
@

483 #i‡@
HAVE_WINSOCK2_H
@

484 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

485 #unde‡
ªcv


486 
	#ªcv
 
Ωl_ªcv


	)

488 
_GL_FUNCDECL_RPL
 (
ªcv
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
)

489 
_GL_ARG_NONNULL
 ((2)));

490 
_GL_CXXALIAS_RPL
 (
ªcv
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
));

492 
_GL_CXXALIAS_SYS
 (
ªcv
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
));

494 
_GL_CXXALIASWARN
 (
ªcv
);

495 #ñi‡@
HAVE_WINSOCK2_H
@

496 #unde‡
ªcv


497 
	#ªcv
 
ªcv_u£d_wôhout_ªque°ög_gnulib_moduÀ_ªcv


	)

498 #ñi‡
deföed
 
GNULIB_POSIXCHECK


499 #unde‡
ªcv


500 #i‡
HAVE_RAW_DECL_RECV


501 
_GL_WARN_ON_USE
 (
ªcv
, "recv isÇotálways POSIX compliant - "

506 #i‡@
GNULIB_SEND
@

507 #i‡@
HAVE_WINSOCK2_H
@

508 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

509 #unde‡
£nd


510 
	#£nd
 
Ωl_£nd


	)

512 
_GL_FUNCDECL_RPL
 (
£nd
, 
ssize_t
,

513 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
)

514 
_GL_ARG_NONNULL
 ((2)));

515 
_GL_CXXALIAS_RPL
 (
£nd
, 
ssize_t
,

516 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
));

518 
_GL_CXXALIAS_SYS
 (
£nd
, 
ssize_t
,

519 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
));

521 
_GL_CXXALIASWARN
 (
£nd
);

522 #ñi‡@
HAVE_WINSOCK2_H
@

523 #unde‡
£nd


524 
	#£nd
 
£nd_u£d_wôhout_ªque°ög_gnulib_moduÀ_£nd


	)

525 #ñi‡
deföed
 
GNULIB_POSIXCHECK


526 #unde‡
£nd


527 #i‡
HAVE_RAW_DECL_SEND


528 
_GL_WARN_ON_USE
 (
£nd
, "send isÇotálways POSIX compliant - "

533 #i‡@
GNULIB_RECVFROM
@

534 #i‡@
HAVE_WINSOCK2_H
@

535 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

536 #unde‡
ªcv‰om


537 
	#ªcv‰om
 
Ωl_ªcv‰om


	)

539 
_GL_FUNCDECL_RPL
 (
ªcv‰om
, 
ssize_t
,

540 (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
,

541 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

542 
_GL_ARG_NONNULL
 ((2)));

543 
_GL_CXXALIAS_RPL
 (
ªcv‰om
, 
ssize_t
,

544 (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
,

545 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
));

549 
_GL_CXXALIAS_SYS_CAST
 (
ªcv‰om
, 
ssize_t
,

550 (
fd
, *
buf
, 
size_t
 
Àn
, 
Êags
,

551 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
));

553 
_GL_CXXALIASWARN
 (
ªcv‰om
);

554 #ñi‡@
HAVE_WINSOCK2_H
@

555 #unde‡
ªcv‰om


556 
	#ªcv‰om
 
ªcv‰om_u£d_wôhout_ªque°ög_gnulib_moduÀ_ªcv‰om


	)

557 #ñi‡
deföed
 
GNULIB_POSIXCHECK


558 #unde‡
ªcv‰om


559 #i‡
HAVE_RAW_DECL_RECVFROM


560 
_GL_WARN_ON_USE
 (
ªcv‰om
, "recvfrom isÇotálways POSIX compliant - "

565 #i‡@
GNULIB_SENDTO
@

566 #i‡@
HAVE_WINSOCK2_H
@

567 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

568 #unde‡
£ndto


569 
	#£ndto
 
Ωl_£ndto


	)

571 
_GL_FUNCDECL_RPL
 (
£ndto
, 
ssize_t
,

572 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
,

573 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

574 
_GL_ARG_NONNULL
 ((2)));

575 
_GL_CXXALIAS_RPL
 (
£ndto
, 
ssize_t
,

576 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
,

577 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
));

581 
_GL_CXXALIAS_SYS_CAST
 (
£ndto
, 
ssize_t
,

582 (
fd
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
,

583 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
));

585 
_GL_CXXALIASWARN
 (
£ndto
);

586 #ñi‡@
HAVE_WINSOCK2_H
@

587 #unde‡
£ndto


588 
	#£ndto
 
£ndto_u£d_wôhout_ªque°ög_gnulib_moduÀ_£ndto


	)

589 #ñi‡
deföed
 
GNULIB_POSIXCHECK


590 #unde‡
£ndto


591 #i‡
HAVE_RAW_DECL_SENDTO


592 
_GL_WARN_ON_USE
 (
£ndto
, "sendto isÇotálways POSIX compliant - "

597 #i‡@
GNULIB_SETSOCKOPT
@

598 #i‡@
HAVE_WINSOCK2_H
@

599 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

600 #unde‡
£tsock›t


601 
	#£tsock›t
 
Ωl_£tsock›t


	)

603 
_GL_FUNCDECL_RPL
 (
£tsock›t
, , (
fd
, 
Àvñ
, 
›äame
,

604 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
)

605 
_GL_ARG_NONNULL
 ((4)));

606 
_GL_CXXALIAS_RPL
 (
£tsock›t
, , (
fd
, 
Àvñ
, 
›äame
,

607 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
));

611 
_GL_CXXALIAS_SYS_CAST
 (
£tsock›t
, ,

612 (
fd
, 
Àvñ
, 
›äame
,

613 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
));

615 
_GL_CXXALIASWARN
 (
£tsock›t
);

616 #ñi‡@
HAVE_WINSOCK2_H
@

617 #unde‡
£tsock›t


618 
	#£tsock›t
 
£tsock›t_u£d_wôhout_ªque°ög_gnulib_moduÀ_£tsock›t


	)

619 #ñi‡
deföed
 
GNULIB_POSIXCHECK


620 #unde‡
£tsock›t


621 #i‡
HAVE_RAW_DECL_SETSOCKOPT


622 
_GL_WARN_ON_USE
 (
£tsock›t
, "setsockopt isÇotálways POSIX compliant - "

627 #i‡@
GNULIB_SHUTDOWN
@

628 #i‡@
HAVE_WINSOCK2_H
@

629 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

630 #unde‡
shutdown


631 
	#shutdown
 
Ωl_shutdown


	)

633 
_GL_FUNCDECL_RPL
 (
shutdown
, , (
fd
, 
how
));

634 
_GL_CXXALIAS_RPL
 (
shutdown
, , (
fd
, 
how
));

636 
_GL_CXXALIAS_SYS
 (
shutdown
, , (
fd
, 
how
));

638 
_GL_CXXALIASWARN
 (
shutdown
);

639 #ñi‡@
HAVE_WINSOCK2_H
@

640 #unde‡
shutdown


641 
	#shutdown
 
shutdown_u£d_wôhout_ªque°ög_gnulib_moduÀ_shutdown


	)

642 #ñi‡
deföed
 
GNULIB_POSIXCHECK


643 #unde‡
shutdown


644 #i‡
HAVE_RAW_DECL_SHUTDOWN


645 
_GL_WARN_ON_USE
 (
shutdown
, "shutdown isÇotálways POSIX compliant - "

650 #i‡@
GNULIB_ACCEPT4
@

656 #i‡@
HAVE_ACCEPT4
@

657 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

658 
	#ac˚±4
 
Ωl_ac˚±4


	)

660 
_GL_FUNCDECL_RPL
 (
ac˚±4
, ,

661 (
sockfd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
,

662 
Êags
));

663 
_GL_CXXALIAS_RPL
 (
ac˚±4
, ,

664 (
sockfd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
,

665 
Êags
));

667 
_GL_FUNCDECL_SYS
 (
ac˚±4
, ,

668 (
sockfd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
,

669 
Êags
));

670 
_GL_CXXALIAS_SYS
 (
ac˚±4
, ,

671 (
sockfd
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
,

672 
Êags
));

674 
_GL_CXXALIASWARN
 (
ac˚±4
);

675 #ñi‡
deföed
 
GNULIB_POSIXCHECK


676 #unde‡
ac˚±4


677 #i‡
HAVE_RAW_DECL_ACCEPT4


678 
_GL_WARN_ON_USE
 (
ac˚±4
, "accept4 is unportable - "

	@lib/sys_stat.in.h

26 #i‡
__GNUC__
 >= 3

27 @
	gPRAGMA_SYSTEM_HEADER
@

29 @
	gPRAGMA_COLUMNS
@

31 #i‡
deföed
 
__√ed_sy°em_sys_°©_h


34 #@
INCLUDE_NEXT
@ @
NEXT_SYS_STAT_H
@

39 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_STAT_H


42 
	~<sys/ty≥s.h
>

45 
	~<time.h
>

48 #@
INCLUDE_NEXT
@ @
NEXT_SYS_STAT_H
@

50 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_STAT_H


51 
	#_
@
GUARD_PREFIX
@
_SYS_STAT_H


	)

61 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


62 
	~<io.h
>

63 
	~<dúe˘.h
>

66 #i‚de‡
S_IFMT


67 
	#S_IFMT
 0170000

	)

70 #i‡
STAT_MACROS_BROKEN


71 #unde‡
S_ISBLK


72 #unde‡
S_ISCHR


73 #unde‡
S_ISDIR


74 #unde‡
S_ISFIFO


75 #unde‡
S_ISLNK


76 #unde‡
S_ISNAM


77 #unde‡
S_ISMPB


78 #unde‡
S_ISMPC


79 #unde‡
S_ISNWK


80 #unde‡
S_ISREG


81 #unde‡
S_ISSOCK


84 #i‚de‡
S_ISBLK


85 #ifde‡
S_IFBLK


86 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

88 
	#S_ISBLK
(
m
Ë0

	)

92 #i‚de‡
S_ISCHR


93 #ifde‡
S_IFCHR


94 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

96 
	#S_ISCHR
(
m
Ë0

	)

100 #i‚de‡
S_ISDIR


101 #ifde‡
S_IFDIR


102 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

104 
	#S_ISDIR
(
m
Ë0

	)

108 #i‚de‡
S_ISDOOR


109 
	#S_ISDOOR
(
m
Ë0

	)

112 #i‚de‡
S_ISFIFO


113 #ifde‡
S_IFIFO


114 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

116 
	#S_ISFIFO
(
m
Ë0

	)

120 #i‚de‡
S_ISLNK


121 #ifde‡
S_IFLNK


122 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

124 
	#S_ISLNK
(
m
Ë0

	)

128 #i‚de‡
S_ISMPB


129 #ifde‡
S_IFMPB


130 
	#S_ISMPB
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFMPB
)

	)

131 
	#S_ISMPC
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFMPC
)

	)

133 
	#S_ISMPB
(
m
Ë0

	)

134 
	#S_ISMPC
(
m
Ë0

	)

138 #i‚de‡
S_ISNAM


139 #ifde‡
S_IFNAM


140 
	#S_ISNAM
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFNAM
)

	)

142 
	#S_ISNAM
(
m
Ë0

	)

146 #i‚de‡
S_ISNWK


147 #ifde‡
S_IFNWK


148 
	#S_ISNWK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFNWK
)

	)

150 
	#S_ISNWK
(
m
Ë0

	)

154 #i‚de‡
S_ISPORT


155 
	#S_ISPORT
(
m
Ë0

	)

158 #i‚de‡
S_ISREG


159 #ifde‡
S_IFREG


160 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

162 
	#S_ISREG
(
m
Ë0

	)

166 #i‚de‡
S_ISSOCK


167 #ifde‡
S_IFSOCK


168 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

170 
	#S_ISSOCK
(
m
Ë0

	)

175 #i‚de‡
S_TYPEISMQ


176 
	#S_TYPEISMQ
(
p
Ë0

	)

179 #i‚de‡
S_TYPEISTMO


180 
	#S_TYPEISTMO
(
p
Ë0

	)

184 #i‚de‡
S_TYPEISSEM


185 #ifde‡
S_INSEM


186 
	#S_TYPEISSEM
(
p
Ë(
	`S_ISNAM
 (’)->
°_mode
Ë&& (p)->
°_rdev
 =
S_INSEM
)

	)

188 
	#S_TYPEISSEM
(
p
Ë0

	)

192 #i‚de‡
S_TYPEISSHM


193 #ifde‡
S_INSHD


194 
	#S_TYPEISSHM
(
p
Ë(
	`S_ISNAM
 (’)->
°_mode
Ë&& (p)->
°_rdev
 =
S_INSHD
)

	)

196 
	#S_TYPEISSHM
(
p
Ë0

	)

201 #i‚de‡
S_ISCTG


202 
	#S_ISCTG
(
p
Ë0

	)

206 #i‚de‡
S_ISOFD


207 
	#S_ISOFD
(
p
Ë0

	)

211 #i‚de‡
S_ISOFL


212 
	#S_ISOFL
(
p
Ë0

	)

216 #i‚de‡
S_ISWHT


217 
	#S_ISWHT
(
m
Ë0

	)

222 #i‡!
S_ISUID


223 
	#S_ISUID
 04000

	)

225 #i‡!
S_ISGID


226 
	#S_ISGID
 02000

	)

230 #i‚de‡
S_ISVTX


231 
	#S_ISVTX
 01000

	)

234 #i‡!
S_IRUSR
 && 
S_IREAD


235 
	#S_IRUSR
 
S_IREAD


	)

237 #i‡!
S_IRUSR


238 
	#S_IRUSR
 00400

	)

240 #i‡!
S_IRGRP


241 
	#S_IRGRP
 (
S_IRUSR
 >> 3)

	)

243 #i‡!
S_IROTH


244 
	#S_IROTH
 (
S_IRUSR
 >> 6)

	)

247 #i‡!
S_IWUSR
 && 
S_IWRITE


248 
	#S_IWUSR
 
S_IWRITE


	)

250 #i‡!
S_IWUSR


251 
	#S_IWUSR
 00200

	)

253 #i‡!
S_IWGRP


254 
	#S_IWGRP
 (
S_IWUSR
 >> 3)

	)

256 #i‡!
S_IWOTH


257 
	#S_IWOTH
 (
S_IWUSR
 >> 6)

	)

260 #i‡!
S_IXUSR
 && 
S_IEXEC


261 
	#S_IXUSR
 
S_IEXEC


	)

263 #i‡!
S_IXUSR


264 
	#S_IXUSR
 00100

	)

266 #i‡!
S_IXGRP


267 
	#S_IXGRP
 (
S_IXUSR
 >> 3)

	)

269 #i‡!
S_IXOTH


270 
	#S_IXOTH
 (
S_IXUSR
 >> 6)

	)

273 #i‡!
S_IRWXU


274 
	#S_IRWXU
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IXUSR
)

	)

276 #i‡!
S_IRWXG


277 
	#S_IRWXG
 (
S_IRGRP
 | 
S_IWGRP
 | 
S_IXGRP
)

	)

279 #i‡!
S_IRWXO


280 
	#S_IRWXO
 (
S_IROTH
 | 
S_IWOTH
 | 
S_IXOTH
)

	)

284 #i‡!
S_IXUGO


285 
	#S_IXUGO
 (
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

288 #i‚de‡
S_IRWXUGO


289 
	#S_IRWXUGO
 (
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

293 #i‚de‡
UTIME_NOW


294 
	#UTIME_NOW
 (-1)

	)

295 
	#UTIME_OMIT
 (-2)

	)

299 #i‡@
GNULIB_FCHMODAT
@

300 #i‡!@
HAVE_FCHMODAT
@

301 
_GL_FUNCDECL_SYS
 (
fchmod©
, ,

302 (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
, 
Êag
)

303 
_GL_ARG_NONNULL
 ((2)));

305 
_GL_CXXALIAS_SYS
 (
fchmod©
, ,

306 (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
, 
Êag
));

307 
_GL_CXXALIASWARN
 (
fchmod©
);

308 #ñi‡
deföed
 
GNULIB_POSIXCHECK


309 #unde‡
fchmod©


310 #i‡
HAVE_RAW_DECL_FCHMODAT


311 
_GL_WARN_ON_USE
 (
fchmod©
, "fchmodat isÇotÖortable - "

317 #i‡@
REPLACE_FSTAT
@

318 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

319 
	#f°©
 
Ωl_f°©


	)

321 
_GL_FUNCDECL_RPL
 (
f°©
, , (
fd
, 
°©
 *
buf
Ë
_GL_ARG_NONNULL
 ((2)));

322 
_GL_CXXALIAS_RPL
 (
f°©
, , (
fd
, 
°©
 *
buf
));

324 
_GL_CXXALIAS_SYS
 (
f°©
, , (
fd
, 
°©
 *
buf
));

326 
_GL_CXXALIASWARN
 (
f°©
);

329 #i‡@
GNULIB_FSTATAT
@

330 #i‡@
REPLACE_FSTATAT
@

331 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

332 #unde‡
f°©©


333 
	#f°©©
 
Ωl_f°©©


	)

335 
_GL_FUNCDECL_RPL
 (
f°©©
, ,

336 (
fd
, c⁄° *
«me
, 
°©
 *
°
, 
Êags
)

337 
_GL_ARG_NONNULL
 ((2, 3)));

338 
_GL_CXXALIAS_RPL
 (
f°©©
, ,

339 (
fd
, c⁄° *
«me
, 
°©
 *
°
, 
Êags
));

341 #i‡!@
HAVE_FSTATAT
@

342 
_GL_FUNCDECL_SYS
 (
f°©©
, ,

343 (
fd
, c⁄° *
«me
, 
°©
 *
°
, 
Êags
)

344 
_GL_ARG_NONNULL
 ((2, 3)));

346 
_GL_CXXALIAS_SYS
 (
f°©©
, ,

347 (
fd
, c⁄° *
«me
, 
°©
 *
°
, 
Êags
));

349 
_GL_CXXALIASWARN
 (
f°©©
);

350 #ñi‡
deföed
 
GNULIB_POSIXCHECK


351 #unde‡
f°©©


352 #i‡
HAVE_RAW_DECL_FSTATAT


353 
_GL_WARN_ON_USE
 (
f°©©
, "fstatat isÇotÖortable - "

359 #i‡@
GNULIB_FUTIMENS
@

364 #i‡@
REPLACE_FUTIMENS
@ || (!@
HAVE_FUTIMENS
@ && 
deföed
 
__sun
)

365 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

366 #unde‡
futimís


367 
	#futimís
 
Ωl_futimís


	)

369 
_GL_FUNCDECL_RPL
 (
futimís
, , (
fd
, 
time•ec
 c⁄° 
times
[2]));

370 
_GL_CXXALIAS_RPL
 (
futimís
, , (
fd
, 
time•ec
 c⁄° 
times
[2]));

372 #i‡!@
HAVE_FUTIMENS
@

373 
_GL_FUNCDECL_SYS
 (
futimís
, , (
fd
, 
time•ec
 c⁄° 
times
[2]));

375 
_GL_CXXALIAS_SYS
 (
futimís
, , (
fd
, 
time•ec
 c⁄° 
times
[2]));

377 #i‡@
HAVE_FUTIMENS
@

378 
_GL_CXXALIASWARN
 (
futimís
);

380 #ñi‡
deföed
 
GNULIB_POSIXCHECK


381 #unde‡
futimís


382 #i‡
HAVE_RAW_DECL_FUTIMENS


383 
_GL_WARN_ON_USE
 (
futimís
, "futimens isÇotÖortable - "

389 #i‡@
GNULIB_LCHMOD
@

392 #i‡!@
HAVE_LCHMOD
@

400 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

401 
	#lchmod
 
chmod


	)

405 
_GL_CXXALIAS_RPL_CAST_1
 (
lchmod
, 
chmod
, ,

406 (c⁄° *
fûíame
, 
mode_t
 
mode
));

409 
_GL_FUNCDECL_SYS
 (
lchmod
, , (c⁄° *
fûíame
, 
mode_t
 
mode
)

410 
_GL_ARG_NONNULL
 ((1)));

412 
_GL_CXXALIAS_SYS
 (
lchmod
, , (c⁄° *
fûíame
, 
mode_t
 
mode
));

414 #i‡@
HAVE_LCHMOD
@

415 
_GL_CXXALIASWARN
 (
lchmod
);

417 #ñi‡
deföed
 
GNULIB_POSIXCHECK


418 #unde‡
lchmod


419 #i‡
HAVE_RAW_DECL_LCHMOD


420 
_GL_WARN_ON_USE
 (
lchmod
, "lchmod is unportable - "

426 #i‡@
GNULIB_LSTAT
@

427 #i‡! @
HAVE_LSTAT
@

430 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

431 
	#l°©
 
°©


	)

433 
_GL_CXXALIAS_RPL_1
 (
l°©
, 
°©
, , (c⁄° *
«me
, °© *
buf
));

434 #ñi‡@
REPLACE_LSTAT
@

435 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

436 #unde‡
l°©


437 
	#l°©
 
Ωl_l°©


	)

439 
_GL_FUNCDECL_RPL
 (
l°©
, , (c⁄° *
«me
, 
°©
 *
buf
)

440 
_GL_ARG_NONNULL
 ((1, 2)));

441 
_GL_CXXALIAS_RPL
 (
l°©
, , (c⁄° *
«me
, 
°©
 *
buf
));

443 
_GL_CXXALIAS_SYS
 (
l°©
, , (c⁄° *
«me
, 
°©
 *
buf
));

445 #i‡@
HAVE_LSTAT
@

446 
_GL_CXXALIASWARN
 (
l°©
);

448 #ñi‡
deföed
 
GNULIB_POSIXCHECK


449 #unde‡
l°©


450 #i‡
HAVE_RAW_DECL_LSTAT


451 
_GL_WARN_ON_USE
 (
l°©
, "lstat is unportable - "

457 #i‡@
REPLACE_MKDIR
@

458 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

459 #unde‡
mkdú


460 
	#mkdú
 
Ωl_mkdú


	)

462 
_GL_FUNCDECL_RPL
 (
mkdú
, , (c⁄° *
«me
, 
mode_t
 
mode
)

463 
_GL_ARG_NONNULL
 ((1)));

464 
_GL_CXXALIAS_RPL
 (
mkdú
, , (c⁄° *
«me
, 
mode_t
 
mode
));

470 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


472 #i‡!
GNULIB_deföed_Ωl_mkdú


473 
ölöe
 

474 
	$Ωl_mkdú
 (c⁄° *
«me
, 
mode_t
 
mode
)

476  
	`_mkdú
 (
«me
);

477 
	}
}

478 
	#GNULIB_deföed_Ωl_mkdú
 1

	)

481 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

482 
	#mkdú
 
Ωl_mkdú


	)

484 
_GL_CXXALIAS_RPL
 (
mkdú
, , (c⁄° *
«me
, 
mode_t
 
mode
));

486 
_GL_CXXALIAS_SYS
 (
mkdú
, , (c⁄° *
«me
, 
mode_t
 
mode
));

489 
_GL_CXXALIASWARN
 (
mkdú
);

492 #i‡@
GNULIB_MKDIRAT
@

493 #i‡!@
HAVE_MKDIRAT
@

494 
_GL_FUNCDECL_SYS
 (
mkdú©
, , (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
)

495 
_GL_ARG_NONNULL
 ((2)));

497 
_GL_CXXALIAS_SYS
 (
mkdú©
, , (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
));

498 
_GL_CXXALIASWARN
 (
mkdú©
);

499 #ñi‡
deföed
 
GNULIB_POSIXCHECK


500 #unde‡
mkdú©


501 #i‡
HAVE_RAW_DECL_MKDIRAT


502 
_GL_WARN_ON_USE
 (
mkdú©
, "mkdirat isÇotÖortable - "

508 #i‡@
GNULIB_MKFIFO
@

509 #i‡@
REPLACE_MKFIFO
@

510 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

511 #unde‡
mkfifo


512 
	#mkfifo
 
Ωl_mkfifo


	)

514 
_GL_FUNCDECL_RPL
 (
mkfifo
, , (c⁄° *
fûe
, 
mode_t
 
mode
)

515 
_GL_ARG_NONNULL
 ((1)));

516 
_GL_CXXALIAS_RPL
 (
mkfifo
, , (c⁄° *
fûe
, 
mode_t
 
mode
));

518 #i‡!@
HAVE_MKFIFO
@

519 
_GL_FUNCDECL_SYS
 (
mkfifo
, , (c⁄° *
fûe
, 
mode_t
 
mode
)

520 
_GL_ARG_NONNULL
 ((1)));

522 
_GL_CXXALIAS_SYS
 (
mkfifo
, , (c⁄° *
fûe
, 
mode_t
 
mode
));

524 
_GL_CXXALIASWARN
 (
mkfifo
);

525 #ñi‡
deföed
 
GNULIB_POSIXCHECK


526 #unde‡
mkfifo


527 #i‡
HAVE_RAW_DECL_MKFIFO


528 
_GL_WARN_ON_USE
 (
mkfifo
, "mkfifo isÇotÖortable - "

534 #i‡@
GNULIB_MKFIFOAT
@

535 #i‡!@
HAVE_MKFIFOAT
@

536 
_GL_FUNCDECL_SYS
 (
mkfifﬂt
, , (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
)

537 
_GL_ARG_NONNULL
 ((2)));

539 
_GL_CXXALIAS_SYS
 (
mkfifﬂt
, , (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
));

540 
_GL_CXXALIASWARN
 (
mkfifﬂt
);

541 #ñi‡
deföed
 
GNULIB_POSIXCHECK


542 #unde‡
mkfifﬂt


543 #i‡
HAVE_RAW_DECL_MKFIFOAT


544 
_GL_WARN_ON_USE
 (
mkfifﬂt
, "mkfifoat isÇotÖortable - "

550 #i‡@
GNULIB_MKNOD
@

551 #i‡@
REPLACE_MKNOD
@

552 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

553 #unde‡
mknod


554 
	#mknod
 
Ωl_mknod


	)

556 
_GL_FUNCDECL_RPL
 (
mknod
, , (c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
)

557 
_GL_ARG_NONNULL
 ((1)));

558 
_GL_CXXALIAS_RPL
 (
mknod
, , (c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
));

560 #i‡!@
HAVE_MKNOD
@

561 
_GL_FUNCDECL_SYS
 (
mknod
, , (c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
)

562 
_GL_ARG_NONNULL
 ((1)));

565 
_GL_CXXALIAS_SYS_CAST
 (
mknod
, , (c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
));

567 
_GL_CXXALIASWARN
 (
mknod
);

568 #ñi‡
deföed
 
GNULIB_POSIXCHECK


569 #unde‡
mknod


570 #i‡
HAVE_RAW_DECL_MKNOD


571 
_GL_WARN_ON_USE
 (
mknod
, "mknod isÇotÖortable - "

577 #i‡@
GNULIB_MKNODAT
@

578 #i‡!@
HAVE_MKNODAT
@

579 
_GL_FUNCDECL_SYS
 (
mknod©
, ,

580 (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
)

581 
_GL_ARG_NONNULL
 ((2)));

583 
_GL_CXXALIAS_SYS
 (
mknod©
, ,

584 (
fd
, c⁄° *
fûe
, 
mode_t
 
mode
, 
dev_t
 
dev
));

585 
_GL_CXXALIASWARN
 (
mknod©
);

586 #ñi‡
deföed
 
GNULIB_POSIXCHECK


587 #unde‡
mknod©


588 #i‡
HAVE_RAW_DECL_MKNODAT


589 
_GL_WARN_ON_USE
 (
mknod©
, "mknodat isÇotÖortable - "

595 #i‡@
GNULIB_STAT
@

596 #i‡@
REPLACE_STAT
@

600 #unde‡
°©


601 #ifde‡
_LARGE_FILES


604 
	#°©
 
°©64


	)

605 #unde‡
°©64


606 
	#°©64
(
«me
, 
°
Ë
	`Ωl_°©
 («me, st)

	)

608 
	#°©
(
«me
, 
°
Ë
	`Ωl_°©
 («me, st)

	)

610 
_GL_EXTERN_C
 
	$°©
 (c⁄° *
«me
, 
°©
 *
buf
)

611 
	`_GL_ARG_NONNULL
 ((1, 2));

613 #ñi‡
deföed
 
GNULIB_POSIXCHECK


614 #unde‡
°©


615 #i‡
HAVE_RAW_DECL_STAT


616 
	`_GL_WARN_ON_USE
 (
°©
, "stat is unportable - "

622 #i‡@
GNULIB_UTIMENSAT
@

627 #i‡@
REPLACE_UTIMENSAT
@ || (!@
HAVE_UTIMENSAT
@ && 
deföed
 
__sun
)

628 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

629 #unde‡
utimíßt


630 
	#utimíßt
 
Ωl_utimíßt


	)

632 
	`_GL_FUNCDECL_RPL
 (
utimíßt
, , (
fd
, c⁄° *
«me
,

633 
time•ec
 c⁄° 
times
[2], 
Êag
)

634 
	`_GL_ARG_NONNULL
 ((2)));

635 
	`_GL_CXXALIAS_RPL
 (
utimíßt
, , (
fd
, c⁄° *
«me
,

636 
time•ec
 c⁄° 
times
[2], 
Êag
));

638 #i‡!@
HAVE_UTIMENSAT
@

639 
	`_GL_FUNCDECL_SYS
 (
utimíßt
, , (
fd
, c⁄° *
«me
,

640 
time•ec
 c⁄° 
times
[2], 
Êag
)

641 
	`_GL_ARG_NONNULL
 ((2)));

643 
	`_GL_CXXALIAS_SYS
 (
utimíßt
, , (
fd
, c⁄° *
«me
,

644 
time•ec
 c⁄° 
times
[2], 
Êag
));

646 #i‡@
HAVE_UTIMENSAT
@

647 
	`_GL_CXXALIASWARN
 (
utimíßt
);

649 #ñi‡
deföed
 
GNULIB_POSIXCHECK


650 #unde‡
utimíßt


651 #i‡
HAVE_RAW_DECL_UTIMENSAT


652 
	`_GL_WARN_ON_USE
 (
utimíßt
, "utimensat isÇotÖortable - "

	@lib/sys_time.in.h

23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

28 #i‡
deföed
 
_
@
GUARD_PREFIX
@
_SYS_TIME_H


31 #i‡@
HAVE_SYS_TIME_H
@

32 #@
INCLUDE_NEXT
@ @
NEXT_SYS_TIME_H
@

37 
	#_
@
GUARD_PREFIX
@
_SYS_TIME_H


	)

39 #i‡@
HAVE_SYS_TIME_H
@

40 #@
INCLUDE_NEXT
@ @
NEXT_SYS_TIME_H
@

42 
	~<time.h
>

51 #ifde‡
__˝lu•lus


55 #i‡! @
HAVE_STRUCT_TIMEVAL
@

57 #i‡!
GNULIB_deföed_°ru˘_timevÆ


58 
	stimevÆ


60 
time_t
 
tv_£c
;

61 
tv_u£c
;

63 
	#GNULIB_deföed_°ru˘_timevÆ
 1

	)

68 #ifde‡
__˝lu•lus


72 #i‡@
GNULIB_GETTIMEOFDAY
@

73 #i‡@
REPLACE_GETTIMEOFDAY
@

74 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

75 #unde‡
gëtimeofday


76 
	#gëtimeofday
 
Ωl_gëtimeofday


	)

78 
_GL_FUNCDECL_RPL
 (
gëtimeofday
, ,

79 (
timevÆ
 *
ª°ri˘
, *restrict)

80 
_GL_ARG_NONNULL
 ((1)));

81 
_GL_CXXALIAS_RPL
 (
gëtimeofday
, ,

82 (
timevÆ
 *
ª°ri˘
, *restrict));

84 #i‡!@
HAVE_GETTIMEOFDAY
@

85 
_GL_FUNCDECL_SYS
 (
gëtimeofday
, ,

86 (
timevÆ
 *
ª°ri˘
, *restrict)

87 
_GL_ARG_NONNULL
 ((1)));

91 
_GL_CXXALIAS_SYS_CAST
 (
gëtimeofday
, ,

92 (
timevÆ
 *
ª°ri˘
, *restrict));

94 
_GL_CXXALIASWARN
 (
gëtimeofday
);

95 #ñi‡
deföed
 
GNULIB_POSIXCHECK


96 #unde‡
gëtimeofday


97 #i‡
HAVE_RAW_DECL_GETTIMEOFDAY


98 
_GL_WARN_ON_USE
 (
gëtimeofday
, "gettimeofday is unportable - "

	@lib/sys_types.in.h

21 #i‡
__GNUC__
 >= 3

22 @
	gPRAGMA_SYSTEM_HEADER
@

24 @
	gPRAGMA_COLUMNS
@

26 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_TYPES_H


29 #@
INCLUDE_NEXT
@ @
NEXT_SYS_TYPES_H
@

31 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_TYPES_H


32 
	#_
@
GUARD_PREFIX
@
_SYS_TYPES_H


	)

36 #i‡((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
) \

37 && ! 
deföed
 
	g__GLIBC__


38 
	~<°ddef.h
>

	@lib/sys_uio.in.h

20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

25 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_UIO_H


27 #i‡@
HAVE_SYS_UIO_H
@

30 
	~<sys/ty≥s.h
>

33 #@
INCLUDE_NEXT
@ @
NEXT_SYS_UIO_H
@

37 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_UIO_H


38 
	#_
@
GUARD_PREFIX
@
_SYS_UIO_H


	)

40 #i‡!@
HAVE_SYS_UIO_H
@

43 
	~<sys/ty≥s.h
>

45 #ifde‡
__˝lu•lus


49 #i‡!
GNULIB_deföed_°ru˘_iovec


52 
	siovec
 {

53 *
iov_ba£
;

54 
size_t
 
iov_Àn
;

56 
	#GNULIB_deföed_°ru˘_iovec
 1

	)

59 #ifde‡
__˝lu•lus


	@lib/sys_wait.in.h

21 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_WAIT_H


23 #i‡
__GNUC__
 >= 3

24 @
	gPRAGMA_SYSTEM_HEADER
@

26 @
	gPRAGMA_COLUMNS
@

29 #i‡!((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
)

30 #@
INCLUDE_NEXT
@ @
NEXT_SYS_WAIT_H
@

33 #i‚de‡
_
@
GUARD_PREFIX
@
_SYS_WAIT_H


34 
	#_
@
GUARD_PREFIX
@
_SYS_WAIT_H


	)

37 
	~<sys/ty≥s.h
>

45 #i‡!((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
)

56 #i‚de‡
WIFSIGNALED


57 
	#WIFSIGNALED
(
x
Ë(
	`WTERMSIG
 (xË!0 && WTERMSIG(xË!0x7f)

	)

59 #i‚de‡
WIFEXITED


60 
	#WIFEXITED
(
x
Ë(
	`WTERMSIG
 (xË=0)

	)

62 #i‚de‡
WIFSTOPPED


63 
	#WIFSTOPPED
(
x
Ë(
	`WTERMSIG
 (xË=0x7f)

	)

67 #i‚de‡
WTERMSIG


68 
	#WTERMSIG
(
x
Ë((xË& 0x7f)

	)

72 #i‚de‡
WEXITSTATUS


73 
	#WEXITSTATUS
(
x
Ë(((xË>> 8Ë& 0xff)

	)

77 #i‚de‡
WSTOPSIG


78 
	#WSTOPSIG
(
x
Ë(((xË>> 8Ë& 0x7f)

	)

82 #i‚de‡
WCOREDUMP


83 
	#WCOREDUMP
(
x
Ë((xË& 0x80)

	)

89 
	~<sig«l.h
>

96 
	#WIFSIGNALED
(
x
Ë((xË=3)

	)

97 
	#WIFEXITED
(
x
Ë((xË!3)

	)

98 
	#WIFSTOPPED
(
x
Ë0

	)

101 
	#WTERMSIG
(
x
Ë
SIGTERM


	)

103 
	#WEXITSTATUS
(
x
Ë(x)

	)

106 
	#WSTOPSIG
(
x
Ë0

	)

109 
	#WCOREDUMP
(
x
Ë0

	)

116 #i‡@
GNULIB_WAITPID
@

117 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


118 
_GL_FUNCDECL_SYS
 (
waôpid
, 
pid_t
, (pid_à
pid
, *
°©u•
, 
›ti⁄s
));

120 
_GL_CXXALIAS_SYS
 (
waôpid
, 
pid_t
, (pid_à
pid
, *
°©u•
, 
›ti⁄s
));

121 
_GL_CXXALIASWARN
 (
waôpid
);

122 #ñi‡
deföed
 
GNULIB_POSIXCHECK


123 #unde‡
waôpid


124 #i‡
HAVE_RAW_DECL_WAITPID


125 
_GL_WARN_ON_USE
 (
waôpid
, "waitpid is unportable - "

	@lib/time.in.h

21 #i‡
__GNUC__
 >= 3

22 @
	gPRAGMA_SYSTEM_HEADER
@

24 @
	gPRAGMA_COLUMNS
@

31 #i‡(
deföed
 
__√ed_time_t
 || deföed 
__√ed_˛ock_t
 \

32 || 
deföed
 
	g__√ed_time•ec
 \

33 || 
deföed
 
	g_
@
	gGUARD_PREFIX
@
	g_TIME_H
)

35 #@
INCLUDE_NEXT
@ @
NEXT_TIME_H
@

39 
	#_
@
GUARD_PREFIX
@
_TIME_H


	)

41 #@
INCLUDE_NEXT
@ @
NEXT_TIME_H
@

44 
	~<°ddef.h
>

56 #i‡! @
TIME_H_DEFINES_STRUCT_TIMESPEC
@

57 #i‡@
SYS_TIME_H_DEFINES_STRUCT_TIMESPEC
@

58 
	~<sys/time.h
>

59 #ñi‡@
PTHREAD_H_DEFINES_STRUCT_TIMESPEC
@

60 
	~<±hªad.h
>

62 #unde‡
as˘ime_r


63 #unde‡
˘ime_r


64 #unde‡
gmtime_r


65 #unde‡
loˇ…ime_r


66 #unde‡
ønd_r


67 #unde‡
°πok_r


70 #ifde‡
__˝lu•lus


74 #i‡!
GNULIB_deföed_°ru˘_time•ec


75 #unde‡
time•ec


76 
	#time•ec
 
Ωl_time•ec


	)

77 
	stime•ec


79 
time_t
 
tv_£c
;

80 
tv_n£c
;

82 
	#GNULIB_deföed_°ru˘_time•ec
 1

	)

85 #ifde‡
__˝lu•lus


92 #i‡!
GNULIB_deföed_°ru˘_time_t_mu°_be_öãgøl


98 
	s__time_t_mu°_be_öãgøl
 {

99 
	m__Êﬂtög_time_t_unsuµ‹ãd
 : (
time_t
) 1;

101 
	#GNULIB_deföed_°ru˘_time_t_mu°_be_öãgøl
 1

	)

107 #i‡@
GNULIB_NANOSLEEP
@

108 #i‡@
REPLACE_NANOSLEEP
@

109 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

110 
	#«no¶ìp
 
Ωl_«no¶ìp


	)

112 
_GL_FUNCDECL_RPL
 (
«no¶ìp
, ,

113 (
time•ec
 c⁄° *
__rqç
, time•e¯*
__rmç
)

114 
_GL_ARG_NONNULL
 ((1)));

115 
_GL_CXXALIAS_RPL
 (
«no¶ìp
, ,

116 (
time•ec
 c⁄° *
__rqç
, time•e¯*
__rmç
));

118 #i‡! @
HAVE_NANOSLEEP
@

119 
_GL_FUNCDECL_SYS
 (
«no¶ìp
, ,

120 (
time•ec
 c⁄° *
__rqç
, time•e¯*
__rmç
)

121 
_GL_ARG_NONNULL
 ((1)));

123 
_GL_CXXALIAS_SYS
 (
«no¶ìp
, ,

124 (
time•ec
 c⁄° *
__rqç
, time•e¯*
__rmç
));

126 
_GL_CXXALIASWARN
 (
«no¶ìp
);

130 #i‡@
GNULIB_MKTIME
@

131 #i‡@
REPLACE_MKTIME
@

132 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

133 
	#mktime
 
Ωl_mktime


	)

135 
_GL_FUNCDECL_RPL
 (
mktime
, 
time_t
, (
tm
 *
__ç
Ë
_GL_ARG_NONNULL
 ((1)));

136 
_GL_CXXALIAS_RPL
 (
mktime
, 
time_t
, (
tm
 *
__ç
));

138 
_GL_CXXALIAS_SYS
 (
mktime
, 
time_t
, (
tm
 *
__ç
));

140 
_GL_CXXALIASWARN
 (
mktime
);

146 #i‡@
GNULIB_TIME_R
@

147 #i‡@
REPLACE_LOCALTIME_R
@

148 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

149 #unde‡
loˇ…ime_r


150 
	#loˇ…ime_r
 
Ωl_loˇ…ime_r


	)

152 
_GL_FUNCDECL_RPL
 (
loˇ…ime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

153 
tm
 *
ª°ri˘
 
__ªsu…
)

154 
_GL_ARG_NONNULL
 ((1, 2)));

155 
_GL_CXXALIAS_RPL
 (
loˇ…ime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

156 
tm
 *
ª°ri˘
 
__ªsu…
));

158 #i‡! @
HAVE_DECL_LOCALTIME_R
@

159 
_GL_FUNCDECL_SYS
 (
loˇ…ime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

160 
tm
 *
ª°ri˘
 
__ªsu…
)

161 
_GL_ARG_NONNULL
 ((1, 2)));

163 
_GL_CXXALIAS_SYS
 (
loˇ…ime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

164 
tm
 *
ª°ri˘
 
__ªsu…
));

166 #i‡@
HAVE_DECL_LOCALTIME_R
@

167 
_GL_CXXALIASWARN
 (
loˇ…ime_r
);

169 #i‡@
REPLACE_LOCALTIME_R
@

170 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

171 #unde‡
gmtime_r


172 
	#gmtime_r
 
Ωl_gmtime_r


	)

174 
_GL_FUNCDECL_RPL
 (
gmtime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

175 
tm
 *
ª°ri˘
 
__ªsu…
)

176 
_GL_ARG_NONNULL
 ((1, 2)));

177 
_GL_CXXALIAS_RPL
 (
gmtime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

178 
tm
 *
ª°ri˘
 
__ªsu…
));

180 #i‡! @
HAVE_DECL_LOCALTIME_R
@

181 
_GL_FUNCDECL_SYS
 (
gmtime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

182 
tm
 *
ª°ri˘
 
__ªsu…
)

183 
_GL_ARG_NONNULL
 ((1, 2)));

185 
_GL_CXXALIAS_SYS
 (
gmtime_r
, 
tm
 *, (
time_t
 c⁄° *
ª°ri˘
 
__timî
,

186 
tm
 *
ª°ri˘
 
__ªsu…
));

188 #i‡@
HAVE_DECL_LOCALTIME_R
@

189 
_GL_CXXALIASWARN
 (
gmtime_r
);

196 #i‡@
GNULIB_STRPTIME
@

197 #i‡! @
HAVE_STRPTIME
@

198 
_GL_FUNCDECL_SYS
 (
°Ωtime
, *, (c⁄° *
ª°ri˘
 
__buf
,

199 c⁄° *
ª°ri˘
 
__f‹m©
,

200 
tm
 *
ª°ri˘
 
__tm
)

201 
_GL_ARG_NONNULL
 ((1, 2, 3)));

203 
_GL_CXXALIAS_SYS
 (
°Ωtime
, *, (c⁄° *
ª°ri˘
 
__buf
,

204 c⁄° *
ª°ri˘
 
__f‹m©
,

205 
tm
 *
ª°ri˘
 
__tm
));

206 
_GL_CXXALIASWARN
 (
°Ωtime
);

210 #i‡@
GNULIB_TIMEGM
@

211 #i‡@
REPLACE_TIMEGM
@

212 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

213 #unde‡
timegm


214 
	#timegm
 
Ωl_timegm


	)

216 
_GL_FUNCDECL_RPL
 (
timegm
, 
time_t
, (
tm
 *
__tm
Ë
_GL_ARG_NONNULL
 ((1)));

217 
_GL_CXXALIAS_RPL
 (
timegm
, 
time_t
, (
tm
 *
__tm
));

219 #i‡! @
HAVE_TIMEGM
@

220 
_GL_FUNCDECL_SYS
 (
timegm
, 
time_t
, (
tm
 *
__tm
Ë
_GL_ARG_NONNULL
 ((1)));

222 
_GL_CXXALIAS_SYS
 (
timegm
, 
time_t
, (
tm
 *
__tm
));

224 
_GL_CXXALIASWARN
 (
timegm
);

230 #i‡
deföed
 
GNULIB_POSIXCHECK


231 #unde‡
as˘ime


232 
_GL_WARN_ON_USE
 (
as˘ime
, "asctime can overrun buffers in some cases - "

235 #i‡
deföed
 
GNULIB_POSIXCHECK


236 #unde‡
as˘ime_r


237 
_GL_WARN_ON_USE
 (
as˘ime
, "asctime_r can overrun buffers in some cases - "

240 #i‡
deföed
 
GNULIB_POSIXCHECK


241 #unde‡
˘ime


242 
_GL_WARN_ON_USE
 (
as˘ime
, "ctime can overrun buffers in some cases - "

245 #i‡
deföed
 
GNULIB_POSIXCHECK


246 #unde‡
˘ime_r


247 
_GL_WARN_ON_USE
 (
as˘ime
, "ctime_r can overrun buffers in some cases - "

	@lib/timespec.h

19 #i‡! 
deföed
 
TIMESPEC_H


20 
	#TIMESPEC_H


	)

22 
	~<time.h
>

52 
ölöe
 

53 
	$time•ec_cmp
 (
time•ec
 
a
, time•e¯
b
)

55  (
a
.
tv_£c
 < 
b
.tv_sec ? -1

56 : 
a
.
tv_£c
 > 
b
.tv_sec ? 1

57 : (Ë(
a
.
tv_n£c
 - 
b
.tv_nsec));

58 
	}
}

62 
ölöe
 

63 
	$time•ec_sign
 (
time•ec
 
a
)

65  
a
.
tv_£c
 < 0 ? -1 :á.tv_£¯||á.
tv_n£c
;

66 
	}
}

68 
time•ec
 
time•ec_add
 (timespec, timespec);

69 
time•ec
 
time•ec_sub
 (timespec, timespec);

70 
time•ec
 
dtŸime•ec
 ();

73 
ölöe
 

74 
	$time•e˘od
 (
time•ec
 
a
)

76  
a
.
tv_£c
 +á.
tv_n£c
 / 1e9;

77 
	}
}

79 
gëtime
 (
time•ec
 *);

80 
£âime
 (
time•ec
 const *);

	@lib/unistd--.h

20 
	~<uni°d.h
>

21 
	~"uni°d-ß„r.h
"

23 #unde‡
dup


24 
	#dup
 
dup_ß„r


	)

26 #unde‡
pùe


27 
	#pùe
 
pùe_ß„r


	)

29 #i‡
GNULIB_PIPE2_SAFER


30 #unde‡
pùe2


31 
	#pùe2
 
pùe2_ß„r


	)

	@lib/unistd-safer.h

20 
dup_ß„r
 ();

21 
fd_ß„r
 ();

22 
pùe_ß„r
 ([2]);

24 #i‡
GNULIB_FD_SAFER_FLAG


25 
dup_ß„r_Êag
 (, );

26 
fd_ß„r_Êag
 (, );

29 #i‡
GNULIB_PIPE2_SAFER


30 
pùe2_ß„r
 ([2], );

	@lib/unistd.in.h

20 #i‡
__GNUC__
 >= 3

21 @
	gPRAGMA_SYSTEM_HEADER
@

23 @
	gPRAGMA_COLUMNS
@

29 #i‡@
GNULIB_GETHOSTNAME
@ && @
UNISTD_H_HAVE_WINSOCK2_H
@ \

30 && !
deföed
 
	g_GL_WINSOCK2_H_WITNESS
 && deföed 
	g_WINSOCK2_H


33 #i‡@
HAVE_UNISTD_H
@

34 #@
INCLUDE_NEXT
@ @
NEXT_UNISTD_H
@

36 #îr‹ 
u√x≥˘ed
; 
ªp‹t
 
this
 
to
 
bug
-
gnulib
@
gnu
.
‹g


38 
	#_GL_WINSOCK2_H_WITNESS


	)

41 #ñi‡!
deföed
 
_
@
GUARD_PREFIX
@
_UNISTD_H


44 #i‡@
HAVE_UNISTD_H
@

45 #@
INCLUDE_NEXT
@ @
NEXT_UNISTD_H
@

49 #i‡@
GNULIB_GETHOSTNAME
@ && @
UNISTD_H_HAVE_WINSOCK2_H
@ \

50 && !
deföed
 
	g_GL_INCLUDING_WINSOCK2_H


51 
	#_GL_INCLUDING_WINSOCK2_H


	)

52 
	~<wösock2.h
>

53 #unde‡
_GL_INCLUDING_WINSOCK2_H


56 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_UNISTD_H
 && !deföed 
_GL_INCLUDING_WINSOCK2_H


57 
	#_
@
GUARD_PREFIX
@
_UNISTD_H


	)

60 
	~<°ddef.h
>

65 #i‡(!(
deföed
 
SEEK_CUR
 && deföed 
SEEK_END
 && deföed 
SEEK_SET
) \

66 || ((@
	gGNULIB_SYMLINKAT
@ || 
deföed
 
	gGNULIB_POSIXCHECK
) \

67 && 
deföed
 
	g__CYGWIN__
)) \

68 && ! 
deföed
 
	g__GLIBC__


69 
	~<°dio.h
>

74 #i‡(@
GNULIB_UNLINKAT
@ || 
deföed
 
GNULIB_POSIXCHECK
Ë&& deföed 
__CYGWIN__
 \

75 && ! 
deföed
 
	g__GLIBC__


76 
	~<f˙é.h
>

83 #i‚de‡
__GLIBC__


84 
	~<°dlib.h
>

88 #i‡((@
GNULIB_GETCWD
@ || 
deföed
 
GNULIB_POSIXCHECK
) \

89 && ((
deföed
 
	g_WIN32
 || deföed 
	g__WIN32__
Ë&& ! deföed 
	g__CYGWIN__
))

90 
	~<io.h
>

91 
	~<dúe˘.h
>

97 #i‡((@
GNULIB_GETDOMAINNAME
@ && (
deföed
 
_AIX
 || deföed 
__osf__
)) \

98 || (@
	gGNULIB_GETHOSTNAME
@ && 
deföed
 
	g__TANDEM
)) \

99 && !
deföed
 
	g__GLIBC__


100 
	~<√tdb.h
>

103 #i‡(@
GNULIB_READ
@ || @
GNULIB_WRITE
@ \

104 || @
	gGNULIB_READLINK
@ || @
	gGNULIB_READLINKAT
@ \

105 || @
	gGNULIB_PREAD
@ || @
	gGNULIB_PWRITE
@ || 
deföed
 
	gGNULIB_POSIXCHECK
)

107 
	~<sys/ty≥s.h
>

112 #i‡@
GNULIB_UNISTD_H_GETOPT
@ && !
deföed
 
__GLIBC__
 && !deföed 
_GL_SYSTEM_GETOPT


113 
	~<gë›t.h
>

125 #i‡@
GNULIB_GETHOSTNAME
@ && @
UNISTD_H_HAVE_WINSOCK2_H
@

126 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_SYS_SOCKET_H


127 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

128 #unde‡
sockë


129 
	#sockë
 
sockë_u£d_wôhout_ö˛udög_sys_sockë_h


	)

130 #unde‡
c⁄√˘


131 
	#c⁄√˘
 
c⁄√˘_u£d_wôhout_ö˛udög_sys_sockë_h


	)

132 #unde‡
ac˚±


133 
	#ac˚±
 
ac˚±_u£d_wôhout_ö˛udög_sys_sockë_h


	)

134 #unde‡
böd


135 
	#böd
 
böd_u£d_wôhout_ö˛udög_sys_sockë_h


	)

136 #unde‡
gë≥î«me


137 
	#gë≥î«me
 
gë≥î«me_u£d_wôhout_ö˛udög_sys_sockë_h


	)

138 #unde‡
gësock«me


139 
	#gësock«me
 
gësock«me_u£d_wôhout_ö˛udög_sys_sockë_h


	)

140 #unde‡
gësock›t


141 
	#gësock›t
 
gësock›t_u£d_wôhout_ö˛udög_sys_sockë_h


	)

142 #unde‡
li°í


143 
	#li°í
 
li°í_u£d_wôhout_ö˛udög_sys_sockë_h


	)

144 #unde‡
ªcv


145 
	#ªcv
 
ªcv_u£d_wôhout_ö˛udög_sys_sockë_h


	)

146 #unde‡
£nd


147 
	#£nd
 
£nd_u£d_wôhout_ö˛udög_sys_sockë_h


	)

148 #unde‡
ªcv‰om


149 
	#ªcv‰om
 
ªcv‰om_u£d_wôhout_ö˛udög_sys_sockë_h


	)

150 #unde‡
£ndto


151 
	#£ndto
 
£ndto_u£d_wôhout_ö˛udög_sys_sockë_h


	)

152 #unde‡
£tsock›t


153 
	#£tsock›t
 
£tsock›t_u£d_wôhout_ö˛udög_sys_sockë_h


	)

154 #unde‡
shutdown


155 
	#shutdown
 
shutdown_u£d_wôhout_ö˛udög_sys_sockë_h


	)

157 
_GL_WARN_ON_USE
 (
sockë
,

159 
_GL_WARN_ON_USE
 (
c⁄√˘
,

161 
_GL_WARN_ON_USE
 (
ac˚±
,

163 
_GL_WARN_ON_USE
 (
böd
,

165 
_GL_WARN_ON_USE
 (
gë≥î«me
,

167 
_GL_WARN_ON_USE
 (
gësock«me
,

169 
_GL_WARN_ON_USE
 (
gësock›t
,

171 
_GL_WARN_ON_USE
 (
li°í
,

173 
_GL_WARN_ON_USE
 (
ªcv
,

175 
_GL_WARN_ON_USE
 (
£nd
,

177 
_GL_WARN_ON_USE
 (
ªcv‰om
,

179 
_GL_WARN_ON_USE
 (
£ndto
,

181 
_GL_WARN_ON_USE
 (
£tsock›t
,

183 
_GL_WARN_ON_USE
 (
shutdown
,

187 #i‡!
deföed
 
_
@
GUARD_PREFIX
@
_SYS_SELECT_H


188 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

189 #unde‡
£À˘


190 
	#£À˘
 
£À˘_u£d_wôhout_ö˛udög_sys_£À˘_h


	)

192 
_GL_WARN_ON_USE
 (
£À˘
,

200 #i‚de‡
STDIN_FILENO


201 
	#STDIN_FILENO
 0

	)

203 #i‚de‡
STDOUT_FILENO


204 
	#STDOUT_FILENO
 1

	)

206 #i‚de‡
STDERR_FILENO


207 
	#STDERR_FILENO
 2

	)

211 #i‚de‡
F_OK


212 
	#F_OK
 0

	)

213 
	#X_OK
 1

	)

214 
	#W_OK
 2

	)

215 
	#R_OK
 4

	)

222 #i‡
deföed
 
GNULIB_POSIXCHECK


224 
_GL_WARN_ON_USE
 (
ac˚ss
, "theáccess function isá securityÑisk - "

229 #i‡@
GNULIB_CHOWN
@

235 #i‡@
REPLACE_CHOWN
@

236 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

237 #unde‡
chown


238 
	#chown
 
Ωl_chown


	)

240 
_GL_FUNCDECL_RPL
 (
chown
, , (c⁄° *
fûe
, 
uid_t
 
uid
, 
gid_t
 
gid
)

241 
_GL_ARG_NONNULL
 ((1)));

242 
_GL_CXXALIAS_RPL
 (
chown
, , (c⁄° *
fûe
, 
uid_t
 
uid
, 
gid_t
 
gid
));

244 #i‡!@
HAVE_CHOWN
@

245 
_GL_FUNCDECL_SYS
 (
chown
, , (c⁄° *
fûe
, 
uid_t
 
uid
, 
gid_t
 
gid
)

246 
_GL_ARG_NONNULL
 ((1)));

248 
_GL_CXXALIAS_SYS
 (
chown
, , (c⁄° *
fûe
, 
uid_t
 
uid
, 
gid_t
 
gid
));

250 
_GL_CXXALIASWARN
 (
chown
);

251 #ñi‡
deföed
 
GNULIB_POSIXCHECK


252 #unde‡
chown


253 #i‡
HAVE_RAW_DECL_CHOWN


254 
_GL_WARN_ON_USE
 (
chown
, "chown failsÅo follow symlinks on some systemsánd "

261 #i‡@
GNULIB_CLOSE
@

262 #i‡@
REPLACE_CLOSE
@

264 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

265 #unde‡
˛o£


266 
	#˛o£
 
Ωl_˛o£


	)

268 
_GL_FUNCDECL_RPL
 (
˛o£
, , (
fd
));

269 
_GL_CXXALIAS_RPL
 (
˛o£
, , (
fd
));

271 
_GL_CXXALIAS_SYS
 (
˛o£
, , (
fd
));

273 
_GL_CXXALIASWARN
 (
˛o£
);

274 #ñi‡@
UNISTD_H_HAVE_WINSOCK2_H_AND_USE_SOCKETS
@

275 #unde‡
˛o£


276 
	#˛o£
 
˛o£_u£d_wôhout_ªque°ög_gnulib_moduÀ_˛o£


	)

277 #ñi‡
deföed
 
GNULIB_POSIXCHECK


278 #unde‡
˛o£


280 
_GL_WARN_ON_USE
 (
˛o£
, "close doesÇotÖortably work on sockets - "

285 #i‡@
REPLACE_DUP
@

286 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

287 
	#dup
 
Ωl_dup


	)

289 
_GL_FUNCDECL_RPL
 (
dup
, , (
ﬁdfd
));

290 
_GL_CXXALIAS_RPL
 (
dup
, , (
ﬁdfd
));

292 
_GL_CXXALIAS_SYS
 (
dup
, , (
ﬁdfd
));

294 
_GL_CXXALIASWARN
 (
dup
);

297 #i‡@
GNULIB_DUP2
@

303 #i‡@
REPLACE_DUP2
@

304 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

305 
	#dup2
 
Ωl_dup2


	)

307 
_GL_FUNCDECL_RPL
 (
dup2
, , (
ﬁdfd
, 
√wfd
));

308 
_GL_CXXALIAS_RPL
 (
dup2
, , (
ﬁdfd
, 
√wfd
));

310 #i‡!@
HAVE_DUP2
@

311 
_GL_FUNCDECL_SYS
 (
dup2
, , (
ﬁdfd
, 
√wfd
));

313 
_GL_CXXALIAS_SYS
 (
dup2
, , (
ﬁdfd
, 
√wfd
));

315 
_GL_CXXALIASWARN
 (
dup2
);

316 #ñi‡
deföed
 
GNULIB_POSIXCHECK


317 #unde‡
dup2


318 #i‡
HAVE_RAW_DECL_DUP2


319 
_GL_WARN_ON_USE
 (
dup2
, "dup2 is unportable - "

325 #i‡@
GNULIB_DUP3
@

334 #i‡@
HAVE_DUP3
@

335 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

336 
	#dup3
 
Ωl_dup3


	)

338 
_GL_FUNCDECL_RPL
 (
dup3
, , (
ﬁdfd
, 
√wfd
, 
Êags
));

339 
_GL_CXXALIAS_RPL
 (
dup3
, , (
ﬁdfd
, 
√wfd
, 
Êags
));

341 
_GL_FUNCDECL_SYS
 (
dup3
, , (
ﬁdfd
, 
√wfd
, 
Êags
));

342 
_GL_CXXALIAS_SYS
 (
dup3
, , (
ﬁdfd
, 
√wfd
, 
Êags
));

344 
_GL_CXXALIASWARN
 (
dup3
);

345 #ñi‡
deföed
 
GNULIB_POSIXCHECK


346 #unde‡
dup3


347 #i‡
HAVE_RAW_DECL_DUP3


348 
_GL_WARN_ON_USE
 (
dup3
, "dup3 is unportable - "

354 #i‡@
GNULIB_ENVIRON
@

355 #i‡!@
HAVE_DECL_ENVIRON
@

358 #i‡
deföed
 
__APPLE__
 && deföed 
__MACH__


359 
	~<¸t_exã∫s.h
>

360 
	#ívú⁄
 (*
	`_NSGëEnvú⁄
 ())

	)

362 #ifde‡
__˝lu•lus


365 **
ívú⁄
;

366 #ifde‡
__˝lu•lus


371 #ñi‡
deföed
 
GNULIB_POSIXCHECK


372 #i‡
HAVE_RAW_DECL_ENVIRON


373 
ölöe
 ***

374 
	$Ωl_ívú⁄
 ()

376  &
ívú⁄
;

377 
	}
}

378 
_GL_WARN_ON_USE
 (
Ωl_ívú⁄
, "environ is unportable - "

380 #unde‡
ívú⁄


381 
	#ívú⁄
 (*
	`Ωl_ívú⁄
 ())

	)

386 #i‡@
GNULIB_EUIDACCESS
@

389 #i‡!@
HAVE_EUIDACCESS
@

390 
_GL_FUNCDECL_SYS
 (
euidac˚ss
, , (c⁄° *
fûíame
, 
mode
)

391 
_GL_ARG_NONNULL
 ((1)));

393 
_GL_CXXALIAS_SYS
 (
euidac˚ss
, , (c⁄° *
fûíame
, 
mode
));

394 
_GL_CXXALIASWARN
 (
euidac˚ss
);

395 #i‡
deföed
 
GNULIB_POSIXCHECK


397 
_GL_WARN_ON_USE
 (
euidac˚ss
, "theÉuidaccess function isá securityÑisk - "

400 #ñi‡
deföed
 
GNULIB_POSIXCHECK


401 #unde‡
euidac˚ss


402 #i‡
HAVE_RAW_DECL_EUIDACCESS


403 
_GL_WARN_ON_USE
 (
euidac˚ss
, "euidaccess is unportable - "

409 #i‡@
GNULIB_FACCESSAT
@

410 #i‡!@
HAVE_FACCESSAT
@

411 
_GL_FUNCDECL_SYS
 (
Ác˚sßt
, ,

412 (
fd
, c⁄° *
fûe
, 
mode
, 
Êag
)

413 
_GL_ARG_NONNULL
 ((2)));

415 
_GL_CXXALIAS_SYS
 (
Ác˚sßt
, ,

416 (
fd
, c⁄° *
fûe
, 
mode
, 
Êag
));

417 
_GL_CXXALIASWARN
 (
Ác˚sßt
);

418 #ñi‡
deföed
 
GNULIB_POSIXCHECK


419 #unde‡
Ác˚sßt


420 #i‡
HAVE_RAW_DECL_FACCESSAT


421 
_GL_WARN_ON_USE
 (
Ác˚sßt
, "faccessat isÇotÖortable - "

427 #i‡@
GNULIB_FCHDIR
@

433 #i‡! @
HAVE_FCHDIR
@

434 
_GL_FUNCDECL_SYS
 (
fchdú
, , ());

437 
_GL_EXTERN_C
 
	$_gl_ªgi°î_fd
 (
fd
, c⁄° *
fûíame
)

438 
	`_GL_ARG_NONNULL
 ((2));

439 
_GL_EXTERN_C
 
	`_gl_uƒegi°î_fd
 (
fd
);

440 
_GL_EXTERN_C
 
	`_gl_ªgi°î_dup
 (
ﬁdfd
, 
√wfd
);

441 
_GL_EXTERN_C
 c⁄° *
	`_gl_dúe˘‹y_«me
 (
fd
);

444 #i‡!@
HAVE_DECL_FCHDIR
@

445 
	`_GL_FUNCDECL_SYS
 (
fchdú
, , ());

448 
	`_GL_CXXALIAS_SYS
 (
fchdú
, , ());

449 
	`_GL_CXXALIASWARN
 (
fchdú
);

450 #ñi‡
deföed
 
GNULIB_POSIXCHECK


451 #unde‡
fchdú


452 #i‡
HAVE_RAW_DECL_FCHDIR


453 
	`_GL_WARN_ON_USE
 (
fchdú
, "fchdir is unportable - "

459 #i‡@
GNULIB_FCHOWNAT
@

460 #i‡@
REPLACE_FCHOWNAT
@

461 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

462 #unde‡
fchow«t


463 
	#fchow«t
 
Ωl_fchow«t


	)

465 
	`_GL_FUNCDECL_RPL
 (
fchow«t
, , (
fd
, c⁄° *
fûe
,

466 
uid_t
 
ow√r
, 
gid_t
 
group
, 
Êag
)

467 
	`_GL_ARG_NONNULL
 ((2)));

468 
	`_GL_CXXALIAS_RPL
 (
fchow«t
, , (
fd
, c⁄° *
fûe
,

469 
uid_t
 
ow√r
, 
gid_t
 
group
, 
Êag
));

471 #i‡!@
HAVE_FCHOWNAT
@

472 
	`_GL_FUNCDECL_SYS
 (
fchow«t
, , (
fd
, c⁄° *
fûe
,

473 
uid_t
 
ow√r
, 
gid_t
 
group
, 
Êag
)

474 
	`_GL_ARG_NONNULL
 ((2)));

476 
	`_GL_CXXALIAS_SYS
 (
fchow«t
, , (
fd
, c⁄° *
fûe
,

477 
uid_t
 
ow√r
, 
gid_t
 
group
, 
Êag
));

479 
	`_GL_CXXALIASWARN
 (
fchow«t
);

480 #ñi‡
deföed
 
GNULIB_POSIXCHECK


481 #unde‡
fchow«t


482 #i‡
HAVE_RAW_DECL_FCHOWNAT


483 
	`_GL_WARN_ON_USE
 (
fchow«t
, "fchownat isÇotÖortable - "

489 #i‡@
GNULIB_FSYNC
@

494 #i‡!@
HAVE_FSYNC
@

495 
	`_GL_FUNCDECL_SYS
 (
fsync
, , (
fd
));

497 
	`_GL_CXXALIAS_SYS
 (
fsync
, , (
fd
));

498 
	`_GL_CXXALIASWARN
 (
fsync
);

499 #ñi‡
deföed
 
GNULIB_POSIXCHECK


500 #unde‡
fsync


501 #i‡
HAVE_RAW_DECL_FSYNC


502 
	`_GL_WARN_ON_USE
 (
fsync
, "fsync is unportable - "

508 #i‡@
GNULIB_FTRUNCATE
@

513 #i‡!@
HAVE_FTRUNCATE
@

514 
	`_GL_FUNCDECL_SYS
 (
·runˇã
, , (
fd
, 
off_t
 
Àngth
));

516 
	`_GL_CXXALIAS_SYS
 (
·runˇã
, , (
fd
, 
off_t
 
Àngth
));

517 
	`_GL_CXXALIASWARN
 (
·runˇã
);

518 #ñi‡
deföed
 
GNULIB_POSIXCHECK


519 #unde‡
·runˇã


520 #i‡
HAVE_RAW_DECL_FTRUNCATE


521 
	`_GL_WARN_ON_USE
 (
·runˇã
, "ftruncate is unportable - "

527 #i‡@
GNULIB_GETCWD
@

538 #i‡@
REPLACE_GETCWD
@

539 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

540 
	#gëcwd
 
Ωl_gëcwd


	)

542 
	`_GL_FUNCDECL_RPL
 (
gëcwd
, *, (*
buf
, 
size_t
 
size
));

543 
	`_GL_CXXALIAS_RPL
 (
gëcwd
, *, (*
buf
, 
size_t
 
size
));

547 
	`_GL_CXXALIAS_SYS_CAST
 (
gëcwd
, *, (*
buf
, 
size_t
 
size
));

549 
	`_GL_CXXALIASWARN
 (
gëcwd
);

550 #ñi‡
deföed
 
GNULIB_POSIXCHECK


551 #unde‡
gëcwd


552 #i‡
HAVE_RAW_DECL_GETCWD


553 
	`_GL_WARN_ON_USE
 (
gëcwd
, "getcwd is unportable - "

559 #i‡@
GNULIB_GETDOMAINNAME
@

570 #i‡@
REPLACE_GETDOMAINNAME
@

571 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

572 #unde‡
gëdomaö«me


573 
	#gëdomaö«me
 
Ωl_gëdomaö«me


	)

575 
	`_GL_FUNCDECL_RPL
 (
gëdomaö«me
, , (*
«me
, 
size_t
 
Àn
)

576 
	`_GL_ARG_NONNULL
 ((1)));

577 
	`_GL_CXXALIAS_RPL
 (
gëdomaö«me
, , (*
«me
, 
size_t
 
Àn
));

579 #i‡!@
HAVE_DECL_GETDOMAINNAME
@

580 
	`_GL_FUNCDECL_SYS
 (
gëdomaö«me
, , (*
«me
, 
size_t
 
Àn
)

581 
	`_GL_ARG_NONNULL
 ((1)));

583 
	`_GL_CXXALIAS_SYS
 (
gëdomaö«me
, , (*
«me
, 
size_t
 
Àn
));

585 
	`_GL_CXXALIASWARN
 (
gëdomaö«me
);

586 #ñi‡
deföed
 
GNULIB_POSIXCHECK


587 #unde‡
gëdomaö«me


588 #i‡
HAVE_RAW_DECL_GETDOMAINNAME


589 
	`_GL_WARN_ON_USE
 (
gëdomaö«me
, "getdomainname is unportable - "

595 #i‡@
GNULIB_GETDTABLESIZE
@

598 #i‡!@
HAVE_GETDTABLESIZE
@

599 
	`_GL_FUNCDECL_SYS
 (
gëdèbÀsize
, , ());

601 
	`_GL_CXXALIAS_SYS
 (
gëdèbÀsize
, , ());

602 
	`_GL_CXXALIASWARN
 (
gëdèbÀsize
);

603 #ñi‡
deföed
 
GNULIB_POSIXCHECK


604 #unde‡
gëdèbÀsize


605 #i‡
HAVE_RAW_DECL_GETDTABLESIZE


606 
	`_GL_WARN_ON_USE
 (
gëdèbÀsize
, "getdtablesize is unportable - "

612 #i‡@
GNULIB_GETGROUPS
@

618 #i‡@
REPLACE_GETGROUPS
@

619 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

620 #unde‡
gëgroups


621 
	#gëgroups
 
Ωl_gëgroups


	)

623 
	`_GL_FUNCDECL_RPL
 (
gëgroups
, , (
n
, 
gid_t
 *
groups
));

624 
	`_GL_CXXALIAS_RPL
 (
gëgroups
, , (
n
, 
gid_t
 *
groups
));

626 #i‡!@
HAVE_GETGROUPS
@

627 
	`_GL_FUNCDECL_SYS
 (
gëgroups
, , (
n
, 
gid_t
 *
groups
));

629 
	`_GL_CXXALIAS_SYS
 (
gëgroups
, , (
n
, 
gid_t
 *
groups
));

631 
	`_GL_CXXALIASWARN
 (
gëgroups
);

632 #ñi‡
deföed
 
GNULIB_POSIXCHECK


633 #unde‡
gëgroups


634 #i‡
HAVE_RAW_DECL_GETGROUPS


635 
	`_GL_WARN_ON_USE
 (
gëgroups
, "getgroups is unportable - "

641 #i‡@
GNULIB_GETHOSTNAME
@

649 #i‡@
UNISTD_H_HAVE_WINSOCK2_H
@

650 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

651 #unde‡
gëho°«me


652 
	#gëho°«me
 
Ωl_gëho°«me


	)

654 
	`_GL_FUNCDECL_RPL
 (
gëho°«me
, , (*
«me
, 
size_t
 
Àn
)

655 
	`_GL_ARG_NONNULL
 ((1)));

656 
	`_GL_CXXALIAS_RPL
 (
gëho°«me
, , (*
«me
, 
size_t
 
Àn
));

658 #i‡!@
HAVE_GETHOSTNAME
@

659 
	`_GL_FUNCDECL_SYS
 (
gëho°«me
, , (*
«me
, 
size_t
 
Àn
)

660 
	`_GL_ARG_NONNULL
 ((1)));

665 
	`_GL_CXXALIAS_SYS_CAST
 (
gëho°«me
, , (*
«me
, 
size_t
 
Àn
));

667 
	`_GL_CXXALIASWARN
 (
gëho°«me
);

668 #ñi‡@
UNISTD_H_HAVE_WINSOCK2_H
@

669 #unde‡
gëho°«me


670 
	#gëho°«me
 
gëho°«me_u£d_wôhout_ªque°ög_gnulib_moduÀ_gëho°«me


	)

671 #ñi‡
deföed
 
GNULIB_POSIXCHECK


672 #unde‡
gëho°«me


673 #i‡
HAVE_RAW_DECL_GETHOSTNAME


674 
	`_GL_WARN_ON_USE
 (
gëho°«me
, "gethostname is unportable - "

680 #i‡@
GNULIB_GETLOGIN
@

691 #i‡!@
HAVE_GETLOGIN
@

692 
	`_GL_FUNCDECL_SYS
 (
gëlogö
, *, ());

694 
	`_GL_CXXALIAS_SYS
 (
gëlogö
, *, ());

695 
	`_GL_CXXALIASWARN
 (
gëlogö
);

696 #ñi‡
deföed
 
GNULIB_POSIXCHECK


697 #unde‡
gëlogö


698 #i‡
HAVE_RAW_DECL_GETLOGIN


699 
	`_GL_WARN_ON_USE
 (
gëlogö
, "getlogin is unportable - "

705 #i‡@
GNULIB_GETLOGIN_R
@

720 #i‡@
REPLACE_GETLOGIN_R
@

721 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

722 
	#gëlogö_r
 
Ωl_gëlogö_r


	)

724 
	`_GL_FUNCDECL_RPL
 (
gëlogö_r
, , (*
«me
, 
size_t
 
size
)

725 
	`_GL_ARG_NONNULL
 ((1)));

726 
	`_GL_CXXALIAS_RPL
 (
gëlogö_r
, , (*
«me
, 
size_t
 
size
));

728 #i‡!@
HAVE_DECL_GETLOGIN_R
@

729 
	`_GL_FUNCDECL_SYS
 (
gëlogö_r
, , (*
«me
, 
size_t
 
size
)

730 
	`_GL_ARG_NONNULL
 ((1)));

734 
	`_GL_CXXALIAS_SYS_CAST
 (
gëlogö_r
, , (*
«me
, 
size_t
 
size
));

736 
	`_GL_CXXALIASWARN
 (
gëlogö_r
);

737 #ñi‡
deföed
 
GNULIB_POSIXCHECK


738 #unde‡
gëlogö_r


739 #i‡
HAVE_RAW_DECL_GETLOGIN_R


740 
	`_GL_WARN_ON_USE
 (
gëlogö_r
, "getlogin_r is unportable - "

746 #i‡@
GNULIB_GETPAGESIZE
@

747 #i‡@
REPLACE_GETPAGESIZE
@

748 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

749 
	#gë∑gesize
 
Ωl_gë∑gesize


	)

751 
	`_GL_FUNCDECL_RPL
 (
gë∑gesize
, , ());

752 
	`_GL_CXXALIAS_RPL
 (
gë∑gesize
, , ());

754 #i‡!@
HAVE_GETPAGESIZE
@

755 #i‡!
deföed
 
gë∑gesize


757 #i‡!
deföed
 
_gl_gë∑gesize
 && deföed 
_SC_PAGESIZE


758 #i‡! (
deföed
 
__VMS
 && 
__VMS_VER
 < 70000000)

759 
	#_gl_gë∑gesize
(Ë
	`sysc⁄f
 (
_SC_PAGESIZE
)

	)

763 #i‡!
deföed
 
_gl_gë∑gesize
 && deföed 
__VMS


764 #ifde‡
__ALPHA


765 
	#_gl_gë∑gesize
(Ë8192

	)

767 
	#_gl_gë∑gesize
(Ë512

	)

771 #i‡!
deföed
 
_gl_gë∑gesize
 && @
HAVE_OS_H
@

772 
	~<OS.h
>

773 #i‡
deföed
 
B_PAGE_SIZE


774 
	#_gl_gë∑gesize
(Ë
B_PAGE_SIZE


	)

778 #i‡!
deföed
 
_gl_gë∑gesize
 && deföed 
__amigaos4__


779 
	#_gl_gë∑gesize
(Ë2048

	)

782 #i‡!
deföed
 
_gl_gë∑gesize
 && @
HAVE_SYS_PARAM_H
@

783 
	~<sys/∑øm.h
>

784 #ifde‡
EXEC_PAGESIZE


785 
	#_gl_gë∑gesize
(Ë
EXEC_PAGESIZE


	)

787 #ifde‡
NBPG


788 #i‚de‡
CLSIZE


789 
	#CLSIZE
 1

	)

791 
	#_gl_gë∑gesize
(Ë(
NBPG
 * 
CLSIZE
)

	)

793 #ifde‡
NBPC


794 
	#_gl_gë∑gesize
(Ë
NBPC


	)

799 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

800 
	#gë∑gesize
(Ë
	`_gl_gë∑gesize
 ()

	)

802 #i‡!
GNULIB_deföed_gë∑gesize_fun˘i⁄


803 
ölöe
 

804 
	$gë∑gesize
 ()

806  
	`_gl_gë∑gesize
 ();

807 
	}
}

808 
	#GNULIB_deföed_gë∑gesize_fun˘i⁄
 1

	)

814 
_GL_CXXALIAS_SYS_CAST
 (
gë∑gesize
, , ());

816 #i‡@
HAVE_DECL_GETPAGESIZE
@

817 
_GL_CXXALIASWARN
 (
gë∑gesize
);

819 #ñi‡
deföed
 
GNULIB_POSIXCHECK


820 #unde‡
gë∑gesize


821 #i‡
HAVE_RAW_DECL_GETPAGESIZE


822 
_GL_WARN_ON_USE
 (
gë∑gesize
, "getpagesize is unportable - "

828 #i‡@
GNULIB_GETUSERSHELL
@

831 #i‡!@
HAVE_DECL_GETUSERSHELL
@

832 
_GL_FUNCDECL_SYS
 (
gëu£rshñl
, *, ());

834 
_GL_CXXALIAS_SYS
 (
gëu£rshñl
, *, ());

835 
_GL_CXXALIASWARN
 (
gëu£rshñl
);

836 #ñi‡
deföed
 
GNULIB_POSIXCHECK


837 #unde‡
gëu£rshñl


838 #i‡
HAVE_RAW_DECL_GETUSERSHELL


839 
_GL_WARN_ON_USE
 (
gëu£rshñl
, "getusershell is unportable - "

844 #i‡@
GNULIB_GETUSERSHELL
@

846 #i‡!@
HAVE_DECL_GETUSERSHELL
@

847 
_GL_FUNCDECL_SYS
 (
£tu£rshñl
, , ());

849 
_GL_CXXALIAS_SYS
 (
£tu£rshñl
, , ());

850 
_GL_CXXALIASWARN
 (
£tu£rshñl
);

851 #ñi‡
deföed
 
GNULIB_POSIXCHECK


852 #unde‡
£tu£rshñl


853 #i‡
HAVE_RAW_DECL_SETUSERSHELL


854 
_GL_WARN_ON_USE
 (
£tu£rshñl
, "setusershell is unportable - "

859 #i‡@
GNULIB_GETUSERSHELL
@

862 #i‡!@
HAVE_DECL_GETUSERSHELL
@

863 
_GL_FUNCDECL_SYS
 (
ídu£rshñl
, , ());

865 
_GL_CXXALIAS_SYS
 (
ídu£rshñl
, , ());

866 
_GL_CXXALIASWARN
 (
ídu£rshñl
);

867 #ñi‡
deföed
 
GNULIB_POSIXCHECK


868 #unde‡
ídu£rshñl


869 #i‡
HAVE_RAW_DECL_ENDUSERSHELL


870 
_GL_WARN_ON_USE
 (
ídu£rshñl
, "endusershell is unportable - "

876 #i‡@
GNULIB_GROUP_MEMBER
@

878 #i‡!@
HAVE_GROUP_MEMBER
@

879 
_GL_FUNCDECL_SYS
 (
group_membî
, , (
gid_t
 
gid
));

881 
_GL_CXXALIAS_SYS
 (
group_membî
, , (
gid_t
 
gid
));

882 
_GL_CXXALIASWARN
 (
group_membî
);

883 #ñi‡
deföed
 
GNULIB_POSIXCHECK


884 #unde‡
group_membî


885 #i‡
HAVE_RAW_DECL_GROUP_MEMBER


886 
_GL_WARN_ON_USE
 (
group_membî
, "group_member is unportable - "

892 #i‡@
GNULIB_LCHOWN
@

898 #i‡@
REPLACE_LCHOWN
@

899 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

900 #unde‡
lchown


901 
	#lchown
 
Ωl_lchown


	)

903 
_GL_FUNCDECL_RPL
 (
lchown
, , (c⁄° *
fûe
, 
uid_t
 
ow√r
, 
gid_t
 
group
)

904 
_GL_ARG_NONNULL
 ((1)));

905 
_GL_CXXALIAS_RPL
 (
lchown
, , (c⁄° *
fûe
, 
uid_t
 
ow√r
, 
gid_t
 
group
));

907 #i‡!@
HAVE_LCHOWN
@

908 
_GL_FUNCDECL_SYS
 (
lchown
, , (c⁄° *
fûe
, 
uid_t
 
ow√r
, 
gid_t
 
group
)

909 
_GL_ARG_NONNULL
 ((1)));

911 
_GL_CXXALIAS_SYS
 (
lchown
, , (c⁄° *
fûe
, 
uid_t
 
ow√r
, 
gid_t
 
group
));

913 
_GL_CXXALIASWARN
 (
lchown
);

914 #ñi‡
deföed
 
GNULIB_POSIXCHECK


915 #unde‡
lchown


916 #i‡
HAVE_RAW_DECL_LCHOWN


917 
_GL_WARN_ON_USE
 (
lchown
, "lchown is unportableÅoÖre-POSIX.1-2001 systems - "

923 #i‡@
GNULIB_LINK
@

928 #i‡@
REPLACE_LINK
@

929 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

930 
	#lök
 
Ωl_lök


	)

932 
_GL_FUNCDECL_RPL
 (
lök
, , (c⁄° *
∑th1
, c⁄° *
∑th2
)

933 
_GL_ARG_NONNULL
 ((1, 2)));

934 
_GL_CXXALIAS_RPL
 (
lök
, , (c⁄° *
∑th1
, c⁄° *
∑th2
));

936 #i‡!@
HAVE_LINK
@

937 
_GL_FUNCDECL_SYS
 (
lök
, , (c⁄° *
∑th1
, c⁄° *
∑th2
)

938 
_GL_ARG_NONNULL
 ((1, 2)));

940 
_GL_CXXALIAS_SYS
 (
lök
, , (c⁄° *
∑th1
, c⁄° *
∑th2
));

942 
_GL_CXXALIASWARN
 (
lök
);

943 #ñi‡
deföed
 
GNULIB_POSIXCHECK


944 #unde‡
lök


945 #i‡
HAVE_RAW_DECL_LINK


946 
_GL_WARN_ON_USE
 (
lök
, "link is unportable - "

952 #i‡@
GNULIB_LINKAT
@

956 #i‡@
REPLACE_LINKAT
@

957 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

958 #unde‡
lök©


959 
	#lök©
 
Ωl_lök©


	)

961 
_GL_FUNCDECL_RPL
 (
lök©
, ,

962 (
fd1
, c⁄° *
∑th1
, 
fd2
, c⁄° *
∑th2
,

963 
Êag
)

964 
_GL_ARG_NONNULL
 ((2, 4)));

965 
_GL_CXXALIAS_RPL
 (
lök©
, ,

966 (
fd1
, c⁄° *
∑th1
, 
fd2
, c⁄° *
∑th2
,

967 
Êag
));

969 #i‡!@
HAVE_LINKAT
@

970 
_GL_FUNCDECL_SYS
 (
lök©
, ,

971 (
fd1
, c⁄° *
∑th1
, 
fd2
, c⁄° *
∑th2
,

972 
Êag
)

973 
_GL_ARG_NONNULL
 ((2, 4)));

975 
_GL_CXXALIAS_SYS
 (
lök©
, ,

976 (
fd1
, c⁄° *
∑th1
, 
fd2
, c⁄° *
∑th2
,

977 
Êag
));

979 
_GL_CXXALIASWARN
 (
lök©
);

980 #ñi‡
deföed
 
GNULIB_POSIXCHECK


981 #unde‡
lök©


982 #i‡
HAVE_RAW_DECL_LINKAT


983 
_GL_WARN_ON_USE
 (
lök©
, "linkat is unportable - "

989 #i‡@
GNULIB_LSEEK
@

994 #i‡@
REPLACE_LSEEK
@

995 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

996 
	#l£ek
 
Ωl_l£ek


	)

998 
_GL_FUNCDECL_RPL
 (
l£ek
, 
off_t
, (
fd
, off_à
off£t
, 
whí˚
));

999 
_GL_CXXALIAS_RPL
 (
l£ek
, 
off_t
, (
fd
, off_à
off£t
, 
whí˚
));

1001 
_GL_CXXALIAS_SYS
 (
l£ek
, 
off_t
, (
fd
, off_à
off£t
, 
whí˚
));

1003 
_GL_CXXALIASWARN
 (
l£ek
);

1004 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1005 #unde‡
l£ek


1006 #i‡
HAVE_RAW_DECL_LSEEK


1007 
_GL_WARN_ON_USE
 (
l£ek
, "lseek doesÇot fail with ESPIPE onÖipes on some "

1013 #i‡@
GNULIB_PIPE
@

1017 #i‡!@
HAVE_PIPE
@

1018 
_GL_FUNCDECL_SYS
 (
pùe
, , (
fd
[2]Ë
_GL_ARG_NONNULL
 ((1)));

1020 
_GL_CXXALIAS_SYS
 (
pùe
, , (
fd
[2]));

1021 
_GL_CXXALIASWARN
 (
pùe
);

1022 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1023 #unde‡
pùe


1024 #i‡
HAVE_RAW_DECL_PIPE


1025 
_GL_WARN_ON_USE
 (
pùe
, "pipe is unportable - "

1031 #i‡@
GNULIB_PIPE2
@

1040 #i‡@
HAVE_PIPE2
@

1041 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1042 
	#pùe2
 
Ωl_pùe2


	)

1044 
_GL_FUNCDECL_RPL
 (
pùe2
, , (
fd
[2], 
Êags
Ë
_GL_ARG_NONNULL
 ((1)));

1045 
_GL_CXXALIAS_RPL
 (
pùe2
, , (
fd
[2], 
Êags
));

1047 
_GL_FUNCDECL_SYS
 (
pùe2
, , (
fd
[2], 
Êags
Ë
_GL_ARG_NONNULL
 ((1)));

1048 
_GL_CXXALIAS_SYS
 (
pùe2
, , (
fd
[2], 
Êags
));

1050 
_GL_CXXALIASWARN
 (
pùe2
);

1051 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1052 #unde‡
pùe2


1053 #i‡
HAVE_RAW_DECL_PIPE2


1054 
_GL_WARN_ON_USE
 (
pùe2
, "pipe2 is unportable - "

1060 #i‡@
GNULIB_PREAD
@

1065 #i‡@
REPLACE_PREAD
@

1066 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1067 #unde‡
¥ód


1068 
	#¥ód
 
Ωl_¥ód


	)

1070 
_GL_FUNCDECL_RPL
 (
¥ód
, 
ssize_t
,

1071 (
fd
, *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
)

1072 
_GL_ARG_NONNULL
 ((2)));

1073 
_GL_CXXALIAS_RPL
 (
¥ód
, 
ssize_t
,

1074 (
fd
, *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
));

1076 #i‡!@
HAVE_PREAD
@

1077 
_GL_FUNCDECL_SYS
 (
¥ód
, 
ssize_t
,

1078 (
fd
, *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
)

1079 
_GL_ARG_NONNULL
 ((2)));

1081 
_GL_CXXALIAS_SYS
 (
¥ód
, 
ssize_t
,

1082 (
fd
, *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
));

1084 
_GL_CXXALIASWARN
 (
¥ód
);

1085 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1086 #unde‡
¥ód


1087 #i‡
HAVE_RAW_DECL_PREAD


1088 
_GL_WARN_ON_USE
 (
¥ód
, "pread is unportable - "

1094 #i‡@
GNULIB_PWRITE
@

1100 #i‡@
REPLACE_PWRITE
@

1101 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1102 #unde‡
pwrôe


1103 
	#pwrôe
 
Ωl_pwrôe


	)

1105 
_GL_FUNCDECL_RPL
 (
pwrôe
, 
ssize_t
,

1106 (
fd
, c⁄° *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
)

1107 
_GL_ARG_NONNULL
 ((2)));

1108 
_GL_CXXALIAS_RPL
 (
pwrôe
, 
ssize_t
,

1109 (
fd
, c⁄° *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
));

1111 #i‡!@
HAVE_PWRITE
@

1112 
_GL_FUNCDECL_SYS
 (
pwrôe
, 
ssize_t
,

1113 (
fd
, c⁄° *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
)

1114 
_GL_ARG_NONNULL
 ((2)));

1116 
_GL_CXXALIAS_SYS
 (
pwrôe
, 
ssize_t
,

1117 (
fd
, c⁄° *
buf
, 
size_t
 
bufsize
, 
off_t
 
off£t
));

1119 
_GL_CXXALIASWARN
 (
pwrôe
);

1120 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1121 #unde‡
pwrôe


1122 #i‡
HAVE_RAW_DECL_PWRITE


1123 
_GL_WARN_ON_USE
 (
pwrôe
, "pwrite is unportable - "

1129 #i‡@
GNULIB_READ
@

1133 #i‡@
REPLACE_READ
@ && @
GNULIB_UNISTD_H_NONBLOCKING
@

1134 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1135 #unde‡
ªad


1136 
	#ªad
 
Ωl_ªad


	)

1138 
_GL_FUNCDECL_RPL
 (
ªad
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
cou¡
)

1139 
_GL_ARG_NONNULL
 ((2)));

1140 
_GL_CXXALIAS_RPL
 (
ªad
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
cou¡
));

1145 
_GL_CXXALIAS_SYS_CAST
 (
ªad
, 
ssize_t
, (
fd
, *
buf
, 
size_t
 
cou¡
));

1147 
_GL_CXXALIASWARN
 (
ªad
);

1151 #i‡@
GNULIB_READLINK
@

1157 #i‡@
REPLACE_READLINK
@

1158 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1159 
	#ªadlök
 
Ωl_ªadlök


	)

1161 
_GL_FUNCDECL_RPL
 (
ªadlök
, 
ssize_t
,

1162 (c⁄° *
fûe
, *
buf
, 
size_t
 
bufsize
)

1163 
_GL_ARG_NONNULL
 ((1, 2)));

1164 
_GL_CXXALIAS_RPL
 (
ªadlök
, 
ssize_t
,

1165 (c⁄° *
fûe
, *
buf
, 
size_t
 
bufsize
));

1167 #i‡!@
HAVE_READLINK
@

1168 
_GL_FUNCDECL_SYS
 (
ªadlök
, 
ssize_t
,

1169 (c⁄° *
fûe
, *
buf
, 
size_t
 
bufsize
)

1170 
_GL_ARG_NONNULL
 ((1, 2)));

1172 
_GL_CXXALIAS_SYS
 (
ªadlök
, 
ssize_t
,

1173 (c⁄° *
fûe
, *
buf
, 
size_t
 
bufsize
));

1175 
_GL_CXXALIASWARN
 (
ªadlök
);

1176 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1177 #unde‡
ªadlök


1178 #i‡
HAVE_RAW_DECL_READLINK


1179 
_GL_WARN_ON_USE
 (
ªadlök
, "readlink is unportable - "

1185 #i‡@
GNULIB_READLINKAT
@

1186 #i‡!@
HAVE_READLINKAT
@

1187 
_GL_FUNCDECL_SYS
 (
ªadlök©
, 
ssize_t
,

1188 (
fd
, c⁄° *
fûe
, *
buf
, 
size_t
 
Àn
)

1189 
_GL_ARG_NONNULL
 ((2, 3)));

1191 
_GL_CXXALIAS_SYS
 (
ªadlök©
, 
ssize_t
,

1192 (
fd
, c⁄° *
fûe
, *
buf
, 
size_t
 
Àn
));

1193 
_GL_CXXALIASWARN
 (
ªadlök©
);

1194 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1195 #unde‡
ªadlök©


1196 #i‡
HAVE_RAW_DECL_READLINKAT


1197 
_GL_WARN_ON_USE
 (
ªadlök©
, "readlinkat isÇotÖortable - "

1203 #i‡@
GNULIB_RMDIR
@

1205 #i‡@
REPLACE_RMDIR
@

1206 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1207 
	#rmdú
 
Ωl_rmdú


	)

1209 
_GL_FUNCDECL_RPL
 (
rmdú
, , (c⁄° *
«me
Ë
_GL_ARG_NONNULL
 ((1)));

1210 
_GL_CXXALIAS_RPL
 (
rmdú
, , (c⁄° *
«me
));

1212 
_GL_CXXALIAS_SYS
 (
rmdú
, , (c⁄° *
«me
));

1214 
_GL_CXXALIASWARN
 (
rmdú
);

1215 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1216 #unde‡
rmdú


1217 #i‡
HAVE_RAW_DECL_RMDIR


1218 
_GL_WARN_ON_USE
 (
rmdú
, "rmdir is unportable - "

1224 #i‡@
GNULIB_SLEEP
@

1229 #i‡@
REPLACE_SLEEP
@

1230 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1231 #unde‡
¶ìp


1232 
	#¶ìp
 
Ωl_¶ìp


	)

1234 
_GL_FUNCDECL_RPL
 (
¶ìp
, , (
n
));

1235 
_GL_CXXALIAS_RPL
 (
¶ìp
, , (
n
));

1237 #i‡!@
HAVE_SLEEP
@

1238 
_GL_FUNCDECL_SYS
 (
¶ìp
, , (
n
));

1240 
_GL_CXXALIAS_SYS
 (
¶ìp
, , (
n
));

1242 
_GL_CXXALIASWARN
 (
¶ìp
);

1243 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1244 #unde‡
¶ìp


1245 #i‡
HAVE_RAW_DECL_SLEEP


1246 
_GL_WARN_ON_USE
 (
¶ìp
, "sleep is unportable - "

1252 #i‡@
GNULIB_SYMLINK
@

1253 #i‡@
REPLACE_SYMLINK
@

1254 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1255 #unde‡
symlök


1256 
	#symlök
 
Ωl_symlök


	)

1258 
_GL_FUNCDECL_RPL
 (
symlök
, , (c⁄° *
c⁄ã¡s
, c⁄° *
fûe
)

1259 
_GL_ARG_NONNULL
 ((1, 2)));

1260 
_GL_CXXALIAS_RPL
 (
symlök
, , (c⁄° *
c⁄ã¡s
, c⁄° *
fûe
));

1262 #i‡!@
HAVE_SYMLINK
@

1263 
_GL_FUNCDECL_SYS
 (
symlök
, , (c⁄° *
c⁄ã¡s
, c⁄° *
fûe
)

1264 
_GL_ARG_NONNULL
 ((1, 2)));

1266 
_GL_CXXALIAS_SYS
 (
symlök
, , (c⁄° *
c⁄ã¡s
, c⁄° *
fûe
));

1268 
_GL_CXXALIASWARN
 (
symlök
);

1269 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1270 #unde‡
symlök


1271 #i‡
HAVE_RAW_DECL_SYMLINK


1272 
_GL_WARN_ON_USE
 (
symlök
, "symlink isÇotÖortable - "

1278 #i‡@
GNULIB_SYMLINKAT
@

1279 #i‡!@
HAVE_SYMLINKAT
@

1280 
_GL_FUNCDECL_SYS
 (
symlök©
, ,

1281 (c⁄° *
c⁄ã¡s
, 
fd
, c⁄° *
fûe
)

1282 
_GL_ARG_NONNULL
 ((1, 3)));

1284 
_GL_CXXALIAS_SYS
 (
symlök©
, ,

1285 (c⁄° *
c⁄ã¡s
, 
fd
, c⁄° *
fûe
));

1286 
_GL_CXXALIASWARN
 (
symlök©
);

1287 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1288 #unde‡
symlök©


1289 #i‡
HAVE_RAW_DECL_SYMLINKAT


1290 
_GL_WARN_ON_USE
 (
symlök©
, "symlinkat isÇotÖortable - "

1296 #i‡@
GNULIB_TTYNAME_R
@

1299 #i‡@
REPLACE_TTYNAME_R
@

1300 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1301 #unde‡
ây«me_r


1302 
	#ây«me_r
 
Ωl_ây«me_r


	)

1304 
_GL_FUNCDECL_RPL
 (
ây«me_r
, ,

1305 (
fd
, *
buf
, 
size_t
 
buÊí
Ë
_GL_ARG_NONNULL
 ((2)));

1306 
_GL_CXXALIAS_RPL
 (
ây«me_r
, ,

1307 (
fd
, *
buf
, 
size_t
 
buÊí
));

1309 #i‡!@
HAVE_DECL_TTYNAME_R
@

1310 
_GL_FUNCDECL_SYS
 (
ây«me_r
, ,

1311 (
fd
, *
buf
, 
size_t
 
buÊí
Ë
_GL_ARG_NONNULL
 ((2)));

1313 
_GL_CXXALIAS_SYS
 (
ây«me_r
, ,

1314 (
fd
, *
buf
, 
size_t
 
buÊí
));

1316 
_GL_CXXALIASWARN
 (
ây«me_r
);

1317 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1318 #unde‡
ây«me_r


1319 #i‡
HAVE_RAW_DECL_TTYNAME_R


1320 
_GL_WARN_ON_USE
 (
ây«me_r
, "ttyname_r isÇotÖortable - "

1326 #i‡@
GNULIB_UNLINK
@

1327 #i‡@
REPLACE_UNLINK
@

1328 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1329 #unde‡
u∆ök


1330 
	#u∆ök
 
Ωl_u∆ök


	)

1332 
_GL_FUNCDECL_RPL
 (
u∆ök
, , (c⁄° *
fûe
Ë
_GL_ARG_NONNULL
 ((1)));

1333 
_GL_CXXALIAS_RPL
 (
u∆ök
, , (c⁄° *
fûe
));

1335 
_GL_CXXALIAS_SYS
 (
u∆ök
, , (c⁄° *
fûe
));

1337 
_GL_CXXALIASWARN
 (
u∆ök
);

1338 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1339 #unde‡
u∆ök


1340 #i‡
HAVE_RAW_DECL_UNLINK


1341 
_GL_WARN_ON_USE
 (
u∆ök
, "unlink isÇotÖortable - "

1347 #i‡@
GNULIB_UNLINKAT
@

1348 #i‡@
REPLACE_UNLINKAT
@

1349 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1350 #unde‡
u∆ök©


1351 
	#u∆ök©
 
Ωl_u∆ök©


	)

1353 
_GL_FUNCDECL_RPL
 (
u∆ök©
, , (
fd
, c⁄° *
fûe
, 
Êag
)

1354 
_GL_ARG_NONNULL
 ((2)));

1355 
_GL_CXXALIAS_RPL
 (
u∆ök©
, , (
fd
, c⁄° *
fûe
, 
Êag
));

1357 #i‡!@
HAVE_UNLINKAT
@

1358 
_GL_FUNCDECL_SYS
 (
u∆ök©
, , (
fd
, c⁄° *
fûe
, 
Êag
)

1359 
_GL_ARG_NONNULL
 ((2)));

1361 
_GL_CXXALIAS_SYS
 (
u∆ök©
, , (
fd
, c⁄° *
fûe
, 
Êag
));

1363 
_GL_CXXALIASWARN
 (
u∆ök©
);

1364 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1365 #unde‡
u∆ök©


1366 #i‡
HAVE_RAW_DECL_UNLINKAT


1367 
_GL_WARN_ON_USE
 (
u∆ök©
, "unlinkat isÇotÖortable - "

1373 #i‡@
GNULIB_USLEEP
@

1378 #i‡@
REPLACE_USLEEP
@

1379 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1380 #unde‡
u¶ìp


1381 
	#u¶ìp
 
Ωl_u¶ìp


	)

1383 
_GL_FUNCDECL_RPL
 (
u¶ìp
, , (
u£c⁄ds_t
 
n
));

1384 
_GL_CXXALIAS_RPL
 (
u¶ìp
, , (
u£c⁄ds_t
 
n
));

1386 #i‡!@
HAVE_USLEEP
@

1387 
_GL_FUNCDECL_SYS
 (
u¶ìp
, , (
u£c⁄ds_t
 
n
));

1389 
_GL_CXXALIAS_SYS
 (
u¶ìp
, , (
u£c⁄ds_t
 
n
));

1391 
_GL_CXXALIASWARN
 (
u¶ìp
);

1392 #ñi‡
deföed
 
GNULIB_POSIXCHECK


1393 #unde‡
u¶ìp


1394 #i‡
HAVE_RAW_DECL_USLEEP


1395 
_GL_WARN_ON_USE
 (
u¶ìp
, "usleep is unportable - "

1401 #i‡@
GNULIB_WRITE
@

1405 #i‡@
REPLACE_WRITE
@ && (@
GNULIB_UNISTD_H_NONBLOCKING
@ || @
GNULIB_UNISTD_H_SIGPIPE
@)

1406 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

1407 #unde‡
wrôe


1408 
	#wrôe
 
Ωl_wrôe


	)

1410 
_GL_FUNCDECL_RPL
 (
wrôe
, 
ssize_t
, (
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

1411 
_GL_ARG_NONNULL
 ((2)));

1412 
_GL_CXXALIAS_RPL
 (
wrôe
, 
ssize_t
, (
fd
, c⁄° *
buf
, 
size_t
 
cou¡
));

1417 
_GL_CXXALIAS_SYS_CAST
 (
wrôe
, 
ssize_t
, (
fd
, c⁄° *
buf
, 
size_t
 
cou¡
));

1419 
_GL_CXXALIASWARN
 (
wrôe
);

	@lib/unlocked-io.h

20 #i‚de‡
UNLOCKED_IO_H


21 
	#UNLOCKED_IO_H
 1

	)

34 
	~<°dio.h
>

36 #i‡
HAVE_DECL_CLEARERR_UNLOCKED


37 #unde‡
˛óªº


38 
	#˛óªº
(
x
Ë
	`˛óªº_u∆ocked
 (x)

	)

40 
	#˛óªº_u∆ocked
(
x
Ë
	`˛óªº
 (x)

	)

43 #i‡
HAVE_DECL_FEOF_UNLOCKED


44 #unde‡
„of


45 
	#„of
(
x
Ë
	`„of_u∆ocked
 (x)

	)

47 
	#„of_u∆ocked
(
x
Ë
	`„of
 (x)

	)

50 #i‡
HAVE_DECL_FERROR_UNLOCKED


51 #unde‡
„º‹


52 
	#„º‹
(
x
Ë
	`„º‹_u∆ocked
 (x)

	)

54 
	#„º‹_u∆ocked
(
x
Ë
	`„º‹
 (x)

	)

57 #i‡
HAVE_DECL_FFLUSH_UNLOCKED


58 #unde‡
fÊush


59 
	#fÊush
(
x
Ë
	`fÊush_u∆ocked
 (x)

	)

61 
	#fÊush_u∆ocked
(
x
Ë
	`fÊush
 (x)

	)

64 #i‡
HAVE_DECL_FGETS_UNLOCKED


65 #unde‡
fgës


66 
	#fgës
(
x
,
y
,
z
Ë
	`fgës_u∆ocked
 (x,y,z)

	)

68 
	#fgës_u∆ocked
(
x
,
y
,
z
Ë
	`fgës
 (x,y,z)

	)

71 #i‡
HAVE_DECL_FPUTC_UNLOCKED


72 #unde‡
Âutc


73 
	#Âutc
(
x
,
y
Ë
	`Âutc_u∆ocked
 (x,y)

	)

75 
	#Âutc_u∆ocked
(
x
,
y
Ë
	`Âutc
 (x,y)

	)

78 #i‡
HAVE_DECL_FPUTS_UNLOCKED


79 #unde‡
Âuts


80 
	#Âuts
(
x
,
y
Ë
	`Âuts_u∆ocked
 (x,y)

	)

82 
	#Âuts_u∆ocked
(
x
,
y
Ë
	`Âuts
 (x,y)

	)

85 #i‡
HAVE_DECL_FREAD_UNLOCKED


86 #unde‡
‰ód


87 
	#‰ód
(
w
,
x
,
y
,
z
Ë
	`‰ód_u∆ocked
 (w,x,y,z)

	)

89 
	#‰ód_u∆ocked
(
w
,
x
,
y
,
z
Ë
	`‰ód
 (w,x,y,z)

	)

92 #i‡
HAVE_DECL_FWRITE_UNLOCKED


93 #unde‡
fwrôe


94 
	#fwrôe
(
w
,
x
,
y
,
z
Ë
	`fwrôe_u∆ocked
 (w,x,y,z)

	)

96 
	#fwrôe_u∆ocked
(
w
,
x
,
y
,
z
Ë
	`fwrôe
 (w,x,y,z)

	)

99 #i‡
HAVE_DECL_GETC_UNLOCKED


100 #unde‡
gëc


101 
	#gëc
(
x
Ë
	`gëc_u∆ocked
 (x)

	)

103 
	#gëc_u∆ocked
(
x
Ë
	`gëc
 (x)

	)

106 #i‡
HAVE_DECL_GETCHAR_UNLOCKED


107 #unde‡
gëch¨


108 
	#gëch¨
(Ë
	`gëch¨_u∆ocked
 ()

	)

110 
	#gëch¨_u∆ocked
(Ë
	`gëch¨
 ()

	)

113 #i‡
HAVE_DECL_PUTC_UNLOCKED


114 #unde‡
putc


115 
	#putc
(
x
,
y
Ë
	`putc_u∆ocked
 (x,y)

	)

117 
	#putc_u∆ocked
(
x
,
y
Ë
	`putc
 (x,y)

	)

120 #i‡
HAVE_DECL_PUTCHAR_UNLOCKED


121 #unde‡
putch¨


122 
	#putch¨
(
x
Ë
	`putch¨_u∆ocked
 (x)

	)

124 
	#putch¨_u∆ocked
(
x
Ë
	`putch¨
 (x)

	)

127 #unde‡
Êockfûe


128 
	#Êockfûe
(
x
Ë((Ë0)

	)

130 #unde‡
·rylockfûe


131 
	#·rylockfûe
(
x
Ë0

	)

133 #unde‡
fu∆ockfûe


134 
	#fu∆ockfûe
(
x
Ë((Ë0)

	)

	@lib/utimens.c

22 
	~<c⁄fig.h
>

24 
	~"utimís.h
"

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dboﬁ.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<uni°d.h
>

34 
	~"°©-time.h
"

35 
	~"time•ec.h
"

37 #i‡
HAVE_UTIME_H


38 
	~<utime.h
>

43 #i‚de‡
HAVE_STRUCT_UTIMBUF


44 
	sutimbuf


46 
	ma˘ime
;

47 
	mmodtime
;

52 #unde‡
futimís


53 #unde‡
utimíßt


57 #i‚de‡
REPLACE_FUNC_STAT_FILE


58 
	#REPLACE_FUNC_STAT_FILE
 0

	)

61 #i‡
HAVE_UTIMENSAT
 || 
HAVE_FUTIMENS


73 
	gutimíßt_w‹ks_ªÆly
;

74 
	glutimíßt_w‹ks_ªÆly
;

85 
	$vÆid©e_time•ec
 (
time•ec
Åimespec[2])

87 
ªsu…
 = 0;

88 
utime_omô_cou¡
 = 0;

89 
	`as£π
 (
time•ec
);

90 i‡((
time•ec
[0].
tv_n£c
 !
UTIME_NOW


91 && 
time•ec
[0].
tv_n£c
 !
UTIME_OMIT


92 && (
time•ec
[0].
tv_n£c
 < 0 || 1000000000 <=Åimespec[0].tv_nsec))

93 || (
time•ec
[1].
tv_n£c
 !
UTIME_NOW


94 && 
time•ec
[1].
tv_n£c
 !
UTIME_OMIT


95 && (
time•ec
[1].
tv_n£c
 < 0 || 1000000000 <=Åimespec[1].tv_nsec)))

97 
î∫o
 = 
EINVAL
;

104 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_NOW


105 || 
time•ec
[0].
tv_n£c
 =
UTIME_OMIT
)

107 
time•ec
[0].
tv_£c
 = 0;

108 
ªsu…
 = 1;

109 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_OMIT
)

110 
utime_omô_cou¡
++;

112 i‡(
time•ec
[1].
tv_n£c
 =
UTIME_NOW


113 || 
time•ec
[1].
tv_n£c
 =
UTIME_OMIT
)

115 
time•ec
[1].
tv_£c
 = 0;

116 
ªsu…
 = 1;

117 i‡(
time•ec
[1].
tv_n£c
 =
UTIME_OMIT
)

118 
utime_omô_cou¡
++;

120  
ªsu…
 + (
utime_omô_cou¡
 == 1);

121 
	}
}

129 
boﬁ


130 
	$upd©e_time•ec
 (
°©
 c⁄° *
°©buf
, 
time•ec
 *
ts
[2])

132 
time•ec
 *time•e¯*
ts
;

133 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_OMIT


134 && 
time•ec
[1].
tv_n£c
 =
UTIME_OMIT
)

135  
åue
;

136 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_NOW


137 && 
time•ec
[1].
tv_n£c
 =
UTIME_NOW
)

139 *
ts
 = 
NULL
;

140  
Ál£
;

143 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_OMIT
)

144 
time•ec
[0] = 
	`gë_°©_©ime
 (
°©buf
);

145 i‡(
time•ec
[0].
tv_n£c
 =
UTIME_NOW
)

146 
	`gëtime
 (&
time•ec
[0]);

148 i‡(
time•ec
[1].
tv_n£c
 =
UTIME_OMIT
)

149 
time•ec
[1] = 
	`gë_°©_mtime
 (
°©buf
);

150 i‡(
time•ec
[1].
tv_n£c
 =
UTIME_NOW
)

151 
	`gëtime
 (&
time•ec
[1]);

153  
Ál£
;

154 
	}
}

167 
	$fdutimís
 (
fd
, c⁄° *
fûe
, 
time•ec
 constÅimespec[2])

169 
time•ec
 
adju°ed_time•ec
[2];

170 
time•ec
 *
ts
 =Åime•e¯? 
adju°ed_time•ec
 : 
NULL
;

171 
adju°mít_√eded
 = 0;

172 
°©
 
°
;

174 i‡(
ts
)

176 
adju°ed_time•ec
[0] = 
time•ec
[0];

177 
adju°ed_time•ec
[1] = 
time•ec
[1];

178 
adju°mít_√eded
 = 
	`vÆid©e_time•ec
 (
ts
);

180 i‡(
adju°mít_√eded
 < 0)

186 i‡(!
fûe
)

188 i‡(
fd
 < 0)

190 
î∫o
 = 
EBADF
;

193 i‡(
	`dup2
 (
fd
, fd) != fd)

207 #i‡
HAVE_BUGGY_NFS_TIME_STAMPS


208 i‡(
fd
 < 0)

209 
	`sync
 ();

211 
	`fsync
 (
fd
);

219 #i‡
HAVE_UTIMENSAT
 || 
HAVE_FUTIMENS


220 i‡(0 <
utimíßt_w‹ks_ªÆly
)

222 
ªsu…
;

223 #i‡
__löux__


232 i‡(
adju°mít_√eded
 == 2)

234 i‡(
fd
 < 0 ? 
	`°©
 (
fûe
, &
°
Ë: 
	`f°©
 (fd, &st))

236 i‡(
ts
[0].
tv_n£c
 =
UTIME_OMIT
)

237 
ts
[0] = 
	`gë_°©_©ime
 (&
°
);

238 i‡(
ts
[1].
tv_n£c
 =
UTIME_OMIT
)

239 
ts
[1] = 
	`gë_°©_mtime
 (&
°
);

241 
adju°mít_√eded
++;

244 #i‡
HAVE_UTIMENSAT


245 i‡(
fd
 < 0)

247 
ªsu…
 = 
	`utimíßt
 (
AT_FDCWD
, 
fûe
, 
ts
, 0);

248 #ifde‡
__löux__


256 i‡(0 < 
ªsu…
)

257 
î∫o
 = 
ENOSYS
;

259 i‡(
ªsu…
 =0 || 
î∫o
 !
ENOSYS
)

261 
utimíßt_w‹ks_ªÆly
 = 1;

262  
ªsu…
;

266 #i‡
HAVE_FUTIMENS


267 i‡(0 <
fd
)

269 
ªsu…
 = 
	`futimís
 (
fd
, 
ts
);

270 #ifde‡
__löux__


272 i‡(0 < 
ªsu…
)

273 
î∫o
 = 
ENOSYS
;

275 i‡(
ªsu…
 =0 || 
î∫o
 !
ENOSYS
)

277 
utimíßt_w‹ks_ªÆly
 = 1;

278  
ªsu…
;

283 
utimíßt_w‹ks_ªÆly
 = -1;

284 
lutimíßt_w‹ks_ªÆly
 = -1;

291 i‡(
adju°mít_√eded
 || (
REPLACE_FUNC_STAT_FILE
 && 
fd
 < 0))

293 i‡(
adju°mít_√eded
 != 3

294 && (
fd
 < 0 ? 
	`°©
 (
fûe
, &
°
Ë: 
	`f°©
 (fd, &st)))

296 i‡(
ts
 && 
	`upd©e_time•ec
 (&
°
, &ts))

301 #i‡
HAVE_FUTIMESAT
 || 
HAVE_WORKING_UTIMES


302 
timevÆ
Åimeval[2];

303 
timevÆ
 *
t
;

304 i‡(
ts
)

306 
timevÆ
[0].
tv_£c
 = 
ts
[0].tv_sec;

307 
timevÆ
[0].
tv_u£c
 = 
ts
[0].
tv_n£c
 / 1000;

308 
timevÆ
[1].
tv_£c
 = 
ts
[1].tv_sec;

309 
timevÆ
[1].
tv_u£c
 = 
ts
[1].
tv_n£c
 / 1000;

310 
t
 = 
timevÆ
;

313 
t
 = 
NULL
;

315 i‡(
fd
 < 0)

317 #i‡
HAVE_FUTIMESAT


318  
	`futimeßt
 (
AT_FDCWD
, 
fûe
, 
t
);

334 #i‡(
HAVE_FUTIMESAT
 && !
FUTIMESAT_NULL_BUG
Ë|| 
HAVE_FUTIMES


335 #i‡
HAVE_FUTIMESAT
 && !
FUTIMESAT_NULL_BUG


336 #unde‡
futimes


337 
	#futimes
(
fd
, 
t
Ë
	`futimeßt
 (fd, 
NULL
,Å)

	)

339 i‡(
	`futimes
 (
fd
, 
t
) == 0)

341 #i‡
__löux__
 && 
__GLIBC__


347 i‡(
t
)

349 
boﬁ
 
abig
 = 500000 <
t
[0].
tv_u£c
;

350 
boﬁ
 
mbig
 = 500000 <
t
[1].
tv_u£c
;

351 i‡((
abig
 | 
mbig
Ë&& 
	`f°©
 (
fd
, &
°
) == 0)

355 
time_t
 
adiff
 = 
°
.
°_©ime
 - 
t
[0].
tv_£c
;

356 
time_t
 
mdiff
 = 
°
.
°_mtime
 - 
t
[1].
tv_£c
;

358 
timevÆ
 *
â
 = 
NULL
;

359 
timevÆ
 
åunˇãd_timevÆ
[2];

360 
åunˇãd_timevÆ
[0] = 
t
[0];

361 
åunˇãd_timevÆ
[1] = 
t
[1];

362 i‡(
abig
 && 
adiff
 =1 && 
	`gë_°©_©ime_ns
 (&
°
) == 0)

364 
â
 = 
åunˇãd_timevÆ
;

365 
â
[0].
tv_u£c
 = 0;

367 i‡(
mbig
 && 
mdiff
 =1 && 
	`gë_°©_mtime_ns
 (&
°
) == 0)

369 
â
 = 
åunˇãd_timevÆ
;

370 
â
[1].
tv_u£c
 = 0;

372 i‡(
â
)

373 
	`futimes
 (
fd
, 
â
);

384 i‡(!
fûe
)

386 #i‡! ((
HAVE_FUTIMESAT
 && !
FUTIMESAT_NULL_BUG
) \

387 || (
HAVE_WORKING_UTIMES
 && 
HAVE_FUTIMES
))

388 
î∫o
 = 
ENOSYS
;

393 #i‡
HAVE_WORKING_UTIMES


394  
	`utimes
 (
fûe
, 
t
);

397 
utimbuf
 utimbuf;

398 
utimbuf
 *
ut
;

399 i‡(
ts
)

401 
utimbuf
.
a˘ime
 = 
ts
[0].
tv_£c
;

402 
utimbuf
.
modtime
 = 
ts
[1].
tv_£c
;

403 
ut
 = &
utimbuf
;

406 
ut
 = 
NULL
;

408  
	`utime
 (
fûe
, 
ut
);

412 
	}
}

417 
	$utimís
 (c⁄° *
fûe
, 
time•ec
 constÅimespec[2])

419  
	`fdutimís
 (-1, 
fûe
, 
time•ec
);

420 
	}
}

427 
	$lutimís
 (c⁄° *
fûe
, 
time•ec
 constÅimespec[2])

429 
time•ec
 
adju°ed_time•ec
[2];

430 
time•ec
 *
ts
 =Åime•e¯? 
adju°ed_time•ec
 : 
NULL
;

431 
adju°mít_√eded
 = 0;

432 
°©
 
°
;

434 i‡(
ts
)

436 
adju°ed_time•ec
[0] = 
time•ec
[0];

437 
adju°ed_time•ec
[1] = 
time•ec
[1];

438 
adju°mít_√eded
 = 
	`vÆid©e_time•ec
 (
ts
);

440 i‡(
adju°mít_√eded
 < 0)

448 #i‡
HAVE_UTIMENSAT


449 i‡(0 <
lutimíßt_w‹ks_ªÆly
)

451 
ªsu…
;

452 #i‡
__löux__


461 i‡(
adju°mít_√eded
 == 2)

463 i‡(
	`l°©
 (
fûe
, &
°
))

465 i‡(
ts
[0].
tv_n£c
 =
UTIME_OMIT
)

466 
ts
[0] = 
	`gë_°©_©ime
 (&
°
);

467 i‡(
ts
[1].
tv_n£c
 =
UTIME_OMIT
)

468 
ts
[1] = 
	`gë_°©_mtime
 (&
°
);

470 
adju°mít_√eded
++;

473 
ªsu…
 = 
	`utimíßt
 (
AT_FDCWD
, 
fûe
, 
ts
, 
AT_SYMLINK_NOFOLLOW
);

474 #ifde‡
__löux__


482 i‡(0 < 
ªsu…
)

483 
î∫o
 = 
ENOSYS
;

485 i‡(
ªsu…
 =0 || 
î∫o
 !
ENOSYS
)

487 
utimíßt_w‹ks_ªÆly
 = 1;

488 
lutimíßt_w‹ks_ªÆly
 = 1;

489  
ªsu…
;

492 
lutimíßt_w‹ks_ªÆly
 = -1;

499 i‡(
adju°mít_√eded
 || 
REPLACE_FUNC_STAT_FILE
)

501 i‡(
adju°mít_√eded
 !3 && 
	`l°©
 (
fûe
, &
°
))

503 i‡(
ts
 && 
	`upd©e_time•ec
 (&
°
, &ts))

509 #i‡
HAVE_LUTIMES
 && !
HAVE_UTIMENSAT


511 
timevÆ
Åimeval[2];

512 
timevÆ
 *
t
;

513 
ªsu…
;

514 i‡(
ts
)

516 
timevÆ
[0].
tv_£c
 = 
ts
[0].tv_sec;

517 
timevÆ
[0].
tv_u£c
 = 
ts
[0].
tv_n£c
 / 1000;

518 
timevÆ
[1].
tv_£c
 = 
ts
[1].tv_sec;

519 
timevÆ
[1].
tv_u£c
 = 
ts
[1].
tv_n£c
 / 1000;

520 
t
 = 
timevÆ
;

523 
t
 = 
NULL
;

525 
ªsu…
 = 
	`lutimes
 (
fûe
, 
t
);

526 i‡(
ªsu…
 =0 || 
î∫o
 !
ENOSYS
)

527  
ªsu…
;

532 i‡(!(
adju°mít_√eded
 || 
REPLACE_FUNC_STAT_FILE
Ë&& 
	`l°©
 (
fûe
, &
°
))

534 i‡(!
	`S_ISLNK
 (
°
.
°_mode
))

535  
	`fdutimís
 (-1, 
fûe
, 
ts
);

536 
î∫o
 = 
ENOSYS
;

538 
	}
}

	@lib/utimens.h

1 
	~<time.h
>

2 
fdutimís
 (, c⁄° *, 
time•ec
 const [2]);

3 
utimís
 (c⁄° *, 
time•ec
 const [2]);

4 
lutimís
 (c⁄° *, 
time•ec
 const [2]);

6 #i‡
GNULIB_FDUTIMENSAT


7 
	~<f˙é.h
>

8 
	~<sys/°©.h
>

10 
fdutimíßt
 (
fd
, 
dú
, c⁄° *
«me
, 
time•ec
 const [2],

11 
©Êag
);

14 
ölöe
 

15 
	$lutimíßt
 (
dú
, c⁄° *
fûe
, 
time•ec
 c⁄° 
times
[2])

17  
	`utimíßt
 (
dú
, 
fûe
, 
times
, 
AT_SYMLINK_NOFOLLOW
);

18 
	}
}

	@lib/vasnprintf.c

52 #i‚de‡
_GNU_SOURCE


53 
	#_GNU_SOURCE
 1

	)

56 #i‚de‡
VASNPRINTF


57 
	~<c⁄fig.h
>

59 #i‚de‡
IN_LIBINTL


60 
	~<Æloˇ.h
>

64 #i‚de‡
VASNPRINTF


65 #i‡
WIDE_CHAR_VERSION


66 
	~"va¢w¥ötf.h
"

68 
	~"va¢¥ötf.h
"

72 
	~<loˇÀ.h
>

73 
	~<°dio.h
>

74 
	~<°dlib.h
>

75 
	~<°rög.h
>

76 
	~<î∫o.h
>

77 
	~<limôs.h
>

78 
	~<Êﬂt.h
>

79 #i‡
HAVE_NL_LANGINFO


80 
	~<œngöfo.h
>

82 #i‚de‡
VASNPRINTF


83 #i‡
WIDE_CHAR_VERSION


84 
	~"w¥ötf-∑r£.h
"

86 
	~"¥ötf-∑r£.h
"

91 
	~"xsize.h
"

93 
	~"vîify.h
"

95 #i‡(
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_LONG_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


96 
	~<m©h.h
>

97 
	~"Êﬂt+.h
"

100 #i‡(
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


101 
	~<m©h.h
>

102 
	~"i¢™d-nﬁibm.h
"

105 #i‡(
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


106 
	~<m©h.h
>

107 
	~"i¢™l-nﬁibm.h
"

108 
	~"Âucw.h
"

111 #i‡(
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


112 
	~<m©h.h
>

113 
	~"i¢™d-nﬁibm.h
"

114 
	~"¥ötf-‰exp.h
"

117 #i‡(
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_LONG_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


118 
	~<m©h.h
>

119 
	~"i¢™l-nﬁibm.h
"

120 
	~"¥ötf-‰ex∂.h
"

121 
	~"Âucw.h
"

125 #i‚de‡
VASNPRINTF


126 #i‡
WIDE_CHAR_VERSION


127 
	#VASNPRINTF
 
va¢w¥ötf


	)

128 
	#FCHAR_T
 
wch¨_t


	)

129 
	#DCHAR_T
 
wch¨_t


	)

130 
	#TCHAR_T
 
wch¨_t


	)

131 
	#DCHAR_IS_TCHAR
 1

	)

132 
	#DIRECTIVE
 
wch¨_t_dúe˘ive


	)

133 
	#DIRECTIVES
 
wch¨_t_dúe˘ives


	)

134 
	#PRINTF_PARSE
 
w¥ötf_∑r£


	)

135 
	#DCHAR_CPY
 
wmem˝y


	)

136 
	#DCHAR_SET
 
wmem£t


	)

138 
	#VASNPRINTF
 
va¢¥ötf


	)

139 
	#FCHAR_T
 

	)

140 
	#DCHAR_T
 

	)

141 
	#TCHAR_T
 

	)

142 
	#DCHAR_IS_TCHAR
 1

	)

143 
	#DIRECTIVE
 
ch¨_dúe˘ive


	)

144 
	#DIRECTIVES
 
ch¨_dúe˘ives


	)

145 
	#PRINTF_PARSE
 
¥ötf_∑r£


	)

146 
	#DCHAR_CPY
 
mem˝y


	)

147 
	#DCHAR_SET
 
mem£t


	)

150 #i‡
WIDE_CHAR_VERSION


152 
	#USE_SNPRINTF
 1

	)

153 #i‡
HAVE_DECL__SNWPRINTF


158 #i‡
deföed
 
__MINGW32__


159 
	#SNPRINTF
 
¢w¥ötf


	)

161 
	#SNPRINTF
 
_¢w¥ötf


	)

165 
	#SNPRINTF
 
sw¥ötf


	)

174 #i‡(
HAVE_DECL__SNPRINTF
 || 
HAVE_SNPRINTF
Ë&& !
deföed
 
__BEOS__
 && !(
__GNU_LIBRARY__
 == 1)

175 
	#USE_SNPRINTF
 1

	)

177 
	#USE_SNPRINTF
 0

	)

179 #i‡
HAVE_DECL__SNPRINTF


182 #i‡
deföed
 
__MINGW32__


183 
	#SNPRINTF
 
¢¥ötf


	)

185 #unde‡
¢¥ötf


187 
	#SNPRINTF
 
_¢¥ötf


	)

191 
	#SNPRINTF
 
¢¥ötf


	)

193 #unde‡
¢¥ötf


197 #unde‡
•rötf


201 #ifde‡
löt


202 
	#IF_LINT
(
Code
Ë
	)
Code

204 
	#IF_LINT
(
Code
Ë

	)

209 #unde‡
exp


210 
	#exp
 
expo


	)

211 #unde‡
ªmaödî


212 
	#ªmaödî
 
ªm


	)

214 #i‡(!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
Ë&& !
WIDE_CHAR_VERSION


215 #i‡(
HAVE_STRNLEN
 && !
deföed
 
_AIX
)

216 
	#loˇl_°∫Àn
 
°∫Àn


	)

218 #i‚de‡
loˇl_°∫Àn_deföed


219 
	#loˇl_°∫Àn_deföed
 1

	)

220 
size_t


221 
	$loˇl_°∫Àn
 (c⁄° *
°rög
, 
size_t
 
maxÀn
)

223 c⁄° *
íd
 = 
	`memchr
 (
°rög
, '\0', 
maxÀn
);

224  
íd
 ? (
size_t
Ë”nd - 
°rög
Ë: 
maxÀn
;

225 
	}
}

230 #i‡(((!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
Ë&& 
WIDE_CHAR_VERSION
Ë|| ((!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || (
NEED_PRINTF_DIRECTIVE_LS
 && !
deföed
 
IN_LIBINTL
)Ë&& !WIDE_CHAR_VERSION && 
DCHAR_IS_TCHAR
)Ë&& 
HAVE_WCHAR_T


231 #i‡
HAVE_WCSLEN


232 
	#loˇl_wc¶í
 
wc¶í


	)

238 #i‚de‡
loˇl_wc¶í_deföed


239 
	#loˇl_wc¶í_deföed
 1

	)

240 
size_t


241 
	$loˇl_wc¶í
 (c⁄° 
wch¨_t
 *
s
)

243 c⁄° 
wch¨_t
 *
±r
;

245 
±r
 = 
s
; *±∏!(
wch¨_t
) 0;Ötr++)

247  
±r
 - 
s
;

248 
	}
}

253 #i‡(!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
Ë&& 
HAVE_WCHAR_T
 && 
WIDE_CHAR_VERSION


254 #i‡
HAVE_WCSNLEN


255 
	#loˇl_wc¢Àn
 
wc¢Àn


	)

257 #i‚de‡
loˇl_wc¢Àn_deföed


258 
	#loˇl_wc¢Àn_deföed
 1

	)

259 
size_t


260 
	$loˇl_wc¢Àn
 (c⁄° 
wch¨_t
 *
s
, 
size_t
 
maxÀn
)

262 c⁄° 
wch¨_t
 *
±r
;

264 
±r
 = 
s
; 
maxÀn
 > 0 && *±∏!(
wch¨_t
) 0;Ötr++, maxlen--)

266  
±r
 - 
s
;

267 
	}
}

272 #i‡(
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE
 || 
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


274 #i‚de‡
decimÆ_poöt_ch¨_deföed


275 
	#decimÆ_poöt_ch¨_deföed
 1

	)

277 
	$decimÆ_poöt_ch¨
 ()

279 c⁄° *
poöt
;

284 #i‡
HAVE_NL_LANGINFO
 && (
__GLIBC__
 || 
deföed
 
__UCLIBC__
 || (deföed 
__APPLE__
 && deföed 
__MACH__
))

285 
poöt
 = 
	`∆_œngöfo
 (
RADIXCHAR
);

287 
poötbuf
[5];

288 
	`•rötf
 (
poötbuf
, "%#.0f", 1.0);

289 
poöt
 = &
poötbuf
[1];

291 
poöt
 = 
	`loˇÀc⁄v
 (Ë-> 
decimÆ_poöt
;

294  (
poöt
[0] != '\0' ?Öoint[0] : '.');

295 
	}
}

299 #i‡
NEED_PRINTF_INFINITE_DOUBLE
 && !
NEED_PRINTF_DOUBLE
 && !
deföed
 
IN_LIBINTL


303 
	$is_öföôe_‹_zîo
 (
x
)

305  
	`i¢™d
 (
x
) || x + x == x;

306 
	}
}

310 #i‡
NEED_PRINTF_INFINITE_LONG_DOUBLE
 && !
NEED_PRINTF_LONG_DOUBLE
 && !
deföed
 
IN_LIBINTL


314 
	$is_öföôe_‹_zîﬁ
 (
x
)

316  
	`i¢™l
 (
x
) || x + x == x;

317 
	}
}

321 #i‡(
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


327 
	tmp_limb_t
;

328 
	#GMP_LIMB_BITS
 32

	)

329 
vîify
 ( (
mp_limb_t
Ë* 
CHAR_BIT
 =
GMP_LIMB_BITS
);

331 
	tmp_twﬁimb_t
;

332 
	#GMP_TWOLIMB_BITS
 64

	)

333 
vîify
 ( (
mp_twﬁimb_t
Ë* 
CHAR_BIT
 =
GMP_TWOLIMB_BITS
);

338 
size_t
 
	m∆imbs
;

339 
mp_limb_t
 *
	mlimbs
;

340 } 
	tm≤_t
;

346 
	$mu…ùly
 (
m≤_t
 
§c1
, m≤_à
§c2
, m≤_à*
de°
)

348 c⁄° 
mp_limb_t
 *
p1
;

349 c⁄° 
mp_limb_t
 *
p2
;

350 
size_t
 
Àn1
;

351 
size_t
 
Àn2
;

353 i‡(
§c1
.
∆imbs
 <
§c2
.nlimbs)

355 
Àn1
 = 
§c1
.
∆imbs
;

356 
p1
 = 
§c1
.
limbs
;

357 
Àn2
 = 
§c2
.
∆imbs
;

358 
p2
 = 
§c2
.
limbs
;

362 
Àn1
 = 
§c2
.
∆imbs
;

363 
p1
 = 
§c2
.
limbs
;

364 
Àn2
 = 
§c1
.
∆imbs
;

365 
p2
 = 
§c1
.
limbs
;

368 i‡(
Àn1
 == 0)

371 
de°
->
∆imbs
 = 0;

372 
de°
->
limbs
 = (
mp_limb_t
 *Ë
	`mÆloc
 (1);

377 
size_t
 
dÀn
;

378 
mp_limb_t
 *
dp
;

379 
size_t
 
k
, 
i
, 
j
;

381 
dÀn
 = 
Àn1
 + 
Àn2
;

382 
dp
 = (
mp_limb_t
 *Ë
	`mÆloc
 (
dÀn
 *  (mp_limb_t));

383 i‡(
dp
 =
NULL
)

384  
NULL
;

385 
k
 = 
Àn2
; k > 0; )

386 
dp
[--
k
] = 0;

387 
i
 = 0; i < 
Àn1
; i++)

389 
mp_limb_t
 
digô1
 = 
p1
[
i
];

390 
mp_twﬁimb_t
 
ˇºy
 = 0;

391 
j
 = 0; j < 
Àn2
; j++)

393 
mp_limb_t
 
digô2
 = 
p2
[
j
];

394 
ˇºy
 +(
mp_twﬁimb_t
Ë
digô1
 * (mp_twﬁimb_tË
digô2
;

395 
ˇºy
 +
dp
[
i
 + 
j
];

396 
dp
[
i
 + 
j
] = (
mp_limb_t
Ë
ˇºy
;

397 
ˇºy
 = c¨ry >> 
GMP_LIMB_BITS
;

399 
dp
[
i
 + 
Àn2
] = (
mp_limb_t
Ë
ˇºy
;

402 
dÀn
 > 0 && 
dp
[dlen - 1] == 0)

403 
dÀn
--;

404 
de°
->
∆imbs
 = 
dÀn
;

405 
de°
->
limbs
 = 
dp
;

407  
de°
->
limbs
;

408 
	}
}

418 
	$divide
 (
m≤_t
 
a
, m≤_à
b
, m≤_à*
q
)

471 c⁄° 
mp_limb_t
 *
a_±r
 = 
a
.
limbs
;

472 
size_t
 
a_Àn
 = 
a
.
∆imbs
;

473 c⁄° 
mp_limb_t
 *
b_±r
 = 
b
.
limbs
;

474 
size_t
 
b_Àn
 = 
b
.
∆imbs
;

475 
mp_limb_t
 *
room±r
;

476 
mp_limb_t
 *
tmp_room±r
 = 
NULL
;

477 
mp_limb_t
 *
q_±r
;

478 
size_t
 
q_Àn
;

479 
mp_limb_t
 *
r_±r
;

480 
size_t
 
r_Àn
;

485 
room±r
 = (
mp_limb_t
 *Ë
	`mÆloc
 ((
a_Àn
 + 2) *  (mp_limb_t));

486 i‡(
room±r
 =
NULL
)

487  
NULL
;

490 
a_Àn
 > 0 && 
a_±r
[a_len - 1] == 0)

491 
a_Àn
--;

496 i‡(
b_Àn
 == 0)

498 
	`ab‹t
 ();

499 i‡(
b_±r
[
b_Àn
 - 1] == 0)

500 
b_Àn
--;

507 i‡(
a_Àn
 < 
b_Àn
)

510 
r_±r
 = 
room±r
;

511 
r_Àn
 = 
a_Àn
;

512 
	`mem˝y
 (
r_±r
, 
a_±r
, 
a_Àn
 *  (
mp_limb_t
));

513 
q_±r
 = 
room±r
 + 
a_Àn
;

514 
q_Àn
 = 0;

516 i‡(
b_Àn
 == 1)

520 
r_±r
 = 
room±r
;

521 
q_±r
 = 
room±r
 + 1;

523 
mp_limb_t
 
dí
 = 
b_±r
[0];

524 
mp_limb_t
 
ªmaödî
 = 0;

525 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
a_±r
 + 
a_Àn
;

526 
mp_limb_t
 *
de°±r
 = 
q_±r
 + 
a_Àn
;

527 
size_t
 
cou¡
;

528 
cou¡
 = 
a_Àn
; count > 0; count--)

530 
mp_twﬁimb_t
 
num
 =

531 ((
mp_twﬁimb_t
Ë
ªmaödî
 << 
GMP_LIMB_BITS
Ë| *--
sour˚±r
;

532 *--
de°±r
 = 
num
 / 
dí
;

533 
ªmaödî
 = 
num
 % 
dí
;

536 i‡(
ªmaödî
 > 0)

538 
r_±r
[0] = 
ªmaödî
;

539 
r_Àn
 = 1;

542 
r_Àn
 = 0;

544 
q_Àn
 = 
a_Àn
;

545 i‡(
q_±r
[
q_Àn
 - 1] == 0)

546 
q_Àn
--;

555 
size_t
 
s
;

557 
mp_limb_t
 
msd
 = 
b_±r
[
b_Àn
 - 1];

558 
s
 = 31;

559 i‡(
msd
 >= 0x10000)

561 
msd
 = msd >> 16;

562 
s
 -= 16;

564 i‡(
msd
 >= 0x100)

566 
msd
 = msd >> 8;

567 
s
 -= 8;

569 i‡(
msd
 >= 0x10)

571 
msd
 = msd >> 4;

572 
s
 -= 4;

574 i‡(
msd
 >= 0x4)

576 
msd
 = msd >> 2;

577 
s
 -= 2;

579 i‡(
msd
 >= 0x2)

581 
msd
 = msd >> 1;

582 
s
 -= 1;

587 i‡(
s
 > 0)

589 
tmp_room±r
 = (
mp_limb_t
 *Ë
	`mÆloc
 (
b_Àn
 *  (mp_limb_t));

590 i‡(
tmp_room±r
 =
NULL
)

592 
	`‰ì
 (
room±r
);

593  
NULL
;

596 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
b_±r
;

597 
mp_limb_t
 *
de°±r
 = 
tmp_room±r
;

598 
mp_twﬁimb_t
 
accu
 = 0;

599 
size_t
 
cou¡
;

600 
cou¡
 = 
b_Àn
; count > 0; count--)

602 
accu
 +(
mp_twﬁimb_t
Ë*
sour˚±r
++ << 
s
;

603 *
de°±r
++ = (
mp_limb_t
Ë
accu
;

604 
accu
 =áccu >> 
GMP_LIMB_BITS
;

607 i‡(
accu
 != 0)

608 
	`ab‹t
 ();

610 
b_±r
 = 
tmp_room±r
;

616 
r_±r
 = 
room±r
;

617 i‡(
s
 == 0)

619 
	`mem˝y
 (
r_±r
, 
a_±r
, 
a_Àn
 *  (
mp_limb_t
));

620 
r_±r
[
a_Àn
] = 0;

624 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
a_±r
;

625 
mp_limb_t
 *
de°±r
 = 
r_±r
;

626 
mp_twﬁimb_t
 
accu
 = 0;

627 
size_t
 
cou¡
;

628 
cou¡
 = 
a_Àn
; count > 0; count--)

630 
accu
 +(
mp_twﬁimb_t
Ë*
sour˚±r
++ << 
s
;

631 *
de°±r
++ = (
mp_limb_t
Ë
accu
;

632 
accu
 =áccu >> 
GMP_LIMB_BITS
;

634 *
de°±r
++ = (
mp_limb_t
Ë
accu
;

636 
q_±r
 = 
room±r
 + 
b_Àn
;

637 
q_Àn
 = 
a_Àn
 - 
b_Àn
 + 1;

639 
size_t
 
j
 = 
a_Àn
 - 
b_Àn
;

640 
mp_limb_t
 
b_msd
 = 
b_±r
[
b_Àn
 - 1];

641 
mp_limb_t
 
b_2msd
 = 
b_±r
[
b_Àn
 - 2];

642 
mp_twﬁimb_t
 
b_msdd
 =

643 ((
mp_twﬁimb_t
Ë
b_msd
 << 
GMP_LIMB_BITS
Ë| 
b_2msd
;

648 
mp_limb_t
 
q_°¨
;

649 
mp_limb_t
 
c1
;

650 i‡(
r_±r
[
j
 + 
b_Àn
] < 
b_msd
)

653 
mp_twﬁimb_t
 
num
 =

654 ((
mp_twﬁimb_t
Ë
r_±r
[
j
 + 
b_Àn
] << 
GMP_LIMB_BITS
)

655 | 
r_±r
[
j
 + 
b_Àn
 - 1];

656 
q_°¨
 = 
num
 / 
b_msd
;

657 
c1
 = 
num
 % 
b_msd
;

662 
q_°¨
 = (
mp_limb_t
)~(mp_limb_t)0;

670 i‡(
r_±r
[
j
 + 
b_Àn
] > 
b_msd


671 || (
c1
 = 
r_±r
[
j
 + 
b_Àn
 - 1] + 
b_msd
) < b_msd)

675 
subåa˘
;

680 
mp_twﬁimb_t
 
c2
 =

681 ((
mp_twﬁimb_t
Ë
c1
 << 
GMP_LIMB_BITS
Ë| 
r_±r
[
j
 + 
b_Àn
 - 2];

682 
mp_twﬁimb_t
 
c3
 =

683 (
mp_twﬁimb_t
Ë
b_2msd
 * (mp_twﬁimb_tË
q_°¨
;

688 i‡(
c3
 > 
c2
)

690 
q_°¨
 = q_star - 1;

691 i‡(
c3
 - 
c2
 > 
b_msdd
)

692 
q_°¨
 = q_star - 1;

695 i‡(
q_°¨
 > 0)

696 
subåa˘
:

699 
mp_limb_t
 
¸
;

701 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
b_±r
;

702 
mp_limb_t
 *
de°±r
 = 
r_±r
 + 
j
;

703 
mp_twﬁimb_t
 
ˇºy
 = 0;

704 
size_t
 
cou¡
;

705 
cou¡
 = 
b_Àn
; count > 0; count--)

708 
ˇºy
 =

709 
ˇºy


710 + (
mp_twﬁimb_t
Ë
q_°¨
 * (mp_twﬁimb_tË*
sour˚±r
++

711 + (
mp_limb_t
Ë~(*
de°±r
);

713 *
de°±r
++ = ~(
mp_limb_t
Ë
ˇºy
;

714 
ˇºy
 = c¨ry >> 
GMP_LIMB_BITS
;

716 
¸
 = (
mp_limb_t
Ë
ˇºy
;

720 i‡(
¸
 > 
r_±r
[
j
 + 
b_Àn
])

723 
q_°¨
 = q_star - 1;

726 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
b_±r
;

727 
mp_limb_t
 *
de°±r
 = 
r_±r
 + 
j
;

728 
mp_limb_t
 
ˇºy
 = 0;

729 
size_t
 
cou¡
;

730 
cou¡
 = 
b_Àn
; count > 0; count--)

732 
mp_limb_t
 
sour˚1
 = *
sour˚±r
++;

733 
mp_limb_t
 
sour˚2
 = *
de°±r
;

734 *
de°±r
++ = 
sour˚1
 + 
sour˚2
 + 
ˇºy
;

735 
ˇºy
 =

736 (
ˇºy


737 ? 
sour˚1
 >(
mp_limb_t
Ë~
sour˚2


738 : 
sour˚1
 > (
mp_limb_t
Ë~
sour˚2
);

745 
q_±r
[
j
] = 
q_°¨
;

746 i‡(
j
 == 0)

748 
j
--;

751 
r_Àn
 = 
b_Àn
;

753 i‡(
q_±r
[
q_Àn
 - 1] == 0)

754 
q_Àn
--;

758 i‡(
s
 > 0)

760 
mp_limb_t
 
±r
 = 
r_±r
 + 
r_Àn
;

761 
mp_twﬁimb_t
 
accu
 = 0;

762 
size_t
 
cou¡
;

763 
cou¡
 = 
r_Àn
; count > 0; count--)

765 
accu
 = (
mp_twﬁimb_t
Ë(
mp_limb_t
Ëaccu << 
GMP_LIMB_BITS
;

766 
accu
 +(
mp_twﬁimb_t
Ë*--
±r
 << (
GMP_LIMB_BITS
 - 
s
);

767 *
±r
 = (
mp_limb_t
Ë(
accu
 >> 
GMP_LIMB_BITS
);

772 
r_Àn
 > 0 && 
r_±r
[r_len - 1] == 0)

773 
r_Àn
--;

776 i‡(
r_Àn
 > 
b_Àn
)

777 
ö¸emít_q
;

779 
size_t
 
i
;

780 
i
 = 
b_Àn
;;)

782 
mp_limb_t
 
r_i
 =

783 (
i
 <
r_Àn
 && i > 0 ? 
r_±r
[ò- 1] >> (
GMP_LIMB_BITS
 - 1) : 0)

784 | (
i
 < 
r_Àn
 ? 
r_±r
[i] << 1 : 0);

785 
mp_limb_t
 
b_i
 = (
i
 < 
b_Àn
 ? 
b_±r
[i] : 0);

786 i‡(
r_i
 > 
b_i
)

787 
ö¸emít_q
;

788 i‡(
r_i
 < 
b_i
)

789 
kìp_q
;

790 i‡(
i
 == 0)

792 
i
--;

795 i‡(
q_Àn
 > 0 && ((
q_±r
[0] & 1) != 0))

797 
ö¸emít_q
:

799 
size_t
 
i
;

800 
i
 = 0; i < 
q_Àn
; i++)

801 i‡(++(
q_±r
[
i
]) != 0)

802 
kìp_q
;

803 
q_±r
[
q_Àn
++] = 1;

805 
kìp_q
:

806 i‡(
tmp_room±r
 !
NULL
)

807 
	`‰ì
 (
tmp_room±r
);

808 
q
->
limbs
 = 
q_±r
;

809 
q
->
∆imbs
 = 
q_Àn
;

810  
room±r
;

811 
	}
}

820 
	$c⁄vît_to_decimÆ
 (
m≤_t
 
a
, 
size_t
 
exåa_zî€s
)

822 
mp_limb_t
 *
a_±r
 = 
a
.
limbs
;

823 
size_t
 
a_Àn
 = 
a
.
∆imbs
;

825 
size_t
 
c_Àn
 = 9 * ((size_t)(
a_Àn
 * (
GMP_LIMB_BITS
 * 0.03345f)) + 1);

826 *
c_±r
 = (*Ë
	`mÆloc
 (
	`xsum
 (
c_Àn
, 
exåa_zî€s
));

827 i‡(
c_±r
 !
NULL
)

829 *
d_±r
 = 
c_±r
;

830 ; 
exåa_zî€s
 > 0;Éxtra_zeroes--)

831 *
d_±r
++ = '0';

832 
a_Àn
 > 0)

835 
mp_limb_t
 
ªmaödî
 = 0;

836 
mp_limb_t
 *
±r
 = 
a_±r
 + 
a_Àn
;

837 
size_t
 
cou¡
;

838 
cou¡
 = 
a_Àn
; count > 0; count--)

840 
mp_twﬁimb_t
 
num
 =

841 ((
mp_twﬁimb_t
Ë
ªmaödî
 << 
GMP_LIMB_BITS
Ë| *--
±r
;

842 *
±r
 = 
num
 / 1000000000;

843 
ªmaödî
 = 
num
 % 1000000000;

846 
cou¡
 = 9; count > 0; count--)

848 *
d_±r
++ = '0' + (
ªmaödî
 % 10);

849 
ªmaödî
 =Ñemainder / 10;

852 i‡(
a_±r
[
a_Àn
 - 1] == 0)

853 
a_Àn
--;

856 
d_±r
 > 
c_±r
 && d_ptr[-1] == '0')

857 
d_±r
--;

859 i‡(
d_±r
 =
c_±r
)

860 *
d_±r
++ = '0';

862 *
d_±r
 = '\0';

864  
c_±r
;

865 
	}
}

867 #i‡
NEED_PRINTF_LONG_DOUBLE


874 
	$decode_l⁄g_doubÀ
 (
x
, *
ï
, 
m≤_t
 *
mp
)

876 
m≤_t
 
m
;

877 
exp
;

878 
y
;

879 
size_t
 
i
;

882 
m
.
∆imbs
 = (
LDBL_MANT_BIT
 + 
GMP_LIMB_BITS
 - 1) / GMP_LIMB_BITS;

883 
m
.
limbs
 = (
mp_limb_t
 *Ë
	`mÆloc
 (m.
∆imbs
 *  (mp_limb_t));

884 i‡(
m
.
limbs
 =
NULL
)

885  
NULL
;

887 
y
 = 
	`‰ex∂
 (
x
, &
exp
);

888 i‡(!(
y
 >= 0.0L && y < 1.0L))

889 
	`ab‹t
 ();

897 #i‡(
LDBL_MANT_BIT
 % 
GMP_LIMB_BITS
) != 0

898 #i‡(
LDBL_MANT_BIT
 % 
GMP_LIMB_BITS
) > GMP_LIMB_BITS / 2

900 
mp_limb_t
 
hi
, 
lo
;

901 
y
 *(
mp_limb_t
Ë1 << (
LDBL_MANT_BIT
 % (
GMP_LIMB_BITS
 / 2));

902 
hi
 = (Ë
y
;

903 
y
 -
hi
;

904 i‡(!(
y
 >= 0.0L && y < 1.0L))

905 
	`ab‹t
 ();

906 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

907 
lo
 = (Ë
y
;

908 
y
 -
lo
;

909 i‡(!(
y
 >= 0.0L && y < 1.0L))

910 
	`ab‹t
 ();

911 
m
.
limbs
[
LDBL_MANT_BIT
 / 
GMP_LIMB_BITS
] = (
hi
 << (GMP_LIMB_BITS / 2)Ë| 
lo
;

915 
mp_limb_t
 
d
;

916 
y
 *(
mp_limb_t
Ë1 << (
LDBL_MANT_BIT
 % 
GMP_LIMB_BITS
);

917 
d
 = (Ë
y
;

918 
y
 -
d
;

919 i‡(!(
y
 >= 0.0L && y < 1.0L))

920 
	`ab‹t
 ();

921 
m
.
limbs
[
LDBL_MANT_BIT
 / 
GMP_LIMB_BITS
] = 
d
;

925 
i
 = 
LDBL_MANT_BIT
 / 
GMP_LIMB_BITS
; i > 0; )

927 
mp_limb_t
 
hi
, 
lo
;

928 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

929 
hi
 = (Ë
y
;

930 
y
 -
hi
;

931 i‡(!(
y
 >= 0.0L && y < 1.0L))

932 
	`ab‹t
 ();

933 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

934 
lo
 = (Ë
y
;

935 
y
 -
lo
;

936 i‡(!(
y
 >= 0.0L && y < 1.0L))

937 
	`ab‹t
 ();

938 
m
.
limbs
[--
i
] = (
hi
 << (
GMP_LIMB_BITS
 / 2)Ë| 
lo
;

942 i‡(!(
y
 == 0.0L))

943 
	`ab‹t
 ();

946 
m
.
∆imbs
 > 0 && m.
limbs
[m.nlimbs - 1] == 0)

947 
m
.
∆imbs
--;

948 *
mp
 = 
m
;

949 *
ï
 = 
exp
 - 
LDBL_MANT_BIT
;

950  
m
.
limbs
;

951 
	}
}

955 #i‡
NEED_PRINTF_DOUBLE


962 
	$decode_doubÀ
 (
x
, *
ï
, 
m≤_t
 *
mp
)

964 
m≤_t
 
m
;

965 
exp
;

966 
y
;

967 
size_t
 
i
;

970 
m
.
∆imbs
 = (
DBL_MANT_BIT
 + 
GMP_LIMB_BITS
 - 1) / GMP_LIMB_BITS;

971 
m
.
limbs
 = (
mp_limb_t
 *Ë
	`mÆloc
 (m.
∆imbs
 *  (mp_limb_t));

972 i‡(
m
.
limbs
 =
NULL
)

973  
NULL
;

975 
y
 = 
	`‰exp
 (
x
, &
exp
);

976 i‡(!(
y
 >= 0.0 && y < 1.0))

977 
	`ab‹t
 ();

985 #i‡(
DBL_MANT_BIT
 % 
GMP_LIMB_BITS
) != 0

986 #i‡(
DBL_MANT_BIT
 % 
GMP_LIMB_BITS
) > GMP_LIMB_BITS / 2

988 
mp_limb_t
 
hi
, 
lo
;

989 
y
 *(
mp_limb_t
Ë1 << (
DBL_MANT_BIT
 % (
GMP_LIMB_BITS
 / 2));

990 
hi
 = (Ë
y
;

991 
y
 -
hi
;

992 i‡(!(
y
 >= 0.0 && y < 1.0))

993 
	`ab‹t
 ();

994 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

995 
lo
 = (Ë
y
;

996 
y
 -
lo
;

997 i‡(!(
y
 >= 0.0 && y < 1.0))

998 
	`ab‹t
 ();

999 
m
.
limbs
[
DBL_MANT_BIT
 / 
GMP_LIMB_BITS
] = (
hi
 << (GMP_LIMB_BITS / 2)Ë| 
lo
;

1003 
mp_limb_t
 
d
;

1004 
y
 *(
mp_limb_t
Ë1 << (
DBL_MANT_BIT
 % 
GMP_LIMB_BITS
);

1005 
d
 = (Ë
y
;

1006 
y
 -
d
;

1007 i‡(!(
y
 >= 0.0 && y < 1.0))

1008 
	`ab‹t
 ();

1009 
m
.
limbs
[
DBL_MANT_BIT
 / 
GMP_LIMB_BITS
] = 
d
;

1013 
i
 = 
DBL_MANT_BIT
 / 
GMP_LIMB_BITS
; i > 0; )

1015 
mp_limb_t
 
hi
, 
lo
;

1016 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

1017 
hi
 = (Ë
y
;

1018 
y
 -
hi
;

1019 i‡(!(
y
 >= 0.0 && y < 1.0))

1020 
	`ab‹t
 ();

1021 
y
 *(
mp_limb_t
Ë1 << (
GMP_LIMB_BITS
 / 2);

1022 
lo
 = (Ë
y
;

1023 
y
 -
lo
;

1024 i‡(!(
y
 >= 0.0 && y < 1.0))

1025 
	`ab‹t
 ();

1026 
m
.
limbs
[--
i
] = (
hi
 << (
GMP_LIMB_BITS
 / 2)Ë| 
lo
;

1028 i‡(!(
y
 == 0.0))

1029 
	`ab‹t
 ();

1031 
m
.
∆imbs
 > 0 && m.
limbs
[m.nlimbs - 1] == 0)

1032 
m
.
∆imbs
--;

1033 *
mp
 = 
m
;

1034 *
ï
 = 
exp
 - 
DBL_MANT_BIT
;

1035  
m
.
limbs
;

1036 
	}
}

1046 
	$sˇÀ10_round_decimÆ_decoded
 (
e
, 
m≤_t
 
m
, *
mem‹y
, 
n
)

1048 
s
;

1049 
size_t
 
exåa_zî€s
;

1050 
abs_n
;

1051 
abs_s
;

1052 
mp_limb_t
 *
pow5_±r
;

1053 
size_t
 
pow5_Àn
;

1054 
s_limbs
;

1055 
s_bôs
;

1056 
m≤_t
 
pow5
;

1057 
m≤_t
 
z
;

1058 *
z_mem‹y
;

1059 *
digôs
;

1061 i‡(
mem‹y
 =
NULL
)

1062  
NULL
;

1066 
s
 = 
e
 + 
n
;

1067 
exåa_zî€s
 = 0;

1069 i‡(
s
 > 0 && 
n
 > 0)

1071 
exåa_zî€s
 = (
s
 < 
n
 ? s :Ç);

1072 
s
 -
exåa_zî€s
;

1073 
n
 -
exåa_zî€s
;

1080 
abs_n
 = (
n
 >= 0 ?Ç : -n);

1081 
abs_s
 = (
s
 >= 0 ? s : -s);

1082 
pow5_±r
 = (
mp_limb_t
 *Ë
	`mÆloc
 ((()(
abs_n
 * (2.322‡/ 
GMP_LIMB_BITS
)) + 1

1083 + 
abs_s
 / 
GMP_LIMB_BITS
 + 1)

1084 *  (
mp_limb_t
));

1085 i‡(
pow5_±r
 =
NULL
)

1087 
	`‰ì
 (
mem‹y
);

1088  
NULL
;

1091 
pow5_±r
[0] = 1;

1092 
pow5_Àn
 = 1;

1094 i‡(
abs_n
 > 0)

1096 
mp_limb_t
 c⁄° 
smÆl_pow5
[13 + 1] =

1101 
n13
;

1102 
n13
 = 0;Ç13 <
abs_n
;Ç13 += 13)

1104 
mp_limb_t
 
digô1
 = 
smÆl_pow5
[
n13
 + 13 <
abs_n
 ? 13 :ábs_n -Ç13];

1105 
size_t
 
j
;

1106 
mp_twﬁimb_t
 
ˇºy
 = 0;

1107 
j
 = 0; j < 
pow5_Àn
; j++)

1109 
mp_limb_t
 
digô2
 = 
pow5_±r
[
j
];

1110 
ˇºy
 +(
mp_twﬁimb_t
Ë
digô1
 * (mp_twﬁimb_tË
digô2
;

1111 
pow5_±r
[
j
] = (
mp_limb_t
Ë
ˇºy
;

1112 
ˇºy
 = c¨ry >> 
GMP_LIMB_BITS
;

1114 i‡(
ˇºy
 > 0)

1115 
pow5_±r
[
pow5_Àn
++] = (
mp_limb_t
Ë
ˇºy
;

1118 
s_limbs
 = 
abs_s
 / 
GMP_LIMB_BITS
;

1119 
s_bôs
 = 
abs_s
 % 
GMP_LIMB_BITS
;

1120 i‡(
n
 >0 ? 
s
 >= 0 : s <= 0)

1123 i‡(
s_bôs
 > 0)

1125 
mp_limb_t
 *
±r
 = 
pow5_±r
;

1126 
mp_twﬁimb_t
 
accu
 = 0;

1127 
size_t
 
cou¡
;

1128 
cou¡
 = 
pow5_Àn
; count > 0; count--)

1130 
accu
 +(
mp_twﬁimb_t
Ë*
±r
 << 
s_bôs
;

1131 *
±r
++ = (
mp_limb_t
Ë
accu
;

1132 
accu
 =áccu >> 
GMP_LIMB_BITS
;

1134 i‡(
accu
 > 0)

1136 *
±r
 = (
mp_limb_t
Ë
accu
;

1137 
pow5_Àn
++;

1140 i‡(
s_limbs
 > 0)

1142 
size_t
 
cou¡
;

1143 
cou¡
 = 
pow5_Àn
; count > 0;)

1145 
cou¡
--;

1146 
pow5_±r
[
s_limbs
 + 
cou¡
] =Öow5_ptr[count];

1148 
cou¡
 = 
s_limbs
; count > 0;)

1150 
cou¡
--;

1151 
pow5_±r
[
cou¡
] = 0;

1153 
pow5_Àn
 +
s_limbs
;

1155 
pow5
.
limbs
 = 
pow5_±r
;

1156 
pow5
.
∆imbs
 = 
pow5_Àn
;

1157 i‡(
n
 >= 0)

1160 
z_mem‹y
 = 
	`mu…ùly
 (
m
, 
pow5
, &
z
);

1165 
z_mem‹y
 = 
	`divide
 (
m
, 
pow5
, &
z
);

1170 
pow5
.
limbs
 = 
pow5_±r
;

1171 
pow5
.
∆imbs
 = 
pow5_Àn
;

1172 i‡(
n
 >= 0)

1176 
m≤_t
 
numî©‹
;

1177 
m≤_t
 
díomö©‹
;

1178 *
tmp_mem‹y
;

1179 
tmp_mem‹y
 = 
	`mu…ùly
 (
m
, 
pow5
, &
numî©‹
);

1180 i‡(
tmp_mem‹y
 =
NULL
)

1182 
	`‰ì
 (
pow5_±r
);

1183 
	`‰ì
 (
mem‹y
);

1184  
NULL
;

1188 
mp_limb_t
 *
±r
 = 
pow5_±r
 + 
pow5_Àn
;

1189 
size_t
 
i
;

1190 
i
 = 0; i < 
s_limbs
; i++)

1191 
±r
[
i
] = 0;

1192 
±r
[
s_limbs
] = (
mp_limb_t
Ë1 << 
s_bôs
;

1193 
díomö©‹
.
limbs
 = 
±r
;

1194 
díomö©‹
.
∆imbs
 = 
s_limbs
 + 1;

1196 
z_mem‹y
 = 
	`divide
 (
numî©‹
, 
díomö©‹
, &
z
);

1197 
	`‰ì
 (
tmp_mem‹y
);

1203 
m≤_t
 
numî©‹
;

1204 
mp_limb_t
 *
num_±r
;

1205 
num_±r
 = (
mp_limb_t
 *Ë
	`mÆloc
 ((
m
.
∆imbs
 + 
s_limbs
 + 1)

1206 *  (
mp_limb_t
));

1207 i‡(
num_±r
 =
NULL
)

1209 
	`‰ì
 (
pow5_±r
);

1210 
	`‰ì
 (
mem‹y
);

1211  
NULL
;

1214 
mp_limb_t
 *
de°±r
 = 
num_±r
;

1216 
size_t
 
i
;

1217 
i
 = 0; i < 
s_limbs
; i++)

1218 *
de°±r
++ = 0;

1220 i‡(
s_bôs
 > 0)

1222 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
m
.
limbs
;

1223 
mp_twﬁimb_t
 
accu
 = 0;

1224 
size_t
 
cou¡
;

1225 
cou¡
 = 
m
.
∆imbs
; count > 0; count--)

1227 
accu
 +(
mp_twﬁimb_t
Ë*
sour˚±r
++ << 
s_bôs
;

1228 *
de°±r
++ = (
mp_limb_t
Ë
accu
;

1229 
accu
 =áccu >> 
GMP_LIMB_BITS
;

1231 i‡(
accu
 > 0)

1232 *
de°±r
++ = (
mp_limb_t
Ë
accu
;

1236 c⁄° 
mp_limb_t
 *
sour˚±r
 = 
m
.
limbs
;

1237 
size_t
 
cou¡
;

1238 
cou¡
 = 
m
.
∆imbs
; count > 0; count--)

1239 *
de°±r
++ = *
sour˚±r
++;

1241 
numî©‹
.
limbs
 = 
num_±r
;

1242 
numî©‹
.
∆imbs
 = 
de°±r
 - 
num_±r
;

1244 
z_mem‹y
 = 
	`divide
 (
numî©‹
, 
pow5
, &
z
);

1245 
	`‰ì
 (
num_±r
);

1248 
	`‰ì
 (
pow5_±r
);

1249 
	`‰ì
 (
mem‹y
);

1253 i‡(
z_mem‹y
 =
NULL
)

1254  
NULL
;

1255 
digôs
 = 
	`c⁄vît_to_decimÆ
 (
z
, 
exåa_zî€s
);

1256 
	`‰ì
 (
z_mem‹y
);

1257  
digôs
;

1258 
	}
}

1260 #i‡
NEED_PRINTF_LONG_DOUBLE


1268 
	$sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
x
, 
n
)

1270 
e
 
	`IF_LINT
(= 0);

1271 
m≤_t
 
m
;

1272 *
mem‹y
 = 
	`decode_l⁄g_doubÀ
 (
x
, &
e
, &
m
);

1273  
	`sˇÀ10_round_decimÆ_decoded
 (
e
, 
m
, 
mem‹y
, 
n
);

1274 
	}
}

1278 #i‡
NEED_PRINTF_DOUBLE


1286 
	$sˇÀ10_round_decimÆ_doubÀ
 (
x
, 
n
)

1288 
e
 
	`IF_LINT
(= 0);

1289 
m≤_t
 
m
;

1290 *
mem‹y
 = 
	`decode_doubÀ
 (
x
, &
e
, &
m
);

1291  
	`sˇÀ10_round_decimÆ_decoded
 (
e
, 
m
, 
mem‹y
, 
n
);

1292 
	}
}

1296 #i‡
NEED_PRINTF_LONG_DOUBLE


1302 
	$Êo‹log10l
 (
x
)

1304 
exp
;

1305 
y
;

1306 
z
;

1307 
l
;

1310 
y
 = 
	`‰ex∂
 (
x
, &
exp
);

1311 i‡(!(
y
 >= 0.0L && y < 1.0L))

1312 
	`ab‹t
 ();

1313 i‡(
y
 == 0.0L)

1314  
INT_MIN
;

1315 i‡(
y
 < 0.5L)

1317 
y
 < (1.0L / (1 << (
GMP_LIMB_BITS
 / 2)) / (1 << (GMP_LIMB_BITS / 2))))

1319 
y
 *1.0L * (1 << (
GMP_LIMB_BITS
 / 2)) * (1 << (GMP_LIMB_BITS / 2));

1320 
exp
 -
GMP_LIMB_BITS
;

1322 i‡(
y
 < (1.0L / (1 << 16)))

1324 
y
 *= 1.0L * (1 << 16);

1325 
exp
 -= 16;

1327 i‡(
y
 < (1.0L / (1 << 8)))

1329 
y
 *= 1.0L * (1 << 8);

1330 
exp
 -= 8;

1332 i‡(
y
 < (1.0L / (1 << 4)))

1334 
y
 *= 1.0L * (1 << 4);

1335 
exp
 -= 4;

1337 i‡(
y
 < (1.0L / (1 << 2)))

1339 
y
 *= 1.0L * (1 << 2);

1340 
exp
 -= 2;

1342 i‡(
y
 < (1.0L / (1 << 1)))

1344 
y
 *= 1.0L * (1 << 1);

1345 
exp
 -= 1;

1348 i‡(!(
y
 >= 0.5L && y < 1.0L))

1349 
	`ab‹t
 ();

1351 
l
 = 
exp
;

1352 
z
 = 
y
;

1353 i‡(
z
 < 0.70710678118654752444)

1355 
z
 *= 1.4142135623730950488;

1356 
l
 -= 0.5;

1358 i‡(
z
 < 0.8408964152537145431)

1360 
z
 *= 1.1892071150027210667;

1361 
l
 -= 0.25;

1363 i‡(
z
 < 0.91700404320467123175)

1365 
z
 *= 1.0905077326652576592;

1366 
l
 -= 0.125;

1368 i‡(
z
 < 0.9576032806985736469)

1370 
z
 *= 1.0442737824274138403;

1371 
l
 -= 0.0625;

1374 
z
 = 1 - z;

1377 
l
 -1.4426950408889634074 * 
z
 * (1.0 + z * (0.5 + z * ((1.0 / 3) + z * 0.25)));

1380 
l
 *= 0.30102999566398119523;

1382  (Ë
l
 + (l < 0 ? -1 : 0);

1383 
	}
}

1387 #i‡
NEED_PRINTF_DOUBLE


1393 
	$Êo‹log10
 (
x
)

1395 
exp
;

1396 
y
;

1397 
z
;

1398 
l
;

1401 
y
 = 
	`‰exp
 (
x
, &
exp
);

1402 i‡(!(
y
 >= 0.0 && y < 1.0))

1403 
	`ab‹t
 ();

1404 i‡(
y
 == 0.0)

1405  
INT_MIN
;

1406 i‡(
y
 < 0.5)

1408 
y
 < (1.0 / (1 << (
GMP_LIMB_BITS
 / 2)) / (1 << (GMP_LIMB_BITS / 2))))

1410 
y
 *1.0 * (1 << (
GMP_LIMB_BITS
 / 2)) * (1 << (GMP_LIMB_BITS / 2));

1411 
exp
 -
GMP_LIMB_BITS
;

1413 i‡(
y
 < (1.0 / (1 << 16)))

1415 
y
 *= 1.0 * (1 << 16);

1416 
exp
 -= 16;

1418 i‡(
y
 < (1.0 / (1 << 8)))

1420 
y
 *= 1.0 * (1 << 8);

1421 
exp
 -= 8;

1423 i‡(
y
 < (1.0 / (1 << 4)))

1425 
y
 *= 1.0 * (1 << 4);

1426 
exp
 -= 4;

1428 i‡(
y
 < (1.0 / (1 << 2)))

1430 
y
 *= 1.0 * (1 << 2);

1431 
exp
 -= 2;

1433 i‡(
y
 < (1.0 / (1 << 1)))

1435 
y
 *= 1.0 * (1 << 1);

1436 
exp
 -= 1;

1439 i‡(!(
y
 >= 0.5 && y < 1.0))

1440 
	`ab‹t
 ();

1442 
l
 = 
exp
;

1443 
z
 = 
y
;

1444 i‡(
z
 < 0.70710678118654752444)

1446 
z
 *= 1.4142135623730950488;

1447 
l
 -= 0.5;

1449 i‡(
z
 < 0.8408964152537145431)

1451 
z
 *= 1.1892071150027210667;

1452 
l
 -= 0.25;

1454 i‡(
z
 < 0.91700404320467123175)

1456 
z
 *= 1.0905077326652576592;

1457 
l
 -= 0.125;

1459 i‡(
z
 < 0.9576032806985736469)

1461 
z
 *= 1.0442737824274138403;

1462 
l
 -= 0.0625;

1465 
z
 = 1 - z;

1468 
l
 -1.4426950408889634074 * 
z
 * (1.0 + z * (0.5 + z * ((1.0 / 3) + z * 0.25)));

1471 
l
 *= 0.30102999566398119523;

1473  (Ë
l
 + (l < 0 ? -1 : 0);

1474 
	}
}

1481 
	$is_b‹dîlöe
 (c⁄° *
digôs
, 
size_t
 
¥ecisi⁄
)

1483 ; 
¥ecisi⁄
 > 0;Öªcisi⁄--, 
digôs
++)

1484 i‡(*
digôs
 != '0')

1486 i‡(*
digôs
 != '1')

1488 
digôs
++;

1489  *
digôs
 == '\0';

1490 
	}
}

1494 #i‡!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99


1499 #i‡
WIDE_CHAR_VERSION


1500 
	#MAX_ROOM_NEEDED
 
wmax_room_√eded


	)

1502 
	#MAX_ROOM_NEEDED
 
max_room_√eded


	)

1507 
ölöe
 
size_t


1508 
	$MAX_ROOM_NEEDED
 (c⁄° 
¨gumíts
 *
≠
, 
size_t
 
¨g_ödex
, 
FCHAR_T
 
c⁄vîsi⁄
,

1509 
¨g_ty≥
 
ty≥
, 
Êags
, 
size_t
 
width
, 
has_¥ecisi⁄
,

1510 
size_t
 
¥ecisi⁄
, 
∑d_our£lves
)

1512 
size_t
 
tmp_Àngth
;

1514 
c⁄vîsi⁄
)

1517 #i‡
HAVE_LONG_LONG_INT


1518 i‡(
ty≥
 =
TYPE_LONGLONGINT
 ||Åy≥ =
TYPE_ULONGLONGINT
)

1519 
tmp_Àngth
 =

1520 (Ë( (Ë* 
CHAR_BIT


1526 i‡(
ty≥
 =
TYPE_LONGINT
 ||Åy≥ =
TYPE_ULONGINT
)

1527 
tmp_Àngth
 =

1528 (Ë( (Ë* 
CHAR_BIT


1533 
tmp_Àngth
 =

1534 (Ë( (Ë* 
CHAR_BIT


1538 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

1539 
tmp_Àngth
 = 
¥ecisi⁄
;

1541 
tmp_Àngth
 = 
	`xsum
 (tmp_length,Åmp_length);

1543 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 1);

1547 #i‡
HAVE_LONG_LONG_INT


1548 i‡(
ty≥
 =
TYPE_LONGLONGINT
 ||Åy≥ =
TYPE_ULONGLONGINT
)

1549 
tmp_Àngth
 =

1550 (Ë( (Ë* 
CHAR_BIT


1556 i‡(
ty≥
 =
TYPE_LONGINT
 ||Åy≥ =
TYPE_ULONGINT
)

1557 
tmp_Àngth
 =

1558 (Ë( (Ë* 
CHAR_BIT


1563 
tmp_Àngth
 =

1564 (Ë( (Ë* 
CHAR_BIT


1568 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

1569 
tmp_Àngth
 = 
¥ecisi⁄
;

1571 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 1);

1575 #i‡
HAVE_LONG_LONG_INT


1576 i‡(
ty≥
 =
TYPE_LONGLONGINT
 ||Åy≥ =
TYPE_ULONGLONGINT
)

1577 
tmp_Àngth
 =

1578 (Ë( (Ë* 
CHAR_BIT


1584 i‡(
ty≥
 =
TYPE_LONGINT
 ||Åy≥ =
TYPE_ULONGINT
)

1585 
tmp_Àngth
 =

1586 (Ë( (Ë* 
CHAR_BIT


1591 
tmp_Àngth
 =

1592 (Ë( (Ë* 
CHAR_BIT


1596 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

1597 
tmp_Àngth
 = 
¥ecisi⁄
;

1599 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 2);

1603 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

1604 
tmp_Àngth
 =

1605 (Ë(
LDBL_MAX_EXP


1612 
tmp_Àngth
 =

1613 (Ë(
DBL_MAX_EXP


1619 
tmp_Àngth
 = 
	`xsum
 (tmp_Àngth, 
¥ecisi⁄
);

1623 
tmp_Àngth
 =

1625 
tmp_Àngth
 = 
	`xsum
 (tmp_Àngth, 
¥ecisi⁄
);

1629 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

1630 
tmp_Àngth
 =

1631 (Ë(
LDBL_DIG


1636 
tmp_Àngth
 =

1637 (Ë(
DBL_DIG


1641 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

1642 
tmp_Àngth
 = 
¥ecisi⁄
;

1644 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 12);

1648 #i‡
HAVE_WINT_T
 && !
WIDE_CHAR_VERSION


1649 i‡(
ty≥
 =
TYPE_WIDE_CHAR
)

1650 
tmp_Àngth
 = 
MB_CUR_MAX
;

1653 
tmp_Àngth
 = 1;

1657 #i‡
HAVE_WCHAR_T


1658 i‡(
ty≥
 =
TYPE_WIDE_STRING
)

1660 #i‡
WIDE_CHAR_VERSION


1665 c⁄° 
wch¨_t
 *
¨g
 = 
≠
->¨g[
¨g_ödex
].
a
.
a_wide_°rög
;

1667 i‡(
has_¥ecisi⁄
)

1668 
tmp_Àngth
 = 
	`loˇl_wc¢Àn
 (
¨g
, 
¥ecisi⁄
);

1670 
tmp_Àngth
 = 
	`loˇl_wc¶í
 (
¨g
);

1681 
	`ab‹t
 ();

1687 #i‡
WIDE_CHAR_VERSION


1694 
	`ab‹t
 ();

1700 c⁄° *
¨g
 = 
≠
->¨g[
¨g_ödex
].
a
.
a_°rög
;

1702 i‡(
has_¥ecisi⁄
)

1703 
tmp_Àngth
 = 
	`loˇl_°∫Àn
 (
¨g
, 
¥ecisi⁄
);

1705 
tmp_Àngth
 = 
	`°æí
 (
¨g
);

1711 
tmp_Àngth
 =

1712 (Ë( (*Ë* 
CHAR_BIT


1720 
	`ab‹t
 ();

1723 i‡(!
∑d_our£lves
)

1725 #i‡
ENABLE_UNISTDIO


1731 
tmp_Àngth
 = 
	`xsum
 (tmp_Àngth, 
width
);

1734 i‡(
tmp_Àngth
 < 
width
)

1735 
tmp_Àngth
 = 
width
;

1739 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 1);

1741  
tmp_Àngth
;

1742 
	}
}

1746 
DCHAR_T
 *

1747 
	$VASNPRINTF
 (
DCHAR_T
 *
ªsu…buf
, 
size_t
 *
Àngthp
,

1748 c⁄° 
FCHAR_T
 *
f‹m©
, 
va_li°
 
¨gs
)

1750 
DIRECTIVES
 
d
;

1751 
¨gumíts
 
a
;

1753 i‡(
	`PRINTF_PARSE
 (
f‹m©
, &
d
, &
a
) < 0)

1755  
NULL
;

1757 
	#CLEANUP
() \

1758 i‡(
d
.
dú
 !d.
dúe˘_Æloc_dú
) \

1759 
	`‰ì
 (
d
.
dú
); \

1760 i‡(
a
.
¨g
 !a.
dúe˘_Æloc_¨g
) \

1761 
	`‰ì
 (
a
.
¨g
);

	)

1763 i‡(
	`PRINTF_FETCHARGS
 (
¨gs
, &
a
) < 0)

1765 
	`CLEANUP
 ();

1766 
î∫o
 = 
EINVAL
;

1767  
NULL
;

1771 
size_t
 
buf_√ededÀngth
;

1772 
TCHAR_T
 *
buf
;

1773 
TCHAR_T
 *
buf_mÆlo˚d
;

1774 c⁄° 
FCHAR_T
 *
˝
;

1775 
size_t
 
i
;

1776 
DIRECTIVE
 *
dp
;

1778 
DCHAR_T
 *
ªsu…
;

1779 
size_t
 
Æloˇãd
;

1780 
size_t
 
Àngth
;

1784 
buf_√ededÀngth
 =

1785 
	`xsum4
 (7, 
d
.
max_width_Àngth
, d.
max_¥ecisi⁄_Àngth
, 6);

1786 #i‡
HAVE_ALLOCA


1787 i‡(
buf_√ededÀngth
 < 4000 /  (
TCHAR_T
))

1789 
buf
 = (
TCHAR_T
 *Ë
	`Æloˇ
 (
buf_√ededÀngth
 *  (TCHAR_T));

1790 
buf_mÆlo˚d
 = 
NULL
;

1795 
size_t
 
buf_memsize
 = 
	`xtimes
 (
buf_√ededÀngth
,  (
TCHAR_T
));

1796 i‡(
	`size_ovîÊow_p
 (
buf_memsize
))

1797 
out_of_mem‹y_1
;

1798 
buf
 = (
TCHAR_T
 *Ë
	`mÆloc
 (
buf_memsize
);

1799 i‡(
buf
 =
NULL
)

1800 
out_of_mem‹y_1
;

1801 
buf_mÆlo˚d
 = 
buf
;

1804 i‡(
ªsu…buf
 !
NULL
)

1806 
ªsu…
 = 
ªsu…buf
;

1807 
Æloˇãd
 = *
Àngthp
;

1811 
ªsu…
 = 
NULL
;

1812 
Æloˇãd
 = 0;

1814 
Àngth
 = 0;

1821 
	#ENSURE_ALLOCATION
(
√eded
) \

1822 i‡((
√eded
Ë> 
Æloˇãd
) \

1824 
size_t
 
mem‹y_size
; \

1825 
DCHAR_T
 *
mem‹y
; \

1827 
Æloˇãd
 = (Æloˇãd > 0 ? 
	`xtimes
 (allocated, 2) : 12); \

1828 i‡((
√eded
Ë> 
Æloˇãd
) \

1829 
Æloˇãd
 = (
√eded
); \

1830 
mem‹y_size
 = 
	`xtimes
 (
Æloˇãd
,  (
DCHAR_T
)); \

1831 i‡(
	`size_ovîÊow_p
 (
mem‹y_size
)) \

1832 
out_of_mem‹y
; \

1833 i‡(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
) \

1834 
mem‹y
 = (
DCHAR_T
 *Ë
	`mÆloc
 (
mem‹y_size
); \

1836 
mem‹y
 = (
DCHAR_T
 *Ë
	`ªÆloc
 (
ªsu…
, 
mem‹y_size
); \

1837 i‡(
mem‹y
 =
NULL
) \

1838 
out_of_mem‹y
; \

1839 i‡(
ªsu…
 =
ªsu…buf
 && 
Àngth
 > 0) \

1840 
	`DCHAR_CPY
 (
mem‹y
, 
ªsu…
, 
Àngth
); \

1841 
ªsu…
 = 
mem‹y
; \

1842 }

	)

1844 
˝
 = 
f‹m©
, 
i
 = 0, 
dp
 = &
d
.
dú
[0]; ; c∞dp->
dú_íd
, i++, dp++)

1846 i‡(
˝
 !
dp
->
dú_°¨t
)

1848 
size_t
 
n
 = 
dp
->
dú_°¨t
 - 
˝
;

1849 
size_t
 
augmíãd_Àngth
 = 
	`xsum
 (
Àngth
, 
n
);

1851 
	`ENSURE_ALLOCATION
 (
augmíãd_Àngth
);

1855 i‡( (
FCHAR_T
Ë= (
DCHAR_T
))

1857 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, (c⁄° 
DCHAR_T
 *Ë
˝
, 
n
);

1858 
Àngth
 = 
augmíãd_Àngth
;

1863 
ªsu…
[
Àngth
++] = (Ë*
˝
++;

1864 --
n
 > 0);

1867 i‡(
i
 =
d
.
cou¡
)

1871 i‡(
dp
->
c⁄vîsi⁄
 == '%')

1873 
size_t
 
augmíãd_Àngth
;

1875 i‡(!(
dp
->
¨g_ödex
 =
ARG_NONE
))

1876 
	`ab‹t
 ();

1877 
augmíãd_Àngth
 = 
	`xsum
 (
Àngth
, 1);

1878 
	`ENSURE_ALLOCATION
 (
augmíãd_Àngth
);

1879 
ªsu…
[
Àngth
] = '%';

1880 
Àngth
 = 
augmíãd_Àngth
;

1884 i‡(!(
dp
->
¨g_ödex
 !
ARG_NONE
))

1885 
	`ab‹t
 ();

1887 i‡(
dp
->
c⁄vîsi⁄
 == 'n')

1889 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
)

1891 
TYPE_COUNT_SCHAR_POINTER
:

1892 *
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_cou¡_sch¨_poöãr
 = 
Àngth
;

1894 
TYPE_COUNT_SHORT_POINTER
:

1895 *
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_cou¡_sh‹t_poöãr
 = 
Àngth
;

1897 
TYPE_COUNT_INT_POINTER
:

1898 *
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_cou¡_öt_poöãr
 = 
Àngth
;

1900 
TYPE_COUNT_LONGINT_POINTER
:

1901 *
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_cou¡_l⁄göt_poöãr
 = 
Àngth
;

1903 #i‡
HAVE_LONG_LONG_INT


1904 
TYPE_COUNT_LONGLONGINT_POINTER
:

1905 *
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_cou¡_l⁄gl⁄göt_poöãr
 = 
Àngth
;

1909 
	`ab‹t
 ();

1912 #i‡
ENABLE_UNISTDIO


1914 i‡(
dp
->
c⁄vîsi⁄
 == 'U')

1916 
¨g_ty≥
 
ty≥
 = 
a
.
¨g
[
dp
->
¨g_ödex
].type;

1917 
Êags
 = 
dp
->flags;

1918 
has_width
;

1919 
size_t
 
width
;

1920 
has_¥ecisi⁄
;

1921 
size_t
 
¥ecisi⁄
;

1923 
has_width
 = 0;

1924 
width
 = 0;

1925 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

1927 i‡(
dp
->
width_¨g_ödex
 !
ARG_NONE
)

1929 
¨g
;

1931 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

1932 
	`ab‹t
 ();

1933 
¨g
 = 
a
.¨g[
dp
->
width_¨g_ödex
].a.
a_öt
;

1934 i‡(
¨g
 < 0)

1938 
Êags
 |
FLAG_LEFT
;

1939 
width
 = (Ë(-
¨g
);

1942 
width
 = 
¨g
;

1946 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
width_°¨t
;

1949 
width
 = 
	`xsum
 (
	`xtimes
 (width, 10), *
digôp
++ - '0');

1950 
digôp
 !
dp
->
width_íd
);

1952 
has_width
 = 1;

1955 
has_¥ecisi⁄
 = 0;

1956 
¥ecisi⁄
 = 0;

1957 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

1959 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

1961 
¨g
;

1963 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

1964 
	`ab‹t
 ();

1965 
¨g
 = 
a
.¨g[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

1968 i‡(
¨g
 >= 0)

1970 
¥ecisi⁄
 = 
¨g
;

1971 
has_¥ecisi⁄
 = 1;

1976 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
¥ecisi⁄_°¨t
 + 1;

1978 
¥ecisi⁄
 = 0;

1979 
digôp
 !
dp
->
¥ecisi⁄_íd
)

1980 
¥ecisi⁄
 = 
	`xsum
 (
	`xtimes
 (¥ecisi⁄, 10), *
digôp
++ - '0');

1981 
has_¥ecisi⁄
 = 1;

1985 
ty≥
)

1987 
TYPE_U8_STRING
:

1989 c⁄° 
uöt8_t
 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_u8_°rög
;

1990 c⁄° 
uöt8_t
 *
¨g_íd
;

1991 
size_t
 
ch¨a˘îs
;

1993 i‡(
has_¥ecisi⁄
)

1996 
¨g_íd
 = 
¨g
;

1997 
ch¨a˘îs
 = 0;

1998 ; 
¥ecisi⁄
 > 0;Örecision--)

2000 
cou¡
 = 
	`u8_°rmbÀn
 (
¨g_íd
);

2001 i‡(
cou¡
 == 0)

2003 i‡(
cou¡
 < 0)

2005 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2006 
	`‰ì
 (
ªsu…
);

2007 i‡(
buf_mÆlo˚d
 !
NULL
)

2008 
	`‰ì
 (
buf_mÆlo˚d
);

2009 
	`CLEANUP
 ();

2010 
î∫o
 = 
EILSEQ
;

2011  
NULL
;

2013 
¨g_íd
 +
cou¡
;

2014 
ch¨a˘îs
++;

2017 i‡(
has_width
)

2021 
¨g_íd
 = 
¨g
;

2022 
ch¨a˘îs
 = 0;

2025 
cou¡
 = 
	`u8_°rmbÀn
 (
¨g_íd
);

2026 i‡(
cou¡
 == 0)

2028 i‡(
cou¡
 < 0)

2030 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2031 
	`‰ì
 (
ªsu…
);

2032 i‡(
buf_mÆlo˚d
 !
NULL
)

2033 
	`‰ì
 (
buf_mÆlo˚d
);

2034 
	`CLEANUP
 ();

2035 
î∫o
 = 
EILSEQ
;

2036  
NULL
;

2038 
¨g_íd
 +
cou¡
;

2039 
ch¨a˘îs
++;

2045 
¨g_íd
 = 
¨g
 + 
	`u8_°æí
 (arg);

2047 
ch¨a˘îs
 = 0;

2050 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2051 && !(
dp
->
Êags
 & 
FLAG_LEFT
))

2053 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2054 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2055 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2056 
Àngth
 +
n
;

2059 #i‡
DCHAR_IS_UINT8_T


2061 
size_t
 
n
 = 
¨g_íd
 - 
¨g
;

2062 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2063 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
¨g
, 
n
);

2064 
Àngth
 +
n
;

2068 
DCHAR_T
 *
c⁄vîãd
 = 
ªsu…
 + 
Àngth
;

2069 
size_t
 
c⁄vîãd_Àn
 = 
Æloˇãd
 - 
Àngth
;

2070 #i‡
DCHAR_IS_TCHAR


2072 
c⁄vîãd
 =

2073 
	`u8_c⁄v_to_ícodög
 (
	`loˇÀ_ch¨£t
 (),

2074 
ic⁄veh_que°i⁄_m¨k
,

2075 
¨g
, 
¨g_íd
 -árg, 
NULL
,

2076 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2079 
c⁄vîãd
 =

2080 
	`U8_TO_DCHAR
 (
¨g
, 
¨g_íd
 -árg,

2081 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2083 i‡(
c⁄vîãd
 =
NULL
)

2085 
ßved_î∫o
 = 
î∫o
;

2086 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2087 
	`‰ì
 (
ªsu…
);

2088 i‡(
buf_mÆlo˚d
 !
NULL
)

2089 
	`‰ì
 (
buf_mÆlo˚d
);

2090 
	`CLEANUP
 ();

2091 
î∫o
 = 
ßved_î∫o
;

2092  
NULL
;

2094 i‡(
c⁄vîãd
 !
ªsu…
 + 
Àngth
)

2096 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
c⁄vîãd_Àn
));

2097 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
c⁄vîãd
, 
c⁄vîãd_Àn
);

2098 
	`‰ì
 (
c⁄vîãd
);

2100 
Àngth
 +
c⁄vîãd_Àn
;

2104 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2105 && (
dp
->
Êags
 & 
FLAG_LEFT
))

2107 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2108 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2109 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2110 
Àngth
 +
n
;

2115 
TYPE_U16_STRING
:

2117 c⁄° 
uöt16_t
 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_u16_°rög
;

2118 c⁄° 
uöt16_t
 *
¨g_íd
;

2119 
size_t
 
ch¨a˘îs
;

2121 i‡(
has_¥ecisi⁄
)

2124 
¨g_íd
 = 
¨g
;

2125 
ch¨a˘îs
 = 0;

2126 ; 
¥ecisi⁄
 > 0;Örecision--)

2128 
cou¡
 = 
	`u16_°rmbÀn
 (
¨g_íd
);

2129 i‡(
cou¡
 == 0)

2131 i‡(
cou¡
 < 0)

2133 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2134 
	`‰ì
 (
ªsu…
);

2135 i‡(
buf_mÆlo˚d
 !
NULL
)

2136 
	`‰ì
 (
buf_mÆlo˚d
);

2137 
	`CLEANUP
 ();

2138 
î∫o
 = 
EILSEQ
;

2139  
NULL
;

2141 
¨g_íd
 +
cou¡
;

2142 
ch¨a˘îs
++;

2145 i‡(
has_width
)

2149 
¨g_íd
 = 
¨g
;

2150 
ch¨a˘îs
 = 0;

2153 
cou¡
 = 
	`u16_°rmbÀn
 (
¨g_íd
);

2154 i‡(
cou¡
 == 0)

2156 i‡(
cou¡
 < 0)

2158 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2159 
	`‰ì
 (
ªsu…
);

2160 i‡(
buf_mÆlo˚d
 !
NULL
)

2161 
	`‰ì
 (
buf_mÆlo˚d
);

2162 
	`CLEANUP
 ();

2163 
î∫o
 = 
EILSEQ
;

2164  
NULL
;

2166 
¨g_íd
 +
cou¡
;

2167 
ch¨a˘îs
++;

2173 
¨g_íd
 = 
¨g
 + 
	`u16_°æí
 (arg);

2175 
ch¨a˘îs
 = 0;

2178 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2179 && !(
dp
->
Êags
 & 
FLAG_LEFT
))

2181 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2182 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2183 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2184 
Àngth
 +
n
;

2187 #i‡
DCHAR_IS_UINT16_T


2189 
size_t
 
n
 = 
¨g_íd
 - 
¨g
;

2190 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2191 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
¨g
, 
n
);

2192 
Àngth
 +
n
;

2196 
DCHAR_T
 *
c⁄vîãd
 = 
ªsu…
 + 
Àngth
;

2197 
size_t
 
c⁄vîãd_Àn
 = 
Æloˇãd
 - 
Àngth
;

2198 #i‡
DCHAR_IS_TCHAR


2200 
c⁄vîãd
 =

2201 
	`u16_c⁄v_to_ícodög
 (
	`loˇÀ_ch¨£t
 (),

2202 
ic⁄veh_que°i⁄_m¨k
,

2203 
¨g
, 
¨g_íd
 -árg, 
NULL
,

2204 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2207 
c⁄vîãd
 =

2208 
	`U16_TO_DCHAR
 (
¨g
, 
¨g_íd
 -árg,

2209 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2211 i‡(
c⁄vîãd
 =
NULL
)

2213 
ßved_î∫o
 = 
î∫o
;

2214 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2215 
	`‰ì
 (
ªsu…
);

2216 i‡(
buf_mÆlo˚d
 !
NULL
)

2217 
	`‰ì
 (
buf_mÆlo˚d
);

2218 
	`CLEANUP
 ();

2219 
î∫o
 = 
ßved_î∫o
;

2220  
NULL
;

2222 i‡(
c⁄vîãd
 !
ªsu…
 + 
Àngth
)

2224 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
c⁄vîãd_Àn
));

2225 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
c⁄vîãd
, 
c⁄vîãd_Àn
);

2226 
	`‰ì
 (
c⁄vîãd
);

2228 
Àngth
 +
c⁄vîãd_Àn
;

2232 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2233 && (
dp
->
Êags
 & 
FLAG_LEFT
))

2235 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2236 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2237 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2238 
Àngth
 +
n
;

2243 
TYPE_U32_STRING
:

2245 c⁄° 
uöt32_t
 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_u32_°rög
;

2246 c⁄° 
uöt32_t
 *
¨g_íd
;

2247 
size_t
 
ch¨a˘îs
;

2249 i‡(
has_¥ecisi⁄
)

2252 
¨g_íd
 = 
¨g
;

2253 
ch¨a˘îs
 = 0;

2254 ; 
¥ecisi⁄
 > 0;Örecision--)

2256 
cou¡
 = 
	`u32_°rmbÀn
 (
¨g_íd
);

2257 i‡(
cou¡
 == 0)

2259 i‡(
cou¡
 < 0)

2261 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2262 
	`‰ì
 (
ªsu…
);

2263 i‡(
buf_mÆlo˚d
 !
NULL
)

2264 
	`‰ì
 (
buf_mÆlo˚d
);

2265 
	`CLEANUP
 ();

2266 
î∫o
 = 
EILSEQ
;

2267  
NULL
;

2269 
¨g_íd
 +
cou¡
;

2270 
ch¨a˘îs
++;

2273 i‡(
has_width
)

2277 
¨g_íd
 = 
¨g
;

2278 
ch¨a˘îs
 = 0;

2281 
cou¡
 = 
	`u32_°rmbÀn
 (
¨g_íd
);

2282 i‡(
cou¡
 == 0)

2284 i‡(
cou¡
 < 0)

2286 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2287 
	`‰ì
 (
ªsu…
);

2288 i‡(
buf_mÆlo˚d
 !
NULL
)

2289 
	`‰ì
 (
buf_mÆlo˚d
);

2290 
	`CLEANUP
 ();

2291 
î∫o
 = 
EILSEQ
;

2292  
NULL
;

2294 
¨g_íd
 +
cou¡
;

2295 
ch¨a˘îs
++;

2301 
¨g_íd
 = 
¨g
 + 
	`u32_°æí
 (arg);

2303 
ch¨a˘îs
 = 0;

2306 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2307 && !(
dp
->
Êags
 & 
FLAG_LEFT
))

2309 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2310 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2311 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2312 
Àngth
 +
n
;

2315 #i‡
DCHAR_IS_UINT32_T


2317 
size_t
 
n
 = 
¨g_íd
 - 
¨g
;

2318 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2319 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
¨g
, 
n
);

2320 
Àngth
 +
n
;

2324 
DCHAR_T
 *
c⁄vîãd
 = 
ªsu…
 + 
Àngth
;

2325 
size_t
 
c⁄vîãd_Àn
 = 
Æloˇãd
 - 
Àngth
;

2326 #i‡
DCHAR_IS_TCHAR


2328 
c⁄vîãd
 =

2329 
	`u32_c⁄v_to_ícodög
 (
	`loˇÀ_ch¨£t
 (),

2330 
ic⁄veh_que°i⁄_m¨k
,

2331 
¨g
, 
¨g_íd
 -árg, 
NULL
,

2332 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2335 
c⁄vîãd
 =

2336 
	`U32_TO_DCHAR
 (
¨g
, 
¨g_íd
 -árg,

2337 
c⁄vîãd
, &
c⁄vîãd_Àn
);

2339 i‡(
c⁄vîãd
 =
NULL
)

2341 
ßved_î∫o
 = 
î∫o
;

2342 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2343 
	`‰ì
 (
ªsu…
);

2344 i‡(
buf_mÆlo˚d
 !
NULL
)

2345 
	`‰ì
 (
buf_mÆlo˚d
);

2346 
	`CLEANUP
 ();

2347 
î∫o
 = 
ßved_î∫o
;

2348  
NULL
;

2350 i‡(
c⁄vîãd
 !
ªsu…
 + 
Àngth
)

2352 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
c⁄vîãd_Àn
));

2353 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
c⁄vîãd
, 
c⁄vîãd_Àn
);

2354 
	`‰ì
 (
c⁄vîãd
);

2356 
Àngth
 +
c⁄vîãd_Àn
;

2360 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2361 && (
dp
->
Êags
 & 
FLAG_LEFT
))

2363 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2364 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2365 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2366 
Àngth
 +
n
;

2372 
	`ab‹t
 ();

2376 #i‡(!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
 || (
NEED_PRINTF_DIRECTIVE_LS
 && !
deföed
 
IN_LIBINTL
)Ë&& 
HAVE_WCHAR_T


2377 i‡(
dp
->
c⁄vîsi⁄
 == 's'

2378 #i‡
WIDE_CHAR_VERSION


2379 && 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 !
TYPE_WIDE_STRING


2381 && 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_WIDE_STRING


2395 
Êags
 = 
dp
->flags;

2396 
has_width
;

2397 
size_t
 
width
;

2398 
has_¥ecisi⁄
;

2399 
size_t
 
¥ecisi⁄
;

2401 
has_width
 = 0;

2402 
width
 = 0;

2403 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

2405 i‡(
dp
->
width_¨g_ödex
 !
ARG_NONE
)

2407 
¨g
;

2409 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

2410 
	`ab‹t
 ();

2411 
¨g
 = 
a
.¨g[
dp
->
width_¨g_ödex
].a.
a_öt
;

2412 i‡(
¨g
 < 0)

2416 
Êags
 |
FLAG_LEFT
;

2417 
width
 = (Ë(-
¨g
);

2420 
width
 = 
¨g
;

2424 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
width_°¨t
;

2427 
width
 = 
	`xsum
 (
	`xtimes
 (width, 10), *
digôp
++ - '0');

2428 
digôp
 !
dp
->
width_íd
);

2430 
has_width
 = 1;

2433 
has_¥ecisi⁄
 = 0;

2434 
¥ecisi⁄
 = 6;

2435 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

2437 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

2439 
¨g
;

2441 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

2442 
	`ab‹t
 ();

2443 
¨g
 = 
a
.¨g[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

2446 i‡(
¨g
 >= 0)

2448 
¥ecisi⁄
 = 
¨g
;

2449 
has_¥ecisi⁄
 = 1;

2454 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
¥ecisi⁄_°¨t
 + 1;

2456 
¥ecisi⁄
 = 0;

2457 
digôp
 !
dp
->
¥ecisi⁄_íd
)

2458 
¥ecisi⁄
 = 
	`xsum
 (
	`xtimes
 (¥ecisi⁄, 10), *
digôp
++ - '0');

2459 
has_¥ecisi⁄
 = 1;

2463 #i‡
WIDE_CHAR_VERSION


2466 c⁄° *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_°rög
;

2467 c⁄° *
¨g_íd
;

2468 
size_t
 
ch¨a˘îs
;

2470 i‡(
has_¥ecisi⁄
)

2474 #i‡
HAVE_MBRTOWC


2475 
mb°©e_t
 
°©e
;

2476 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2478 
¨g_íd
 = 
¨g
;

2479 
ch¨a˘îs
 = 0;

2480 ; 
¥ecisi⁄
 > 0;Örecision--)

2482 
cou¡
;

2483 #i‡
HAVE_MBRTOWC


2484 
cou¡
 = 
	`mbæí
 (
¨g_íd
, 
MB_CUR_MAX
, &
°©e
);

2486 
cou¡
 = 
	`mbÀn
 (
¨g_íd
, 
MB_CUR_MAX
);

2488 i‡(
cou¡
 == 0)

2491 i‡(
cou¡
 < 0)

2494 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2495 
	`‰ì
 (
ªsu…
);

2496 i‡(
buf_mÆlo˚d
 !
NULL
)

2497 
	`‰ì
 (
buf_mÆlo˚d
);

2498 
	`CLEANUP
 ();

2499 
î∫o
 = 
EILSEQ
;

2500  
NULL
;

2502 
¨g_íd
 +
cou¡
;

2503 
ch¨a˘îs
++;

2506 i‡(
has_width
)

2510 #i‡
HAVE_MBRTOWC


2511 
mb°©e_t
 
°©e
;

2512 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2514 
¨g_íd
 = 
¨g
;

2515 
ch¨a˘îs
 = 0;

2518 
cou¡
;

2519 #i‡
HAVE_MBRTOWC


2520 
cou¡
 = 
	`mbæí
 (
¨g_íd
, 
MB_CUR_MAX
, &
°©e
);

2522 
cou¡
 = 
	`mbÀn
 (
¨g_íd
, 
MB_CUR_MAX
);

2524 i‡(
cou¡
 == 0)

2527 i‡(
cou¡
 < 0)

2530 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2531 
	`‰ì
 (
ªsu…
);

2532 i‡(
buf_mÆlo˚d
 !
NULL
)

2533 
	`‰ì
 (
buf_mÆlo˚d
);

2534 
	`CLEANUP
 ();

2535 
î∫o
 = 
EILSEQ
;

2536  
NULL
;

2538 
¨g_íd
 +
cou¡
;

2539 
ch¨a˘îs
++;

2545 
¨g_íd
 = 
¨g
 + 
	`°æí
 (arg);

2547 
ch¨a˘îs
 = 0;

2550 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2551 && !(
dp
->
Êags
 & 
FLAG_LEFT
))

2553 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2554 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2555 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2556 
Àngth
 +
n
;

2559 i‡(
has_¥ecisi⁄
 || 
has_width
)

2562 
size_t
 
ªmaöög
;

2563 #i‡
HAVE_MBRTOWC


2564 
mb°©e_t
 
°©e
;

2565 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2567 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
ch¨a˘îs
));

2568 
ªmaöög
 = 
ch¨a˘îs
;Ñemaining > 0;Ñemaining--)

2570 
wch¨_t
 
wc
;

2571 
cou¡
;

2572 #i‡
HAVE_MBRTOWC


2573 
cou¡
 = 
	`mbπowc
 (&
wc
, 
¨g
, 
¨g_íd
 -árg, &
°©e
);

2575 
cou¡
 = 
	`mbtowc
 (&
wc
, 
¨g
, 
¨g_íd
 -árg);

2577 i‡(
cou¡
 <= 0)

2580 
	`ab‹t
 ();

2581 
ªsu…
[
Àngth
++] = 
wc
;

2582 
¨g
 +
cou¡
;

2584 i‡(!(
¨g
 =
¨g_íd
))

2585 
	`ab‹t
 ();

2589 #i‡
HAVE_MBRTOWC


2590 
mb°©e_t
 
°©e
;

2591 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2593 
¨g
 < 
¨g_íd
)

2595 
wch¨_t
 
wc
;

2596 
cou¡
;

2597 #i‡
HAVE_MBRTOWC


2598 
cou¡
 = 
	`mbπowc
 (&
wc
, 
¨g
, 
¨g_íd
 -árg, &
°©e
);

2600 
cou¡
 = 
	`mbtowc
 (&
wc
, 
¨g
, 
¨g_íd
 -árg);

2602 i‡(
cou¡
 <= 0)

2605 
	`ab‹t
 ();

2606 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 1));

2607 
ªsu…
[
Àngth
++] = 
wc
;

2608 
¨g
 +
cou¡
;

2612 i‡(
has_width
 && 
width
 > 
ch¨a˘îs


2613 && (
dp
->
Êags
 & 
FLAG_LEFT
))

2615 
size_t
 
n
 = 
width
 - 
ch¨a˘îs
;

2616 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2617 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2618 
Àngth
 +
n
;

2624 c⁄° 
wch¨_t
 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_wide_°rög
;

2625 c⁄° 
wch¨_t
 *
¨g_íd
;

2626 
size_t
 
ch¨a˘îs
;

2627 #i‡!
DCHAR_IS_TCHAR


2629 
	`vîify
 ( (
TCHAR_T
) == 1);

2630 
TCHAR_T
 *
tmp§c
;

2631 
DCHAR_T
 *
tmpd°
;

2632 
size_t
 
tmpd°_Àn
;

2634 
size_t
 
w
;

2636 i‡(
has_¥ecisi⁄
)

2640 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2641 
mb°©e_t
 
°©e
;

2642 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2644 
¨g_íd
 = 
¨g
;

2645 
ch¨a˘îs
 = 0;

2646 
¥ecisi⁄
 > 0)

2648 
cbuf
[64];

2649 
cou¡
;

2651 i‡(*
¨g_íd
 == 0)

2654 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2655 
cou¡
 = 
	`w¸tomb
 (
cbuf
, *
¨g_íd
, &
°©e
);

2657 
cou¡
 = 
	`w˘omb
 (
cbuf
, *
¨g_íd
);

2659 i‡(
cou¡
 < 0)

2662 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2663 
	`‰ì
 (
ªsu…
);

2664 i‡(
buf_mÆlo˚d
 !
NULL
)

2665 
	`‰ì
 (
buf_mÆlo˚d
);

2666 
	`CLEANUP
 ();

2667 
î∫o
 = 
EILSEQ
;

2668  
NULL
;

2670 i‡(
¥ecisi⁄
 < 
cou¡
)

2672 
¨g_íd
++;

2673 
ch¨a˘îs
 +
cou¡
;

2674 
¥ecisi⁄
 -
cou¡
;

2677 #i‡
DCHAR_IS_TCHAR


2678 i‡(
has_width
)

2685 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2686 
mb°©e_t
 
°©e
;

2687 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2689 
¨g_íd
 = 
¨g
;

2690 
ch¨a˘îs
 = 0;

2693 
cbuf
[64];

2694 
cou¡
;

2696 i‡(*
¨g_íd
 == 0)

2699 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2700 
cou¡
 = 
	`w¸tomb
 (
cbuf
, *
¨g_íd
, &
°©e
);

2702 
cou¡
 = 
	`w˘omb
 (
cbuf
, *
¨g_íd
);

2704 i‡(
cou¡
 < 0)

2707 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2708 
	`‰ì
 (
ªsu…
);

2709 i‡(
buf_mÆlo˚d
 !
NULL
)

2710 
	`‰ì
 (
buf_mÆlo˚d
);

2711 
	`CLEANUP
 ();

2712 
î∫o
 = 
EILSEQ
;

2713  
NULL
;

2715 
¨g_íd
++;

2716 
ch¨a˘îs
 +
cou¡
;

2719 #i‡
DCHAR_IS_TCHAR


2723 
¨g_íd
 = 
¨g
 + 
	`loˇl_wc¶í
 (arg);

2725 
ch¨a˘îs
 = 0;

2729 #i‡!
DCHAR_IS_TCHAR


2731 
tmp§c
 = (
TCHAR_T
 *Ë
	`mÆloc
 (
ch¨a˘îs
 *  (TCHAR_T));

2732 i‡(
tmp§c
 =
NULL
)

2733 
out_of_mem‹y
;

2735 
TCHAR_T
 *
tmµå
 = 
tmp§c
;

2736 
size_t
 
ªmaöög
;

2737 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2738 
mb°©e_t
 
°©e
;

2739 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2741 
ªmaöög
 = 
ch¨a˘îs
;Ñemaining > 0; )

2743 
cbuf
[64];

2744 
cou¡
;

2746 i‡(*
¨g
 == 0)

2747 
	`ab‹t
 ();

2748 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2749 
cou¡
 = 
	`w¸tomb
 (
cbuf
, *
¨g
, &
°©e
);

2751 
cou¡
 = 
	`w˘omb
 (
cbuf
, *
¨g
);

2753 i‡(
cou¡
 <= 0)

2755 
	`ab‹t
 ();

2756 
	`mem˝y
 (
tmµå
, 
cbuf
, 
cou¡
);

2757 
tmµå
 +
cou¡
;

2758 
¨g
++;

2759 
ªmaöög
 -
cou¡
;

2761 i‡(!(
¨g
 =
¨g_íd
))

2762 
	`ab‹t
 ();

2766 
tmpd°
 =

2767 
	`DCHAR_CONV_FROM_ENCODING
 (
	`loˇÀ_ch¨£t
 (),

2768 
ic⁄veh_que°i⁄_m¨k
,

2769 
tmp§c
, 
ch¨a˘îs
,

2770 
NULL
,

2771 
NULL
, &
tmpd°_Àn
);

2772 i‡(
tmpd°
 =
NULL
)

2774 
ßved_î∫o
 = 
î∫o
;

2775 
	`‰ì
 (
tmp§c
);

2776 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2777 
	`‰ì
 (
ªsu…
);

2778 i‡(
buf_mÆlo˚d
 !
NULL
)

2779 
	`‰ì
 (
buf_mÆlo˚d
);

2780 
	`CLEANUP
 ();

2781 
î∫o
 = 
ßved_î∫o
;

2782  
NULL
;

2784 
	`‰ì
 (
tmp§c
);

2787 i‡(
has_width
)

2789 #i‡
ENABLE_UNISTDIO


2793 
w
 = 
	`DCHAR_MBSNLEN
 (
ªsu…
 + 
Àngth
, 
ch¨a˘îs
);

2797 
w
 = 
ch¨a˘îs
;

2802 
w
 = 0;

2804 i‡(
has_width
 && 
width
 > 
w


2805 && !(
dp
->
Êags
 & 
FLAG_LEFT
))

2807 
size_t
 
n
 = 
width
 - 
w
;

2808 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2809 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2810 
Àngth
 +
n
;

2813 #i‡
DCHAR_IS_TCHAR


2814 i‡(
has_¥ecisi⁄
 || 
has_width
)

2817 
size_t
 
ªmaöög
;

2818 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2819 
mb°©e_t
 
°©e
;

2820 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2822 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
ch¨a˘îs
));

2823 
ªmaöög
 = 
ch¨a˘îs
;Ñemaining > 0; )

2825 
cbuf
[64];

2826 
cou¡
;

2828 i‡(*
¨g
 == 0)

2829 
	`ab‹t
 ();

2830 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2831 
cou¡
 = 
	`w¸tomb
 (
cbuf
, *
¨g
, &
°©e
);

2833 
cou¡
 = 
	`w˘omb
 (
cbuf
, *
¨g
);

2835 i‡(
cou¡
 <= 0)

2837 
	`ab‹t
 ();

2838 
	`mem˝y
 (
ªsu…
 + 
Àngth
, 
cbuf
, 
cou¡
);

2839 
Àngth
 +
cou¡
;

2840 
¨g
++;

2841 
ªmaöög
 -
cou¡
;

2843 i‡(!(
¨g
 =
¨g_íd
))

2844 
	`ab‹t
 ();

2848 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2849 
mb°©e_t
 
°©e
;

2850 
	`mem£t
 (&
°©e
, '\0',  (
mb°©e_t
));

2852 
¨g
 < 
¨g_íd
)

2854 
cbuf
[64];

2855 
cou¡
;

2857 i‡(*
¨g
 == 0)

2858 
	`ab‹t
 ();

2859 #i‡
HAVE_WCRTOMB
 && !
deföed
 
GNULIB_deföed_mb°©e_t


2860 
cou¡
 = 
	`w¸tomb
 (
cbuf
, *
¨g
, &
°©e
);

2862 
cou¡
 = 
	`w˘omb
 (
cbuf
, *
¨g
);

2864 i‡(
cou¡
 <= 0)

2867 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

2868 
	`‰ì
 (
ªsu…
);

2869 i‡(
buf_mÆlo˚d
 !
NULL
)

2870 
	`‰ì
 (
buf_mÆlo˚d
);

2871 
	`CLEANUP
 ();

2872 
î∫o
 = 
EILSEQ
;

2873  
NULL
;

2875 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
cou¡
));

2876 
	`mem˝y
 (
ªsu…
 + 
Àngth
, 
cbuf
, 
cou¡
);

2877 
Àngth
 +
cou¡
;

2878 
¨g
++;

2882 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
tmpd°_Àn
));

2883 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
tmpd°
, 
tmpd°_Àn
);

2884 
	`‰ì
 (
tmpd°
);

2885 
Àngth
 +
tmpd°_Àn
;

2888 i‡(
has_width
 && 
width
 > 
w


2889 && (
dp
->
Êags
 & 
FLAG_LEFT
))

2891 
size_t
 
n
 = 
width
 - 
w
;

2892 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
n
));

2893 
	`DCHAR_SET
 (
ªsu…
 + 
Àngth
, ' ', 
n
);

2894 
Àngth
 +
n
;

2900 #i‡(
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


2901 i‡((
dp
->
c⁄vîsi⁄
 == 'a' || dp->conversion == 'A')

2902 #i‡!(
NEED_PRINTF_DIRECTIVE_A
 || (
NEED_PRINTF_LONG_DOUBLE
 && 
NEED_PRINTF_DOUBLE
))

2904 #i‡
NEED_PRINTF_DOUBLE


2905 || 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_DOUBLE


2907 #i‡
NEED_PRINTF_LONG_DOUBLE


2908 || 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_LONGDOUBLE


2914 
¨g_ty≥
 
ty≥
 = 
a
.
¨g
[
dp
->
¨g_ödex
].type;

2915 
Êags
 = 
dp
->flags;

2916 
has_width
;

2917 
size_t
 
width
;

2918 
has_¥ecisi⁄
;

2919 
size_t
 
¥ecisi⁄
;

2920 
size_t
 
tmp_Àngth
;

2921 
DCHAR_T
 
tmpbuf
[700];

2922 
DCHAR_T
 *
tmp
;

2923 
DCHAR_T
 *
∑d_±r
;

2924 
DCHAR_T
 *
p
;

2926 
has_width
 = 0;

2927 
width
 = 0;

2928 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

2930 i‡(
dp
->
width_¨g_ödex
 !
ARG_NONE
)

2932 
¨g
;

2934 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

2935 
	`ab‹t
 ();

2936 
¨g
 = 
a
.¨g[
dp
->
width_¨g_ödex
].a.
a_öt
;

2937 i‡(
¨g
 < 0)

2941 
Êags
 |
FLAG_LEFT
;

2942 
width
 = (Ë(-
¨g
);

2945 
width
 = 
¨g
;

2949 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
width_°¨t
;

2952 
width
 = 
	`xsum
 (
	`xtimes
 (width, 10), *
digôp
++ - '0');

2953 
digôp
 !
dp
->
width_íd
);

2955 
has_width
 = 1;

2958 
has_¥ecisi⁄
 = 0;

2959 
¥ecisi⁄
 = 0;

2960 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

2962 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

2964 
¨g
;

2966 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

2967 
	`ab‹t
 ();

2968 
¨g
 = 
a
.¨g[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

2971 i‡(
¨g
 >= 0)

2973 
¥ecisi⁄
 = 
¨g
;

2974 
has_¥ecisi⁄
 = 1;

2979 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
¥ecisi⁄_°¨t
 + 1;

2981 
¥ecisi⁄
 = 0;

2982 
digôp
 !
dp
->
¥ecisi⁄_íd
)

2983 
¥ecisi⁄
 = 
	`xsum
 (
	`xtimes
 (¥ecisi⁄, 10), *
digôp
++ - '0');

2984 
has_¥ecisi⁄
 = 1;

2989 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

2990 
tmp_Àngth
 =

2991 (Ë((
LDBL_DIG
 + 1)

2996 
tmp_Àngth
 =

2997 (Ë((
DBL_DIG
 + 1)

3001 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

3002 
tmp_Àngth
 = 
¥ecisi⁄
;

3004 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 12);

3006 i‡(
tmp_Àngth
 < 
width
)

3007 
tmp_Àngth
 = 
width
;

3009 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 1);

3011 i‡(
tmp_Àngth
 < (
tmpbuf
Ë/  (
DCHAR_T
))

3012 
tmp
 = 
tmpbuf
;

3015 
size_t
 
tmp_memsize
 = 
	`xtimes
 (
tmp_Àngth
,  (
DCHAR_T
));

3017 i‡(
	`size_ovîÊow_p
 (
tmp_memsize
))

3019 
out_of_mem‹y
;

3020 
tmp
 = (
DCHAR_T
 *Ë
	`mÆloc
 (
tmp_memsize
);

3021 i‡(
tmp
 =
NULL
)

3023 
out_of_mem‹y
;

3026 
∑d_±r
 = 
NULL
;

3027 
p
 = 
tmp
;

3028 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

3030 #i‡
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_LONG_DOUBLE


3031 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄gdoubÀ
;

3033 i‡(
	`i¢™l
 (
¨g
))

3035 i‡(
dp
->
c⁄vîsi⁄
 == 'A')

3037 *
p
++ = 'N'; *p++ = 'A'; *p++ = 'N';

3041 *
p
++ = 'n'; *p++ = 'a'; *p++ = 'n';

3046 
sign
 = 0;

3047 
DECL_LONG_DOUBLE_ROUNDING


3049 
	`BEGIN_LONG_DOUBLE_ROUNDING
 ();

3051 i‡(
	`signbô
 (
¨g
))

3053 
sign
 = -1;

3054 
¨g
 = -arg;

3057 i‡(
sign
 < 0)

3058 *
p
++ = '-';

3059 i‡(
Êags
 & 
FLAG_SHOWSIGN
)

3060 *
p
++ = '+';

3061 i‡(
Êags
 & 
FLAG_SPACE
)

3062 *
p
++ = ' ';

3064 i‡(
¨g
 > 0.0L &&árg +árg ==árg)

3066 i‡(
dp
->
c⁄vîsi⁄
 == 'A')

3068 *
p
++ = 'I'; *p++ = 'N'; *p++ = 'F';

3072 *
p
++ = 'i'; *p++ = 'n'; *p++ = 'f';

3077 
exp⁄ít
;

3078 
m™tisß
;

3080 i‡(
¨g
 > 0.0L)

3081 
m™tisß
 = 
	`¥ötf_‰ex∂
 (
¨g
, &
exp⁄ít
);

3084 
exp⁄ít
 = 0;

3085 
m™tisß
 = 0.0L;

3088 i‡(
has_¥ecisi⁄


3089 && 
¥ecisi⁄
 < (Ë((
LDBL_DIG
 + 1) * 0.831) + 1)

3092 
èû
 = 
m™tisß
;

3093 
size_t
 
q
;

3095 
q
 = 
¥ecisi⁄
; ; q--)

3097 
digô
 = (Ë
èû
;

3098 
èû
 -
digô
;

3099 i‡(
q
 == 0)

3101 i‡(
digô
 & 1 ? 
èû
 >= 0.5L :Åail > 0.5L)

3102 
èû
 = 1 -Åail;

3104 
èû
 = -Åail;

3107 
èû
 *= 16.0L;

3109 i‡(
èû
 != 0.0L)

3110 
q
 = 
¥ecisi⁄
; q > 0; q--)

3111 
èû
 *= 0.0625L;

3112 
m™tisß
 +
èû
;

3115 *
p
++ = '0';

3116 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'X';

3117 
∑d_±r
 = 
p
;

3119 
digô
;

3121 
digô
 = (Ë
m™tisß
;

3122 
m™tisß
 -
digô
;

3123 *
p
++ = '0' + 
digô
;

3124 i‡((
Êags
 & 
FLAG_ALT
)

3125 || 
m™tisß
 > 0.0L || 
¥ecisi⁄
 > 0)

3127 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3130 
m™tisß
 > 0.0L)

3132 
m™tisß
 *= 16.0L;

3133 
digô
 = (Ë
m™tisß
;

3134 
m™tisß
 -
digô
;

3135 *
p
++ = 
digô


3136 + (
digô
 < 10

3138 : 
dp
->
c⁄vîsi⁄
 - 10);

3139 i‡(
¥ecisi⁄
 > 0)

3140 
¥ecisi⁄
--;

3142 
¥ecisi⁄
 > 0)

3144 *
p
++ = '0';

3145 
¥ecisi⁄
--;

3149 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'P';

3150 #i‡
WIDE_CHAR_VERSION


3152 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

3154 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

3156 *
p
 != '\0')

3157 
p
++;

3159 i‡( (
DCHAR_T
) == 1)

3161 
	`•rötf
 ((*Ë
p
, "%+d", 
exp⁄ít
);

3162 *
p
 != '\0')

3163 
p
++;

3167 
expbuf
[6 + 1];

3168 c⁄° *
ï
;

3169 
	`•rötf
 (
expbuf
, "%+d", 
exp⁄ít
);

3170 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

3171 
p
++;

3176 
	`END_LONG_DOUBLE_ROUNDING
 ();

3179 
	`ab‹t
 ();

3184 #i‡
NEED_PRINTF_DIRECTIVE_A
 || 
NEED_PRINTF_DOUBLE


3185 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_doubÀ
;

3187 i‡(
	`i¢™d
 (
¨g
))

3189 i‡(
dp
->
c⁄vîsi⁄
 == 'A')

3191 *
p
++ = 'N'; *p++ = 'A'; *p++ = 'N';

3195 *
p
++ = 'n'; *p++ = 'a'; *p++ = 'n';

3200 
sign
 = 0;

3202 i‡(
	`signbô
 (
¨g
))

3204 
sign
 = -1;

3205 
¨g
 = -arg;

3208 i‡(
sign
 < 0)

3209 *
p
++ = '-';

3210 i‡(
Êags
 & 
FLAG_SHOWSIGN
)

3211 *
p
++ = '+';

3212 i‡(
Êags
 & 
FLAG_SPACE
)

3213 *
p
++ = ' ';

3215 i‡(
¨g
 > 0.0 &&árg +árg ==árg)

3217 i‡(
dp
->
c⁄vîsi⁄
 == 'A')

3219 *
p
++ = 'I'; *p++ = 'N'; *p++ = 'F';

3223 *
p
++ = 'i'; *p++ = 'n'; *p++ = 'f';

3228 
exp⁄ít
;

3229 
m™tisß
;

3231 i‡(
¨g
 > 0.0)

3232 
m™tisß
 = 
	`¥ötf_‰exp
 (
¨g
, &
exp⁄ít
);

3235 
exp⁄ít
 = 0;

3236 
m™tisß
 = 0.0;

3239 i‡(
has_¥ecisi⁄


3240 && 
¥ecisi⁄
 < (Ë((
DBL_DIG
 + 1) * 0.831) + 1)

3243 
èû
 = 
m™tisß
;

3244 
size_t
 
q
;

3246 
q
 = 
¥ecisi⁄
; ; q--)

3248 
digô
 = (Ë
èû
;

3249 
èû
 -
digô
;

3250 i‡(
q
 == 0)

3252 i‡(
digô
 & 1 ? 
èû
 >= 0.5 :Åail > 0.5)

3253 
èû
 = 1 -Åail;

3255 
èû
 = -Åail;

3258 
èû
 *= 16.0;

3260 i‡(
èû
 != 0.0)

3261 
q
 = 
¥ecisi⁄
; q > 0; q--)

3262 
èû
 *= 0.0625;

3263 
m™tisß
 +
èû
;

3266 *
p
++ = '0';

3267 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'X';

3268 
∑d_±r
 = 
p
;

3270 
digô
;

3272 
digô
 = (Ë
m™tisß
;

3273 
m™tisß
 -
digô
;

3274 *
p
++ = '0' + 
digô
;

3275 i‡((
Êags
 & 
FLAG_ALT
)

3276 || 
m™tisß
 > 0.0 || 
¥ecisi⁄
 > 0)

3278 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3281 
m™tisß
 > 0.0)

3283 
m™tisß
 *= 16.0;

3284 
digô
 = (Ë
m™tisß
;

3285 
m™tisß
 -
digô
;

3286 *
p
++ = 
digô


3287 + (
digô
 < 10

3289 : 
dp
->
c⁄vîsi⁄
 - 10);

3290 i‡(
¥ecisi⁄
 > 0)

3291 
¥ecisi⁄
--;

3293 
¥ecisi⁄
 > 0)

3295 *
p
++ = '0';

3296 
¥ecisi⁄
--;

3300 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'P';

3301 #i‡
WIDE_CHAR_VERSION


3303 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

3305 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

3307 *
p
 != '\0')

3308 
p
++;

3310 i‡( (
DCHAR_T
) == 1)

3312 
	`•rötf
 ((*Ë
p
, "%+d", 
exp⁄ít
);

3313 *
p
 != '\0')

3314 
p
++;

3318 
expbuf
[6 + 1];

3319 c⁄° *
ï
;

3320 
	`•rötf
 (
expbuf
, "%+d", 
exp⁄ít
);

3321 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

3322 
p
++;

3328 
	`ab‹t
 ();

3333 i‡(
has_width
 && 
p
 - 
tmp
 < 
width
)

3335 
size_t
 
∑d
 = 
width
 - (
p
 - 
tmp
);

3336 
DCHAR_T
 *
íd
 = 
p
 + 
∑d
;

3338 i‡(
Êags
 & 
FLAG_LEFT
)

3341 ; 
∑d
 > 0;Öad--)

3342 *
p
++ = ' ';

3344 i‡((
Êags
 & 
FLAG_ZERO
Ë&& 
∑d_±r
 !
NULL
)

3347 
DCHAR_T
 *
q
 = 
íd
;

3349 
p
 > 
∑d_±r
)

3350 *--
q
 = *--
p
;

3351 ; 
∑d
 > 0;Öad--)

3352 *
p
++ = '0';

3357 
DCHAR_T
 *
q
 = 
íd
;

3359 
p
 > 
tmp
)

3360 *--
q
 = *--
p
;

3361 ; 
∑d
 > 0;Öad--)

3362 *
p
++ = ' ';

3365 
p
 = 
íd
;

3369 
size_t
 
cou¡
 = 
p
 - 
tmp
;

3371 i‡(
cou¡
 >
tmp_Àngth
)

3374 
	`ab‹t
 ();

3377 i‡(
cou¡
 >
Æloˇãd
 - 
Àngth
)

3379 
size_t
 
n
 = 
	`xsum
 (
Àngth
, 
cou¡
);

3381 
	`ENSURE_ALLOCATION
 (
n
);

3385 
	`mem˝y
 (
ªsu…
 + 
Àngth
, 
tmp
, 
cou¡
 *  (
DCHAR_T
));

3386 i‡(
tmp
 !
tmpbuf
)

3387 
	`‰ì
 (
tmp
);

3388 
Àngth
 +
cou¡
;

3392 #i‡(
NEED_PRINTF_INFINITE_DOUBLE
 || 
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE
 || 
NEED_PRINTF_LONG_DOUBLE
Ë&& !
deföed
 
IN_LIBINTL


3393 i‡((
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F'

3394 || 
dp
->
c⁄vîsi⁄
 == 'e' || dp->conversion == 'E'

3395 || 
dp
->
c⁄vîsi⁄
 == 'g' || dp->conversion == 'G'

3396 || 
dp
->
c⁄vîsi⁄
 == 'a' || dp->conversion == 'A')

3398 #i‡
NEED_PRINTF_DOUBLE


3399 || 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_DOUBLE


3400 #ñi‡
NEED_PRINTF_INFINITE_DOUBLE


3401 || (
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_DOUBLE


3405 && 
	`is_öföôe_‹_zîo
 (
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_doubÀ
))

3407 #i‡
NEED_PRINTF_LONG_DOUBLE


3408 || 
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_LONGDOUBLE


3409 #ñi‡
NEED_PRINTF_INFINITE_LONG_DOUBLE


3410 || (
a
.
¨g
[
dp
->
¨g_ödex
].
ty≥
 =
TYPE_LONGDOUBLE


3415 && 
	`is_öföôe_‹_zîﬁ
 (
a
.
¨g
[
dp
->
¨g_ödex
].a.
a_l⁄gdoubÀ
))

3419 #i‡(
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE
Ë&& (
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE
)

3420 
¨g_ty≥
 
ty≥
 = 
a
.
¨g
[
dp
->
¨g_ödex
].type;

3422 
Êags
 = 
dp
->flags;

3423 
has_width
;

3424 
size_t
 
width
;

3425 
has_¥ecisi⁄
;

3426 
size_t
 
¥ecisi⁄
;

3427 
size_t
 
tmp_Àngth
;

3428 
DCHAR_T
 
tmpbuf
[700];

3429 
DCHAR_T
 *
tmp
;

3430 
DCHAR_T
 *
∑d_±r
;

3431 
DCHAR_T
 *
p
;

3433 
has_width
 = 0;

3434 
width
 = 0;

3435 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

3437 i‡(
dp
->
width_¨g_ödex
 !
ARG_NONE
)

3439 
¨g
;

3441 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

3442 
	`ab‹t
 ();

3443 
¨g
 = 
a
.¨g[
dp
->
width_¨g_ödex
].a.
a_öt
;

3444 i‡(
¨g
 < 0)

3448 
Êags
 |
FLAG_LEFT
;

3449 
width
 = (Ë(-
¨g
);

3452 
width
 = 
¨g
;

3456 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
width_°¨t
;

3459 
width
 = 
	`xsum
 (
	`xtimes
 (width, 10), *
digôp
++ - '0');

3460 
digôp
 !
dp
->
width_íd
);

3462 
has_width
 = 1;

3465 
has_¥ecisi⁄
 = 0;

3466 
¥ecisi⁄
 = 0;

3467 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

3469 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

3471 
¨g
;

3473 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

3474 
	`ab‹t
 ();

3475 
¨g
 = 
a
.¨g[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

3478 i‡(
¨g
 >= 0)

3480 
¥ecisi⁄
 = 
¨g
;

3481 
has_¥ecisi⁄
 = 1;

3486 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
¥ecisi⁄_°¨t
 + 1;

3488 
¥ecisi⁄
 = 0;

3489 
digôp
 !
dp
->
¥ecisi⁄_íd
)

3490 
¥ecisi⁄
 = 
	`xsum
 (
	`xtimes
 (¥ecisi⁄, 10), *
digôp
++ - '0');

3491 
has_¥ecisi⁄
 = 1;

3499 i‡(!
has_¥ecisi⁄
)

3500 i‡(!(
dp
->
c⁄vîsi⁄
 == 'a' || dp->conversion == 'A'))

3501 
¥ecisi⁄
 = 6;

3504 #i‡
NEED_PRINTF_DOUBLE
 && 
NEED_PRINTF_LONG_DOUBLE


3505 
tmp_Àngth
 = (
ty≥
 =
TYPE_LONGDOUBLE
 ? 
LDBL_DIG
 + 1 : 
DBL_DIG
 + 1);

3506 #ñi‡
NEED_PRINTF_INFINITE_DOUBLE
 && 
NEED_PRINTF_LONG_DOUBLE


3507 
tmp_Àngth
 = (
ty≥
 =
TYPE_LONGDOUBLE
 ? 
LDBL_DIG
 + 1 : 0);

3508 #ñi‡
NEED_PRINTF_LONG_DOUBLE


3509 
tmp_Àngth
 = 
LDBL_DIG
 + 1;

3510 #ñi‡
NEED_PRINTF_DOUBLE


3511 
tmp_Àngth
 = 
DBL_DIG
 + 1;

3513 
tmp_Àngth
 = 0;

3515 i‡(
tmp_Àngth
 < 
¥ecisi⁄
)

3516 
tmp_Àngth
 = 
¥ecisi⁄
;

3517 #i‡
NEED_PRINTF_LONG_DOUBLE


3518 #i‡
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE


3519 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

3521 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

3523 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄gdoubÀ
;

3524 i‡(!(
	`i¢™l
 (
¨g
) ||árg +árg ==árg))

3527 
exp⁄ít
 = 
	`Êo‹log10l
 (
¨g
 < 0 ? -arg :árg);

3528 i‡(
exp⁄ít
 >0 && 
tmp_Àngth
 <Éxp⁄íà+ 
¥ecisi⁄
)

3529 
tmp_Àngth
 = 
exp⁄ít
 + 
¥ecisi⁄
;

3533 #i‡
NEED_PRINTF_DOUBLE


3534 #i‡
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE


3535 i‡(
ty≥
 =
TYPE_DOUBLE
)

3537 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

3539 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_doubÀ
;

3540 i‡(!(
	`i¢™d
 (
¨g
) ||árg +árg ==árg))

3543 
exp⁄ít
 = 
	`Êo‹log10
 (
¨g
 < 0 ? -arg :árg);

3544 i‡(
exp⁄ít
 >0 && 
tmp_Àngth
 <Éxp⁄íà+ 
¥ecisi⁄
)

3545 
tmp_Àngth
 = 
exp⁄ít
 + 
¥ecisi⁄
;

3550 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 12);

3552 i‡(
tmp_Àngth
 < 
width
)

3553 
tmp_Àngth
 = 
width
;

3555 
tmp_Àngth
 = 
	`xsum
 (tmp_length, 1);

3557 i‡(
tmp_Àngth
 < (
tmpbuf
Ë/  (
DCHAR_T
))

3558 
tmp
 = 
tmpbuf
;

3561 
size_t
 
tmp_memsize
 = 
	`xtimes
 (
tmp_Àngth
,  (
DCHAR_T
));

3563 i‡(
	`size_ovîÊow_p
 (
tmp_memsize
))

3565 
out_of_mem‹y
;

3566 
tmp
 = (
DCHAR_T
 *Ë
	`mÆloc
 (
tmp_memsize
);

3567 i‡(
tmp
 =
NULL
)

3569 
out_of_mem‹y
;

3572 
∑d_±r
 = 
NULL
;

3573 
p
 = 
tmp
;

3575 #i‡
NEED_PRINTF_LONG_DOUBLE
 || 
NEED_PRINTF_INFINITE_LONG_DOUBLE


3576 #i‡
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE


3577 i‡(
ty≥
 =
TYPE_LONGDOUBLE
)

3580 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄gdoubÀ
;

3582 i‡(
	`i¢™l
 (
¨g
))

3584 i‡(
dp
->
c⁄vîsi⁄
 >= 'A' && dp->conversion <= 'Z')

3586 *
p
++ = 'N'; *p++ = 'A'; *p++ = 'N';

3590 *
p
++ = 'n'; *p++ = 'a'; *p++ = 'n';

3595 
sign
 = 0;

3596 
DECL_LONG_DOUBLE_ROUNDING


3598 
	`BEGIN_LONG_DOUBLE_ROUNDING
 ();

3600 i‡(
	`signbô
 (
¨g
))

3602 
sign
 = -1;

3603 
¨g
 = -arg;

3606 i‡(
sign
 < 0)

3607 *
p
++ = '-';

3608 i‡(
Êags
 & 
FLAG_SHOWSIGN
)

3609 *
p
++ = '+';

3610 i‡(
Êags
 & 
FLAG_SPACE
)

3611 *
p
++ = ' ';

3613 i‡(
¨g
 > 0.0L &&árg +árg ==árg)

3615 i‡(
dp
->
c⁄vîsi⁄
 >= 'A' && dp->conversion <= 'Z')

3617 *
p
++ = 'I'; *p++ = 'N'; *p++ = 'F';

3621 *
p
++ = 'i'; *p++ = 'n'; *p++ = 'f';

3626 #i‡
NEED_PRINTF_LONG_DOUBLE


3627 
∑d_±r
 = 
p
;

3629 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

3631 *
digôs
;

3632 
size_t
 
ndigôs
;

3634 
digôs
 =

3635 
	`sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
¨g
, 
¥ecisi⁄
);

3636 i‡(
digôs
 =
NULL
)

3638 
	`END_LONG_DOUBLE_ROUNDING
 ();

3639 
out_of_mem‹y
;

3641 
ndigôs
 = 
	`°æí
 (
digôs
);

3643 i‡(
ndigôs
 > 
¥ecisi⁄
)

3646 --
ndigôs
;

3647 *
p
++ = 
digôs
[
ndigôs
];

3649 
ndigôs
 > 
¥ecisi⁄
);

3651 *
p
++ = '0';

3653 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

3655 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3656 ; 
¥ecisi⁄
 > 
ndigôs
;Örecision--)

3657 *
p
++ = '0';

3658 
ndigôs
 > 0)

3660 --
ndigôs
;

3661 *
p
++ = 
digôs
[
ndigôs
];

3665 
	`‰ì
 (
digôs
);

3667 i‡(
dp
->
c⁄vîsi⁄
 == 'e' || dp->conversion == 'E')

3669 
exp⁄ít
;

3671 i‡(
¨g
 == 0.0L)

3673 
exp⁄ít
 = 0;

3674 *
p
++ = '0';

3675 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

3677 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3678 ; 
¥ecisi⁄
 > 0;Örecision--)

3679 *
p
++ = '0';

3685 
adju°ed
;

3686 *
digôs
;

3687 
size_t
 
ndigôs
;

3689 
exp⁄ít
 = 
	`Êo‹log10l
 (
¨g
);

3690 
adju°ed
 = 0;

3693 
digôs
 =

3694 
	`sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
¨g
,

3695 ()
¥ecisi⁄
 - 
exp⁄ít
);

3696 i‡(
digôs
 =
NULL
)

3698 
	`END_LONG_DOUBLE_ROUNDING
 ();

3699 
out_of_mem‹y
;

3701 
ndigôs
 = 
	`°æí
 (
digôs
);

3703 i‡(
ndigôs
 =
¥ecisi⁄
 + 1)

3705 i‡(
ndigôs
 < 
¥ecisi⁄


3706 || 
ndigôs
 > 
¥ecisi⁄
 + 2)

3709 
	`ab‹t
 ();

3710 i‡(
adju°ed
)

3714 
	`ab‹t
 ();

3715 
	`‰ì
 (
digôs
);

3716 i‡(
ndigôs
 =
¥ecisi⁄
)

3717 
exp⁄ít
 -= 1;

3719 
exp⁄ít
 += 1;

3720 
adju°ed
 = 1;

3723 i‡(
	`is_b‹dîlöe
 (
digôs
, 
¥ecisi⁄
))

3728 *
digôs2
 =

3729 
	`sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
¨g
,

3730 ()
¥ecisi⁄
 - 
exp⁄ít
 + 1);

3731 i‡(
digôs2
 =
NULL
)

3733 
	`‰ì
 (
digôs
);

3734 
	`END_LONG_DOUBLE_ROUNDING
 ();

3735 
out_of_mem‹y
;

3737 i‡(
	`°æí
 (
digôs2
Ë=
¥ecisi⁄
 + 1)

3739 
	`‰ì
 (
digôs
);

3740 
digôs
 = 
digôs2
;

3741 
exp⁄ít
 -= 1;

3744 
	`‰ì
 (
digôs2
);

3748 *
p
++ = 
digôs
[--
ndigôs
];

3749 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

3751 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3752 
ndigôs
 > 0)

3754 --
ndigôs
;

3755 *
p
++ = 
digôs
[
ndigôs
];

3759 
	`‰ì
 (
digôs
);

3762 *
p
++ = 
dp
->
c⁄vîsi⁄
;

3763 #i‡
WIDE_CHAR_VERSION


3765 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

3767 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

3769 *
p
 != '\0')

3770 
p
++;

3772 i‡( (
DCHAR_T
) == 1)

3774 
	`•rötf
 ((*Ë
p
, "%+.2d", 
exp⁄ít
);

3775 *
p
 != '\0')

3776 
p
++;

3780 
expbuf
[6 + 1];

3781 c⁄° *
ï
;

3782 
	`•rötf
 (
expbuf
, "%+.2d", 
exp⁄ít
);

3783 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

3784 
p
++;

3788 i‡(
dp
->
c⁄vîsi⁄
 == 'g' || dp->conversion == 'G')

3790 i‡(
¥ecisi⁄
 == 0)

3791 
¥ecisi⁄
 = 1;

3794 i‡(
¨g
 == 0.0L)

3798 
size_t
 
ndigôs
 = 
¥ecisi⁄
;

3801 
size_t
 
nzî€s
 =

3802 (
Êags
 & 
FLAG_ALT
 ? 0 : 
¥ecisi⁄
 - 1);

3804 --
ndigôs
;

3805 *
p
++ = '0';

3806 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

3808 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3809 
ndigôs
 > 
nzî€s
)

3811 --
ndigôs
;

3812 *
p
++ = '0';

3819 
exp⁄ít
;

3820 
adju°ed
;

3821 *
digôs
;

3822 
size_t
 
ndigôs
;

3823 
size_t
 
nzî€s
;

3825 
exp⁄ít
 = 
	`Êo‹log10l
 (
¨g
);

3826 
adju°ed
 = 0;

3829 
digôs
 =

3830 
	`sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
¨g
,

3831 ()(
¥ecisi⁄
 - 1Ë- 
exp⁄ít
);

3832 i‡(
digôs
 =
NULL
)

3834 
	`END_LONG_DOUBLE_ROUNDING
 ();

3835 
out_of_mem‹y
;

3837 
ndigôs
 = 
	`°æí
 (
digôs
);

3839 i‡(
ndigôs
 =
¥ecisi⁄
)

3841 i‡(
ndigôs
 < 
¥ecisi⁄
 - 1

3842 || 
ndigôs
 > 
¥ecisi⁄
 + 1)

3845 
	`ab‹t
 ();

3846 i‡(
adju°ed
)

3850 
	`ab‹t
 ();

3851 
	`‰ì
 (
digôs
);

3852 i‡(
ndigôs
 < 
¥ecisi⁄
)

3853 
exp⁄ít
 -= 1;

3855 
exp⁄ít
 += 1;

3856 
adju°ed
 = 1;

3859 i‡(
	`is_b‹dîlöe
 (
digôs
, 
¥ecisi⁄
 - 1))

3864 *
digôs2
 =

3865 
	`sˇÀ10_round_decimÆ_l⁄g_doubÀ
 (
¨g
,

3866 ()(
¥ecisi⁄
 - 1Ë- 
exp⁄ít
 + 1);

3867 i‡(
digôs2
 =
NULL
)

3869 
	`‰ì
 (
digôs
);

3870 
	`END_LONG_DOUBLE_ROUNDING
 ();

3871 
out_of_mem‹y
;

3873 i‡(
	`°æí
 (
digôs2
Ë=
¥ecisi⁄
)

3875 
	`‰ì
 (
digôs
);

3876 
digôs
 = 
digôs2
;

3877 
exp⁄ít
 -= 1;

3880 
	`‰ì
 (
digôs2
);

3886 
nzî€s
 = 0;

3887 i‡((
Êags
 & 
FLAG_ALT
) == 0)

3888 
nzî€s
 < 
ndigôs


3889 && 
digôs
[
nzî€s
] == '0')

3890 
nzî€s
++;

3893 i‡(
exp⁄ít
 >= -4

3894 && 
exp⁄ít
 < ()
¥ecisi⁄
)

3900 i‡(
exp⁄ít
 >= 0)

3902 
size_t
 
cou¡
 = 
exp⁄ít
 + 1;

3904 ; 
cou¡
 > 0; count--)

3905 *
p
++ = 
digôs
[--
ndigôs
];

3906 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

3908 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3909 
ndigôs
 > 
nzî€s
)

3911 --
ndigôs
;

3912 *
p
++ = 
digôs
[
ndigôs
];

3918 
size_t
 
cou¡
 = -
exp⁄ít
 - 1;

3919 *
p
++ = '0';

3920 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3921 ; 
cou¡
 > 0; count--)

3922 *
p
++ = '0';

3923 
ndigôs
 > 
nzî€s
)

3925 --
ndigôs
;

3926 *
p
++ = 
digôs
[
ndigôs
];

3933 *
p
++ = 
digôs
[--
ndigôs
];

3934 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

3936 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3937 
ndigôs
 > 
nzî€s
)

3939 --
ndigôs
;

3940 *
p
++ = 
digôs
[
ndigôs
];

3943 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'G' + 'E';

3944 #i‡
WIDE_CHAR_VERSION


3946 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

3948 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

3950 *
p
 != '\0')

3951 
p
++;

3953 i‡( (
DCHAR_T
) == 1)

3955 
	`•rötf
 ((*Ë
p
, "%+.2d", 
exp⁄ít
);

3956 *
p
 != '\0')

3957 
p
++;

3961 
expbuf
[6 + 1];

3962 c⁄° *
ï
;

3963 
	`•rötf
 (
expbuf
, "%+.2d", 
exp⁄ít
);

3964 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

3965 
p
++;

3970 
	`‰ì
 (
digôs
);

3974 
	`ab‹t
 ();

3977 i‡(!(
¨g
 == 0.0L))

3978 
	`ab‹t
 ();

3980 
∑d_±r
 = 
p
;

3982 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

3984 *
p
++ = '0';

3985 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

3987 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3988 ; 
¥ecisi⁄
 > 0;Örecision--)

3989 *
p
++ = '0';

3992 i‡(
dp
->
c⁄vîsi⁄
 == 'e' || dp->conversion == 'E')

3994 *
p
++ = '0';

3995 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

3997 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

3998 ; 
¥ecisi⁄
 > 0;Örecision--)

3999 *
p
++ = '0';

4001 *
p
++ = 
dp
->
c⁄vîsi⁄
;

4002 *
p
++ = '+';

4003 *
p
++ = '0';

4004 *
p
++ = '0';

4006 i‡(
dp
->
c⁄vîsi⁄
 == 'g' || dp->conversion == 'G')

4008 *
p
++ = '0';

4009 i‡(
Êags
 & 
FLAG_ALT
)

4011 
size_t
 
ndigôs
 =

4012 (
¥ecisi⁄
 > 0 ?Örecision - 1 : 0);

4013 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4014 ; 
ndigôs
 > 0; --ndigits)

4015 *
p
++ = '0';

4018 i‡(
dp
->
c⁄vîsi⁄
 == 'a' || dp->conversion == 'A')

4020 *
p
++ = '0';

4021 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'X';

4022 
∑d_±r
 = 
p
;

4023 *
p
++ = '0';

4024 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4026 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4027 ; 
¥ecisi⁄
 > 0;Örecision--)

4028 *
p
++ = '0';

4030 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'A' + 'P';

4031 *
p
++ = '+';

4032 *
p
++ = '0';

4035 
	`ab‹t
 ();

4039 
	`END_LONG_DOUBLE_ROUNDING
 ();

4042 #i‡
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE


4046 #i‡
NEED_PRINTF_DOUBLE
 || 
NEED_PRINTF_INFINITE_DOUBLE


4048 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_doubÀ
;

4050 i‡(
	`i¢™d
 (
¨g
))

4052 i‡(
dp
->
c⁄vîsi⁄
 >= 'A' && dp->conversion <= 'Z')

4054 *
p
++ = 'N'; *p++ = 'A'; *p++ = 'N';

4058 *
p
++ = 'n'; *p++ = 'a'; *p++ = 'n';

4063 
sign
 = 0;

4065 i‡(
	`signbô
 (
¨g
))

4067 
sign
 = -1;

4068 
¨g
 = -arg;

4071 i‡(
sign
 < 0)

4072 *
p
++ = '-';

4073 i‡(
Êags
 & 
FLAG_SHOWSIGN
)

4074 *
p
++ = '+';

4075 i‡(
Êags
 & 
FLAG_SPACE
)

4076 *
p
++ = ' ';

4078 i‡(
¨g
 > 0.0 &&árg +árg ==árg)

4080 i‡(
dp
->
c⁄vîsi⁄
 >= 'A' && dp->conversion <= 'Z')

4082 *
p
++ = 'I'; *p++ = 'N'; *p++ = 'F';

4086 *
p
++ = 'i'; *p++ = 'n'; *p++ = 'f';

4091 #i‡
NEED_PRINTF_DOUBLE


4092 
∑d_±r
 = 
p
;

4094 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

4096 *
digôs
;

4097 
size_t
 
ndigôs
;

4099 
digôs
 =

4100 
	`sˇÀ10_round_decimÆ_doubÀ
 (
¨g
, 
¥ecisi⁄
);

4101 i‡(
digôs
 =
NULL
)

4102 
out_of_mem‹y
;

4103 
ndigôs
 = 
	`°æí
 (
digôs
);

4105 i‡(
ndigôs
 > 
¥ecisi⁄
)

4108 --
ndigôs
;

4109 *
p
++ = 
digôs
[
ndigôs
];

4111 
ndigôs
 > 
¥ecisi⁄
);

4113 *
p
++ = '0';

4115 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4117 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4118 ; 
¥ecisi⁄
 > 
ndigôs
;Örecision--)

4119 *
p
++ = '0';

4120 
ndigôs
 > 0)

4122 --
ndigôs
;

4123 *
p
++ = 
digôs
[
ndigôs
];

4127 
	`‰ì
 (
digôs
);

4129 i‡(
dp
->
c⁄vîsi⁄
 == 'e' || dp->conversion == 'E')

4131 
exp⁄ít
;

4133 i‡(
¨g
 == 0.0)

4135 
exp⁄ít
 = 0;

4136 *
p
++ = '0';

4137 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4139 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4140 ; 
¥ecisi⁄
 > 0;Örecision--)

4141 *
p
++ = '0';

4147 
adju°ed
;

4148 *
digôs
;

4149 
size_t
 
ndigôs
;

4151 
exp⁄ít
 = 
	`Êo‹log10
 (
¨g
);

4152 
adju°ed
 = 0;

4155 
digôs
 =

4156 
	`sˇÀ10_round_decimÆ_doubÀ
 (
¨g
,

4157 ()
¥ecisi⁄
 - 
exp⁄ít
);

4158 i‡(
digôs
 =
NULL
)

4159 
out_of_mem‹y
;

4160 
ndigôs
 = 
	`°æí
 (
digôs
);

4162 i‡(
ndigôs
 =
¥ecisi⁄
 + 1)

4164 i‡(
ndigôs
 < 
¥ecisi⁄


4165 || 
ndigôs
 > 
¥ecisi⁄
 + 2)

4168 
	`ab‹t
 ();

4169 i‡(
adju°ed
)

4173 
	`ab‹t
 ();

4174 
	`‰ì
 (
digôs
);

4175 i‡(
ndigôs
 =
¥ecisi⁄
)

4176 
exp⁄ít
 -= 1;

4178 
exp⁄ít
 += 1;

4179 
adju°ed
 = 1;

4182 i‡(
	`is_b‹dîlöe
 (
digôs
, 
¥ecisi⁄
))

4187 *
digôs2
 =

4188 
	`sˇÀ10_round_decimÆ_doubÀ
 (
¨g
,

4189 ()
¥ecisi⁄
 - 
exp⁄ít
 + 1);

4190 i‡(
digôs2
 =
NULL
)

4192 
	`‰ì
 (
digôs
);

4193 
out_of_mem‹y
;

4195 i‡(
	`°æí
 (
digôs2
Ë=
¥ecisi⁄
 + 1)

4197 
	`‰ì
 (
digôs
);

4198 
digôs
 = 
digôs2
;

4199 
exp⁄ít
 -= 1;

4202 
	`‰ì
 (
digôs2
);

4206 *
p
++ = 
digôs
[--
ndigôs
];

4207 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4209 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4210 
ndigôs
 > 0)

4212 --
ndigôs
;

4213 *
p
++ = 
digôs
[
ndigôs
];

4217 
	`‰ì
 (
digôs
);

4220 *
p
++ = 
dp
->
c⁄vîsi⁄
;

4221 #i‡
WIDE_CHAR_VERSION


4223 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

4226 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4231 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

4233 *
p
 != '\0')

4234 
p
++;

4237 c⁄° 
decimÆ_f‹m©
[] =

4240 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4245 i‡( (
DCHAR_T
) == 1)

4247 
	`•rötf
 ((*Ë
p
, 
decimÆ_f‹m©
, 
exp⁄ít
);

4248 *
p
 != '\0')

4249 
p
++;

4253 
expbuf
[6 + 1];

4254 c⁄° *
ï
;

4255 
	`•rötf
 (
expbuf
, 
decimÆ_f‹m©
, 
exp⁄ít
);

4256 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

4257 
p
++;

4262 i‡(
dp
->
c⁄vîsi⁄
 == 'g' || dp->conversion == 'G')

4264 i‡(
¥ecisi⁄
 == 0)

4265 
¥ecisi⁄
 = 1;

4268 i‡(
¨g
 == 0.0)

4272 
size_t
 
ndigôs
 = 
¥ecisi⁄
;

4275 
size_t
 
nzî€s
 =

4276 (
Êags
 & 
FLAG_ALT
 ? 0 : 
¥ecisi⁄
 - 1);

4278 --
ndigôs
;

4279 *
p
++ = '0';

4280 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

4282 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4283 
ndigôs
 > 
nzî€s
)

4285 --
ndigôs
;

4286 *
p
++ = '0';

4293 
exp⁄ít
;

4294 
adju°ed
;

4295 *
digôs
;

4296 
size_t
 
ndigôs
;

4297 
size_t
 
nzî€s
;

4299 
exp⁄ít
 = 
	`Êo‹log10
 (
¨g
);

4300 
adju°ed
 = 0;

4303 
digôs
 =

4304 
	`sˇÀ10_round_decimÆ_doubÀ
 (
¨g
,

4305 ()(
¥ecisi⁄
 - 1Ë- 
exp⁄ít
);

4306 i‡(
digôs
 =
NULL
)

4307 
out_of_mem‹y
;

4308 
ndigôs
 = 
	`°æí
 (
digôs
);

4310 i‡(
ndigôs
 =
¥ecisi⁄
)

4312 i‡(
ndigôs
 < 
¥ecisi⁄
 - 1

4313 || 
ndigôs
 > 
¥ecisi⁄
 + 1)

4316 
	`ab‹t
 ();

4317 i‡(
adju°ed
)

4321 
	`ab‹t
 ();

4322 
	`‰ì
 (
digôs
);

4323 i‡(
ndigôs
 < 
¥ecisi⁄
)

4324 
exp⁄ít
 -= 1;

4326 
exp⁄ít
 += 1;

4327 
adju°ed
 = 1;

4330 i‡(
	`is_b‹dîlöe
 (
digôs
, 
¥ecisi⁄
 - 1))

4335 *
digôs2
 =

4336 
	`sˇÀ10_round_decimÆ_doubÀ
 (
¨g
,

4337 ()(
¥ecisi⁄
 - 1Ë- 
exp⁄ít
 + 1);

4338 i‡(
digôs2
 =
NULL
)

4340 
	`‰ì
 (
digôs
);

4341 
out_of_mem‹y
;

4343 i‡(
	`°æí
 (
digôs2
Ë=
¥ecisi⁄
)

4345 
	`‰ì
 (
digôs
);

4346 
digôs
 = 
digôs2
;

4347 
exp⁄ít
 -= 1;

4350 
	`‰ì
 (
digôs2
);

4356 
nzî€s
 = 0;

4357 i‡((
Êags
 & 
FLAG_ALT
) == 0)

4358 
nzî€s
 < 
ndigôs


4359 && 
digôs
[
nzî€s
] == '0')

4360 
nzî€s
++;

4363 i‡(
exp⁄ít
 >= -4

4364 && 
exp⁄ít
 < ()
¥ecisi⁄
)

4370 i‡(
exp⁄ít
 >= 0)

4372 
size_t
 
cou¡
 = 
exp⁄ít
 + 1;

4374 ; 
cou¡
 > 0; count--)

4375 *
p
++ = 
digôs
[--
ndigôs
];

4376 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

4378 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4379 
ndigôs
 > 
nzî€s
)

4381 --
ndigôs
;

4382 *
p
++ = 
digôs
[
ndigôs
];

4388 
size_t
 
cou¡
 = -
exp⁄ít
 - 1;

4389 *
p
++ = '0';

4390 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4391 ; 
cou¡
 > 0; count--)

4392 *
p
++ = '0';

4393 
ndigôs
 > 
nzî€s
)

4395 --
ndigôs
;

4396 *
p
++ = 
digôs
[
ndigôs
];

4403 *
p
++ = 
digôs
[--
ndigôs
];

4404 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
ndigôs
 > 
nzî€s
)

4406 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4407 
ndigôs
 > 
nzî€s
)

4409 --
ndigôs
;

4410 *
p
++ = 
digôs
[
ndigôs
];

4413 *
p
++ = 
dp
->
c⁄vîsi⁄
 - 'G' + 'E';

4414 #i‡
WIDE_CHAR_VERSION


4416 c⁄° 
wch¨_t
 
decimÆ_f‹m©
[] =

4419 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4424 
	`SNPRINTF
 (
p
, 6 + 1, 
decimÆ_f‹m©
, 
exp⁄ít
);

4426 *
p
 != '\0')

4427 
p
++;

4430 c⁄° 
decimÆ_f‹m©
[] =

4433 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4438 i‡( (
DCHAR_T
) == 1)

4440 
	`•rötf
 ((*Ë
p
, 
decimÆ_f‹m©
, 
exp⁄ít
);

4441 *
p
 != '\0')

4442 
p
++;

4446 
expbuf
[6 + 1];

4447 c⁄° *
ï
;

4448 
	`•rötf
 (
expbuf
, 
decimÆ_f‹m©
, 
exp⁄ít
);

4449 
ï
 = 
expbuf
; (*
p
 = *ep) != '\0';Ép++)

4450 
p
++;

4456 
	`‰ì
 (
digôs
);

4460 
	`ab‹t
 ();

4463 i‡(!(
¨g
 == 0.0))

4464 
	`ab‹t
 ();

4466 
∑d_±r
 = 
p
;

4468 i‡(
dp
->
c⁄vîsi⁄
 == 'f' || dp->conversion == 'F')

4470 *
p
++ = '0';

4471 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4473 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4474 ; 
¥ecisi⁄
 > 0;Örecision--)

4475 *
p
++ = '0';

4478 i‡(
dp
->
c⁄vîsi⁄
 == 'e' || dp->conversion == 'E')

4480 *
p
++ = '0';

4481 i‡((
Êags
 & 
FLAG_ALT
Ë|| 
¥ecisi⁄
 > 0)

4483 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4484 ; 
¥ecisi⁄
 > 0;Örecision--)

4485 *
p
++ = '0';

4487 *
p
++ = 
dp
->
c⁄vîsi⁄
;

4488 *
p
++ = '+';

4491 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4492 *
p
++ = '0';

4494 *
p
++ = '0';

4495 *
p
++ = '0';

4497 i‡(
dp
->
c⁄vîsi⁄
 == 'g' || dp->conversion == 'G')

4499 *
p
++ = '0';

4500 i‡(
Êags
 & 
FLAG_ALT
)

4502 
size_t
 
ndigôs
 =

4503 (
¥ecisi⁄
 > 0 ?Örecision - 1 : 0);

4504 *
p
++ = 
	`decimÆ_poöt_ch¨
 ();

4505 ; 
ndigôs
 > 0; --ndigits)

4506 *
p
++ = '0';

4510 
	`ab‹t
 ();

4519 i‡(
has_width
 && 
p
 - 
tmp
 < 
width
)

4521 
size_t
 
∑d
 = 
width
 - (
p
 - 
tmp
);

4522 
DCHAR_T
 *
íd
 = 
p
 + 
∑d
;

4524 i‡(
Êags
 & 
FLAG_LEFT
)

4527 ; 
∑d
 > 0;Öad--)

4528 *
p
++ = ' ';

4530 i‡((
Êags
 & 
FLAG_ZERO
Ë&& 
∑d_±r
 !
NULL
)

4533 
DCHAR_T
 *
q
 = 
íd
;

4535 
p
 > 
∑d_±r
)

4536 *--
q
 = *--
p
;

4537 ; 
∑d
 > 0;Öad--)

4538 *
p
++ = '0';

4543 
DCHAR_T
 *
q
 = 
íd
;

4545 
p
 > 
tmp
)

4546 *--
q
 = *--
p
;

4547 ; 
∑d
 > 0;Öad--)

4548 *
p
++ = ' ';

4551 
p
 = 
íd
;

4555 
size_t
 
cou¡
 = 
p
 - 
tmp
;

4557 i‡(
cou¡
 >
tmp_Àngth
)

4560 
	`ab‹t
 ();

4563 i‡(
cou¡
 >
Æloˇãd
 - 
Àngth
)

4565 
size_t
 
n
 = 
	`xsum
 (
Àngth
, 
cou¡
);

4567 
	`ENSURE_ALLOCATION
 (
n
);

4571 
	`mem˝y
 (
ªsu…
 + 
Àngth
, 
tmp
, 
cou¡
 *  (
DCHAR_T
));

4572 i‡(
tmp
 !
tmpbuf
)

4573 
	`‰ì
 (
tmp
);

4574 
Àngth
 +
cou¡
;

4580 
¨g_ty≥
 
ty≥
 = 
a
.
¨g
[
dp
->
¨g_ödex
].type;

4581 
Êags
 = 
dp
->flags;

4582 #i‡!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
 || !
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO
 || 
NEED_PRINTF_FLAG_LEFTADJUST
 || 
NEED_PRINTF_FLAG_ZERO
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


4583 
has_width
;

4584 
size_t
 
width
;

4586 #i‡!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


4587 
has_¥ecisi⁄
;

4588 
size_t
 
¥ecisi⁄
;

4590 #i‡
NEED_PRINTF_UNBOUNDED_PRECISION


4591 
¥ec_our£lves
;

4593 
	#¥ec_our£lves
 0

	)

4595 #i‡
NEED_PRINTF_FLAG_LEFTADJUST


4596 
	#∑d_our£lves
 1

	)

4597 #ñi‡!
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO
 || 
NEED_PRINTF_FLAG_ZERO
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


4598 
∑d_our£lves
;

4600 
	#∑d_our£lves
 0

	)

4602 
TCHAR_T
 *
fbp
;

4603 
¥efix_cou¡
;

4604 
¥efixes
[2] 
	`IF_LINT
 (= { 0 });

4605 
‹ig_î∫o
;

4606 #i‡!
USE_SNPRINTF


4607 
size_t
 
tmp_Àngth
;

4608 
TCHAR_T
 
tmpbuf
[700];

4609 
TCHAR_T
 *
tmp
;

4612 #i‡!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
 || !
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO
 || 
NEED_PRINTF_FLAG_LEFTADJUST
 || 
NEED_PRINTF_FLAG_ZERO
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


4613 
has_width
 = 0;

4614 
width
 = 0;

4615 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

4617 i‡(
dp
->
width_¨g_ödex
 !
ARG_NONE
)

4619 
¨g
;

4621 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

4622 
	`ab‹t
 ();

4623 
¨g
 = 
a
.¨g[
dp
->
width_¨g_ödex
].a.
a_öt
;

4624 i‡(
¨g
 < 0)

4628 
Êags
 |
FLAG_LEFT
;

4629 
width
 = (Ë(-
¨g
);

4632 
width
 = 
¨g
;

4636 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
width_°¨t
;

4639 
width
 = 
	`xsum
 (
	`xtimes
 (width, 10), *
digôp
++ - '0');

4640 
digôp
 !
dp
->
width_íd
);

4642 
has_width
 = 1;

4646 #i‡!
USE_SNPRINTF
 || !
HAVE_SNPRINTF_RETVAL_C99
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


4647 
has_¥ecisi⁄
 = 0;

4648 
¥ecisi⁄
 = 6;

4649 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

4651 i‡(
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

4653 
¨g
;

4655 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

4656 
	`ab‹t
 ();

4657 
¨g
 = 
a
.¨g[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

4660 i‡(
¨g
 >= 0)

4662 
¥ecisi⁄
 = 
¨g
;

4663 
has_¥ecisi⁄
 = 1;

4668 c⁄° 
FCHAR_T
 *
digôp
 = 
dp
->
¥ecisi⁄_°¨t
 + 1;

4670 
¥ecisi⁄
 = 0;

4671 
digôp
 !
dp
->
¥ecisi⁄_íd
)

4672 
¥ecisi⁄
 = 
	`xsum
 (
	`xtimes
 (¥ecisi⁄, 10), *
digôp
++ - '0');

4673 
has_¥ecisi⁄
 = 1;

4679 #i‡
NEED_PRINTF_UNBOUNDED_PRECISION


4680 
dp
->
c⁄vîsi⁄
)

4685 
¥ec_our£lves
 = 
has_¥ecisi⁄
 && (
¥ecisi⁄
 > 0);

4688 
¥ec_our£lves
 = 0;

4694 #i‡!
NEED_PRINTF_FLAG_LEFTADJUST
 && (!
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO
 || 
NEED_PRINTF_FLAG_ZERO
 || 
NEED_PRINTF_UNBOUNDED_PRECISION
)

4695 
dp
->
c⁄vîsi⁄
)

4697 #i‡!
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO


4704 #i‡
NEED_PRINTF_FLAG_ZERO


4708 
∑d_our£lves
 = 1;

4711 
∑d_our£lves
 = 
¥ec_our£lves
;

4716 #i‡!
USE_SNPRINTF


4719 
tmp_Àngth
 =

4720 
	`MAX_ROOM_NEEDED
 (&
a
, 
dp
->
¨g_ödex
, dp->
c⁄vîsi⁄
, 
ty≥
,

4721 
Êags
, 
width
, 
has_¥ecisi⁄
, 
¥ecisi⁄
,

4722 
∑d_our£lves
);

4724 i‡(
tmp_Àngth
 < (
tmpbuf
Ë/  (
TCHAR_T
))

4725 
tmp
 = 
tmpbuf
;

4728 
size_t
 
tmp_memsize
 = 
	`xtimes
 (
tmp_Àngth
,  (
TCHAR_T
));

4730 i‡(
	`size_ovîÊow_p
 (
tmp_memsize
))

4732 
out_of_mem‹y
;

4733 
tmp
 = (
TCHAR_T
 *Ë
	`mÆloc
 (
tmp_memsize
);

4734 i‡(
tmp
 =
NULL
)

4736 
out_of_mem‹y
;

4742 
fbp
 = 
buf
;

4743 *
fbp
++ = '%';

4744 #i‡
NEED_PRINTF_FLAG_GROUPING


4749 i‡(
Êags
 & 
FLAG_GROUP
)

4750 *
fbp
++ = '\'';

4752 i‡(
Êags
 & 
FLAG_LEFT
)

4753 *
fbp
++ = '-';

4754 i‡(
Êags
 & 
FLAG_SHOWSIGN
)

4755 *
fbp
++ = '+';

4756 i‡(
Êags
 & 
FLAG_SPACE
)

4757 *
fbp
++ = ' ';

4758 i‡(
Êags
 & 
FLAG_ALT
)

4759 *
fbp
++ = '#';

4760 #i‡
__GLIBC__
 >2 && !
deföed
 
__UCLIBC__


4761 i‡(
Êags
 & 
FLAG_LOCALIZED
)

4762 *
fbp
++ = 'I';

4764 i‡(!
∑d_our£lves
)

4766 i‡(
Êags
 & 
FLAG_ZERO
)

4767 *
fbp
++ = '0';

4768 i‡(
dp
->
width_°¨t
 !dp->
width_íd
)

4770 
size_t
 
n
 = 
dp
->
width_íd
 - dp->
width_°¨t
;

4773 i‡( (
FCHAR_T
Ë= (
TCHAR_T
))

4775 
	`mem˝y
 (
fbp
, 
dp
->
width_°¨t
, 
n
 *  (
TCHAR_T
));

4776 
fbp
 +
n
;

4780 c⁄° 
FCHAR_T
 *
mp
 = 
dp
->
width_°¨t
;

4782 *
fbp
++ = (Ë*
mp
++;

4783 --
n
 > 0);

4787 i‡(!
¥ec_our£lves
)

4789 i‡(
dp
->
¥ecisi⁄_°¨t
 !dp->
¥ecisi⁄_íd
)

4791 
size_t
 
n
 = 
dp
->
¥ecisi⁄_íd
 - dp->
¥ecisi⁄_°¨t
;

4794 i‡( (
FCHAR_T
Ë= (
TCHAR_T
))

4796 
	`mem˝y
 (
fbp
, 
dp
->
¥ecisi⁄_°¨t
, 
n
 *  (
TCHAR_T
));

4797 
fbp
 +
n
;

4801 c⁄° 
FCHAR_T
 *
mp
 = 
dp
->
¥ecisi⁄_°¨t
;

4803 *
fbp
++ = (Ë*
mp
++;

4804 --
n
 > 0);

4809 
ty≥
)

4811 #i‡
HAVE_LONG_LONG_INT


4812 
TYPE_LONGLONGINT
:

4813 
TYPE_ULONGLONGINT
:

4814 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


4815 *
fbp
++ = 'I';

4816 *
fbp
++ = '6';

4817 *
fbp
++ = '4';

4820 *
fbp
++ = 'l';

4824 
TYPE_LONGINT
:

4825 
TYPE_ULONGINT
:

4826 #i‡
HAVE_WINT_T


4827 
TYPE_WIDE_CHAR
:

4829 #i‡
HAVE_WCHAR_T


4830 
TYPE_WIDE_STRING
:

4832 *
fbp
++ = 'l';

4834 
TYPE_LONGDOUBLE
:

4835 *
fbp
++ = 'L';

4840 #i‡
NEED_PRINTF_DIRECTIVE_F


4841 i‡(
dp
->
c⁄vîsi⁄
 == 'F')

4842 *
fbp
 = 'f';

4845 *
fbp
 = 
dp
->
c⁄vîsi⁄
;

4846 #i‡
USE_SNPRINTF


4847 #i‡!(((
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >3)Ë&& !
deföed
 
__UCLIBC__
Ë|| ((deföed 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__
))

4848 
fbp
[1] = '%';

4849 
fbp
[2] = 'n';

4850 
fbp
[3] = '\0';

4876 
fbp
[1] = '\0';

4879 
fbp
[1] = '\0';

4883 
¥efix_cou¡
 = 0;

4884 i‡(!
∑d_our£lves
 && 
dp
->
width_¨g_ödex
 !
ARG_NONE
)

4886 i‡(!(
a
.
¨g
[
dp
->
width_¨g_ödex
].
ty≥
 =
TYPE_INT
))

4887 
	`ab‹t
 ();

4888 
¥efixes
[
¥efix_cou¡
++] = 
a
.
¨g
[
dp
->
width_¨g_ödex
].a.
a_öt
;

4890 i‡(!
¥ec_our£lves
 && 
dp
->
¥ecisi⁄_¨g_ödex
 !
ARG_NONE
)

4892 i‡(!(
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].
ty≥
 =
TYPE_INT
))

4893 
	`ab‹t
 ();

4894 
¥efixes
[
¥efix_cou¡
++] = 
a
.
¨g
[
dp
->
¥ecisi⁄_¨g_ödex
].a.
a_öt
;

4897 #i‡
USE_SNPRINTF


4903 
	#TCHARS_PER_DCHAR
 ( (
DCHAR_T
Ë/  (
TCHAR_T
))

	)

4906 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
,

4907 (2 + 
TCHARS_PER_DCHAR
 - 1)

4908 / 
TCHARS_PER_DCHAR
));

4911 *(
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
) = '\0';

4914 
‹ig_î∫o
 = 
î∫o
;

4918 
cou¡
 = -1;

4920 #i‡
USE_SNPRINTF


4921 
ªtcou¡
 = 0;

4922 
size_t
 
maxÀn
 = 
Æloˇãd
 - 
Àngth
;

4925 i‡(
maxÀn
 > 
INT_MAX
 / 
TCHARS_PER_DCHAR
)

4926 
maxÀn
 = 
INT_MAX
 / 
TCHARS_PER_DCHAR
;

4927 
maxÀn
 = maxÀ¿* 
TCHARS_PER_DCHAR
;

4928 
	#SNPRINTF_BUF
(
¨g
) \

4929 
¥efix_cou¡
) \

4932 
ªtcou¡
 = 
	`SNPRINTF
 ((
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
), \

4933 
maxÀn
, 
buf
, \

4934 
¨g
, &
cou¡
); \

4937 
ªtcou¡
 = 
	`SNPRINTF
 ((
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
), \

4938 
maxÀn
, 
buf
, \

4939 
¥efixes
[0], 
¨g
, &
cou¡
); \

4942 
ªtcou¡
 = 
	`SNPRINTF
 ((
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
), \

4943 
maxÀn
, 
buf
, \

4944 
¥efixes
[0],Öªfixes[1], 
¨g
, \

4945 &
cou¡
); \

4948 
	`ab‹t
 (); \

4949 }

	)

4951 
	#SNPRINTF_BUF
(
¨g
) \

4952 
¥efix_cou¡
) \

4955 
cou¡
 = 
	`•rötf
 (
tmp
, 
buf
, 
¨g
); \

4958 
cou¡
 = 
	`•rötf
 (
tmp
, 
buf
, 
¥efixes
[0], 
¨g
); \

4961 
cou¡
 = 
	`•rötf
 (
tmp
, 
buf
, 
¥efixes
[0],Örefixes[1],\

4962 
¨g
); \

4965 
	`ab‹t
 (); \

4966 }

	)

4969 
î∫o
 = 0;

4970 
ty≥
)

4972 
TYPE_SCHAR
:

4974 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_sch¨
;

4975 
	`SNPRINTF_BUF
 (
¨g
);

4978 
TYPE_UCHAR
:

4980 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_uch¨
;

4981 
	`SNPRINTF_BUF
 (
¨g
);

4984 
TYPE_SHORT
:

4986 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_sh‹t
;

4987 
	`SNPRINTF_BUF
 (
¨g
);

4990 
TYPE_USHORT
:

4992 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_ush‹t
;

4993 
	`SNPRINTF_BUF
 (
¨g
);

4996 
TYPE_INT
:

4998 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_öt
;

4999 
	`SNPRINTF_BUF
 (
¨g
);

5002 
TYPE_UINT
:

5004 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_uöt
;

5005 
	`SNPRINTF_BUF
 (
¨g
);

5008 
TYPE_LONGINT
:

5010 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄göt
;

5011 
	`SNPRINTF_BUF
 (
¨g
);

5014 
TYPE_ULONGINT
:

5016 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_ul⁄göt
;

5017 
	`SNPRINTF_BUF
 (
¨g
);

5020 #i‡
HAVE_LONG_LONG_INT


5021 
TYPE_LONGLONGINT
:

5023 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄gl⁄göt
;

5024 
	`SNPRINTF_BUF
 (
¨g
);

5027 
TYPE_ULONGLONGINT
:

5029 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_ul⁄gl⁄göt
;

5030 
	`SNPRINTF_BUF
 (
¨g
);

5034 
TYPE_DOUBLE
:

5036 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_doubÀ
;

5037 
	`SNPRINTF_BUF
 (
¨g
);

5040 
TYPE_LONGDOUBLE
:

5042 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_l⁄gdoubÀ
;

5043 
	`SNPRINTF_BUF
 (
¨g
);

5046 
TYPE_CHAR
:

5048 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_ch¨
;

5049 
	`SNPRINTF_BUF
 (
¨g
);

5052 #i‡
HAVE_WINT_T


5053 
TYPE_WIDE_CHAR
:

5055 
wöt_t
 
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_wide_ch¨
;

5056 
	`SNPRINTF_BUF
 (
¨g
);

5060 
TYPE_STRING
:

5062 c⁄° *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_°rög
;

5063 
	`SNPRINTF_BUF
 (
¨g
);

5066 #i‡
HAVE_WCHAR_T


5067 
TYPE_WIDE_STRING
:

5069 c⁄° 
wch¨_t
 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_wide_°rög
;

5070 
	`SNPRINTF_BUF
 (
¨g
);

5074 
TYPE_POINTER
:

5076 *
¨g
 = 
a
.¨g[
dp
->
¨g_ödex
].a.
a_poöãr
;

5077 
	`SNPRINTF_BUF
 (
¨g
);

5081 
	`ab‹t
 ();

5084 #i‡
USE_SNPRINTF


5089 i‡(
cou¡
 >= 0)

5093 i‡(
cou¡
 < 
maxÀn


5094 && ((
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
)Ë[
cou¡
] != '\0')

5095 
	`ab‹t
 ();

5097 i‡(
ªtcou¡
 > 
cou¡
)

5098 
cou¡
 = 
ªtcou¡
;

5104 i‡(
fbp
[1] != '\0')

5108 
fbp
[1] = '\0';

5114 i‡(
ªtcou¡
 < 0)

5116 #i‡!
HAVE_SNPRINTF_RETVAL_C99


5127 
size_t
 
tmp_Àngth
 =

5128 
	`MAX_ROOM_NEEDED
 (&
a
, 
dp
->
¨g_ödex
,

5129 
dp
->
c⁄vîsi⁄
, 
ty≥
, 
Êags
,

5130 
width
, 
has_¥ecisi⁄
,

5131 
¥ecisi⁄
, 
∑d_our£lves
);

5133 i‡(
maxÀn
 < 
tmp_Àngth
)

5137 
size_t
 
biggî_√ed
 =

5138 
	`xsum
 (
Àngth
,

5139 
	`xsum
 (
tmp_Àngth
,

5140 
TCHARS_PER_DCHAR
 - 1)

5141 / 
TCHARS_PER_DCHAR
);

5146 
size_t
 
biggî_√ed2
 =

5147 
	`xsum
 (
	`xtimes
 (
Æloˇãd
, 2), 12);

5148 i‡(
biggî_√ed
 < 
biggî_√ed2
)

5149 
biggî_√ed
 = 
biggî_√ed2
;

5150 
	`ENSURE_ALLOCATION
 (
biggî_√ed
);

5156 
cou¡
 = 
ªtcou¡
;

5162 i‡(
cou¡
 < 0)

5166 
ßved_î∫o
 = 
î∫o
;

5168 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

5169 
	`‰ì
 (
ªsu…
);

5170 i‡(
buf_mÆlo˚d
 !
NULL
)

5171 
	`‰ì
 (
buf_mÆlo˚d
);

5172 
	`CLEANUP
 ();

5173 
î∫o
 =

5174 (
ßved_î∫o
 != 0

5175 ? 
ßved_î∫o


5176 : (
dp
->
c⁄vîsi⁄
 == 'c' || dp->conversion == 's'

5177 ? 
EILSEQ


5178 : 
EINVAL
));

5179  
NULL
;

5182 #i‡
USE_SNPRINTF


5188 i‡((Ë
cou¡
 + 1 >
maxÀn
)

5193 i‡(
maxÀn
 =
INT_MAX
 / 
TCHARS_PER_DCHAR
)

5194 
ovîÊow
;

5206 
size_t
 
n
 =

5207 
	`xmax
 (
	`xsum
 (
Àngth
,

5208 ((Ë
cou¡
 + 2

5209 + 
TCHARS_PER_DCHAR
 - 1)

5210 / 
TCHARS_PER_DCHAR
),

5211 
	`xtimes
 (
Æloˇãd
, 2));

5213 
	`ENSURE_ALLOCATION
 (
n
);

5219 #i‡
NEED_PRINTF_UNBOUNDED_PRECISION


5220 i‡(
¥ec_our£lves
)

5223 
TCHAR_T
 *
¥ec_±r
 =

5224 #i‡
USE_SNPRINTF


5225 (
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
);

5227 
tmp
;

5229 
size_t
 
¥efix_cou¡
;

5230 
size_t
 
move
;

5232 
¥efix_cou¡
 = 0;

5234 i‡(
cou¡
 >= 1

5235 && (*
¥ec_±r
 == '-' || *prec_ptr == '+'

5236 || *
¥ec_±r
 == ' '))

5237 
¥efix_cou¡
 = 1;

5240 i‡(
cou¡
 >= 2

5241 && 
¥ec_±r
[0] == '0'

5242 && (
¥ec_±r
[1] == 'x' ||Örec_ptr[1] == 'X'))

5243 
¥efix_cou¡
 = 2;

5245 
move
 = 
cou¡
 - 
¥efix_cou¡
;

5246 i‡(
¥ecisi⁄
 > 
move
)

5249 
size_t
 
ö£π
 = 
¥ecisi⁄
 - 
move
;

5250 
TCHAR_T
 *
¥ec_íd
;

5252 #i‡
USE_SNPRINTF


5253 
size_t
 
n
 =

5254 
	`xsum
 (
Àngth
,

5255 (
cou¡
 + 
ö£π
 + 
TCHARS_PER_DCHAR
 - 1)

5256 / 
TCHARS_PER_DCHAR
);

5257 
Àngth
 +(
cou¡
 + 
TCHARS_PER_DCHAR
 - 1) / TCHARS_PER_DCHAR;

5258 
	`ENSURE_ALLOCATION
 (
n
);

5259 
Àngth
 -(
cou¡
 + 
TCHARS_PER_DCHAR
 - 1) / TCHARS_PER_DCHAR;

5260 
¥ec_±r
 = (
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
);

5263 
¥ec_íd
 = 
¥ec_±r
 + 
cou¡
;

5264 
¥ec_±r
 +
¥efix_cou¡
;

5266 
¥ec_íd
 > 
¥ec_±r
)

5268 
¥ec_íd
--;

5269 
¥ec_íd
[
ö£π
] =Örec_end[0];

5272 
¥ec_íd
 +
ö£π
;

5274 *--
¥ec_íd
 = '0';

5275 
¥ec_íd
 > 
¥ec_±r
);

5277 
cou¡
 +
ö£π
;

5282 #i‡!
USE_SNPRINTF


5283 i‡(
cou¡
 >
tmp_Àngth
)

5286 
	`ab‹t
 ();

5289 #i‡!
DCHAR_IS_TCHAR


5291 i‡(
dp
->
c⁄vîsi⁄
 == 'c' || dp->conversion == 's')

5296 c⁄° 
TCHAR_T
 *
tmp§c
;

5297 
DCHAR_T
 *
tmpd°
;

5298 
size_t
 
tmpd°_Àn
;

5300 
	`vîify
 ( (
TCHAR_T
) == 1);

5301 #i‡
USE_SNPRINTF


5302 
tmp§c
 = (
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
);

5304 
tmp§c
 = 
tmp
;

5306 
tmpd°
 =

5307 
	`DCHAR_CONV_FROM_ENCODING
 (
	`loˇÀ_ch¨£t
 (),

5308 
ic⁄veh_que°i⁄_m¨k
,

5309 
tmp§c
, 
cou¡
,

5310 
NULL
,

5311 
NULL
, &
tmpd°_Àn
);

5312 i‡(
tmpd°
 =
NULL
)

5314 
ßved_î∫o
 = 
î∫o
;

5315 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

5316 
	`‰ì
 (
ªsu…
);

5317 i‡(
buf_mÆlo˚d
 !
NULL
)

5318 
	`‰ì
 (
buf_mÆlo˚d
);

5319 
	`CLEANUP
 ();

5320 
î∫o
 = 
ßved_î∫o
;

5321  
NULL
;

5323 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
tmpd°_Àn
));

5324 
	`DCHAR_CPY
 (
ªsu…
 + 
Àngth
, 
tmpd°
, 
tmpd°_Àn
);

5325 
	`‰ì
 (
tmpd°
);

5326 
cou¡
 = 
tmpd°_Àn
;

5332 #i‡
USE_SNPRINTF


5336 i‡( (
DCHAR_T
Ë! (
TCHAR_T
))

5339 c⁄° 
TCHAR_T
 *
tmp§c
;

5340 
DCHAR_T
 *
tmpd°
;

5341 
size_t
 
n
;

5343 #i‡
USE_SNPRINTF


5344 i‡(
ªsu…
 =
ªsu…buf
)

5346 
tmp§c
 = (
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
);

5349 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
cou¡
));

5355 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
cou¡
));

5356 
tmp§c
 = (
TCHAR_T
 *Ë(
ªsu…
 + 
Àngth
);

5359 
tmp§c
 = 
tmp
;

5360 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 
cou¡
));

5362 
tmpd°
 = 
ªsu…
 + 
Àngth
;

5364 
tmp§c
 +
cou¡
;

5365 
tmpd°
 +
cou¡
;

5366 
n
 = 
cou¡
;Ç > 0;Ç--)

5367 *--
tmpd°
 = (Ë*--
tmp§c
;

5372 #i‡
DCHAR_IS_TCHAR
 && !
USE_SNPRINTF


5374 i‡(
cou¡
 > 
Æloˇãd
 - 
Àngth
)

5378 
size_t
 
n
 =

5379 
	`xmax
 (
	`xsum
 (
Àngth
, 
cou¡
), 
	`xtimes
 (
Æloˇãd
, 2));

5381 
	`ENSURE_ALLOCATION
 (
n
);

5388 #i‡!
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO
 || 
NEED_PRINTF_FLAG_LEFTADJUST
 || 
NEED_PRINTF_FLAG_ZERO
 || 
NEED_PRINTF_UNBOUNDED_PRECISION


5389 i‡(
∑d_our£lves
 && 
has_width
)

5391 
size_t
 
w
;

5392 #i‡
ENABLE_UNISTDIO


5396 
w
 = 
	`DCHAR_MBSNLEN
 (
ªsu…
 + 
Àngth
, 
cou¡
);

5400 
w
 = 
cou¡
;

5402 i‡(
w
 < 
width
)

5404 
size_t
 
∑d
 = 
width
 - 
w
;

5407 i‡(
	`xsum
 (
cou¡
, 
∑d
Ë> 
Æloˇãd
 - 
Àngth
)

5411 
size_t
 
n
 =

5412 
	`xmax
 (
	`xsum3
 (
Àngth
, 
cou¡
, 
∑d
),

5413 
	`xtimes
 (
Æloˇãd
, 2));

5415 #i‡
USE_SNPRINTF


5416 
Àngth
 +
cou¡
;

5417 
	`ENSURE_ALLOCATION
 (
n
);

5418 
Àngth
 -
cou¡
;

5420 
	`ENSURE_ALLOCATION
 (
n
);

5426 #i‡!
DCHAR_IS_TCHAR
 || 
USE_SNPRINTF


5427 
DCHAR_T
 * c⁄° 
Ω
 = 
ªsu…
 + 
Àngth
;

5429 
DCHAR_T
 * c⁄° 
Ω
 = 
tmp
;

5431 
DCHAR_T
 *
p
 = 
Ω
 + 
cou¡
;

5432 
DCHAR_T
 *
íd
 = 
p
 + 
∑d
;

5433 
DCHAR_T
 *
∑d_±r
;

5434 #i‡!
DCHAR_IS_TCHAR
 || 
ENABLE_UNISTDIO


5435 i‡(
dp
->
c⁄vîsi⁄
 == 'c'

5436 || 
dp
->
c⁄vîsi⁄
 == 's')

5438 
∑d_±r
 = 
NULL
;

5442 
∑d_±r
 = (*
Ω
 == '-' ?Ñp + 1 :Ñp);

5444 i‡((*
∑d_±r
 >= 'A' && *pad_ptr <= 'Z')

5445 || (*
∑d_±r
 >= 'a' && *pad_ptr <= 'z'))

5446 
∑d_±r
 = 
NULL
;

5452 
cou¡
 = cou¡ + 
∑d
;

5454 i‡(
Êags
 & 
FLAG_LEFT
)

5457 ; 
∑d
 > 0;Öad--)

5458 *
p
++ = ' ';

5460 i‡((
Êags
 & 
FLAG_ZERO
Ë&& 
∑d_±r
 !
NULL
)

5463 
DCHAR_T
 *
q
 = 
íd
;

5465 
p
 > 
∑d_±r
)

5466 *--
q
 = *--
p
;

5467 ; 
∑d
 > 0;Öad--)

5468 *
p
++ = '0';

5473 
DCHAR_T
 *
q
 = 
íd
;

5475 
p
 > 
Ω
)

5476 *--
q
 = *--
p
;

5477 ; 
∑d
 > 0;Öad--)

5478 *
p
++ = ' ';

5487 #i‡!
DCHAR_IS_TCHAR
 || 
USE_SNPRINTF


5491 
	`mem˝y
 (
ªsu…
 + 
Àngth
, 
tmp
, 
cou¡
 *  (
DCHAR_T
));

5493 #i‡!
USE_SNPRINTF


5494 i‡(
tmp
 !
tmpbuf
)

5495 
	`‰ì
 (
tmp
);

5498 #i‡
NEED_PRINTF_DIRECTIVE_F


5499 i‡(
dp
->
c⁄vîsi⁄
 == 'F')

5502 
DCHAR_T
 *
Ω
 = 
ªsu…
 + 
Àngth
;

5503 
size_t
 
rc
;

5504 
rc
 = 
cou¡
;Ñ¯> 0;Ñc--, 
Ω
++)

5505 i‡(*
Ω
 >= 'a' && *rp <= 'z')

5506 *
Ω
 = *rp - 'a' + 'A';

5510 
Àngth
 +
cou¡
;

5513 
î∫o
 = 
‹ig_î∫o
;

5514 #unde‡
∑d_our£lves


5515 #unde‡
¥ec_our£lves


5521 
	`ENSURE_ALLOCATION
 (
	`xsum
 (
Àngth
, 1));

5522 
ªsu…
[
Àngth
] = '\0';

5524 i‡(
ªsu…
 !
ªsu…buf
 && 
Àngth
 + 1 < 
Æloˇãd
)

5527 
DCHAR_T
 *
mem‹y
;

5529 
mem‹y
 = (
DCHAR_T
 *Ë
	`ªÆloc
 (
ªsu…
, (
Àngth
 + 1) *  (DCHAR_T));

5530 i‡(
mem‹y
 !
NULL
)

5531 
ªsu…
 = 
mem‹y
;

5534 i‡(
buf_mÆlo˚d
 !
NULL
)

5535 
	`‰ì
 (
buf_mÆlo˚d
);

5536 
	`CLEANUP
 ();

5537 *
Àngthp
 = 
Àngth
;

5542  
ªsu…
;

5544 #i‡
USE_SNPRINTF


5545 
ovîÊow
:

5546 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

5547 
	`‰ì
 (
ªsu…
);

5548 i‡(
buf_mÆlo˚d
 !
NULL
)

5549 
	`‰ì
 (
buf_mÆlo˚d
);

5550 
	`CLEANUP
 ();

5551 
î∫o
 = 
EOVERFLOW
;

5552  
NULL
;

5555 
out_of_mem‹y
:

5556 i‡(!(
ªsu…
 =
ªsu…buf
 ||Ñesu… =
NULL
))

5557 
	`‰ì
 (
ªsu…
);

5558 i‡(
buf_mÆlo˚d
 !
NULL
)

5559 
	`‰ì
 (
buf_mÆlo˚d
);

5560 
out_of_mem‹y_1
:

5561 
	`CLEANUP
 ();

5562 
î∫o
 = 
ENOMEM
;

5563  
NULL
;

5565 
	}
}

5567 #unde‡
MAX_ROOM_NEEDED


5568 #unde‡
TCHARS_PER_DCHAR


5569 #unde‡
SNPRINTF


5570 #unde‡
USE_SNPRINTF


5571 #unde‡
DCHAR_SET


5572 #unde‡
DCHAR_CPY


5573 #unde‡
PRINTF_PARSE


5574 #unde‡
DIRECTIVES


5575 #unde‡
DIRECTIVE


5576 #unde‡
DCHAR_IS_TCHAR


5577 #unde‡
TCHAR_T


5578 #unde‡
DCHAR_T


5579 #unde‡
FCHAR_T


5580 #unde‡
VASNPRINTF


	@lib/vasnprintf.h

20 #i‚de‡
_VASNPRINTF_H


21 
	#_VASNPRINTF_H


	)

24 
	~<°d¨g.h
>

27 
	~<°ddef.h
>

35 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 7)

36 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë
	`__©åibuã__
 ((
__f‹m©__
 s≥c))

	)

38 
	#_GL_ATTRIBUTE_FORMAT
(
•ec
Ë

	)

41 #ifde‡
__˝lu•lus


69 #i‡
REPLACE_VASNPRINTF


70 
	#a¢¥ötf
 
Ωl_a¢¥ötf


	)

71 
	#va¢¥ötf
 
Ωl_va¢¥ötf


	)

73 * 
a¢¥ötf
 (*
ªsu…buf
, 
size_t
 *
Àngthp
, c⁄° *
f‹m©
, ...)

74 
_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 3, 4));

75 * 
va¢¥ötf
 (*
ªsu…buf
, 
size_t
 *
Àngthp
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

76 
_GL_ATTRIBUTE_FORMAT
 ((
__¥ötf__
, 3, 0));

78 #ifde‡
__˝lu•lus


	@lib/vasprintf.c

20 
	~<c⁄fig.h
>

23 #ifde‡
IN_LIBASPRINTF


24 
	~"va•rötf.h
"

26 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<limôs.h
>

31 
	~<°dlib.h
>

33 
	~"va¢¥ötf.h
"

36 
	$va•rötf
 (**
ªsu…p
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

38 
size_t
 
Àngth
;

39 *
ªsu…
 = 
	`va¢¥ötf
 (
NULL
, &
Àngth
, 
f‹m©
, 
¨gs
);

40 i‡(
ªsu…
 =
NULL
)

43 i‡(
Àngth
 > 
INT_MAX
)

45 
	`‰ì
 (
ªsu…
);

46 
î∫o
 = 
EOVERFLOW
;

50 *
ªsu…p
 = 
ªsu…
;

52  
Àngth
;

53 
	}
}

	@lib/verify.h

20 #i‚de‡
_GL_VERIFY_H


21 
	#_GL_VERIFY_H


	)

36 #i‡(4 < 
__GNUC__
 || (__GNUC__ =4 && 6 <
__GNUC_MINOR__
)Ë&& !
deföed
 
__˝lu•lus


37 
	#_GL_HAVE__STATIC_ASSERT
 1

	)

41 #i‡(99 < 
__GNUC__
Ë&& 
deföed
 
__˝lu•lus


42 
	#_GL_HAVE_STATIC_ASSERT
 1

	)

142 
	#_GL_CONCAT
(
x
, 
y
Ë
	`_GL_CONCAT0
 (x, y)

	)

143 
	#_GL_CONCAT0
(
x
, 
y
Ëx##
	)
y

149 #i‡
deföed
 
__COUNTER__
 && __COUNTER__ != __COUNTER__

150 
	#_GL_COUNTER
 
__COUNTER__


	)

152 
	#_GL_COUNTER
 
__LINE__


	)

157 
	#_GL_GENSYM
(
¥efix
Ë
	`_GL_CONCAT
 (¥efix, 
_GL_COUNTER
)

	)

163 
	#_GL_VERIFY_TRUE
(
R
, 
DIAGNOSTIC
) \

164 (!! (
	`_GL_VERIFY_TYPE
 (
R
, 
DIAGNOSTIC
)))

	)

166 #ifde‡
__˝lu•lus


167 #i‡!
GNULIB_deföed_°ru˘__gl_vîify_ty≥


168 
	gãm∂©e
 <
	gw
>

169 
	s_gl_vîify_ty≥
 {

170 
	m_gl_vîify_îr‹_if_√g©ive
: 
w
;

172 
	#GNULIB_deföed_°ru˘__gl_vîify_ty≥
 1

	)

174 
	#_GL_VERIFY_TYPE
(
R
, 
DIAGNOSTIC
) \

175 
_gl_vîify_ty≥
<(
R
Ë? 1 : -1>

	)

176 #ñi‡
deföed
 
_GL_HAVE__STATIC_ASSERT


177 
	#_GL_VERIFY_TYPE
(
R
, 
DIAGNOSTIC
) \

179 
	`_Sètic_as£π
 (
R
, 
DIAGNOSTIC
); \

180 
_gl_dummy
; \

181 }

	)

183 
	#_GL_VERIFY_TYPE
(
R
, 
DIAGNOSTIC
) \

184 °ru˘ { 
_gl_vîify_îr‹_if_√g©ive
: (
R
Ë? 1 : -1; }

	)

194 #ifde‡
_GL_HAVE__STATIC_ASSERT


195 
	#_GL_VERIFY
 
_Sètic_as£π


	)

197 
	#_GL_VERIFY
(
R
, 
DIAGNOSTIC
) \

198 (*
	`_GL_GENSYM
 (
_gl_vîify_fun˘i⁄
) ()) \

199 [
	`_GL_VERIFY_TRUE
 (
R
, 
DIAGNOSTIC
)]

	)

203 #ifde‡
_GL_STATIC_ASSERT_H


204 #i‡!
deföed
 
_GL_HAVE__STATIC_ASSERT
 && !deföed 
_Sètic_as£π


205 
	#_Sètic_as£π
(
R
, 
DIAGNOSTIC
Ë
	`_GL_VERIFY
 (R, DIAGNOSTIC)

	)

207 #i‡!
deföed
 
_GL_HAVE_STATIC_ASSERT
 && !deföed 
°©ic_as£π


208 
	#°©ic_as£π
 
_Sètic_as£π


	)

228 
	#vîify_åue
(
R
Ë
	`_GL_VERIFY_TRUE
 (R, "vîify_åuê(" #R ")")

	)

233 
	#vîify_ex¥
(
R
, 
E
) \

234 (
	`_GL_VERIFY_TRUE
 (
R
, "vîify_ex¥ (" #R ", " #E ")"Ë? (
E
Ë: (E))

	)

239 
	#vîify
(
R
Ë
	`_GL_VERIFY
 (R, "vîify (" #R ")")

	)

	@lib/w32sock.h

20 
	~<î∫o.h
>

23 
	~<f˙é.h
>

26 
	~<io.h
>

28 
	#FD_TO_SOCKET
(
fd
Ë((
SOCKET
Ë
	`_gë_osfh™dÀ
 ((fd)))

	)

29 
	#SOCKET_TO_FD
(
fh
Ë(
	`_›í_osfh™dÀ
 ((Ë(fh), 
O_RDWR
 | 
O_BINARY
))

	)

31 
ölöe
 

32 
	$£t_wösock_î∫o
 ()

34 
îr
 = 
	`WSAGëLa°Eº‹
 ();

37 
îr
)

39 
WSA_INVALID_HANDLE
:

40 
î∫o
 = 
EBADF
;

42 
WSA_NOT_ENOUGH_MEMORY
:

43 
î∫o
 = 
ENOMEM
;

45 
WSA_INVALID_PARAMETER
:

46 
î∫o
 = 
EINVAL
;

48 
WSAEWOULDBLOCK
:

49 
î∫o
 = 
EWOULDBLOCK
;

51 
WSAENAMETOOLONG
:

52 
î∫o
 = 
ENAMETOOLONG
;

54 
WSAENOTEMPTY
:

55 
î∫o
 = 
ENOTEMPTY
;

58 
î∫o
 = (
îr
 > 10000 &&Érr < 10025) ?Érr - 10000 :Érr;

61 
	}
}

	@lib/w32spawn.h

19 
	#WIN32_LEAN_AND_MEAN


	)

20 
	~<wödows.h
>

23 
	~<io.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

30 
	~"˛€xec.h
"

31 
	~"xÆloc.h
"

36 
	$dup_noöhîô
 (
fd
)

38 
fd
 = 
	`dup_˛€xec
 (fd);

39 i‡(
fd
 < 0 && 
î∫o
 =
EMFILE
)

40 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("_open_osfhandle failed"));

42  
fd
;

43 
	}
}

51 
	$fd_ß„r_noöhîô
 (
fd
)

53 i‡(
STDIN_FILENO
 <
fd
 && fd <
STDERR_FILENO
)

56 
nfd
 = 
	`fd_ß„r_noöhîô
 (
	`dup_noöhîô
 (
fd
));

57 
ßved_î∫o
 = 
î∫o
;

58 
	`˛o£
 (
fd
);

59 
î∫o
 = 
ßved_î∫o
;

60  
nfd
;

62  
fd
;

63 
	}
}

69 
	$dup_ß„r_noöhîô
 (
fd
)

71  
	`fd_ß„r_noöhîô
 (
	`dup_noöhîô
 (
fd
));

72 
	}
}

76 
	$undup_ß„r_noöhîô
 (
ãmpfd
, 
‹igfd
)

78 i‡(
ãmpfd
 >= 0)

80 i‡(
	`dup2
 (
ãmpfd
, 
‹igfd
) < 0)

81 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, 
	`_
("cannotÑestore fd %d: dup2 failed"),

82 
‹igfd
);

83 
	`˛o£
 (
ãmpfd
);

89 
	`˛o£
 (
‹igfd
);

91 
	}
}

116 
	#SHELL_SPECIAL_CHARS
 "\"\\ \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"

	)

117 
	#SHELL_SPACE_CHARS
 " \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"

	)

119 
	$¥ï¨e_•awn
 (**
¨gv
)

121 
size_t
 
¨gc
;

122 **
√w_¨gv
;

123 
size_t
 
i
;

126 
¨gc
 = 0; 
¨gv
[¨gc] !
NULL
;árgc++)

130 
√w_¨gv
 = 
	`XNMALLOC
 (1 + 
¨gc
 + 1, *);

138 *
√w_¨gv
++ = "sh.exe";

141 
i
 = 0; i < 
¨gc
; i++)

143 c⁄° *
°rög
 = 
¨gv
[
i
];

145 i‡(
°rög
[0] == '\0')

146 
√w_¨gv
[
i
] = 
	`x°rdup
 ("\"\"");

147 i‡(
	`°Ωbrk
 (
°rög
, 
SHELL_SPECIAL_CHARS
Ë!
NULL
)

149 
boﬁ
 
quŸe_¨ound
 = (
	`°Ωbrk
 (
°rög
, 
SHELL_SPACE_CHARS
Ë!
NULL
);

150 
size_t
 
Àngth
;

151 
back¶ashes
;

152 c⁄° *
s
;

153 *
quŸed_°rög
;

154 *
p
;

156 
Àngth
 = 0;

157 
back¶ashes
 = 0;

158 i‡(
quŸe_¨ound
)

159 
Àngth
++;

160 
s
 = 
°rög
; *s != '\0'; s++)

162 
c
 = *
s
;

163 i‡(
c
 == '"')

164 
Àngth
 +
back¶ashes
 + 1;

165 
Àngth
++;

166 i‡(
c
 == '\\')

167 
back¶ashes
++;

169 
back¶ashes
 = 0;

171 i‡(
quŸe_¨ound
)

172 
Àngth
 +
back¶ashes
 + 1;

174 
quŸed_°rög
 = (*Ë
	`xmÆloc
 (
Àngth
 + 1);

176 
p
 = 
quŸed_°rög
;

177 
back¶ashes
 = 0;

178 i‡(
quŸe_¨ound
)

179 *
p
++ = '"';

180 
s
 = 
°rög
; *s != '\0'; s++)

182 
c
 = *
s
;

183 i‡(
c
 == '"')

185 
j
;

186 
j
 = 
back¶ashes
 + 1; j > 0; j--)

187 *
p
++ = '\\';

189 *
p
++ = 
c
;

190 i‡(
c
 == '\\')

191 
back¶ashes
++;

193 
back¶ashes
 = 0;

195 i‡(
quŸe_¨ound
)

197 
j
;

198 
j
 = 
back¶ashes
; j > 0; j--)

199 *
p
++ = '\\';

200 *
p
++ = '"';

202 *
p
 = '\0';

204 
√w_¨gv
[
i
] = 
quŸed_°rög
;

207 
√w_¨gv
[
i
] = (*Ë
°rög
;

209 
√w_¨gv
[
¨gc
] = 
NULL
;

211  
√w_¨gv
;

212 
	}
}

	@lib/wait-process.c

19 
	~<c⁄fig.h
>

22 
	~"waô-¥o˚ss.h
"

24 
	~<î∫o.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/waô.h
>

32 
	~"îr‹.h
"

33 
	~"Áèl-sig«l.h
"

34 
	~"xÆloc.h
"

35 
	~"gëãxt.h
"

37 
	#_
(
°r
Ë
	`gëãxt
 (°r)

	)

39 
	#SIZEOF
(
a
Ë(◊Ë/ ◊[0]))

	)

42 #i‡
deföed
 
_MSC_VER
 || deföed 
__MINGW32__


44 
	#WIN32_LEAN_AND_MEAN


	)

45 
	~<wödows.h
>

49 
	#kûl
(
pid
,
sig
Ë
	`Tîmö©ePro˚ss
 ((
HANDLE
Ë’id), sig)

	)

63 vﬁ©ûê
sig_©omic_t
 
	mu£d
;

64 vﬁ©ûê
pid_t
 
	mchûd
;

66 
	t¶aves_íåy_t
;

69 
¶aves_íåy_t
 
	g°©ic_¶aves
[32];

70 
¶aves_íåy_t
 * vﬁ©ûê
	g¶aves
 = 
°©ic_¶aves
;

71 
sig_©omic_t
 vﬁ©ûê
	g¶aves_cou¡
 = 0;

72 
size_t
 
	g¶aves_Æloˇãd
 = 
SIZEOF
 (
°©ic_¶aves
);

76 #ifde‡
SIGHUP


77 
	#TERMINATOR
 
SIGHUP


	)

79 
	#TERMINATOR
 
SIGTERM


	)

84 
	$˛ónup_¶aves
 ()

89 
size_t
 
n
 = 
¶aves_cou¡
;

90 i‡(
n
 == 0)

92 
n
--;

93 
¶aves_cou¡
 = 
n
;

95 i‡(
¶aves
[
n
].
u£d
)

97 
pid_t
 
¶ave
 = 
¶aves
[
n
].
chûd
;

100 
	`kûl
 (
¶ave
, 
TERMINATOR
);

103 
	}
}

110 
	$ªgi°î_¶ave_sub¥o˚ss
 (
pid_t
 
chûd
)

112 
boﬁ
 
˛ónup_¶aves_ªgi°îed
 = 
Ál£
;

113 i‡(!
˛ónup_¶aves_ªgi°îed
)

115 
	`©exô
 (
˛ónup_¶aves
);

116 
	`©_Áèl_sig«l
 (
˛ónup_¶aves
);

117 
˛ónup_¶aves_ªgi°îed
 = 
åue
;

122 
¶aves_íåy_t
 *
s
 = 
¶aves
;

123 
¶aves_íåy_t
 *
s_íd
 = 
s
 + 
¶aves_cou¡
;

125 ; 
s
 < 
s_íd
; s++)

126 i‡(!
s
->
u£d
)

132 
s
->
chûd
 = child;

133 
s
->
u£d
 = 1;

138 i‡(
¶aves_cou¡
 =
¶aves_Æloˇãd
)

143 
¶aves_íåy_t
 *
ﬁd_¶aves
 = 
¶aves
;

144 
size_t
 
√w_¶aves_Æloˇãd
 = 2 * 
¶aves_Æloˇãd
;

145 
¶aves_íåy_t
 *
√w_¶aves
 =

146 (
¶aves_íåy_t
 *)

147 
	`mÆloc
 (
√w_¶aves_Æloˇãd
 *  (
¶aves_íåy_t
));

148 i‡(
√w_¶aves
 =
NULL
)

153 
	`kûl
 (
chûd
, 
TERMINATOR
);

154 
	`xÆloc_dõ
 ();

156 
	`mem˝y
 (
√w_¶aves
, 
ﬁd_¶aves
,

157 
¶aves_Æloˇãd
 *  (
¶aves_íåy_t
));

158 
¶aves
 = 
√w_¶aves
;

159 
¶aves_Æloˇãd
 = 
√w_¶aves_Æloˇãd
;

161 i‡(
ﬁd_¶aves
 !
°©ic_¶aves
)

162 
	`‰ì
 (
ﬁd_¶aves
);

168 
¶aves
[
¶aves_cou¡
].
chûd
 = child;

169 
¶aves
[
¶aves_cou¡
].
u£d
 = 1;

170 
¶aves_cou¡
++;

171 
	}
}

174 
ölöe
 

175 
	$uƒegi°î_¶ave_sub¥o˚ss
 (
pid_t
 
chûd
)

180 
¶aves_íåy_t
 *
s
 = 
¶aves
;

181 
¶aves_íåy_t
 *
s_íd
 = 
s
 + 
¶aves_cou¡
;

183 ; 
s
 < 
s_íd
; s++)

184 i‡(
s
->
u£d
 && s->
chûd
 == child)

185 
s
->
u£d
 = 0;

186 
	}
}

193 
	$waô_sub¥o˚ss
 (
pid_t
 
chûd
, c⁄° *
¥og«me
,

194 
boﬁ
 
ign‹e_sigpùe
, boﬁ 
nuŒ_°dîr
,

195 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

196 *
ãrmsigp
)

198 #i‡
HAVE_WAITID
 && 
deföed
 
WNOWAIT
 && 0

208 
sigöfo_t
 
öfo
;

210 i‡(
ãrmsigp
 !
NULL
)

211 *
ãrmsigp
 = 0;

214 i‡(
	`waôid
 (
P_PID
, 
chûd
, &
öfo
, 
WEXITED
 | (
¶ave_¥o˚ss
 ? 
WNOWAIT
 : 0))

217 #ifde‡
EINTR


218 i‡(
î∫o
 =
EINTR
)

221 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

222 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 
î∫o
,

223 
	`_
("%†sub¥o˚ss"), 
¥og«me
);

230 i‡(
öfo
.
si_code
 =
CLD_EXITED


231 || 
öfo
.
si_code
 =
CLD_KILLED
 || info.si_codê=
CLD_DUMPED
)

237 i‡(
¶ave_¥o˚ss
)

242 
	`uƒegi°î_¶ave_sub¥o˚ss
 (
chûd
);

247 i‡(
	`waôid
 (
P_PID
, 
chûd
, &
öfo
, 
WEXITED
) < 0)

249 #ifde‡
EINTR


250 i‡(
î∫o
 =
EINTR
)

253 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

254 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 
î∫o
,

255 
	`_
("%†sub¥o˚ss"), 
¥og«me
);

262 
öfo
.
si_code
)

264 
CLD_KILLED
:

265 
CLD_DUMPED
:

266 i‡(
ãrmsigp
 !
NULL
)

267 *
ãrmsigp
 = 
öfo
.
si_°©us
;

268 #ifde‡
SIGPIPE


269 i‡(
öfo
.
si_°©us
 =
SIGPIPE
 && 
ign‹e_sigpùe
)

272 i‡(
exô_⁄_îr‹
 || (!
nuŒ_°dîr
 && 
ãrmsigp
 =
NULL
))

273 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 0,

274 
	`_
("%s subprocess got fatal signal %d"),

275 
¥og«me
, 
öfo
.
si_°©us
);

277 
CLD_EXITED
:

278 i‡(
öfo
.
si_°©us
 == 127)

280 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

281 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 0,

282 
	`_
("%†sub¥o˚s†Áûed"), 
¥og«me
);

285  
öfo
.
si_°©us
;

287 
	`ab‹t
 ();

291 
°©us
;

293 i‡(
ãrmsigp
 !
NULL
)

294 *
ãrmsigp
 = 0;

295 
°©us
 = 0;

298 
ªsu…
 = 
	`waôpid
 (
chûd
, &
°©us
, 0);

300 i‡(
ªsu…
 !
chûd
)

302 #ifde‡
EINTR


303 i‡(
î∫o
 =
EINTR
)

307 i‡(
î∫o
 =
ECHILD
)

311 
°©us
 = 0;

315 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

316 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 
î∫o
,

317 
	`_
("%†sub¥o˚ss"), 
¥og«me
);

324 i‡(!
	`WIFSTOPPED
 (
°©us
))

330 i‡(
¶ave_¥o˚ss
)

334 
	`uƒegi°î_¶ave_sub¥o˚ss
 (
chûd
);

336 i‡(
	`WIFSIGNALED
 (
°©us
))

338 i‡(
ãrmsigp
 !
NULL
)

339 *
ãrmsigp
 = 
	`WTERMSIG
 (
°©us
);

340 #ifde‡
SIGPIPE


341 i‡(
	`WTERMSIG
 (
°©us
Ë=
SIGPIPE
 && 
ign‹e_sigpùe
)

344 i‡(
exô_⁄_îr‹
 || (!
nuŒ_°dîr
 && 
ãrmsigp
 =
NULL
))

345 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 0,

346 
	`_
("%s subprocess got fatal signal %d"),

347 
¥og«me
, (Ë
	`WTERMSIG
 (
°©us
));

350 i‡(!
	`WIFEXITED
 (
°©us
))

351 
	`ab‹t
 ();

352 i‡(
	`WEXITSTATUS
 (
°©us
) == 127)

354 i‡(
exô_⁄_îr‹
 || !
nuŒ_°dîr
)

355 
	`îr‹
 (
exô_⁄_îr‹
 ? 
EXIT_FAILURE
 : 0, 0,

356 
	`_
("%†sub¥o˚s†Áûed"), 
¥og«me
);

359  
	`WEXITSTATUS
 (
°©us
);

361 
	}
}

	@lib/wait-process.h

18 #i‚de‡
_WAIT_PROCESS_H


19 
	#_WAIT_PROCESS_H


	)

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<sys/ty≥s.h
>

26 
	~<°dboﬁ.h
>

29 #ifde‡
__˝lu•lus


57 
waô_sub¥o˚ss
 (
pid_t
 
chûd
, c⁄° *
¥og«me
,

58 
boﬁ
 
ign‹e_sigpùe
, boﬁ 
nuŒ_°dîr
,

59 
boﬁ
 
¶ave_¥o˚ss
, boﬁ 
exô_⁄_îr‹
,

60 *
ãrmsigp
);

66 
ªgi°î_¶ave_sub¥o˚ss
 (
pid_t
 
chûd
);

69 #ifde‡
__˝lu•lus


	@lib/waitpid.c

20 
	~<c⁄fig.h
>

23 
	~<sys/waô.h
>

27 
	~<¥o˚ss.h
>

29 
pid_t


30 
	$waôpid
 (
pid_t
 
pid
, *
°©u•
, 
›ti⁄s
)

32  
	`_cwaô
 (
°©u•
, 
pid
, 
WAIT_CHILD
);

33 
	}
}

	@lib/wchar.in.h

31 #i‡
__GNUC__
 >= 3

32 @
	gPRAGMA_SYSTEM_HEADER
@

34 @
	gPRAGMA_COLUMNS
@

36 #i‡
deföed
 
__√ed_mb°©e_t
 || deföed 
__√ed_wöt_t
 || (deföed 
__hpux
 && ((deföed 
_INTTYPES_INCLUDED
 && !deföed 
°πoimax
Ë|| deföed 
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H
)Ë|| deföed 
_GL_ALREADY_INCLUDING_WCHAR_H


49 #@
INCLUDE_NEXT
@ @
NEXT_WCHAR_H
@

54 #i‚de‡
_
@
GUARD_PREFIX
@
_WCHAR_H


56 
	#_GL_ALREADY_INCLUDING_WCHAR_H


	)

58 #i‡@
HAVE_FEATURES_H
@

59 
	~<„©uªs.h
>

69 #i‡!(
deföed
 
__GLIBC__
 && !deföed 
__UCLIBC__
)

70 
	~<°ddef.h
>

72 #i‚de‡
__GLIBC__


73 
	~<°dio.h
>

74 
	~<time.h
>

80 #i‡@
HAVE_WCHAR_H
@

81 #@
INCLUDE_NEXT
@ @
NEXT_WCHAR_H
@

84 #unde‡
_GL_ALREADY_INCLUDING_WCHAR_H


86 #i‚de‡
_
@
GUARD_PREFIX
@
_WCHAR_H


87 
	#_
@
GUARD_PREFIX
@
_WCHAR_H


	)

97 #i‡!@
HAVE_WINT_T
@ && !
deföed
 
wöt_t


98 
	#wöt_t
 

	)

99 #i‚de‡
WEOF


100 
	#WEOF
 -1

	)

106 #i‡
deföed
 
_MSC_VER


107 #i‡!
GNULIB_deföed_wöt_t


108 
	~<¸tdefs.h
>

109 
	tΩl_wöt_t
;

110 #unde‡
wöt_t


111 
	#wöt_t
 
Ωl_wöt_t


	)

112 
	#GNULIB_deföed_wöt_t
 1

	)

115 #i‚de‡
WEOF


116 
	#WEOF
 ((
wöt_t
Ë-1)

	)

124 #i‡!(@
HAVE_MBSINIT
@ && @
HAVE_MBRTOWC
@Ë|| @
REPLACE_MBSTATE_T
@

125 #i‡!
GNULIB_deföed_mb°©e_t


126 
	tΩl_mb°©e_t
;

127 #unde‡
mb°©e_t


128 
	#mb°©e_t
 
Ωl_mb°©e_t


	)

129 
	#GNULIB_deföed_mb°©e_t
 1

	)

135 #i‡@
GNULIB_BTOWC
@

136 #i‡@
REPLACE_BTOWC
@

137 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

138 #unde‡
btowc


139 
	#btowc
 
Ωl_btowc


	)

141 
_GL_FUNCDECL_RPL
 (
btowc
, 
wöt_t
, (
c
));

142 
_GL_CXXALIAS_RPL
 (
btowc
, 
wöt_t
, (
c
));

144 #i‡!@
HAVE_BTOWC
@

145 
_GL_FUNCDECL_SYS
 (
btowc
, 
wöt_t
, (
c
));

147 
_GL_CXXALIAS_SYS
 (
btowc
, 
wöt_t
, (
c
));

149 
_GL_CXXALIASWARN
 (
btowc
);

150 #ñi‡
deföed
 
GNULIB_POSIXCHECK


151 #unde‡
btowc


152 #i‡
HAVE_RAW_DECL_BTOWC


153 
_GL_WARN_ON_USE
 (
btowc
, "btowc is unportable - "

160 #i‡@
GNULIB_WCTOB
@

161 #i‡@
REPLACE_WCTOB
@

162 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

163 #unde‡
w˘ob


164 
	#w˘ob
 
Ωl_w˘ob


	)

166 
_GL_FUNCDECL_RPL
 (
w˘ob
, , (
wöt_t
 
wc
));

167 
_GL_CXXALIAS_RPL
 (
w˘ob
, , (
wöt_t
 
wc
));

169 #i‡!
deföed
 
w˘ob
 && !@
HAVE_DECL_WCTOB
@

171 
_GL_FUNCDECL_SYS
 (
w˘ob
, , (
wöt_t
 
wc
));

173 
_GL_CXXALIAS_SYS
 (
w˘ob
, , (
wöt_t
 
wc
));

175 
_GL_CXXALIASWARN
 (
w˘ob
);

176 #ñi‡
deföed
 
GNULIB_POSIXCHECK


177 #unde‡
w˘ob


178 #i‡
HAVE_RAW_DECL_WCTOB


179 
_GL_WARN_ON_USE
 (
w˘ob
, "wctob is unportable - "

186 #i‡@
GNULIB_MBSINIT
@

187 #i‡@
REPLACE_MBSINIT
@

188 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

189 #unde‡
mbsöô


190 
	#mbsöô
 
Ωl_mbsöô


	)

192 
_GL_FUNCDECL_RPL
 (
mbsöô
, , (c⁄° 
mb°©e_t
 *
ps
));

193 
_GL_CXXALIAS_RPL
 (
mbsöô
, , (c⁄° 
mb°©e_t
 *
ps
));

195 #i‡!@
HAVE_MBSINIT
@

196 
_GL_FUNCDECL_SYS
 (
mbsöô
, , (c⁄° 
mb°©e_t
 *
ps
));

198 
_GL_CXXALIAS_SYS
 (
mbsöô
, , (c⁄° 
mb°©e_t
 *
ps
));

200 
_GL_CXXALIASWARN
 (
mbsöô
);

201 #ñi‡
deföed
 
GNULIB_POSIXCHECK


202 #unde‡
mbsöô


203 #i‡
HAVE_RAW_DECL_MBSINIT


204 
_GL_WARN_ON_USE
 (
mbsöô
, "mbsinit is unportable - "

211 #i‡@
GNULIB_MBRTOWC
@

212 #i‡@
REPLACE_MBRTOWC
@

213 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

214 #unde‡
mbπowc


215 
	#mbπowc
 
Ωl_mbπowc


	)

217 
_GL_FUNCDECL_RPL
 (
mbπowc
, 
size_t
,

218 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
));

219 
_GL_CXXALIAS_RPL
 (
mbπowc
, 
size_t
,

220 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
));

222 #i‡!@
HAVE_MBRTOWC
@

223 
_GL_FUNCDECL_SYS
 (
mbπowc
, 
size_t
,

224 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
));

226 
_GL_CXXALIAS_SYS
 (
mbπowc
, 
size_t
,

227 (
wch¨_t
 *
pwc
, c⁄° *
s
, 
size_t
 
n
, 
mb°©e_t
 *
ps
));

229 
_GL_CXXALIASWARN
 (
mbπowc
);

230 #ñi‡
deföed
 
GNULIB_POSIXCHECK


231 #unde‡
mbπowc


232 #i‡
HAVE_RAW_DECL_MBRTOWC


233 
_GL_WARN_ON_USE
 (
mbπowc
, "mbrtowc is unportable - "

240 #i‡@
GNULIB_MBRLEN
@

241 #i‡@
REPLACE_MBRLEN
@

242 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

243 #unde‡
mbæí


244 
	#mbæí
 
Ωl_mbæí


	)

246 
_GL_FUNCDECL_RPL
 (
mbæí
, 
size_t
, (c⁄° *
s
, size_à
n
, 
mb°©e_t
 *
ps
));

247 
_GL_CXXALIAS_RPL
 (
mbæí
, 
size_t
, (c⁄° *
s
, size_à
n
, 
mb°©e_t
 *
ps
));

249 #i‡!@
HAVE_MBRLEN
@

250 
_GL_FUNCDECL_SYS
 (
mbæí
, 
size_t
, (c⁄° *
s
, size_à
n
, 
mb°©e_t
 *
ps
));

252 
_GL_CXXALIAS_SYS
 (
mbæí
, 
size_t
, (c⁄° *
s
, size_à
n
, 
mb°©e_t
 *
ps
));

254 
_GL_CXXALIASWARN
 (
mbæí
);

255 #ñi‡
deföed
 
GNULIB_POSIXCHECK


256 #unde‡
mbæí


257 #i‡
HAVE_RAW_DECL_MBRLEN


258 
_GL_WARN_ON_USE
 (
mbæí
, "mbrlen is unportable - "

265 #i‡@
GNULIB_MBSRTOWCS
@

266 #i‡@
REPLACE_MBSRTOWCS
@

267 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

268 #unde‡
mb§towcs


269 
	#mb§towcs
 
Ωl_mb§towcs


	)

271 
_GL_FUNCDECL_RPL
 (
mb§towcs
, 
size_t
,

272 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
Àn
, 
mb°©e_t
 *
ps
)

273 
_GL_ARG_NONNULL
 ((2)));

274 
_GL_CXXALIAS_RPL
 (
mb§towcs
, 
size_t
,

275 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
Àn
,

276 
mb°©e_t
 *
ps
));

278 #i‡!@
HAVE_MBSRTOWCS
@

279 
_GL_FUNCDECL_SYS
 (
mb§towcs
, 
size_t
,

280 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
Àn
, 
mb°©e_t
 *
ps
)

281 
_GL_ARG_NONNULL
 ((2)));

283 
_GL_CXXALIAS_SYS
 (
mb§towcs
, 
size_t
,

284 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
Àn
,

285 
mb°©e_t
 *
ps
));

287 
_GL_CXXALIASWARN
 (
mb§towcs
);

288 #ñi‡
deföed
 
GNULIB_POSIXCHECK


289 #unde‡
mb§towcs


290 #i‡
HAVE_RAW_DECL_MBSRTOWCS


291 
_GL_WARN_ON_USE
 (
mb§towcs
, "mbsrtowcs is unportable - "

298 #i‡@
GNULIB_MBSNRTOWCS
@

299 #i‡@
REPLACE_MBSNRTOWCS
@

300 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

301 #unde‡
mb¢πowcs


302 
	#mb¢πowcs
 
Ωl_mb¢πowcs


	)

304 
_GL_FUNCDECL_RPL
 (
mb¢πowcs
, 
size_t
,

305 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

306 
mb°©e_t
 *
ps
)

307 
_GL_ARG_NONNULL
 ((2)));

308 
_GL_CXXALIAS_RPL
 (
mb¢πowcs
, 
size_t
,

309 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

310 
mb°©e_t
 *
ps
));

312 #i‡!@
HAVE_MBSNRTOWCS
@

313 
_GL_FUNCDECL_SYS
 (
mb¢πowcs
, 
size_t
,

314 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

315 
mb°©e_t
 *
ps
)

316 
_GL_ARG_NONNULL
 ((2)));

318 
_GL_CXXALIAS_SYS
 (
mb¢πowcs
, 
size_t
,

319 (
wch¨_t
 *
de°
, c⁄° **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

320 
mb°©e_t
 *
ps
));

322 
_GL_CXXALIASWARN
 (
mb¢πowcs
);

323 #ñi‡
deföed
 
GNULIB_POSIXCHECK


324 #unde‡
mb¢πowcs


325 #i‡
HAVE_RAW_DECL_MBSNRTOWCS


326 
_GL_WARN_ON_USE
 (
mb¢πowcs
, "mbsnrtowcs is unportable - "

333 #i‡@
GNULIB_WCRTOMB
@

334 #i‡@
REPLACE_WCRTOMB
@

335 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

336 #unde‡
w¸tomb


337 
	#w¸tomb
 
Ωl_w¸tomb


	)

339 
_GL_FUNCDECL_RPL
 (
w¸tomb
, 
size_t
, (*
s
, 
wch¨_t
 
wc
, 
mb°©e_t
 *
ps
));

340 
_GL_CXXALIAS_RPL
 (
w¸tomb
, 
size_t
, (*
s
, 
wch¨_t
 
wc
, 
mb°©e_t
 *
ps
));

342 #i‡!@
HAVE_WCRTOMB
@

343 
_GL_FUNCDECL_SYS
 (
w¸tomb
, 
size_t
, (*
s
, 
wch¨_t
 
wc
, 
mb°©e_t
 *
ps
));

345 
_GL_CXXALIAS_SYS
 (
w¸tomb
, 
size_t
, (*
s
, 
wch¨_t
 
wc
, 
mb°©e_t
 *
ps
));

347 
_GL_CXXALIASWARN
 (
w¸tomb
);

348 #ñi‡
deföed
 
GNULIB_POSIXCHECK


349 #unde‡
w¸tomb


350 #i‡
HAVE_RAW_DECL_WCRTOMB


351 
_GL_WARN_ON_USE
 (
w¸tomb
, "wcrtomb is unportable - "

358 #i‡@
GNULIB_WCSRTOMBS
@

359 #i‡@
REPLACE_WCSRTOMBS
@

360 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

361 #unde‡
wc§tombs


362 
	#wc§tombs
 
Ωl_wc§tombs


	)

364 
_GL_FUNCDECL_RPL
 (
wc§tombs
, 
size_t
,

365 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
Àn
, 
mb°©e_t
 *
ps
)

366 
_GL_ARG_NONNULL
 ((2)));

367 
_GL_CXXALIAS_RPL
 (
wc§tombs
, 
size_t
,

368 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
Àn
,

369 
mb°©e_t
 *
ps
));

371 #i‡!@
HAVE_WCSRTOMBS
@

372 
_GL_FUNCDECL_SYS
 (
wc§tombs
, 
size_t
,

373 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
Àn
, 
mb°©e_t
 *
ps
)

374 
_GL_ARG_NONNULL
 ((2)));

376 
_GL_CXXALIAS_SYS
 (
wc§tombs
, 
size_t
,

377 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
Àn
,

378 
mb°©e_t
 *
ps
));

380 
_GL_CXXALIASWARN
 (
wc§tombs
);

381 #ñi‡
deföed
 
GNULIB_POSIXCHECK


382 #unde‡
wc§tombs


383 #i‡
HAVE_RAW_DECL_WCSRTOMBS


384 
_GL_WARN_ON_USE
 (
wc§tombs
, "wcsrtombs is unportable - "

391 #i‡@
GNULIB_WCSNRTOMBS
@

392 #i‡@
REPLACE_WCSNRTOMBS
@

393 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

394 #unde‡
wc¢πombs


395 
	#wc¢πombs
 
Ωl_wc¢πombs


	)

397 
_GL_FUNCDECL_RPL
 (
wc¢πombs
, 
size_t
,

398 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

399 
mb°©e_t
 *
ps
)

400 
_GL_ARG_NONNULL
 ((2)));

401 
_GL_CXXALIAS_RPL
 (
wc¢πombs
, 
size_t
,

402 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

403 
mb°©e_t
 *
ps
));

405 #i‡!@
HAVE_WCSNRTOMBS
@

406 
_GL_FUNCDECL_SYS
 (
wc¢πombs
, 
size_t
,

407 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

408 
mb°©e_t
 *
ps
)

409 
_GL_ARG_NONNULL
 ((2)));

411 
_GL_CXXALIAS_SYS
 (
wc¢πombs
, 
size_t
,

412 (*
de°
, c⁄° 
wch¨_t
 **
§˝
, 
size_t
 
§˛í
, size_à
Àn
,

413 
mb°©e_t
 *
ps
));

415 
_GL_CXXALIASWARN
 (
wc¢πombs
);

416 #ñi‡
deföed
 
GNULIB_POSIXCHECK


417 #unde‡
wc¢πombs


418 #i‡
HAVE_RAW_DECL_WCSNRTOMBS


419 
_GL_WARN_ON_USE
 (
wc¢πombs
, "wcsnrtombs is unportable - "

426 #i‡@
GNULIB_WCWIDTH
@

427 #i‡@
REPLACE_WCWIDTH
@

428 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

429 #unde‡
wcwidth


430 
	#wcwidth
 
Ωl_wcwidth


	)

432 
_GL_FUNCDECL_RPL
 (
wcwidth
, , (
wch¨_t
));

433 
_GL_CXXALIAS_RPL
 (
wcwidth
, , (
wch¨_t
));

435 #i‡!@
HAVE_DECL_WCWIDTH
@

437 
_GL_FUNCDECL_SYS
 (
wcwidth
, , (
wch¨_t
));

439 
_GL_CXXALIAS_SYS
 (
wcwidth
, , (
wch¨_t
));

441 
_GL_CXXALIASWARN
 (
wcwidth
);

442 #ñi‡
deföed
 
GNULIB_POSIXCHECK


443 #unde‡
wcwidth


444 #i‡
HAVE_RAW_DECL_WCWIDTH


445 
_GL_WARN_ON_USE
 (
wcwidth
, "wcwidth is unportable - "

452 #i‡@
GNULIB_WMEMCHR
@

453 #i‡!@
HAVE_WMEMCHR
@

454 
_GL_FUNCDECL_SYS
 (
wmemchr
, 
wch¨_t
 *, (c⁄° wch¨_à*
s
, wch¨_à
c
, 
size_t
 
n
));

461 
_GL_CXXALIAS_SYS_CAST2
 (
wmemchr
,

462 
wch¨_t
 *, (c⁄° wch¨_à*, wch¨_t, 
size_t
),

463 c⁄° 
wch¨_t
 *, (c⁄° wch¨_à*, wch¨_t, 
size_t
));

464 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

465 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

466 
_GL_CXXALIASWARN1
 (
wmemchr
, 
wch¨_t
 *, (wch¨_à*
s
, wch¨_à
c
, 
size_t
 
n
));

467 
_GL_CXXALIASWARN1
 (
wmemchr
, c⁄° 
wch¨_t
 *,

468 (c⁄° 
wch¨_t
 *
s
, wch¨_à
c
, 
size_t
 
n
));

470 
_GL_CXXALIASWARN
 (
wmemchr
);

472 #ñi‡
deföed
 
GNULIB_POSIXCHECK


473 #unde‡
wmemchr


474 #i‡
HAVE_RAW_DECL_WMEMCHR


475 
_GL_WARN_ON_USE
 (
wmemchr
, "wmemchr is unportable - "

482 #i‡@
GNULIB_WMEMCMP
@

483 #i‡!@
HAVE_WMEMCMP
@

484 
_GL_FUNCDECL_SYS
 (
wmemcmp
, ,

485 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

487 
_GL_CXXALIAS_SYS
 (
wmemcmp
, ,

488 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

489 
_GL_CXXALIASWARN
 (
wmemcmp
);

490 #ñi‡
deföed
 
GNULIB_POSIXCHECK


491 #unde‡
wmemcmp


492 #i‡
HAVE_RAW_DECL_WMEMCMP


493 
_GL_WARN_ON_USE
 (
wmemcmp
, "wmemcmp is unportable - "

500 #i‡@
GNULIB_WMEMCPY
@

501 #i‡!@
HAVE_WMEMCPY
@

502 
_GL_FUNCDECL_SYS
 (
wmem˝y
, 
wch¨_t
 *,

503 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

505 
_GL_CXXALIAS_SYS
 (
wmem˝y
, 
wch¨_t
 *,

506 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

507 
_GL_CXXALIASWARN
 (
wmem˝y
);

508 #ñi‡
deföed
 
GNULIB_POSIXCHECK


509 #unde‡
wmem˝y


510 #i‡
HAVE_RAW_DECL_WMEMCPY


511 
_GL_WARN_ON_USE
 (
wmem˝y
, "wmemcpy is unportable - "

519 #i‡@
GNULIB_WMEMMOVE
@

520 #i‡!@
HAVE_WMEMMOVE
@

521 
_GL_FUNCDECL_SYS
 (
wmemmove
, 
wch¨_t
 *,

522 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

524 
_GL_CXXALIAS_SYS
 (
wmemmove
, 
wch¨_t
 *,

525 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

526 
_GL_CXXALIASWARN
 (
wmemmove
);

527 #ñi‡
deföed
 
GNULIB_POSIXCHECK


528 #unde‡
wmemmove


529 #i‡
HAVE_RAW_DECL_WMEMMOVE


530 
_GL_WARN_ON_USE
 (
wmemmove
, "wmemmove is unportable - "

537 #i‡@
GNULIB_WMEMSET
@

538 #i‡!@
HAVE_WMEMSET
@

539 
_GL_FUNCDECL_SYS
 (
wmem£t
, 
wch¨_t
 *, (wch¨_à*
s
, wch¨_à
c
, 
size_t
 
n
));

541 
_GL_CXXALIAS_SYS
 (
wmem£t
, 
wch¨_t
 *, (wch¨_à*
s
, wch¨_à
c
, 
size_t
 
n
));

542 
_GL_CXXALIASWARN
 (
wmem£t
);

543 #ñi‡
deföed
 
GNULIB_POSIXCHECK


544 #unde‡
wmem£t


545 #i‡
HAVE_RAW_DECL_WMEMSET


546 
_GL_WARN_ON_USE
 (
wmem£t
, "wmemset is unportable - "

553 #i‡@
GNULIB_WCSLEN
@

554 #i‡!@
HAVE_WCSLEN
@

555 
_GL_FUNCDECL_SYS
 (
wc¶í
, 
size_t
, (c⁄° 
wch¨_t
 *
s
));

557 
_GL_CXXALIAS_SYS
 (
wc¶í
, 
size_t
, (c⁄° 
wch¨_t
 *
s
));

558 
_GL_CXXALIASWARN
 (
wc¶í
);

559 #ñi‡
deföed
 
GNULIB_POSIXCHECK


560 #unde‡
wc¶í


561 #i‡
HAVE_RAW_DECL_WCSLEN


562 
_GL_WARN_ON_USE
 (
wc¶í
, "wcslen is unportable - "

569 #i‡@
GNULIB_WCSNLEN
@

570 #i‡!@
HAVE_WCSNLEN
@

571 
_GL_FUNCDECL_SYS
 (
wc¢Àn
, 
size_t
, (c⁄° 
wch¨_t
 *
s
, size_à
maxÀn
));

573 
_GL_CXXALIAS_SYS
 (
wc¢Àn
, 
size_t
, (c⁄° 
wch¨_t
 *
s
, size_à
maxÀn
));

574 
_GL_CXXALIASWARN
 (
wc¢Àn
);

575 #ñi‡
deföed
 
GNULIB_POSIXCHECK


576 #unde‡
wc¢Àn


577 #i‡
HAVE_RAW_DECL_WCSNLEN


578 
_GL_WARN_ON_USE
 (
wc¢Àn
, "wcsnlen is unportable - "

585 #i‡@
GNULIB_WCSCPY
@

586 #i‡!@
HAVE_WCSCPY
@

587 
_GL_FUNCDECL_SYS
 (
wcs˝y
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

589 
_GL_CXXALIAS_SYS
 (
wcs˝y
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

590 
_GL_CXXALIASWARN
 (
wcs˝y
);

591 #ñi‡
deföed
 
GNULIB_POSIXCHECK


592 #unde‡
wcs˝y


593 #i‡
HAVE_RAW_DECL_WCSCPY


594 
_GL_WARN_ON_USE
 (
wcs˝y
, "wcscpy is unportable - "

601 #i‡@
GNULIB_WCPCPY
@

602 #i‡!@
HAVE_WCPCPY
@

603 
_GL_FUNCDECL_SYS
 (
w˝˝y
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

605 
_GL_CXXALIAS_SYS
 (
w˝˝y
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

606 
_GL_CXXALIASWARN
 (
w˝˝y
);

607 #ñi‡
deföed
 
GNULIB_POSIXCHECK


608 #unde‡
w˝˝y


609 #i‡
HAVE_RAW_DECL_WCPCPY


610 
_GL_WARN_ON_USE
 (
w˝˝y
, "wcpcpy is unportable - "

617 #i‡@
GNULIB_WCSNCPY
@

618 #i‡!@
HAVE_WCSNCPY
@

619 
_GL_FUNCDECL_SYS
 (
wc¢˝y
, 
wch¨_t
 *,

620 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

622 
_GL_CXXALIAS_SYS
 (
wc¢˝y
, 
wch¨_t
 *,

623 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

624 
_GL_CXXALIASWARN
 (
wc¢˝y
);

625 #ñi‡
deföed
 
GNULIB_POSIXCHECK


626 #unde‡
wc¢˝y


627 #i‡
HAVE_RAW_DECL_WCSNCPY


628 
_GL_WARN_ON_USE
 (
wc¢˝y
, "wcsncpy is unportable - "

636 #i‡@
GNULIB_WCPNCPY
@

637 #i‡!@
HAVE_WCPNCPY
@

638 
_GL_FUNCDECL_SYS
 (
w˝n˝y
, 
wch¨_t
 *,

639 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

641 
_GL_CXXALIAS_SYS
 (
w˝n˝y
, 
wch¨_t
 *,

642 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

643 
_GL_CXXALIASWARN
 (
w˝n˝y
);

644 #ñi‡
deföed
 
GNULIB_POSIXCHECK


645 #unde‡
w˝n˝y


646 #i‡
HAVE_RAW_DECL_WCPNCPY


647 
_GL_WARN_ON_USE
 (
w˝n˝y
, "wcpncpy is unportable - "

654 #i‡@
GNULIB_WCSCAT
@

655 #i‡!@
HAVE_WCSCAT
@

656 
_GL_FUNCDECL_SYS
 (
wcsˇt
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

658 
_GL_CXXALIAS_SYS
 (
wcsˇt
, 
wch¨_t
 *, (wch¨_à*
de°
, c⁄° wch¨_à*
§c
));

659 
_GL_CXXALIASWARN
 (
wcsˇt
);

660 #ñi‡
deföed
 
GNULIB_POSIXCHECK


661 #unde‡
wcsˇt


662 #i‡
HAVE_RAW_DECL_WCSCAT


663 
_GL_WARN_ON_USE
 (
wcsˇt
, "wcscat is unportable - "

670 #i‡@
GNULIB_WCSNCAT
@

671 #i‡!@
HAVE_WCSNCAT
@

672 
_GL_FUNCDECL_SYS
 (
wc¢ˇt
, 
wch¨_t
 *,

673 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

675 
_GL_CXXALIAS_SYS
 (
wc¢ˇt
, 
wch¨_t
 *,

676 (
wch¨_t
 *
de°
, c⁄° wch¨_à*
§c
, 
size_t
 
n
));

677 
_GL_CXXALIASWARN
 (
wc¢ˇt
);

678 #ñi‡
deföed
 
GNULIB_POSIXCHECK


679 #unde‡
wc¢ˇt


680 #i‡
HAVE_RAW_DECL_WCSNCAT


681 
_GL_WARN_ON_USE
 (
wc¢ˇt
, "wcsncat is unportable - "

688 #i‡@
GNULIB_WCSCMP
@

689 #i‡!@
HAVE_WCSCMP
@

690 
_GL_FUNCDECL_SYS
 (
wcscmp
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

692 
_GL_CXXALIAS_SYS
 (
wcscmp
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

693 
_GL_CXXALIASWARN
 (
wcscmp
);

694 #ñi‡
deföed
 
GNULIB_POSIXCHECK


695 #unde‡
wcscmp


696 #i‡
HAVE_RAW_DECL_WCSCMP


697 
_GL_WARN_ON_USE
 (
wcscmp
, "wcscmp is unportable - "

704 #i‡@
GNULIB_WCSNCMP
@

705 #i‡!@
HAVE_WCSNCMP
@

706 
_GL_FUNCDECL_SYS
 (
wc¢cmp
, ,

707 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

709 
_GL_CXXALIAS_SYS
 (
wc¢cmp
, ,

710 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

711 
_GL_CXXALIASWARN
 (
wc¢cmp
);

712 #ñi‡
deföed
 
GNULIB_POSIXCHECK


713 #unde‡
wc¢cmp


714 #i‡
HAVE_RAW_DECL_WCSNCMP


715 
_GL_WARN_ON_USE
 (
wc¢cmp
, "wcsncmp is unportable - "

722 #i‡@
GNULIB_WCSCASECMP
@

723 #i‡!@
HAVE_WCSCASECMP
@

724 
_GL_FUNCDECL_SYS
 (
wcsˇ£cmp
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

726 
_GL_CXXALIAS_SYS
 (
wcsˇ£cmp
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

727 
_GL_CXXALIASWARN
 (
wcsˇ£cmp
);

728 #ñi‡
deföed
 
GNULIB_POSIXCHECK


729 #unde‡
wcsˇ£cmp


730 #i‡
HAVE_RAW_DECL_WCSCASECMP


731 
_GL_WARN_ON_USE
 (
wcsˇ£cmp
, "wcscasecmp is unportable - "

738 #i‡@
GNULIB_WCSNCASECMP
@

739 #i‡!@
HAVE_WCSNCASECMP
@

740 
_GL_FUNCDECL_SYS
 (
wc¢ˇ£cmp
, ,

741 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

743 
_GL_CXXALIAS_SYS
 (
wc¢ˇ£cmp
, ,

744 (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, 
size_t
 
n
));

745 
_GL_CXXALIASWARN
 (
wc¢ˇ£cmp
);

746 #ñi‡
deföed
 
GNULIB_POSIXCHECK


747 #unde‡
wc¢ˇ£cmp


748 #i‡
HAVE_RAW_DECL_WCSNCASECMP


749 
_GL_WARN_ON_USE
 (
wc¢ˇ£cmp
, "wcsncasecmp is unportable - "

757 #i‡@
GNULIB_WCSCOLL
@

758 #i‡!@
HAVE_WCSCOLL
@

759 
_GL_FUNCDECL_SYS
 (
wcscﬁl
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

761 
_GL_CXXALIAS_SYS
 (
wcscﬁl
, , (c⁄° 
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
));

762 
_GL_CXXALIASWARN
 (
wcscﬁl
);

763 #ñi‡
deföed
 
GNULIB_POSIXCHECK


764 #unde‡
wcscﬁl


765 #i‡
HAVE_RAW_DECL_WCSCOLL


766 
_GL_WARN_ON_USE
 (
wcscﬁl
, "wcscoll is unportable - "

775 #i‡@
GNULIB_WCSXFRM
@

776 #i‡!@
HAVE_WCSXFRM
@

777 
_GL_FUNCDECL_SYS
 (
wcsx‰m
, 
size_t
, (
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, size_à
n
));

779 
_GL_CXXALIAS_SYS
 (
wcsx‰m
, 
size_t
, (
wch¨_t
 *
s1
, c⁄° wch¨_à*
s2
, size_à
n
));

780 
_GL_CXXALIASWARN
 (
wcsx‰m
);

781 #ñi‡
deföed
 
GNULIB_POSIXCHECK


782 #unde‡
wcsx‰m


783 #i‡
HAVE_RAW_DECL_WCSXFRM


784 
_GL_WARN_ON_USE
 (
wcsx‰m
, "wcsxfrm is unportable - "

791 #i‡@
GNULIB_WCSDUP
@

792 #i‡!@
HAVE_WCSDUP
@

793 
_GL_FUNCDECL_SYS
 (
wcsdup
, 
wch¨_t
 *, (c⁄° wch¨_à*
s
));

795 
_GL_CXXALIAS_SYS
 (
wcsdup
, 
wch¨_t
 *, (c⁄° wch¨_à*
s
));

796 
_GL_CXXALIASWARN
 (
wcsdup
);

797 #ñi‡
deföed
 
GNULIB_POSIXCHECK


798 #unde‡
wcsdup


799 #i‡
HAVE_RAW_DECL_WCSDUP


800 
_GL_WARN_ON_USE
 (
wcsdup
, "wcsdup is unportable - "

807 #i‡@
GNULIB_WCSCHR
@

808 #i‡!@
HAVE_WCSCHR
@

809 
_GL_FUNCDECL_SYS
 (
wcschr
, 
wch¨_t
 *, (c⁄° wch¨_à*
wcs
, wch¨_à
wc
));

816 
_GL_CXXALIAS_SYS_CAST2
 (
wcschr
,

817 
wch¨_t
 *, (const wchar_t *, wchar_t),

818 c⁄° 
wch¨_t
 *, (const wchar_t *, wchar_t));

819 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

820 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

821 
_GL_CXXALIASWARN1
 (
wcschr
, 
wch¨_t
 *, (wch¨_à*
wcs
, wch¨_à
wc
));

822 
_GL_CXXALIASWARN1
 (
wcschr
, c⁄° 
wch¨_t
 *, (c⁄° wch¨_à*
wcs
, wch¨_à
wc
));

824 
_GL_CXXALIASWARN
 (
wcschr
);

826 #ñi‡
deföed
 
GNULIB_POSIXCHECK


827 #unde‡
wcschr


828 #i‡
HAVE_RAW_DECL_WCSCHR


829 
_GL_WARN_ON_USE
 (
wcschr
, "wcschr is unportable - "

836 #i‡@
GNULIB_WCSRCHR
@

837 #i‡!@
HAVE_WCSRCHR
@

838 
_GL_FUNCDECL_SYS
 (
wc§chr
, 
wch¨_t
 *, (c⁄° wch¨_à*
wcs
, wch¨_à
wc
));

845 
_GL_CXXALIAS_SYS_CAST2
 (
wc§chr
,

846 
wch¨_t
 *, (const wchar_t *, wchar_t),

847 c⁄° 
wch¨_t
 *, (const wchar_t *, wchar_t));

848 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

849 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

850 
_GL_CXXALIASWARN1
 (
wc§chr
, 
wch¨_t
 *, (wch¨_à*
wcs
, wch¨_à
wc
));

851 
_GL_CXXALIASWARN1
 (
wc§chr
, c⁄° 
wch¨_t
 *, (c⁄° wch¨_à*
wcs
, wch¨_à
wc
));

853 
_GL_CXXALIASWARN
 (
wc§chr
);

855 #ñi‡
deföed
 
GNULIB_POSIXCHECK


856 #unde‡
wc§chr


857 #i‡
HAVE_RAW_DECL_WCSRCHR


858 
_GL_WARN_ON_USE
 (
wc§chr
, "wcsrchr is unportable - "

866 #i‡@
GNULIB_WCSCSPN
@

867 #i‡!@
HAVE_WCSCSPN
@

868 
_GL_FUNCDECL_SYS
 (
wcsc•n
, 
size_t
, (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ªje˘
));

870 
_GL_CXXALIAS_SYS
 (
wcsc•n
, 
size_t
, (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ªje˘
));

871 
_GL_CXXALIASWARN
 (
wcsc•n
);

872 #ñi‡
deföed
 
GNULIB_POSIXCHECK


873 #unde‡
wcsc•n


874 #i‡
HAVE_RAW_DECL_WCSCSPN


875 
_GL_WARN_ON_USE
 (
wcsc•n
, "wcscspn is unportable - "

883 #i‡@
GNULIB_WCSSPN
@

884 #i‡!@
HAVE_WCSSPN
@

885 
_GL_FUNCDECL_SYS
 (
wcs•n
, 
size_t
, (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ac˚±
));

887 
_GL_CXXALIAS_SYS
 (
wcs•n
, 
size_t
, (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ac˚±
));

888 
_GL_CXXALIASWARN
 (
wcs•n
);

889 #ñi‡
deföed
 
GNULIB_POSIXCHECK


890 #unde‡
wcs•n


891 #i‡
HAVE_RAW_DECL_WCSSPN


892 
_GL_WARN_ON_USE
 (
wcs•n
, "wcsspn is unportable - "

899 #i‡@
GNULIB_WCSPBRK
@

900 #i‡!@
HAVE_WCSPBRK
@

901 
_GL_FUNCDECL_SYS
 (
wc•brk
, 
wch¨_t
 *,

902 (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ac˚±
));

909 
_GL_CXXALIAS_SYS_CAST2
 (
wc•brk
,

910 
wch¨_t
 *, (const wchar_t *, const wchar_t *),

911 c⁄° 
wch¨_t
 *, (const wchar_t *, const wchar_t *));

912 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

913 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

914 
_GL_CXXALIASWARN1
 (
wc•brk
, 
wch¨_t
 *,

915 (
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ac˚±
));

916 
_GL_CXXALIASWARN1
 (
wc•brk
, c⁄° 
wch¨_t
 *,

917 (c⁄° 
wch¨_t
 *
wcs
, c⁄° wch¨_à*
ac˚±
));

919 
_GL_CXXALIASWARN
 (
wc•brk
);

921 #ñi‡
deföed
 
GNULIB_POSIXCHECK


922 #unde‡
wc•brk


923 #i‡
HAVE_RAW_DECL_WCSPBRK


924 
_GL_WARN_ON_USE
 (
wc•brk
, "wcspbrk is unportable - "

931 #i‡@
GNULIB_WCSSTR
@

932 #i‡!@
HAVE_WCSSTR
@

933 
_GL_FUNCDECL_SYS
 (
wcs°r
, 
wch¨_t
 *,

934 (c⁄° 
wch¨_t
 *
hay°ack
, c⁄° wch¨_à*
√edÀ
));

941 
_GL_CXXALIAS_SYS_CAST2
 (
wcs°r
,

942 
wch¨_t
 *, (const wchar_t *, const wchar_t *),

943 c⁄° 
wch¨_t
 *, (const wchar_t *, const wchar_t *));

944 #i‡((
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >10Ë&& !
deföed
 
__UCLIBC__
) \

945 && (
	g__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 4))

946 
_GL_CXXALIASWARN1
 (
wcs°r
, 
wch¨_t
 *,

947 (
wch¨_t
 *
hay°ack
, c⁄° wch¨_à*
√edÀ
));

948 
_GL_CXXALIASWARN1
 (
wcs°r
, c⁄° 
wch¨_t
 *,

949 (c⁄° 
wch¨_t
 *
hay°ack
, c⁄° wch¨_à*
√edÀ
));

951 
_GL_CXXALIASWARN
 (
wcs°r
);

953 #ñi‡
deföed
 
GNULIB_POSIXCHECK


954 #unde‡
wcs°r


955 #i‡
HAVE_RAW_DECL_WCSSTR


956 
_GL_WARN_ON_USE
 (
wcs°r
, "wcsstr is unportable - "

963 #i‡@
GNULIB_WCSTOK
@

964 #i‡!@
HAVE_WCSTOK
@

965 
_GL_FUNCDECL_SYS
 (
wc°ok
, 
wch¨_t
 *,

966 (
wch¨_t
 *
wcs
, c⁄° wch¨_à*
dñim
, wch¨_à**
±r
));

968 
_GL_CXXALIAS_SYS
 (
wc°ok
, 
wch¨_t
 *,

969 (
wch¨_t
 *
wcs
, c⁄° wch¨_à*
dñim
, wch¨_à**
±r
));

970 
_GL_CXXALIASWARN
 (
wc°ok
);

971 #ñi‡
deföed
 
GNULIB_POSIXCHECK


972 #unde‡
wc°ok


973 #i‡
HAVE_RAW_DECL_WCSTOK


974 
_GL_WARN_ON_USE
 (
wc°ok
, "wcstok is unportable - "

982 #i‡@
GNULIB_WCSWIDTH
@

983 #i‡@
REPLACE_WCSWIDTH
@

984 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

985 #unde‡
wcswidth


986 
	#wcswidth
 
Ωl_wcswidth


	)

988 
_GL_FUNCDECL_RPL
 (
wcswidth
, , (c⁄° 
wch¨_t
 *
s
, 
size_t
 
n
));

989 
_GL_CXXALIAS_RPL
 (
wcswidth
, , (c⁄° 
wch¨_t
 *
s
, 
size_t
 
n
));

991 #i‡!@
HAVE_WCSWIDTH
@

992 
_GL_FUNCDECL_SYS
 (
wcswidth
, , (c⁄° 
wch¨_t
 *
s
, 
size_t
 
n
));

994 
_GL_CXXALIAS_SYS
 (
wcswidth
, , (c⁄° 
wch¨_t
 *
s
, 
size_t
 
n
));

996 
_GL_CXXALIASWARN
 (
wcswidth
);

997 #ñi‡
deföed
 
GNULIB_POSIXCHECK


998 #unde‡
wcswidth


999 #i‡
HAVE_RAW_DECL_WCSWIDTH


1000 
_GL_WARN_ON_USE
 (
wcswidth
, "wcswidth is unportable - "

	@lib/wctype.in.h

31 #i‚de‡
_
@
GUARD_PREFIX
@
_WCTYPE_H


33 #i‡
__GNUC__
 >= 3

34 @
	gPRAGMA_SYSTEM_HEADER
@

36 @
	gPRAGMA_COLUMNS
@

38 #i‡@
HAVE_WINT_T
@

44 
	~<°ddef.h
>

45 
	~<°dio.h
>

46 
	~<time.h
>

47 
	~<wch¨.h
>

53 #i‡@
HAVE_WCTYPE_H
@

54 #@
INCLUDE_NEXT
@ @
NEXT_WCTYPE_H
@

57 #i‚de‡
_
@
GUARD_PREFIX
@
_WCTYPE_H


58 
	#_
@
GUARD_PREFIX
@
_WCTYPE_H


	)

67 #ifde‡
__sun


68 #unde‡
mu…ibyã


69 #unde‡
eucw1


70 #unde‡
eucw2


71 #unde‡
eucw3


72 #unde‡
s¸w1


73 #unde‡
s¸w2


74 #unde‡
s¸w3


78 #i‡!@
HAVE_WINT_T
@ && !
deföed
 
wöt_t


79 
	#wöt_t
 

	)

80 #i‚de‡
WEOF


81 
	#WEOF
 -1

	)

87 #i‡
deföed
 
_MSC_VER


88 #i‡!
GNULIB_deföed_wöt_t


89 
	~<¸tdefs.h
>

90 
	tΩl_wöt_t
;

91 #unde‡
wöt_t


92 
	#wöt_t
 
Ωl_wöt_t


	)

93 
	#GNULIB_deföed_wöt_t
 1

	)

96 #i‚de‡
WEOF


97 
	#WEOF
 ((
wöt_t
Ë-1)

	)

102 #i‡!
GNULIB_deföed_w˘y≥_fun˘i⁄s


108 #i‡! @
HAVE_ISWCNTRL
@ || @
REPLACE_ISWCNTRL
@

115 #unde‡
iswÆnum


116 #unde‡
iswÆpha


117 #unde‡
iswbœnk


118 #unde‡
isw˙ål


119 #unde‡
iswdigô


120 #unde‡
iswgøph


121 #unde‡
iswlowî


122 #unde‡
isw¥öt


123 #unde‡
iswpun˘


124 #unde‡
isw•a˚


125 #unde‡
iswuµî


126 #unde‡
iswxdigô


127 #unde‡
towlowî


128 #unde‡
towuµî


131 #i‡@
REPLACE_ISWCNTRL
@

132 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

133 
	#iswÆnum
 
Ωl_iswÆnum


	)

134 
	#iswÆpha
 
Ωl_iswÆpha


	)

135 
	#iswbœnk
 
Ωl_iswbœnk


	)

136 
	#isw˙ål
 
Ωl_isw˙ål


	)

137 
	#iswdigô
 
Ωl_iswdigô


	)

138 
	#iswgøph
 
Ωl_iswgøph


	)

139 
	#iswlowî
 
Ωl_iswlowî


	)

140 
	#isw¥öt
 
Ωl_isw¥öt


	)

141 
	#iswpun˘
 
Ωl_iswpun˘


	)

142 
	#isw•a˚
 
Ωl_isw•a˚


	)

143 
	#iswuµî
 
Ωl_iswuµî


	)

144 
	#iswxdigô
 
Ωl_iswxdigô


	)

147 #i‡@
REPLACE_TOWLOWER
@

148 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

149 
	#towlowî
 
Ωl_towlowî


	)

150 
	#towuµî
 
Ωl_towuµî


	)

154 
ölöe
 

155 #i‡@
REPLACE_ISWCNTRL
@

156 
	gΩl_iswÆnum


158 
	giswÆnum


160 (
wöt_t
 
	gwc
)

162  ((
	gwc
 >'0' && 
wc
 <= '9')

163 || ((
wc
 & ~0x20) >= 'A' && (wc & ~0x20) <= 'Z'));

166 
ölöe
 

167 #i‡@
REPLACE_ISWCNTRL
@

168 
	gΩl_iswÆpha


170 
	giswÆpha


172 (
wöt_t
 
	gwc
)

174  (
	gwc
 & ~0x20Ë>'A' && (
wc
 & ~0x20) <= 'Z';

177 
ölöe
 

178 #i‡@
REPLACE_ISWCNTRL
@

179 
	gΩl_iswbœnk


181 
	giswbœnk


183 (
wöt_t
 
	gwc
)

185  
	gwc
 =' ' || 
wc
 == '\t';

188 
ölöe
 

189 #i‡@
REPLACE_ISWCNTRL
@

190 
	gΩl_isw˙ål


192 
	gisw˙ål


194 (
wöt_t
 
	gwc
)

196  (
	gwc
 & ~0x1fË=0 || 
wc
 == 0x7f;

199 
ölöe
 

200 #i‡@
REPLACE_ISWCNTRL
@

201 
	gΩl_iswdigô


203 
	giswdigô


205 (
wöt_t
 
	gwc
)

207  
	gwc
 >'0' && 
wc
 <= '9';

210 
ölöe
 

211 #i‡@
REPLACE_ISWCNTRL
@

212 
	gΩl_iswgøph


214 
	giswgøph


216 (
wöt_t
 
	gwc
)

218  
	gwc
 >'!' && 
wc
 <= '~';

221 
ölöe
 

222 #i‡@
REPLACE_ISWCNTRL
@

223 
	gΩl_iswlowî


225 
	giswlowî


227 (
wöt_t
 
	gwc
)

229  
	gwc
 >'a' && 
wc
 <= 'z';

232 
ölöe
 

233 #i‡@
REPLACE_ISWCNTRL
@

234 
	gΩl_isw¥öt


236 
	gisw¥öt


238 (
wöt_t
 
	gwc
)

240  
	gwc
 >' ' && 
wc
 <= '~';

243 
ölöe
 

244 #i‡@
REPLACE_ISWCNTRL
@

245 
	gΩl_iswpun˘


247 
	giswpun˘


249 (
wöt_t
 
	gwc
)

251  (
	gwc
 >'!' && 
wc
 <= '~'

252 && !((
wc
 >= '0' && wc <= '9')

253 || ((
wc
 & ~0x20) >= 'A' && (wc & ~0x20) <= 'Z')));

256 
ölöe
 

257 #i‡@
REPLACE_ISWCNTRL
@

258 
	gΩl_isw•a˚


260 
	gisw•a˚


262 (
wöt_t
 
	gwc
)

264  (
	gwc
 =' ' || 
wc
 == '\t'

265 || 
wc
 == '\n' || wc == '\v' || wc == '\f' || wc == '\r');

268 
ölöe
 

269 #i‡@
REPLACE_ISWCNTRL
@

270 
	gΩl_iswuµî


272 
	giswuµî


274 (
wöt_t
 
	gwc
)

276  
	gwc
 >'A' && 
wc
 <= 'Z';

279 
ölöe
 

280 #i‡@
REPLACE_ISWCNTRL
@

281 
	gΩl_iswxdigô


283 
	giswxdigô


285 (
wöt_t
 
	gwc
)

287  ((
	gwc
 >'0' && 
wc
 <= '9')

288 || ((
wc
 & ~0x20) >= 'A' && (wc & ~0x20) <= 'F'));

291 
ölöe
 
	gwöt_t


292 #i‡@
REPLACE_TOWLOWER
@

293 
	gΩl_towlowî


295 
	gtowlowî


297 (
wöt_t
 
	gwc
)

299  (
	gwc
 >'A' && 
wc
 <= 'Z' ? wc - 'A' + 'a' : wc);

302 
ölöe
 
	gwöt_t


303 #i‡@
REPLACE_TOWLOWER
@

304 
	gΩl_towuµî


306 
	gtowuµî


308 (
wöt_t
 
	gwc
)

310  (
	gwc
 >'a' && 
wc
 <= 'z' ? wc - 'a' + 'A' : wc);

313 #ñi‡@
GNULIB_ISWBLANK
@ && (! @
HAVE_ISWBLANK
@ || @
REPLACE_ISWBLANK
@)

316 #i‡@
REPLACE_ISWBLANK
@

317 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

318 
	#iswbœnk
 
Ωl_iswbœnk


	)

320 
_GL_FUNCDECL_RPL
 (
iswbœnk
, , (
wöt_t
 
wc
));

322 
_GL_FUNCDECL_SYS
 (
iswbœnk
, , (
wöt_t
 
wc
));

327 #i‡
deföed
 
__MINGW32__


342 
ölöe
 
wöt_t


343 
	$Ωl_towlowî
 (
wöt_t
 
wc
)

345  (
wöt_t
Ë(
wch¨_t
Ë
	`towlowî
 (
wc
);

346 
	}
}

347 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

348 
	#towlowî
 
Ωl_towlowî


	)

351 
ölöe
 
wöt_t


352 
	$Ωl_towuµî
 (
wöt_t
 
wc
)

354  (
wöt_t
Ë(
wch¨_t
Ë
	`towuµî
 (
wc
);

355 
	}
}

356 #i‡!(
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE
)

357 
	#towuµî
 
Ωl_towuµî


	)

362 
	#GNULIB_deföed_w˘y≥_fun˘i⁄s
 1

	)

365 #i‡@
REPLACE_ISWCNTRL
@

366 
_GL_CXXALIAS_RPL
 (
iswÆnum
, , (
wöt_t
 
wc
));

367 
_GL_CXXALIAS_RPL
 (
iswÆpha
, , (
wöt_t
 
wc
));

368 
_GL_CXXALIAS_RPL
 (
isw˙ål
, , (
wöt_t
 
wc
));

369 
_GL_CXXALIAS_RPL
 (
iswdigô
, , (
wöt_t
 
wc
));

370 
_GL_CXXALIAS_RPL
 (
iswgøph
, , (
wöt_t
 
wc
));

371 
_GL_CXXALIAS_RPL
 (
iswlowî
, , (
wöt_t
 
wc
));

372 
_GL_CXXALIAS_RPL
 (
isw¥öt
, , (
wöt_t
 
wc
));

373 
_GL_CXXALIAS_RPL
 (
iswpun˘
, , (
wöt_t
 
wc
));

374 
_GL_CXXALIAS_RPL
 (
isw•a˚
, , (
wöt_t
 
wc
));

375 
_GL_CXXALIAS_RPL
 (
iswuµî
, , (
wöt_t
 
wc
));

376 
_GL_CXXALIAS_RPL
 (
iswxdigô
, , (
wöt_t
 
wc
));

378 
_GL_CXXALIAS_SYS
 (
iswÆnum
, , (
wöt_t
 
wc
));

379 
_GL_CXXALIAS_SYS
 (
iswÆpha
, , (
wöt_t
 
wc
));

380 
_GL_CXXALIAS_SYS
 (
isw˙ål
, , (
wöt_t
 
wc
));

381 
_GL_CXXALIAS_SYS
 (
iswdigô
, , (
wöt_t
 
wc
));

382 
_GL_CXXALIAS_SYS
 (
iswgøph
, , (
wöt_t
 
wc
));

383 
_GL_CXXALIAS_SYS
 (
iswlowî
, , (
wöt_t
 
wc
));

384 
_GL_CXXALIAS_SYS
 (
isw¥öt
, , (
wöt_t
 
wc
));

385 
_GL_CXXALIAS_SYS
 (
iswpun˘
, , (
wöt_t
 
wc
));

386 
_GL_CXXALIAS_SYS
 (
isw•a˚
, , (
wöt_t
 
wc
));

387 
_GL_CXXALIAS_SYS
 (
iswuµî
, , (
wöt_t
 
wc
));

388 
_GL_CXXALIAS_SYS
 (
iswxdigô
, , (
wöt_t
 
wc
));

390 
_GL_CXXALIASWARN
 (
iswÆnum
);

391 
_GL_CXXALIASWARN
 (
iswÆpha
);

392 
_GL_CXXALIASWARN
 (
isw˙ål
);

393 
_GL_CXXALIASWARN
 (
iswdigô
);

394 
_GL_CXXALIASWARN
 (
iswgøph
);

395 
_GL_CXXALIASWARN
 (
iswlowî
);

396 
_GL_CXXALIASWARN
 (
isw¥öt
);

397 
_GL_CXXALIASWARN
 (
iswpun˘
);

398 
_GL_CXXALIASWARN
 (
isw•a˚
);

399 
_GL_CXXALIASWARN
 (
iswuµî
);

400 
_GL_CXXALIASWARN
 (
iswxdigô
);

402 #i‡@
GNULIB_ISWBLANK
@

403 #i‡@
REPLACE_ISWCNTRL
@ || @
REPLACE_ISWBLANK
@

404 
_GL_CXXALIAS_RPL
 (
iswbœnk
, , (
wöt_t
 
wc
));

406 
_GL_CXXALIAS_SYS
 (
iswbœnk
, , (
wöt_t
 
wc
));

408 
_GL_CXXALIASWARN
 (
iswbœnk
);

411 #i‡!@
HAVE_WCTYPE_T
@

412 #i‡!
GNULIB_deföed_w˘y≥_t


413 * 
	tw˘y≥_t
;

414 
	#GNULIB_deföed_w˘y≥_t
 1

	)

419 #i‡@
GNULIB_WCTYPE
@

420 #i‡!@
HAVE_WCTYPE_T
@

421 
_GL_FUNCDECL_SYS
 (
w˘y≥
, 
w˘y≥_t
, (c⁄° *
«me
));

423 
_GL_CXXALIAS_SYS
 (
w˘y≥
, 
w˘y≥_t
, (c⁄° *
«me
));

424 
_GL_CXXALIASWARN
 (
w˘y≥
);

425 #ñi‡
deföed
 
GNULIB_POSIXCHECK


426 #unde‡
w˘y≥


427 #i‡
HAVE_RAW_DECL_WCTYPE


428 
_GL_WARN_ON_USE
 (
w˘y≥
, "wctype is unportable - "

436 #i‡@
GNULIB_ISWCTYPE
@

437 #i‡!@
HAVE_WCTYPE_T
@

438 
_GL_FUNCDECL_SYS
 (
isw˘y≥
, , (
wöt_t
 
wc
, 
w˘y≥_t
 
desc
));

440 
_GL_CXXALIAS_SYS
 (
isw˘y≥
, , (
wöt_t
 
wc
, 
w˘y≥_t
 
desc
));

441 
_GL_CXXALIASWARN
 (
isw˘y≥
);

442 #ñi‡
deföed
 
GNULIB_POSIXCHECK


443 #unde‡
isw˘y≥


444 #i‡
HAVE_RAW_DECL_ISWCTYPE


445 
_GL_WARN_ON_USE
 (
isw˘y≥
, "iswctype is unportable - "

450 #i‡@
REPLACE_TOWLOWER
@ || 
deföed
 
__MINGW32__


451 
_GL_CXXALIAS_RPL
 (
towlowî
, 
wöt_t
, (wöt_à
wc
));

452 
_GL_CXXALIAS_RPL
 (
towuµî
, 
wöt_t
, (wöt_à
wc
));

454 
_GL_CXXALIAS_SYS
 (
towlowî
, 
wöt_t
, (wöt_à
wc
));

455 
_GL_CXXALIAS_SYS
 (
towuµî
, 
wöt_t
, (wöt_à
wc
));

457 
_GL_CXXALIASWARN
 (
towlowî
);

458 
_GL_CXXALIASWARN
 (
towuµî
);

460 #i‡!@
HAVE_WCTRANS_T
@

461 #i‡!
GNULIB_deföed_w˘øns_t


462 * 
	tw˘øns_t
;

463 
	#GNULIB_deföed_w˘øns_t
 1

	)

468 #i‡@
GNULIB_WCTRANS
@

469 #i‡!@
HAVE_WCTRANS_T
@

470 
_GL_FUNCDECL_SYS
 (
w˘øns
, 
w˘øns_t
, (c⁄° *
«me
));

472 
_GL_CXXALIAS_SYS
 (
w˘øns
, 
w˘øns_t
, (c⁄° *
«me
));

473 
_GL_CXXALIASWARN
 (
w˘øns
);

474 #ñi‡
deföed
 
GNULIB_POSIXCHECK


475 #unde‡
w˘øns


476 #i‡
HAVE_RAW_DECL_WCTRANS


477 
_GL_WARN_ON_USE
 (
w˘øns
, "wctrans is unportable - "

485 #i‡@
GNULIB_TOWCTRANS
@

486 #i‡!@
HAVE_WCTRANS_T
@

487 
_GL_FUNCDECL_SYS
 (
tow˘øns
, 
wöt_t
, (wöt_à
wc
, 
w˘øns_t
 
desc
));

489 
_GL_CXXALIAS_SYS
 (
tow˘øns
, 
wöt_t
, (wöt_à
wc
, 
w˘øns_t
 
desc
));

490 
_GL_CXXALIASWARN
 (
tow˘øns
);

491 #ñi‡
deföed
 
GNULIB_POSIXCHECK


492 #unde‡
tow˘øns


493 #i‡
HAVE_RAW_DECL_TOWCTRANS


494 
_GL_WARN_ON_USE
 (
tow˘øns
, "towctrans is unportable - "

	@lib/write.c

18 
	~<c⁄fig.h
>

21 
	~<uni°d.h
>

25 #i‡
GNULIB_NONBLOCKING
 || 
GNULIB_SIGPIPE


32 #i‡(
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& ! deföed 
__CYGWIN__


34 
	~<î∫o.h
>

35 
	~<sig«l.h
>

36 
	~<io.h
>

38 
	#WIN32_LEAN_AND_MEAN


	)

39 
	~<wödows.h
>

41 
ssize_t


42 
	$Ωl_wrôe
 (
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

43 #unde‡
wrôe


47 
ssize_t
 
ªt
 = 
	`wrôe
 (
fd
, 
buf
, 
cou¡
);

49 i‡(
ªt
 < 0)

51 #i‡
GNULIB_NONBLOCKING


52 i‡(
î∫o
 =
ENOSPC
)

54 
HANDLE
 
h
 = (HANDLEË
	`_gë_osfh™dÀ
 (
fd
);

55 i‡(
	`GëFûeTy≥
 (
h
Ë=
FILE_TYPE_PIPE
)

58 
DWORD
 
°©e
;

59 i‡(
	`GëNamedPùeH™dÀSèã
 (
h
, &
°©e
, 
NULL
, NULL, NULL,

60 
NULL
, 0)

61 && (
°©e
 & 
PIPE_NOWAIT
) != 0)

77 
DWORD
 
out_size
;

78 
DWORD
 
ö_size
;

79 i‡(
	`GëNamedPùeInfo
 (
h
, 
NULL
, &
out_size
, &
ö_size
, NULL))

81 
size_t
 
ªdu˚d_cou¡
 = 
cou¡
;

85 i‡(
out_size
 !0 && out_sizê< 
ªdu˚d_cou¡
)

86 
ªdu˚d_cou¡
 = 
out_size
;

87 i‡(
ö_size
 !0 && in_sizê< 
ªdu˚d_cou¡
)

88 
ªdu˚d_cou¡
 = 
ö_size
;

89 i‡(
ªdu˚d_cou¡
 < 
cou¡
)

92 
cou¡
 = 
ªdu˚d_cou¡
;

97 
î∫o
 = 
EAGAIN
;

104 #i‡
GNULIB_SIGPIPE


105 i‡(
	`GëLa°Eº‹
 (Ë=
ERROR_NO_DATA


106 && 
	`GëFûeTy≥
 ((
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
))

107 =
FILE_TYPE_PIPE
)

110 
	`øi£
 (
SIGPIPE
);

113 
î∫o
 = 
EPIPE
;

118  
ªt
;

120 
	}
}

	@lib/xalloc-die.c

19 
	~<c⁄fig.h
>

21 
	~"xÆloc.h
"

23 
	~<°dlib.h
>

25 
	~"îr‹.h
"

26 
	~"exôÁû.h
"

28 
	~"gëãxt.h
"

29 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

32 
	$xÆloc_dõ
 ()

34 
	`îr‹
 (
exô_Áûuª
, 0, "%s", 
	`_
("memoryÉxhausted"));

40 
	`ab‹t
 ();

41 
	}
}

	@lib/xalloc-oversized.h

18 #i‚de‡
XALLOC_OVERSIZED_H_


19 
	#XALLOC_OVERSIZED_H_


	)

21 
	~<°ddef.h
>

35 
	#xÆloc_ovîsized
(
n
, 
s
) \

36 ((
size_t
Ë( (
±rdiff_t
Ë< (size_tË? -1 : -2Ë/ (
s
Ë< (
n
))

	)

	@lib/xalloc.h

18 #i‚de‡
XALLOC_H_


19 
	#XALLOC_H_


	)

21 
	~<°ddef.h
>

23 
	~"xÆloc-ovîsized.h
"

25 #ifde‡
__˝lu•lus


30 #i‡
__GNUC__
 >= 3

31 
	#_GL_ATTRIBUTE_MALLOC
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

33 
	#_GL_ATTRIBUTE_MALLOC


	)

36 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3)

37 
	#_GL_ATTRIBUTE_ALLOC_SIZE
(
¨gs
Ë
	`__©åibuã__
 ((
__Æloc_size__
árgs))

	)

39 
	#_GL_ATTRIBUTE_ALLOC_SIZE
(
¨gs
)

	)

47 
_N‹ëu∫
 
xÆloc_dõ
 ();

49 *
xmÆloc
 (
size_t
 
s
)

50 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1));

51 *
xzÆloc
 (
size_t
 
s
)

52 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1));

53 *
xˇŒoc
 (
size_t
 
n
, size_à
s
)

54 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1, 2));

55 *
xªÆloc
 (*
p
, 
size_t
 
s
)

56 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((2));

57 *
x2ªÆloc
 (*
p
, 
size_t
 *
≤
);

58 *
xmemdup
 (c⁄° *
p
, 
size_t
 
s
)

59 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((2));

60 *
x°rdup
 (c⁄° *
°r
)

61 
	g_GL_ATTRIBUTE_MALLOC
;

70 
	#XMALLOC
(
t
Ë(— *Ë
	`xmÆloc
 ( (t)))

	)

74 
	#XNMALLOC
(
n
, 
t
) \

75 ((
t
 *Ë( (tË=1 ? 
	`xmÆloc
 (
n
Ë: 
	`xnmÆloc
 (n,  (t))))

	)

80 
	#XZALLOC
(
t
Ë(— *Ë
	`xzÆloc
 ( (t)))

	)

85 
	#XCALLOC
(
n
, 
t
) \

86 ((
t
 *Ë( (tË=1 ? 
	`xzÆloc
 (
n
Ë: 
	`xˇŒoc
 (n,  (t))))

	)

89 #i‡
HAVE_INLINE


90 
	#°©ic_ölöe
 
ölöe


	)

92 *
xnmÆloc
 (
size_t
 
n
, size_à
s
)

93 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1, 2));

94 *
xƒóŒoc
 (*
p
, 
size_t
 
n
, size_à
s
)

95 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((2, 3));

96 *
x2ƒóŒoc
 (*
p
, 
size_t
 *
≤
, size_à
s
);

97 *
xch¨Æloc
 (
size_t
 
n
)

98 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1));

101 #ifde‡
°©ic_ölöe


106 
°©ic_ölöe
 *
xnmÆloc
 (
size_t
 
n
, size_à
s
)

107 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1, 2));

108 
°©ic_ölöe
 *

109 
xnmÆloc
 (
size_t
 
n
, size_à
s
)

111 i‡(
xÆloc_ovîsized
 (
n
, 
s
))

112 
xÆloc_dõ
 ();

113  
xmÆloc
 (
n
 * 
s
);

119 
°©ic_ölöe
 *
xƒóŒoc
 (*
p
, 
size_t
 
n
, size_à
s
)

120 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((2, 3));

121 
°©ic_ölöe
 *

122 
xƒóŒoc
 (*
p
, 
size_t
 
n
, size_à
s
)

124 i‡(
xÆloc_ovîsized
 (
n
, 
s
))

125 
xÆloc_dõ
 ();

126  
xªÆloc
 (
p
, 
n
 * 
s
);

184 
°©ic_ölöe
 *

185 
x2ƒóŒoc
 (*
p
, 
size_t
 *
≤
, size_à
s
)

187 
size_t
 
	gn
 = *
≤
;

189 i‡(! 
	gp
)

191 i‡(! 
	gn
)

197 íum { 
	gDEFAULT_MXFAST
 = 64 *  (
size_t
) / 4 };

199 
	gn
 = 
DEFAULT_MXFAST
 / 
s
;

200 
	gn
 +!
n
;

209 i‡((
	gsize_t
Ë-1 / 3 * 2 / 
	gs
 <
n
)

210 
xÆloc_dõ
 ();

211 
	gn
 +(
n
 + 1) / 2;

214 *
	g≤
 = 
n
;

215  
xªÆloc
 (
p
, 
n
 * 
s
);

221 
°©ic_ölöe
 *
xch¨Æloc
 (
size_t
 
n
)

222 
_GL_ATTRIBUTE_MALLOC
 
_GL_ATTRIBUTE_ALLOC_SIZE
 ((1));

223 
°©ic_ölöe
 *

224 
xch¨Æloc
 (
size_t
 
n
)

226  
XNMALLOC
 (
n
, );

231 #ifde‡
__˝lu•lus


238 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 *

239 
	$xªÆloc
 (
T
 *
p
, 
size_t
 
s
)

241  (
T
 *Ë
	`xªÆloc
 ((*Ë
p
, 
s
);

242 
	}
}

244 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 *

245 
	$xƒóŒoc
 (
T
 *
p
, 
size_t
 
n
, size_à
s
)

247  (
T
 *Ë
	`xƒóŒoc
 ((*Ë
p
, 
n
, 
s
);

248 
	}
}

250 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 *

251 
	$x2ªÆloc
 (
T
 *
p
, 
size_t
 *
≤
)

253  (
T
 *Ë
	`x2ªÆloc
 ((*Ë
p
, 
≤
);

254 
	}
}

256 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 *

257 
	$x2ƒóŒoc
 (
T
 *
p
, 
size_t
 *
≤
, size_à
s
)

259  (
T
 *Ë
	`x2ƒóŒoc
 ((*Ë
p
, 
≤
, 
s
);

260 
	}
}

262 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 *

263 
	$xmemdup
 (
T
 c⁄° *
p
, 
size_t
 
s
)

265  (
T
 *Ë
	`xmemdup
 ((c⁄° *Ë
p
, 
s
);

266 
	}
}

	@lib/xmalloc.c

18 
	~<c⁄fig.h
>

20 #i‡! 
HAVE_INLINE


21 
	#°©ic_ölöe


	)

23 
	~"xÆloc.h
"

24 #unde‡
°©ic_ölöe


26 
	~<°dlib.h
>

27 
	~<°rög.h
>

32 #i‡
deföed
 
HAVE_CALLOC_GNU
 || (deföed 
__GLIBC__
 && !deföed 
__UCLIBC__
)

33 íum { 
	mHAVE_GNU_CALLOC
 = 1 };

35 íum { 
	mHAVE_GNU_CALLOC
 = 0 };

41 
	$xmÆloc
 (
size_t
 
n
)

43 *
p
 = 
	`mÆloc
 (
n
);

44 i‡(!
p
 && 
n
 != 0)

45 
	`xÆloc_dõ
 ();

46  
p
;

47 
	}
}

53 
	$xªÆloc
 (*
p
, 
size_t
 
n
)

55 i‡(!
n
 && 
p
)

59 
	`‰ì
 (
p
);

60  
NULL
;

63 
p
 = 
	`ªÆloc
 (p, 
n
);

64 i‡(!
p
 && 
n
)

65 
	`xÆloc_dõ
 ();

66  
p
;

67 
	}
}

76 
	$x2ªÆloc
 (*
p
, 
size_t
 *
≤
)

78  
	`x2ƒóŒoc
 (
p
, 
≤
, 1);

79 
	}
}

86 
	$xzÆloc
 (
size_t
 
s
)

88  
	`mem£t
 (
	`xmÆloc
 (
s
), 0, s);

89 
	}
}

95 
	$xˇŒoc
 (
size_t
 
n
, size_à
s
)

97 *
p
;

102 i‡((! 
HAVE_GNU_CALLOC
 && 
	`xÆloc_ovîsized
 (
n
, 
s
))

103 || (! (
p
 = 
	`ˇŒoc
 (
n
, 
s
)Ë&& (
HAVE_GNU_CALLOC
 ||Ç != 0)))

104 
	`xÆloc_dõ
 ();

105  
p
;

106 
	}
}

113 
	$xmemdup
 (c⁄° *
p
, 
size_t
 
s
)

115  
	`mem˝y
 (
	`xmÆloc
 (
s
), 
p
, s);

116 
	}
}

121 
	$x°rdup
 (c⁄° *
°rög
)

123  
	`xmemdup
 (
°rög
, 
	`°æí
 (string) + 1);

124 
	}
}

	@lib/xsize.h

21 #i‚de‡
_XSIZE_H


22 
	#_XSIZE_H


	)

25 
	~<°ddef.h
>

28 
	~<limôs.h
>

29 #i‡
HAVE_STDINT_H


30 
	~<°döt.h
>

50 
	#xˇ°_size_t
(
N
) \

51 ((
N
Ë<
SIZE_MAX
 ? (
size_t
Ë(NË: SIZE_MAX)

	)

54 
ölöe
 
	gsize_t


55 #i‡
__GNUC__
 >= 3

56 
__©åibuã__
 ((
__puª__
))

58 
	$xsum
 (
size_t
 
size1
, size_à
size2
)

60 
size_t
 
sum
 = 
size1
 + 
size2
;

61  (
sum
 >
size1
 ? sum : 
SIZE_MAX
);

62 
	}
}

65 
ölöe
 
	gsize_t


66 #i‡
__GNUC__
 >= 3

67 
__©åibuã__
 ((
__puª__
))

69 
	$xsum3
 (
size_t
 
size1
, size_à
size2
, size_à
size3
)

71  
	`xsum
 (xsum (
size1
, 
size2
), 
size3
);

72 
	}
}

75 
ölöe
 
	gsize_t


76 #i‡
__GNUC__
 >= 3

77 
__©åibuã__
 ((
__puª__
))

79 
	$xsum4
 (
size_t
 
size1
, size_à
size2
, size_à
size3
, size_à
size4
)

81  
	`xsum
 (xsum (xsum (
size1
, 
size2
), 
size3
), 
size4
);

82 
	}
}

85 
ölöe
 
	gsize_t


86 #i‡
__GNUC__
 >= 3

87 
__©åibuã__
 ((
__puª__
))

89 
	$xmax
 (
size_t
 
size1
, size_à
size2
)

93  (
size1
 >
size2
 ? size1 : size2);

94 
	}
}

100 
	#xtimes
(
N
, 
ELSIZE
) \

101 ((
N
Ë<
SIZE_MAX
 / (
ELSIZE
Ë? (
size_t
Ë(NË* (ELSIZEË: SIZE_MAX)

	)

104 
	#size_ovîÊow_p
(
SIZE
) \

105 ((
SIZE
Ë=
SIZE_MAX
)

	)

107 
	#size_ö_bounds_p
(
SIZE
) \

108 ((
SIZE
Ë!
SIZE_MAX
)

	)

	@msdos/config.h

32 #i‚de‡
CONFIG_DOS_H


33 
	#CONFIG_DOS_H


	)

35 
	~<°dlib.h
>

36 
	~<limôs.h
>

37 
	~<t˝.h
>

38 
	~<mÆloc.h
>

40 #ifde‡
__DJGPP__


41 
	~<sys/c⁄fig.h
>

44 
	~<sys/î∫o.h
>

46 #i‡
deföed
(
__WATCOMC__
)

47 #i‡(
__WATCOMC__
 >= 1250)

48 
	#OPENWATCOM_15


	)

50 #i‡(
__WATCOMC__
 >= 1270)

51 
	#OPENWATCOM_17


	)

55 #i‡
deföed
(
__HIGHC__
)

56 
	#HAVE_UNISTD_H
 1

	)

57 
	#HAVE_UTIME_H
 1

	)

60 #i‡
deföed
(
__WATCOMC__
Ë|| deföed(
__BORLANDC__
Ë|| deföed(
__HIGHC__
)

61 
	#ölöe


	)

64 
	#USE_OPIE
 1

	)

65 
	#USE_DIGEST
 1

	)

66 
	#DEBUG


	)

68 #ifde‡
__DJGPP__


69 
	#HAVE__BOOL
 1

	)

70 
	#HAVE_STRCASECMP
 1

	)

71 
	#HAVE_STRNCASECMP
 1

	)

72 
	#HAVE_SIGSETJMP
 1

	)

73 
	#HAVE_SIGBLOCK
 1

	)

74 
	#HAVE_STRUCT_UTIMBUF
 1

	)

75 
	#HAVE_SYS_SELECT_H
 1

	)

76 
	#HAVE_USLEEP
 1

	)

77 
	#HAVE_UTIME_H
 1

	)

78 
	#HAVE_INT64_T
 1

	)

80 #i‡(
DJGPP_MINOR
 >= 4)

81 
	#HAVE_STDBOOL_H
 1

	)

82 
	#HAVE_STDINT_H
 1

	)

83 
	#HAVE_SNPRINTF
 1

	)

84 
	#HAVE_VSNPRINTF
 1

	)

85 
	#HAVE_UINT32_T
 1

	)

89 #ifde‡
__HIGHC__


90 
	#HAVE_STRUCT_UTIMBUF
 1

	)

91 
	#HAVE_UTIME_H
 1

	)

94 #ifde‡
OPENWATCOM_15


95 
	#HAVE_ALLOCA_H
 1

	)

96 
	#HAVE_INT64_T
 1

	)

97 
	#HAVE_SNPRINTF
 1

	)

98 
	#HAVE_STRCASECMP
 1

	)

99 
	#HAVE_STRNCASECMP
 1

	)

100 
	#HAVE_STDINT_H
 1

	)

101 
	#HAVE_UTIME_H
 1

	)

104 #ifde‡
OPENWATCOM_17


105 
	#HAVE__BOOL
 1

	)

106 
	#HAVE_STDBOOL_H
 1

	)

109 
	#HAVE_PROCESS_H
 1

	)

110 
	#HAVE_STRDUP
 1

	)

111 
	#HAVE_STDLIB_H
 1

	)

112 
	#HAVE_STRING_H
 1

	)

113 
	#HAVE_BUILTIN_MD5
 1

	)

114 
	#HAVE_ISATTY
 1

	)

116 
	#lookup_ho°
 
wgë_lookupho°


	)

117 
	#£À˘
 
£À˘_s


	)

118 
	#sockÀn_t
 

	)

120 
	#sock_ªad
 
wgë_sock_ªad


	)

121 
	#sock_wrôe
 
wgë_sock_wrôe


	)

122 
	#sock_˛o£
 
wgë_sock_˛o£


	)

124 #i‡!
deföed
(
__DJGPP__
)

125 
	~<dúe˘.h
>

126 
	#mkdú
(
p
,
a
Ë(
mkdú
)’)

	)

127 
	#°rˇ£cmp
 
°ricmp


	)

130 #i‡!
deföed
(
MSDOS
)

131 
	#MSDOS


	)

134 #i‡!
deföed
(
USE_WATT32
)

135 
	#USE_WATT32


	)

138 
	#LOCALEDIR
 ""

	)

139 
	#OS_TYPE
 "DOS"

	)

	@src/build_info.c

9 
	~"wgë.h
"

10 
	~<°dio.h
>

12 c⁄° *
	gcompûed_„©uªs
[] =

15 #i‡
deföed
 
ENABLE_DIGEST


21 #i‡
deföed
 
HAVE_SSL


27 #i‡
deföed
 
ENABLE_IPV6


33 #i‡
deföed
 
ENABLE_IRI


39 #i‡
SIZEOF_OFF_T
 >= 8

45 #i‡
deföed
 
ENABLE_NLS


51 #i‡
deföed
 
ENABLE_NTLM


57 #i‡
deföed
 
ENABLE_OPIE


63 #i‡
deföed
 
HAVE_LIBSSL


65 #ñi‡
deföed
 
HAVE_LIBGNUTLS


73 
NULL


	@src/cmpt.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<time.h
>

39 
	~<uni°d.h
>

41 
	~<î∫o.h
>

57 #i‚de‡
HAVE_STRCASECMP


63 
	$°rˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
)

65 c⁄° *
p1
 = (c⁄° *Ë
s1
;

66 c⁄° *
p2
 = (c⁄° *Ë
s2
;

67 
c1
, 
c2
;

69 i‡(
p1
 =
p2
)

74 
c1
 = 
	`c_tﬁowî
 (*
p1
++);

75 
c2
 = 
	`c_tﬁowî
 (*
p2
++);

76 i‡(
c1
 == '\0')

79 
c1
 =
c2
);

81  
c1
 - 
c2
;

82 
	}
}

85 #i‚de‡
HAVE_STRNCASECMP


92 
	$°∫ˇ£cmp
 (c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

94 c⁄° *
p1
 = (c⁄° *Ë
s1
;

95 c⁄° *
p2
 = (c⁄° *Ë
s2
;

96 
c1
, 
c2
;

98 i‡(
p1
 =
p2
 || 
n
 == 0)

103 
c1
 = 
	`c_tﬁowî
 (*
p1
++);

104 
c2
 = 
	`c_tﬁowî
 (*
p2
++);

105 i‡(
c1
 ='\0' || c1 !
c2
)

106  
c1
 - 
c2
;

107 } --
n
 > 0);

109  
c1
 - 
c2
;

110 
	}
}

113 #i‚de‡
HAVE_MEMRCHR


119 
	$memrchr
 (c⁄° *
s
, 
c
, 
size_t
 
n
)

121 c⁄° *
b
 = 
s
;

122 c⁄° *
e
 = 
b
 + 
n
;

123 
e
 > 
b
)

124 i‡(*--
e
 =
c
)

125  (*Ë
e
;

126  
NULL
;

127 
	}
}

135 #i‚de‡
HAVE_STRPTIME


149 #i‚de‡
__P


150 
	#__P
(
¨gs
Ë
	)
args

153 #i‡! 
HAVE_LOCALTIME_R
 && ! 
deföed
 
loˇ…ime_r


154 #ifde‡
_LIBC


155 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

158 
	#loˇ…ime_r
 
my_loˇ…ime_r


	)

159 
tm
 *
loˇ…ime_r
 
__P
 ((c⁄° 
time_t
 *, tm *));

160 
tm
 *

161 
	$loˇ…ime_r
 (
t
, 
ç
)

162 c⁄° 
time_t
 *
t
;

163 
tm
 *
ç
;

165 
tm
 *
l
 = 
	`loˇ…ime
 (
t
);

166 i‡(! 
l
)

168 *
ç
 = *
l
;

169  
ç
;

170 
	}
}

175 
	#m©ch_ch¨
(
ch1
, 
ch2
Ëi‡(ch1 !ch2Ë 
NULL


	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#m©ch_°rög
(
cs1
, 
s2
) \

178 ({ 
size_t
 
Àn
 = 
	`°æí
 (
cs1
); \

179 
ªsu…
 = 
	`°∫ˇ£cmp
 ((
cs1
), (
s2
), 
Àn
) == 0; \

180 i‡(
ªsu…
Ë(
s2
Ë+
Àn
; \

181 
ªsu…
; })

	)

184 
	#m©ch_°rög
(
cs1
, 
s2
) \

185 (
	`°∫ˇ£cmp
 ((
cs1
), (
s2
), 
	`°æí
 (cs1)Ë? 0 : ((s2Ë+°æí (cs1), 1))

	)

189 
	#gë_numbî
(
‰om
, 
to
, 
n
) \

191 
__n
 = 
n
; \

192 
vÆ
 = 0; \

193 *
Ω
 == ' ') \

194 ++
Ω
; \

195 i‡(*
Ω
 < '0' || *rp > '9') \

196  
NULL
; \

198 
vÆ
 *= 10; \

199 
vÆ
 +*
Ω
++ - '0'; \

200 } --
__n
 > 0 && 
vÆ
 * 10 <
to
 && *
Ω
 >= '0' && *rp <= '9'); \

201 i‡(
vÆ
 < 
‰om
 || vÆ > 
to
) \

202  
NULL
; \

203 } 0)

	)

204 #ifde‡
_NL_CURRENT


206 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

207 
	#gë_Æt_numbî
(
‰om
, 
to
, 
n
) \

209 
__œbñ__
 
do_n‹mÆ
; \

210 i‡(*
decided
 !
øw
) \

212 c⁄° *
Æts
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
ALT_DIGITS
); \

213 
__n
 = 
n
; \

214 
™y
 = 0; \

215 *
Ω
 == ' ') \

216 ++
Ω
; \

217 
vÆ
 = 0; \

219 
vÆ
 *= 10; \

220 *
Æts
 != '\0') \

222 
size_t
 
Àn
 = 
	`°æí
 (
Æts
); \

223 i‡(
	`°∫ˇ£cmp
 (
Æts
, 
Ω
, 
Àn
) == 0) \

225 
Æts
 +
Àn
 + 1; \

226 ++
vÆ
; \

228 i‡(*
Æts
 == '\0') \

230 i‡(*
decided
 =
nŸ
 && ! 
™y
) \

231 
do_n‹mÆ
; \

233 i‡(! 
™y
) \

234  
NULL
; \

236 
vÆ
 /= 10; \

240 *
decided
 = 
loc
; \

241 } --
__n
 > 0 && 
vÆ
 * 10 <
to
); \

242 i‡(
vÆ
 < 
‰om
 || vÆ > 
to
) \

243  
NULL
; \

247 
do_n‹mÆ
: \

248 
	`gë_numbî
 (
‰om
, 
to
, 
n
); \

251 })

	)

253 
	#gë_Æt_numbî
(
‰om
, 
to
, 
n
) \

254 dÿ{

	)

255 i‡(*
	gdecided
 !
øw
) \

257 c⁄° *
Æts
 = 
_NL_CURRENT
 (
LC_TIME
, 
ALT_DIGITS
); \

258 
	g__n
 = 
n
; \

259 
	g™y
 = 0; \

260 *
	gΩ
 == ' ') \

261 ++
Ω
; \

262 
	gvÆ
 = 0; \

264 
	gvÆ
 *= 10; \

265 *
	gÆts
 != '\0') \

267 
size_t
 
Àn
 = 
°æí
 (
Æts
); \

268 i‡(
°∫ˇ£cmp
 (
Æts
, 
Ω
, 
Àn
) == 0) \

270 
	gÆts
 +
Àn
 + 1; \

271 ++
	gvÆ
; \

273 i‡(*
	gÆts
 == '\0') \

275 i‡(*
decided
 =
nŸ
 && ! 
™y
) \

276 
do_n‹mÆ
; \

278 i‡(! 
	g™y
) \

279  
	gNULL
; \

281 
	gvÆ
 /= 10; \

285 *
	gdecided
 = 
loc
; \

286 } --
	g__n
 > 0 && 
	gvÆ
 * 10 <
to
); \

287 i‡(
	gvÆ
 < 
	g‰om
 || vÆ > 
	gto
) \

288  
	gNULL
; \

292 
	gdo_n‹mÆ
: \

293 
gë_numbî
 (
‰om
, 
to
, 
n
); \

298 
	#gë_Æt_numbî
(
‰om
, 
to
, 
n
) \

300 
	`gë_numbî
(
‰om
, 
to
, 
n
)

	)

302 
	#ªcursive
(
√w_fmt
) \

303 (*(
√w_fmt
) != '\0' \

304 && (
Ω
 = 
	`°Ωtime_öã∫Æ
 (Ω, (
√w_fmt
), 
tm
, 
decided
)Ë!
NULL
)

	)

307 #ifde‡
_LIBC


309 c⁄° 
loˇÀ_d©a
 
_∆_C_LC_TIME
;

310 c⁄° 
__m⁄_yday
[2][13];

312 
	#wìkday_«me
 (&
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
DAY_1
)].
°rög
)

	)

313 
	#ab_wìkday_«me
 \

314 (&
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
ABDAY_1
)].
°rög
)

	)

315 
	#m⁄th_«me
 (&
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
MON_1
)].
°rög
)

	)

316 
	#ab_m⁄th_«me
 (&
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
ABMON_1
)].
°rög
)

	)

317 
	#HERE_D_T_FMT
 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
D_T_FMT
)].
°rög
)

	)

318 
	#HERE_D_FMT
 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
D_FMT
)].
°rög
)

	)

319 
	#HERE_AM_STR
 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
AM_STR
)].
°rög
)

	)

320 
	#HERE_PM_STR
 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
PM_STR
)].
°rög
)

	)

321 
	#HERE_T_FMT_AMPM
 \

322 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
T_FMT_AMPM
)].
°rög
)

	)

323 
	#HERE_T_FMT
 (
_∆_C_LC_TIME
.
vÆues
[
	`_NL_ITEM_INDEX
 (
T_FMT
)].
°rög
)

	)

325 
	#°∫ˇ£cmp
(
s1
, 
s2
, 
n
Ë
	`__°∫ˇ£cmp
 (s1, s2,Ç)

	)

327 c⁄° 
wìkday_«me
[][10] =

331 
	}
};

332 c⁄° 
	gab_wìkday_«me
[][4] =

336 c⁄° 
	gm⁄th_«me
[][10] =

341 c⁄° 
	gab_m⁄th_«me
[][4] =

346 
	#HERE_D_T_FMT
 "%®%b %ê%H:%M:%S %Y"

	)

347 
	#HERE_D_FMT
 "%m/%d/%y"

	)

348 
	#HERE_AM_STR
 "AM"

	)

349 
	#HERE_PM_STR
 "PM"

	)

350 
	#HERE_T_FMT_AMPM
 "%I:%M:%S %p"

	)

351 
	#HERE_T_FMT
 "%H:%M:%S"

	)

353 c⁄° 
	g__m⁄_yday
[2][13];

354 #i‚de‡
NEED_MON_YDAY


355 
	#NEED_MON_YDAY


	)

360 
	eloˇÀ_°©us
 { 
	mnŸ
, 
	mloc
, 
	møw
 };

363 #i‚de‡
__i¶óp


366 
	#__i¶óp
(
yór
) \

367 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

372 
	$day_of_the_wìk
 (
tm
 *tm)

377 
c‹r_yór
 = 1900 + 
tm
->
tm_yór
 - (tm->
tm_m⁄
 < 2);

378 
wday
 = (-473

379 + (365 * (
tm
->
tm_yór
 - 70))

380 + (
c‹r_yór
 / 4)

381 - ((
c‹r_yór
 / 4) / 25) + ((corr_year / 4) % 25 < 0)

382 + (((
c‹r_yór
 / 4) / 25) / 4)

383 + 
__m⁄_yday
[0][
tm
->
tm_m⁄
]

384 + 
tm
->
tm_mday
 - 1);

385 
tm
->
tm_wday
 = ((
wday
 % 7) + 7) % 7;

386 
	}
}

390 
	$day_of_the_yór
 (
tm
 *tm)

392 
tm
->
tm_yday
 = (
__m⁄_yday
[
	`__i¶óp
 (1900 +Åm->
tm_yór
)][tm->
tm_m⁄
]

393 + (
tm
->
tm_mday
 - 1));

394 
	}
}

397 #ifde‡
_LIBC


398 
	göã∫Æ_fun˘i⁄


400 
°Ωtime_öã∫Æ
 
__P
 ((c⁄° *
buf
, c⁄° *
f‹m©
, 
tm
 *tm,

401 
loˇÀ_°©us
 *
decided
));

404 #ifde‡
_LIBC


405 
	göã∫Æ_fun˘i⁄


407 
	$°Ωtime_öã∫Æ
 (
Ω
, 
fmt
, 
tm
, 
decided
)

408 c⁄° *
Ω
;

409 c⁄° *
fmt
;

410 
tm
 *tm;

411 
loˇÀ_°©us
 *
decided
;

413 #ifde‡
_NL_CURRENT


414 c⁄° *
Ω_backup
;

416 
˙t
;

417 
size_t
 
vÆ
;

418 
have_I
, 
is_pm
;

419 
˚¡ury
, 
w™t_˚¡ury
;

420 
have_wday
, 
w™t_xday
;

421 
have_yday
;

422 
have_m⁄
, 
have_mday
;

424 
have_I
 = 
is_pm
 = 0;

425 
˚¡ury
 = -1;

426 
w™t_˚¡ury
 = 0;

427 
have_wday
 = 
w™t_xday
 = 
have_yday
 = 
have_m⁄
 = 
have_mday
 = 0;

429 *
fmt
 != '\0')

433 i‡(
	`c_is•a˚
 (*
fmt
))

435 
	`c_is•a˚
 (*
Ω
))

436 ++
Ω
;

437 ++
fmt
;

443 i‡(*
fmt
 != '%')

445 
	`m©ch_ch¨
 (*
fmt
++, *
Ω
++);

449 ++
fmt
;

450 #i‚de‡
_NL_CURRENT


452 
°¨t_ovî
:

455 #ifde‡
_NL_CURRENT


457 
Ω_backup
 = 
Ω
;

460 *
fmt
++)

464 
	`m©ch_ch¨
 ('%', *
Ω
++);

469 
˙t
 = 0; cnt < 7; ++cnt)

471 #ifde‡
_NL_CURRENT


472 i‡(*
decided
 !=
øw
)

474 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
DAY_1
 + 
˙t
), 
Ω
))

476 i‡(*
decided
 =
nŸ


477 && 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
DAY_1
 + 
˙t
),

478 
wìkday_«me
[
˙t
]))

479 *
decided
 = 
loc
;

482 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
ABDAY_1
 + 
˙t
), 
Ω
))

484 i‡(*
decided
 =
nŸ


485 && 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
ABDAY_1
 + 
˙t
),

486 
ab_wìkday_«me
[
˙t
]))

487 *
decided
 = 
loc
;

492 i‡(*
decided
 !
loc


493 && (
	`m©ch_°rög
 (
wìkday_«me
[
˙t
], 
Ω
)

494 || 
	`m©ch_°rög
 (
ab_wìkday_«me
[
˙t
], 
Ω
)))

496 *
decided
 = 
øw
;

500 i‡(
˙t
 == 7)

502  
NULL
;

503 
tm
->
tm_wday
 = 
˙t
;

504 
have_wday
 = 1;

510 
˙t
 = 0; cnt < 12; ++cnt)

512 #ifde‡
_NL_CURRENT


513 i‡(*
decided
 !=
øw
)

515 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
MON_1
 + 
˙t
), 
Ω
))

517 i‡(*
decided
 =
nŸ


518 && 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
MON_1
 + 
˙t
),

519 
m⁄th_«me
[
˙t
]))

520 *
decided
 = 
loc
;

523 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
ABMON_1
 + 
˙t
), 
Ω
))

525 i‡(*
decided
 =
nŸ


526 && 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
ABMON_1
 + 
˙t
),

527 
ab_m⁄th_«me
[
˙t
]))

528 *
decided
 = 
loc
;

533 i‡(
	`m©ch_°rög
 (
m⁄th_«me
[
˙t
], 
Ω
)

534 || 
	`m©ch_°rög
 (
ab_m⁄th_«me
[
˙t
], 
Ω
))

536 *
decided
 = 
øw
;

540 i‡(
˙t
 == 12)

542  
NULL
;

543 
tm
->
tm_m⁄
 = 
˙t
;

544 
w™t_xday
 = 1;

548 #ifde‡
_NL_CURRENT


549 i‡(*
decided
 !
øw
)

551 i‡(!
	`ªcursive
 (
	`_NL_CURRENT
 (
LC_TIME
, 
D_T_FMT
)))

553 i‡(*
decided
 =
loc
)

554  
NULL
;

556 
Ω
 = 
Ω_backup
;

560 i‡(*
decided
 =
nŸ
 &&

561 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
D_T_FMT
), 
HERE_D_T_FMT
))

562 *
decided
 = 
loc
;

563 
w™t_xday
 = 1;

566 *
decided
 = 
øw
;

569 i‡(!
	`ªcursive
 (
HERE_D_T_FMT
))

570  
NULL
;

571 
w™t_xday
 = 1;

575 
	`gë_numbî
 (0, 99, 2);

576 
˚¡ury
 = 
vÆ
;

577 
w™t_xday
 = 1;

582 
	`gë_numbî
 (1, 31, 2);

583 
tm
->
tm_mday
 = 
vÆ
;

584 
have_mday
 = 1;

585 
w™t_xday
 = 1;

588 i‡(!
	`ªcursive
 ("%Y-%m-%d"))

589  
NULL
;

590 
w™t_xday
 = 1;

593 #ifde‡
_NL_CURRENT


594 i‡(*
decided
 !
øw
)

596 i‡(!
	`ªcursive
 (
	`_NL_CURRENT
 (
LC_TIME
, 
D_FMT
)))

598 i‡(*
decided
 =
loc
)

599  
NULL
;

601 
Ω
 = 
Ω_backup
;

605 i‡(*
decided
 =
nŸ


606 && 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
D_FMT
), 
HERE_D_FMT
))

607 *
decided
 = 
loc
;

608 
w™t_xday
 = 1;

611 *
decided
 = 
øw
;

617 i‡(!
	`ªcursive
 (
HERE_D_FMT
))

618  
NULL
;

619 
w™t_xday
 = 1;

624 
	`gë_numbî
 (0, 23, 2);

625 
tm
->
tm_hour
 = 
vÆ
;

626 
have_I
 = 0;

630 
	`gë_numbî
 (1, 12, 2);

631 
tm
->
tm_hour
 = 
vÆ
 % 12;

632 
have_I
 = 1;

636 
	`gë_numbî
 (1, 366, 3);

637 
tm
->
tm_yday
 = 
vÆ
 - 1;

638 
have_yday
 = 1;

642 
	`gë_numbî
 (1, 12, 2);

643 
tm
->
tm_m⁄
 = 
vÆ
 - 1;

644 
have_m⁄
 = 1;

645 
w™t_xday
 = 1;

649 
	`gë_numbî
 (0, 59, 2);

650 
tm
->
tm_mö
 = 
vÆ
;

655 
	`c_is•a˚
 (*
Ω
))

656 ++
Ω
;

660 #ifde‡
_NL_CURRENT


661 i‡(*
decided
 !
øw
)

663 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
AM_STR
), 
Ω
))

665 i‡(
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
AM_STR
), 
HERE_AM_STR
))

666 *
decided
 = 
loc
;

669 i‡(
	`m©ch_°rög
 (
	`_NL_CURRENT
 (
LC_TIME
, 
PM_STR
), 
Ω
))

671 i‡(
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
PM_STR
), 
HERE_PM_STR
))

672 *
decided
 = 
loc
;

673 
is_pm
 = 1;

676 *
decided
 = 
øw
;

679 i‡(!
	`m©ch_°rög
 (
HERE_AM_STR
, 
Ω
))

681 i‡(
	`m©ch_°rög
 (
HERE_PM_STR
, 
Ω
))

682 
is_pm
 = 1;

684  
NULL
;

688 #ifde‡
_NL_CURRENT


689 i‡(*
decided
 !
øw
)

691 i‡(!
	`ªcursive
 (
	`_NL_CURRENT
 (
LC_TIME
, 
T_FMT_AMPM
)))

693 i‡(*
decided
 =
loc
)

694  
NULL
;

696 
Ω
 = 
Ω_backup
;

700 i‡(*
decided
 =
nŸ
 &&

701 
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
T_FMT_AMPM
),

702 
HERE_T_FMT_AMPM
))

703 *
decided
 = 
loc
;

706 *
decided
 = 
øw
;

709 i‡(!
	`ªcursive
 (
HERE_T_FMT_AMPM
))

710  
NULL
;

713 i‡(!
	`ªcursive
 ("%H:%M"))

714  
NULL
;

722 
time_t
 
£cs
 = 0;

723 i‡(*
Ω
 < '0' || *rp > '9')

725  
NULL
;

729 
£cs
 *= 10;

730 
£cs
 +*
Ω
++ - '0';

732 *
Ω
 >= '0' && *rp <= '9');

734 i‡(
	`loˇ…ime_r
 (&
£cs
, 
tm
Ë=
NULL
)

736  
NULL
;

740 
	`gë_numbî
 (0, 61, 2);

741 
tm
->
tm_£c
 = 
vÆ
;

744 #ifde‡
_NL_CURRENT


745 i‡(*
decided
 !
øw
)

747 i‡(!
	`ªcursive
 (
	`_NL_CURRENT
 (
LC_TIME
, 
T_FMT
)))

749 i‡(*
decided
 =
loc
)

750  
NULL
;

752 
Ω
 = 
Ω_backup
;

756 i‡(
	`°rcmp
 (
	`_NL_CURRENT
 (
LC_TIME
, 
T_FMT
), 
HERE_T_FMT
))

757 *
decided
 = 
loc
;

760 *
decided
 = 
øw
;

765 i‡(!
	`ªcursive
 (
HERE_T_FMT
))

766  
NULL
;

769 
	`gë_numbî
 (1, 7, 1);

770 
tm
->
tm_wday
 = 
vÆ
 % 7;

771 
have_wday
 = 1;

774 
	`gë_numbî
 (0, 99, 2);

778 i‡(*
Ω
 < '0' || *rp > '9')

779  
NULL
;

783 ++
Ω
;

784 *
Ω
 >= '0' && *rp <= '9');

789 
	`gë_numbî
 (0, 53, 2);

795 
	`gë_numbî
 (0, 6, 1);

796 
tm
->
tm_wday
 = 
vÆ
;

797 
have_wday
 = 1;

801 
	`gë_numbî
 (0, 99, 2);

804 
tm
->
tm_yór
 = 
vÆ
 >= 69 ? val : val + 100;

806 
w™t_˚¡ury
 = 1;

807 
w™t_xday
 = 1;

811 
	`gë_numbî
 (0, 9999, 4);

812 
tm
->
tm_yór
 = 
vÆ
 - 1900;

813 
w™t_˚¡ury
 = 0;

814 
w™t_xday
 = 1;

820 #ifde‡
_NL_CURRENT


821 *
fmt
++)

825 i‡(*
decided
 !
øw
)

827 c⁄° *
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
ERA_D_T_FMT
);

829 i‡(*
fmt
 == '\0')

830 
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
D_T_FMT
);

832 i‡(!
	`ªcursive
 (
fmt
))

834 i‡(*
decided
 =
loc
)

835  
NULL
;

837 
Ω
 = 
Ω_backup
;

841 i‡(
	`°rcmp
 (
fmt
, 
HERE_D_T_FMT
))

842 *
decided
 = 
loc
;

843 
w™t_xday
 = 1;

846 *
decided
 = 
øw
;

850 i‡(!
	`ªcursive
 (
HERE_D_T_FMT
))

851  
NULL
;

852 
w™t_xday
 = 1;

863 i‡(*
decided
 !
øw
)

865 c⁄° *
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
ERA_D_FMT
);

867 i‡(*
fmt
 == '\0')

868 
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
D_FMT
);

870 i‡(!
	`ªcursive
 (
fmt
))

872 i‡(*
decided
 =
loc
)

873  
NULL
;

875 
Ω
 = 
Ω_backup
;

879 i‡(
	`°rcmp
 (
fmt
, 
HERE_D_FMT
))

880 *
decided
 = 
loc
;

883 *
decided
 = 
øw
;

885 i‡(!
	`ªcursive
 (
HERE_D_FMT
))

886  
NULL
;

889 i‡(*
decided
 !
øw
)

891 c⁄° *
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
ERA_T_FMT
);

893 i‡(*
fmt
 == '\0')

894 
fmt
 = 
	`_NL_CURRENT
 (
LC_TIME
, 
T_FMT
);

896 i‡(!
	`ªcursive
 (
fmt
))

898 i‡(*
decided
 =
loc
)

899  
NULL
;

901 
Ω
 = 
Ω_backup
;

905 i‡(
	`°rcmp
 (
fmt
, 
HERE_T_FMT
))

906 *
decided
 = 
loc
;

909 *
decided
 = 
øw
;

911 i‡(!
	`ªcursive
 (
HERE_T_FMT
))

912  
NULL
;

915  
NULL
;

921 i‡(*
fmt
 != 'c' && *fmt != 'C' && *fmt != 'y' && *fmt != 'Y'

922 && *
fmt
 != 'x' && *fmt != 'X')

924  
NULL
;

926 
°¨t_ovî
;

929 *
fmt
++)

934 
	`gë_Æt_numbî
 (1, 31, 2);

935 
tm
->
tm_mday
 = 
vÆ
;

936 
have_mday
 = 1;

937 
w™t_xday
 = 1;

942 
	`gë_Æt_numbî
 (0, 23, 2);

943 
tm
->
tm_hour
 = 
vÆ
;

944 
have_I
 = 0;

949 
	`gë_Æt_numbî
 (1, 12, 2);

950 
tm
->
tm_hour
 = 
vÆ
 - 1;

951 
have_I
 = 1;

955 
	`gë_Æt_numbî
 (1, 12, 2);

956 
tm
->
tm_m⁄
 = 
vÆ
 - 1;

957 
have_m⁄
 = 1;

958 
w™t_xday
 = 1;

962 
	`gë_Æt_numbî
 (0, 59, 2);

963 
tm
->
tm_mö
 = 
vÆ
;

967 
	`gë_Æt_numbî
 (0, 61, 2);

968 
tm
->
tm_£c
 = 
vÆ
;

973 
	`gë_Æt_numbî
 (0, 53, 2);

979 
	`gë_Æt_numbî
 (0, 6, 1);

980 
tm
->
tm_wday
 = 
vÆ
;

981 
have_wday
 = 1;

985 
	`gë_Æt_numbî
 (0, 99, 2);

986 
tm
->
tm_yór
 = 
vÆ
 >= 69 ? val : val + 100;

987 
w™t_xday
 = 1;

990  
NULL
;

994  
NULL
;

998 i‡(
have_I
 && 
is_pm
)

999 
tm
->
tm_hour
 += 12;

1001 i‡(
˚¡ury
 != -1)

1003 i‡(
w™t_˚¡ury
)

1004 
tm
->
tm_yór
 =Åm->tm_yó∏% 100 + (
˚¡ury
 - 19) * 100;

1007 
tm
->
tm_yór
 = (
˚¡ury
 - 19) * 100;

1010 i‡(
w™t_xday
 && !
have_wday
) {

1011 i‡–!(
have_m⁄
 && 
have_mday
Ë&& 
have_yday
) {

1013 
t_m⁄
 = 0;

1014 
__m⁄_yday
[
	`__i¶óp
(1900 + 
tm
->
tm_yór
)][
t_m⁄
] <tm->
tm_yday
)

1015 
t_m⁄
++;

1016 i‡(!
have_m⁄
)

1017 
tm
->
tm_m⁄
 = 
t_m⁄
 - 1;

1018 i‡(!
have_mday
)

1019 
tm
->
tm_mday
 =Åm->
tm_yday
 - 
__m⁄_yday
[
	`__i¶óp
(1900 +Åm->
tm_yór
)][
t_m⁄
 - 1] + 1;

1021 
	`day_of_the_wìk
 (
tm
);

1023 i‡(
w™t_xday
 && !
have_yday
)

1024 
	`day_of_the_yór
 (
tm
);

1026  (*Ë
Ω
;

1027 
	}
}

1031 
	$°Ωtime
 (
buf
, 
f‹m©
, 
tm
)

1032 c⁄° *
buf
;

1033 c⁄° *
f‹m©
;

1034 
tm
 *tm;

1036 
loˇÀ_°©us
 
decided
;

1037 #ifde‡
_NL_CURRENT


1038 
decided
 = 
nŸ
;

1040 
decided
 = 
øw
;

1042  
	`°Ωtime_öã∫Æ
 (
buf
, 
f‹m©
, 
tm
, &
decided
);

1043 
	}
}

1046 #ifde‡
NEED_MON_YDAY


1047 c⁄° 
	g__m⁄_yday
[2][13] =

1070 #i‚de‡
SYSTEM_FNMATCH


1072 
	#__FNM_FLAGS
 (
FNM_PATHNAME
 | 
FNM_NOESCAPE
 | 
FNM_PERIOD
)

	)

1081 
	$‚m©ch
 (c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
)

1083 c⁄° *
p
 = 
∑âîn
, *
n
 = 
°rög
;

1084 
c
;

1086 i‡((
Êags
 & ~
__FNM_FLAGS
) != 0)

1088 
î∫o
 = 
EINVAL
;

1092 (
c
 = *
p
++) != '\0')

1094 
c
)

1097 i‡(*
n
 == '\0')

1098  (
FNM_NOMATCH
);

1099 i‡((
Êags
 & 
FNM_PATHNAME
Ë&& *
n
 == '/')

1100  (
FNM_NOMATCH
);

1101 i‡((
Êags
 & 
FNM_PERIOD
Ë&& *
n
 == '.' &&

1102 (
n
 =
°rög
 || ((
Êags
 & 
FNM_PATHNAME
) &&Ç[-1] == '/')))

1103  (
FNM_NOMATCH
);

1107 i‡(!(
Êags
 & 
FNM_NOESCAPE
))

1108 
c
 = *
p
++;

1109 i‡(*
n
 !
c
)

1110  (
FNM_NOMATCH
);

1114 i‡((
Êags
 & 
FNM_PERIOD
Ë&& *
n
 == '.' &&

1115 (
n
 =
°rög
 || ((
Êags
 & 
FNM_PATHNAME
) &&Ç[-1] == '/')))

1116  (
FNM_NOMATCH
);

1118 
c
 = *
p
++; c ='?' || c ='*'; c = *p++, ++
n
)

1119 i‡(((
Êags
 & 
FNM_PATHNAME
Ë&& *
n
 == '/') ||

1120 (
c
 ='?' && *
n
 == '\0'))

1121  (
FNM_NOMATCH
);

1123 i‡(
c
 == '\0')

1127 
c1
 = (!(
Êags
 & 
FNM_NOESCAPE
Ë&& 
c
 ='\\'Ë? *
p
 : c;

1128 --
p
; *
n
 != '\0'; ++n)

1129 i‡((
c
 ='[' || *
n
 =
c1
) &&

1130 
	`‚m©ch
 (
p
, 
n
, 
Êags
 & ~
FNM_PERIOD
) == 0)

1132  (
FNM_NOMATCH
);

1139 
nŸ
;

1141 i‡(*
n
 == '\0')

1142  (
FNM_NOMATCH
);

1144 i‡((
Êags
 & 
FNM_PERIOD
Ë&& *
n
 == '.' &&

1145 (
n
 =
°rög
 || ((
Êags
 & 
FNM_PATHNAME
) &&Ç[-1] == '/')))

1146  (
FNM_NOMATCH
);

1151 c⁄° *
≈
;

1153 
≈
 = 
p
;Çp && *np && *np != ']';Çp++)

1156 i‡(
≈
 && !*np)

1158 i‡(*
n
 != '[')

1159  (
FNM_NOMATCH
);

1160 
√xt_ch¨
;

1164 
nŸ
 = (*
p
 == '!' || *p == '^');

1165 i‡(
nŸ
)

1166 ++
p
;

1168 
c
 = *
p
++;

1171 
c°¨t
 = 
c
, 
˚nd
 = c;

1173 i‡(!(
Êags
 & 
FNM_NOESCAPE
Ë&& 
c
 == '\\')

1174 
c°¨t
 = 
˚nd
 = *
p
++;

1176 i‡(
c
 == '\0')

1178  (
FNM_NOMATCH
);

1180 
c
 = *
p
++;

1182 i‡((
Êags
 & 
FNM_PATHNAME
Ë&& 
c
 == '/')

1184  (
FNM_NOMATCH
);

1186 i‡(
c
 ='-' && *
p
 != ']')

1188 
˚nd
 = *
p
++;

1189 i‡(!(
Êags
 & 
FNM_NOESCAPE
Ë&& 
˚nd
 == '\\')

1190 
˚nd
 = *
p
++;

1191 i‡(
˚nd
 == '\0')

1192  (
FNM_NOMATCH
);

1193 
c
 = *
p
++;

1196 i‡(*
n
 >
c°¨t
 && *¿<
˚nd
)

1197 
m©ched
;

1199 i‡(
c
 == ']')

1202 i‡(!
nŸ
)

1203  (
FNM_NOMATCH
);

1205 
√xt_ch¨
:

1208 
m©ched
:

1210 
c
 != ']')

1212 i‡(
c
 == '\0')

1214  (
FNM_NOMATCH
);

1216 
c
 = *
p
++;

1217 i‡(!(
Êags
 & 
FNM_NOESCAPE
Ë&& 
c
 == '\\')

1219 ++
p
;

1221 i‡(
nŸ
)

1222  (
FNM_NOMATCH
);

1227 i‡(
c
 !*
n
)

1228  (
FNM_NOMATCH
);

1231 ++
n
;

1234 i‡(*
n
 == '\0')

1237  (
FNM_NOMATCH
);

1238 
	}
}

1242 #i‚de‡
HAVE_TIMEGM


1247 
	#ISLEAP
(
yór
) \

1248 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

1251 
	#LEAPYEARS
(
y1
, 
y2
) \

1252 ((
y2
-1)/4 - (
y1
-1)/4Ë- ((y2-1)/100 - (y1-1)/100Ë+ ((y2-1)/400 - (y1-1)/400)

	)

1259 
time_t


1260 
	$timegm
 (
tm
 *
t
)

1262 c⁄° 
m⁄th_to_days
[][13] = {

1266 c⁄° 
yór
 = 1900 + 
t
->
tm_yór
;

1267 
£cs
;

1268 
days
;

1270 i‡(
yór
 < 1970)

1271  (
time_t
) -1;

1273 
days
 = 365 * (
yór
 - 1970);

1276 
days
 +
	`LEAPYEARS
 (1970, 
yór
);

1277 i‡(
t
->
tm_m⁄
 < 0 ||Å->tm_mon >= 12)

1278  (
time_t
) -1;

1279 
days
 +
m⁄th_to_days
[
	`ISLEAP
 (
yór
)][
t
->
tm_m⁄
];

1280 
days
 +
t
->
tm_mday
 - 1;

1282 
£cs
 = 
days
 * 86400 + 
t
->
tm_hour
 * 3600 +Å->
tm_mö
 * 60 +Å->
tm_£c
;

1283  (
time_t
Ë
£cs
;

1284 
	}
}

1287 #ifde‡
NEED_STRTOLL


1297 
ölöe
 

1298 
	$ch¨_vÆue
 (
c
, 
ba£
)

1300 
vÆue
;

1301 i‡(
c
 < '0')

1303 i‡('0' <
c
 && c <= '9')

1304 
vÆue
 = 
c
 - '0';

1305 i‡('a' <
c
 && c <= 'z')

1306 
vÆue
 = 
c
 - 'a' + 10;

1307 i‡('A' <
c
 && c <= 'Z')

1308 
vÆue
 = 
c
 - 'A' + 10;

1311 i‡(
vÆue
 >
ba£
)

1313  
vÆue
;

1314 
	}
}

1316 
	#STRTOLL_MAX
 
	`TYPE_MAXIMUM
 (
°πﬁl_ty≥
)

	)

1318 
	#STRTOLL_MIN
 (-
STRTOLL_MAX
 - 1)

	)

1322 
	#MOD
(
a
, 
b
Ë((
°πﬁl_ty≥
Ë-1 % 2 =1 ? (aË% (bË: - (◊Ë% (b)))

	)

1328 
°πﬁl_ty≥


1329 
	$°πﬁl
 (c⁄° *
≈å
, **
íd±r
, 
ba£
)

1331 
°πﬁl_ty≥
 
ªsu…
 = 0;

1332 
boﬁ
 
√g©ive
;

1334 i‡(
ba£
 != 0 && (base < 2 || base > 36))

1336 
î∫o
 = 
EINVAL
;

1340 *
≈å
 == ' ' || *nptr == '\t')

1341 ++
≈å
;

1342 i‡(*
≈å
 == '-')

1344 
√g©ive
 = 
åue
;

1345 ++
≈å
;

1347 i‡(*
≈å
 == '+')

1349 
√g©ive
 = 
Ál£
;

1350 ++
≈å
;

1353 
√g©ive
 = 
Ál£
;

1358 i‡(*
≈å
 == '0')

1360 i‡((
ba£
 == 0 || base == 16)

1362 (*(
≈å
 + 1) == 'x' || *(nptr + 1) == 'X'))

1364 
ba£
 = 16;

1365 
≈å
 += 2;

1368 i‡(!
	`c_isxdigô
 (*
≈å
))

1370 --
≈å
;

1371 
out
;

1374 i‡(
ba£
 == 0)

1375 
ba£
 = 8;

1377 i‡(
ba£
 == 0)

1378 
ba£
 = 10;

1380 i‡(!
√g©ive
)

1383 
digô
;

1387 c⁄° 
°πﬁl_ty≥
 
WATERMARK
 = 
STRTOLL_MAX
 / 
ba£
;

1388 ; (
digô
 = 
	`ch¨_vÆue
 (*
≈å
, 
ba£
)) != -1; ++nptr)

1390 i‡(
ªsu…
 > 
WATERMARK


1391 || (
ªsu…
 =
WATERMARK
 && 
digô
 > 
STRTOLL_MAX
 % 
ba£
))

1393 
ªsu…
 = 
STRTOLL_MAX
;

1394 
î∫o
 = 
ERANGE
;

1397 
ªsu…
 = 
ba£
 *Ñesu… + 
digô
;

1403 
digô
;

1404 c⁄° 
°πﬁl_ty≥
 
WATERMARK
 = 
STRTOLL_MIN
 / 
ba£
;

1405 ; (
digô
 = 
	`ch¨_vÆue
 (*
≈å
, 
ba£
)) != -1; ++nptr)

1407 i‡(
ªsu…
 < 
WATERMARK


1408 || (
ªsu…
 =
WATERMARK
 && 
digô
 > 
	`MOD
 (
STRTOLL_MIN
, 
ba£
)))

1410 
ªsu…
 = 
STRTOLL_MIN
;

1411 
î∫o
 = 
ERANGE
;

1414 
ªsu…
 = 
ba£
 *Ñesu… - 
digô
;

1417 
out
:

1418 i‡(
íd±r
)

1419 *
íd±r
 = (*Ë
≈å
;

1420  
ªsu…
;

1421 
	}
}

1423 #unde‡
STRTOLL_MAX


1424 #unde‡
STRTOLL_MIN


1425 #unde‡
ABS


	@src/connect.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<as£π.h
>

39 
	~<sys/sockë.h
>

40 
	~<sys/£À˘.h
>

42 #i‚de‡
WINDOWS


43 #ifde‡
__VMS


44 
	~"vms_ù.h
"

46 
	~<√tdb.h
>

48 
	~<√töë/ö.h
>

49 #i‚de‡
__BEOS__


50 
	~<¨∑/öë.h
>

54 
	~<î∫o.h
>

55 
	~<°rög.h
>

56 #ifde‡
HAVE_SYS_TIME_H


57 
	~<sys/time.h
>

59 
	~"utûs.h
"

60 
	~"ho°.h
"

61 
	~"c⁄√˘.h
"

62 
	~"hash.h
"

65 #ifde‡
HAVE_STDINT_H


66 
	~<°döt.h
>

72 #i‚de‡
ENABLE_IPV6


73 #i‚de‡
HAVE_STRUCT_SOCKADDR_STORAGE


74 
	#sockaddr_°‹age
 
sockaddr_ö


	)

83 
	$sockaddr_£t_d©a
 (
sockaddr
 *
ß
, c⁄° 
ù_addªss
 *
ù
, 
p‹t
)

85 
ù
->
Ámûy
)

87 
AF_INET
:

89 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

90 
	`xzîo
 (*
sö
);

91 
sö
->
sö_Ámûy
 = 
AF_INET
;

92 
sö
->
sö_p‹t
 = 
	`ht⁄s
 (
p‹t
);

93 
sö
->
sö_addr
 = 
ù
->
d©a
.
d4
;

96 #ifde‡
ENABLE_IPV6


97 
AF_INET6
:

99 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6 *)
ß
;

100 
	`xzîo
 (*
sö6
);

101 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

102 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
 (
p‹t
);

103 
sö6
->
sö6_addr
 = 
ù
->
d©a
.
d6
;

104 #ifde‡
HAVE_SOCKADDR_IN6_SCOPE_ID


105 
sö6
->
sö6_sc›e_id
 = 
ù
->
ùv6_sc›e
;

111 
	`ab‹t
 ();

113 
	}
}

120 
	$sockaddr_gë_d©a
 (c⁄° 
sockaddr
 *
ß
, 
ù_addªss
 *
ù
, *
p‹t
)

122 
ß
->
ß_Ámûy
)

124 
AF_INET
:

126 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

127 i‡(
ù
)

129 
ù
->
Ámûy
 = 
AF_INET
;

130 
ù
->
d©a
.
d4
 = 
sö
->
sö_addr
;

132 i‡(
p‹t
)

133 *
p‹t
 = 
	`¡ohs
 (
sö
->
sö_p‹t
);

136 #ifde‡
ENABLE_IPV6


137 
AF_INET6
:

139 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6 *)
ß
;

140 i‡(
ù
)

142 
ù
->
Ámûy
 = 
AF_INET6
;

143 
ù
->
d©a
.
d6
 = 
sö6
->
sö6_addr
;

144 #ifde‡
HAVE_SOCKADDR_IN6_SCOPE_ID


145 
ù
->
ùv6_sc›e
 = 
sö6
->
sö6_sc›e_id
;

148 i‡(
p‹t
)

149 *
p‹t
 = 
	`¡ohs
 (
sö6
->
sö6_p‹t
);

154 
	`ab‹t
 ();

156 
	}
}

161 
sockÀn_t


162 
	$sockaddr_size
 (c⁄° 
sockaddr
 *
ß
)

164 
ß
->
ß_Ámûy
)

166 
AF_INET
:

167   (
sockaddr_ö
);

168 #ifde‡
ENABLE_IPV6


169 
AF_INET6
:

170   (
sockaddr_ö6
);

173 
	`ab‹t
 ();

175 
	}
}

183 
boﬁ


184 
	$ªsﬁve_böd_addªss
 (
sockaddr
 *
ß
)

186 
addªss_li°
 *
Æ
;

190 
boﬁ
 
ˇŒed
, 
should_böd
;

191 
ù_addªss
 
ù
;

192 i‡(
ˇŒed
)

194 i‡(
should_böd
)

195 
	`sockaddr_£t_d©a
 (
ß
, &
ù
, 0);

196  
should_böd
;

198 
ˇŒed
 = 
åue
;

200 
Æ
 = 
	`lookup_ho°
 (
›t
.
böd_addªss
, 
LH_BIND
 | 
LH_SILENT
);

201 i‡(!
Æ
)

204 
	`log¥ötf
 (
LOG_NOTQUIET
,

205 
	`_
("%s: unableÅoÑesolve bindáddress %s; disabling bind.\n"),

206 
exec_«me
, 
	`quŸe
 (
›t
.
böd_addªss
));

207 
should_böd
 = 
Ál£
;

208  
Ál£
;

214 
ù
 = *
	`addªss_li°_addªss_©
 (
Æ
, 0);

215 
	`addªss_li°_ªÀa£
 (
Æ
);

217 
	`sockaddr_£t_d©a
 (
ß
, &
ù
, 0);

218 
should_böd
 = 
åue
;

219  
åue
;

220 
	}
}

222 
	scwt_c⁄ãxt
 {

223 
	mfd
;

224 c⁄° 
sockaddr
 *
	maddr
;

225 
sockÀn_t
 
	maddæí
;

226 
	mªsu…
;

230 
	$c⁄√˘_wôh_timeout_ˇŒback
 (*
¨g
)

232 
cwt_c⁄ãxt
 *
˘x
 = (cwt_c⁄ãxà*)
¨g
;

233 
˘x
->
ªsu…
 = 
	`c⁄√˘
 (˘x->
fd
, ctx->
addr
, ctx->
addæí
);

234 
	}
}

241 
	$c⁄√˘_wôh_timeout
 (
fd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

242 
timeout
)

244 
cwt_c⁄ãxt
 
˘x
;

245 
˘x
.
fd
 = fd;

246 
˘x
.
addr
 =áddr;

247 
˘x
.
addæí
 =áddrlen;

249 i‡(
	`run_wôh_timeout
 (
timeout
, 
c⁄√˘_wôh_timeout_ˇŒback
, &
˘x
))

251 
î∫o
 = 
ETIMEDOUT
;

254 i‡(
˘x
.
ªsu…
 =-1 && 
î∫o
 =
EINTR
)

255 
î∫o
 = 
ETIMEDOUT
;

256  
˘x
.
ªsu…
;

257 
	}
}

265 
	$c⁄√˘_to_ù
 (c⁄° 
ù_addªss
 *
ù
, 
p‹t
, c⁄° *
¥öt
)

267 
sockaddr_°‹age
 
ss
;

268 
sockaddr
 *
ß
 = (sockadd∏*)&
ss
;

269 
sock
;

273 i‡(
¥öt
)

275 c⁄° *
txt_addr
 = 
	`¥öt_addªss
 (
ù
);

276 i‡(0 !
	`°rcmp
 (
¥öt
, 
txt_addr
))

278 *
°r
 = 
NULL
, *
«me
;

280 i‡(
›t
.
íabÀ_úi
 && (
«me
 = 
	`idn_decode
 ((*Ë
¥öt
)Ë!
NULL
)

282 
Àn
 = 
	`°æí
 (
¥öt
Ë+ såÀ¿(
«me
) + 4;

283 
°r
 = 
	`xmÆloc
 (
Àn
);

284 
	`¢¥ötf
 (
°r
, 
Àn
, "%†(%s)", 
«me
, 
¥öt
);

285 
°r
[
Àn
-1] = '\0';

286 
	`x‰ì
 (
«me
);

289 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("ConnectingÅo %s|%s|:%d... "),

290 
°r
 ? så : 
	`es˙⁄¥öt_uri
 (
¥öt
), 
txt_addr
, 
p‹t
);

292 i‡(
°r
)

293 
	`x‰ì
 (
°r
);

296 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("C⁄√˘ögÅÿ%s:%d... "), 
txt_addr
, 
p‹t
);

300 
	`sockaddr_£t_d©a
 (
ß
, 
ù
, 
p‹t
);

303 
sock
 = 
	`sockë
 (
ß
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

304 i‡(
sock
 < 0)

305 
îr
;

307 #i‡
	`deföed
(
ENABLE_IPV6
Ë&& deföed(
IPV6_V6ONLY
)

308 i‡(
›t
.
ùv6_⁄ly
) {

309 
⁄
 = 1;

311 
îr
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, &
⁄
,  (on));

312 
IF_DEBUG


313 i‡(
îr
 < 0)

314 
	`DEBUGP
 (("Faûed sëtög IPV6_V6ONLY: %s", 
	`°ªº‹
 (
î∫o
)));

322 i‡(
›t
.
limô_øã
 && opt.limit_rate < 8192)

324 
bufsize
 = 
›t
.
limô_øã
;

325 i‡(
bufsize
 < 512)

326 
bufsize
 = 512;

327 #ifde‡
SO_RCVBUF


328 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
,

329 (*)&
bufsize
, (
sockÀn_t
) (bufsize));

335 i‡(
›t
.
böd_addªss
)

339 
sockaddr_°‹age
 
böd_ss
;

340 
sockaddr
 *
böd_ß
 = (sockadd∏*)&
böd_ss
;

341 i‡(
	`ªsﬁve_böd_addªss
 (
böd_ß
))

343 i‡(
	`böd
 (
sock
, 
böd_ß
, 
	`sockaddr_size
 (bind_sa)) < 0)

344 
îr
;

349 i‡(
	`c⁄√˘_wôh_timeout
 (
sock
, 
ß
, 
	`sockaddr_size
 (sa),

350 
›t
.
c⁄√˘_timeout
) < 0)

351 
îr
;

354 
	`as£π
 (
sock
 >= 0);

355 i‡(
¥öt
)

356 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("connected.\n"));

357 
	`DEBUGP
 (("Cª©ed sockë %d.\n", 
sock
));

358  
sock
;

360 
îr
:

364 
ßve_î∫o
 = 
î∫o
;

365 i‡(
sock
 >= 0)

366 
	`fd_˛o£
 (
sock
);

367 i‡(
¥öt
)

368 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Áûed: %s.\n"), 
	`°ªº‹
 (
î∫o
));

369 
î∫o
 = 
ßve_î∫o
;

372 
	}
}

381 
	$c⁄√˘_to_ho°
 (c⁄° *
ho°
, 
p‹t
)

383 
i
, 
°¨t
, 
íd
;

384 
sock
;

386 
addªss_li°
 *
Æ
 = 
	`lookup_ho°
 (
ho°
, 0);

388 
ªåy
:

389 i‡(!
Æ
)

391 
	`log¥ötf
 (
LOG_NOTQUIET
,

392 
	`_
("%s: unableÅoÑesolve hostáddress %s\n"),

393 
exec_«me
, 
	`quŸe
 (
ho°
));

394  
E_HOST
;

397 
	`addªss_li°_gë_bounds
 (
Æ
, &
°¨t
, &
íd
);

398 
i
 = 
°¨t
; i < 
íd
; i++)

400 c⁄° 
ù_addªss
 *
ù
 = 
	`addªss_li°_addªss_©
 (
Æ
, 
i
);

401 
sock
 = 
	`c⁄√˘_to_ù
 (
ù
, 
p‹t
, 
ho°
);

402 i‡(
sock
 >= 0)

405 
	`addªss_li°_£t_c⁄√˘ed
 (
Æ
);

406 
	`addªss_li°_ªÀa£
 (
Æ
);

407  
sock
;

413 
	`addªss_li°_£t_Áu…y
 (
Æ
, 
i
);

418 i‡(
	`addªss_li°_c⁄√˘ed_p
 (
Æ
))

422 
	`addªss_li°_ªÀa£
 (
Æ
);

423 
Æ
 = 
	`lookup_ho°
 (
ho°
, 
LH_REFRESH
);

424 
ªåy
;

426 
	`addªss_li°_ªÀa£
 (
Æ
);

429 
	}
}

445 
	$böd_loˇl
 (c⁄° 
ù_addªss
 *
böd_addªss
, *
p‹t
)

447 
sock
;

448 
sockaddr_°‹age
 
ss
;

449 
sockaddr
 *
ß
 = (sockadd∏*)&
ss
;

452 
£t›t_vÆ
 = 1;

453 *
£t›t_±r
 = (*)&
£t›t_vÆ
;

454 
sockÀn_t
 
£t›t_size
 =  (
£t›t_vÆ
);

456 
sock
 = 
	`sockë
 (
böd_addªss
->
Ámûy
, 
SOCK_STREAM
, 0);

457 i‡(
sock
 < 0)

460 #ifde‡
SO_REUSEADDR


461 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, 
£t›t_±r
, 
£t›t_size
);

464 
	`xzîo
 (
ss
);

465 
	`sockaddr_£t_d©a
 (
ß
, 
böd_addªss
, *
p‹t
);

466 i‡(
	`böd
 (
sock
, 
ß
, 
	`sockaddr_size
 (sa)) < 0)

468 
	`fd_˛o£
 (
sock
);

471 
	`DEBUGP
 (("Loˇ»sockë fd %d bound.\n", 
sock
));

474 i‡(*
p‹t
 == 0)

476 
sockÀn_t
 
addæí
 = 
	`sockaddr_size
 (
ß
);

477 i‡(
	`gësock«me
 (
sock
, 
ß
, &
addæí
) < 0)

483 
	`fd_˛o£
 (
sock
);

486 
	`sockaddr_gë_d©a
 (
ß
, 
NULL
, 
p‹t
);

487 
	`DEBUGP
 (("bindingÅoáddress %s usingÖort %i.\n",

488 
	`¥öt_addªss
 (
böd_addªss
), *
p‹t
));

490 i‡(
	`li°í
 (
sock
, 1) < 0)

492 
	`fd_˛o£
 (
sock
);

495  
sock
;

496 
	}
}

509 
	$ac˚±_c⁄√˘i⁄
 (
loˇl_sock
)

511 
sock
;

515 
sockaddr_°‹age
 
ss
;

516 
sockaddr
 *
ß
 = (sockadd∏*)&
ss
;

517 
sockÀn_t
 
addæí
 =  (
ss
);

519 i‡(
›t
.
c⁄√˘_timeout
)

521 
ã°
 = 
	`£À˘_fd
 (
loˇl_sock
, 
›t
.
c⁄√˘_timeout
, 
WAIT_FOR_READ
);

522 i‡(
ã°
 == 0)

523 
î∫o
 = 
ETIMEDOUT
;

524 i‡(
ã°
 <= 0)

527 
sock
 = 
	`ac˚±
 (
loˇl_sock
, 
ß
, &
addæí
);

528 
	`DEBUGP
 (("Ac˚±ed clõ¡áàsockë %d.\n", 
sock
));

529  
sock
;

530 
	}
}

539 
boﬁ


540 
	$sockë_ù_addªss
 (
sock
, 
ù_addªss
 *
ù
, 
ídpoöt
)

542 
sockaddr_°‹age
 
°‹age
;

543 
sockaddr
 *sockadd∏(sockadd∏*Ë&
°‹age
;

544 
sockÀn_t
 
addæí
 =  (
°‹age
);

545 
ªt
;

547 
	`mem£t
 (
sockaddr
, 0, 
addæí
);

548 i‡(
ídpoöt
 =
ENDPOINT_LOCAL
)

549 
ªt
 = 
	`gësock«me
 (
sock
, 
sockaddr
, &
addæí
);

550 i‡(
ídpoöt
 =
ENDPOINT_PEER
)

551 
ªt
 = 
	`gë≥î«me
 (
sock
, 
sockaddr
, &
addæí
);

553 
	`ab‹t
 ();

554 i‡(
ªt
 < 0)

555  
Ál£
;

557 
ù
->
Ámûy
 = 
sockaddr
->
ß_Ámûy
;

558 
sockaddr
->
ß_Ámûy
)

560 #ifde‡
ENABLE_IPV6


561 
AF_INET6
:

563 
sockaddr_ö6
 *
ß6
 = (sockaddr_ö6 *)&
°‹age
;

564 
ù
->
d©a
.
d6
 = 
ß6
->
sö6_addr
;

565 #ifde‡
HAVE_SOCKADDR_IN6_SCOPE_ID


566 
ù
->
ùv6_sc›e
 = 
ß6
->
sö6_sc›e_id
;

568 
	`DEBUGP
 (("c⁄add∏is: %s\n", 
	`¥öt_addªss
 (
ù
)));

569  
åue
;

572 
AF_INET
:

574 
sockaddr_ö
 *
ß
 = (sockaddr_ö *)&
°‹age
;

575 
ù
->
d©a
.
d4
 = 
ß
->
sö_addr
;

576 
	`DEBUGP
 (("c⁄add∏is: %s\n", 
	`¥öt_addªss
 (
ù
)));

577  
åue
;

580 
	`ab‹t
 ();

582 
	}
}

589 
boﬁ


590 
	$ªåyabÀ_sockë_c⁄√˘_îr‹
 (
îr
)

595 i‡(
Ál£


596 #ifde‡
EAFNOSUPPORT


597 || 
îr
 =
EAFNOSUPPORT


599 #ifde‡
EPFNOSUPPORT


600 || 
îr
 =
EPFNOSUPPORT


602 #ifde‡
ESOCKTNOSUPPORT


603 || 
îr
 =
ESOCKTNOSUPPORT


605 #ifde‡
EPROTONOSUPPORT


606 || 
îr
 =
EPROTONOSUPPORT


608 #ifde‡
ENOPROTOOPT


609 || 
îr
 =
ENOPROTOOPT


613 || 
îr
 =
EINVAL


615  
Ál£
;

617 i‡(!
›t
.
ªåy_c⁄ƒefu£d
)

618 i‡(
îr
 =
ECONNREFUSED


619 #ifde‡
ENETUNREACH


620 || 
îr
 =
ENETUNREACH


622 #ifde‡
EHOSTUNREACH


623 || 
îr
 =
EHOSTUNREACH


626  
Ál£
;

628  
åue
;

629 
	}
}

641 
	$£À˘_fd
 (
fd
, 
maxtime
, 
waô_f‹
)

643 
fd_£t
 
fd£t
;

644 
fd_£t
 *
rd
 = 
NULL
, *
wr
 = NULL;

645 
timevÆ
 
tmout
;

646 
ªsu…
;

648 
	`FD_ZERO
 (&
fd£t
);

649 
	`FD_SET
 (
fd
, &
fd£t
);

650 i‡(
waô_f‹
 & 
WAIT_FOR_READ
)

651 
rd
 = &
fd£t
;

652 i‡(
waô_f‹
 & 
WAIT_FOR_WRITE
)

653 
wr
 = &
fd£t
;

655 
tmout
.
tv_£c
 = (Ë
maxtime
;

656 
tmout
.
tv_u£c
 = 1000000 * (
maxtime
 - () maxtime);

660 
ªsu…
 = 
	`£À˘
 (
fd
 + 1, 
rd
, 
wr
, 
NULL
, &
tmout
);

661 #ifde‡
WINDOWS


664 
	`£t_wödows_fd_as_blockög_sockë
 (
fd
);

667 
ªsu…
 < 0 && 
î∫o
 =
EINTR
);

669  
ªsu…
;

670 
	}
}

683 
boﬁ


684 
	$ã°_sockë_›í
 (
sock
)

686 
fd_£t
 
check_£t
;

687 
timevÆ
 
to
;

688 
ªt
 = 0;

693 
	`FD_ZERO
 (&
check_£t
);

694 
	`FD_SET
 (
sock
, &
check_£t
);

697 
to
.
tv_£c
 = 0;

698 
to
.
tv_u£c
 = 1;

700 
ªt
 = 
	`£À˘
 (
sock
 + 1, &
check_£t
, 
NULL
, NULL, &
to
);

701 #ifde‡
WINDOWS


705 
	`£t_wödows_fd_as_blockög_sockë
 ( 
sock
 );

708 i‡–!
ªt
 )

710  
åue
;

714  
Ál£
;

715 
	}
}

720 
	$sock_ªad
 (
fd
, *
buf
, 
bufsize
)

722 
ªs
;

724 
ªs
 = 
	`ªad
 (
fd
, 
buf
, 
bufsize
);

725 
ªs
 =-1 && 
î∫o
 =
EINTR
);

726  
ªs
;

727 
	}
}

730 
	$sock_wrôe
 (
fd
, *
buf
, 
bufsize
)

732 
ªs
;

734 
ªs
 = 
	`wrôe
 (
fd
, 
buf
, 
bufsize
);

735 
ªs
 =-1 && 
î∫o
 =
EINTR
);

736  
ªs
;

737 
	}
}

740 
	$sock_pﬁl
 (
fd
, 
timeout
, 
waô_f‹
)

742  
	`£À˘_fd
 (
fd
, 
timeout
, 
waô_f‹
);

743 
	}
}

746 
	$sock_≥ek
 (
fd
, *
buf
, 
bufsize
)

748 
ªs
;

750 
ªs
 = 
	`ªcv
 (
fd
, 
buf
, 
bufsize
, 
MSG_PEEK
);

751 
ªs
 =-1 && 
î∫o
 =
EINTR
);

752  
ªs
;

753 
	}
}

756 
	$sock_˛o£
 (
fd
)

758 
	`˛o£
 (
fd
);

759 
	`DEBUGP
 (("Clo£d fd %d\n", 
fd
));

760 
	}
}

761 #unde‡
ªad


762 #unde‡
wrôe


763 #unde‡
˛o£


773 
hash_èbÀ
 *
	gå™•‹t_m≠
;

774 
	gå™•‹t_m≠_modifõd_tick
;

776 
	så™•‹t_öfo
 {

777 
å™•‹t_im∂emíèti⁄
 *
	mimp
;

778 *
	m˘x
;

789 
	$fd_ªgi°î_å™•‹t
 (
fd
, 
å™•‹t_im∂emíèti⁄
 *
imp
, *
˘x
)

791 
å™•‹t_öfo
 *
öfo
;

796 
	`as£π
 (
fd
 >= 0);

798 
öfo
 = 
	`x√w
 (
å™•‹t_öfo
);

799 
öfo
->
imp
 = imp;

800 
öfo
->
˘x
 = ctx;

801 i‡(!
å™•‹t_m≠
)

802 
å™•‹t_m≠
 = 
	`hash_èbÀ_√w
 (0, 
NULL
, NULL);

803 
	`hash_èbÀ_put
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
, 
öfo
);

804 ++
å™•‹t_m≠_modifõd_tick
;

805 
	}
}

812 
	$fd_å™•‹t_c⁄ãxt
 (
fd
)

814 
å™•‹t_öfo
 *
öfo
 = 
	`hash_èbÀ_gë
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
);

815  
öfo
->
˘x
;

816 
	}
}

827 
	#LAZY_RETRIEVE_INFO
(
öfo
) do { \

828 
å™•‹t_öfo
 *
œ°_öfo
; \

829 
œ°_fd
 = -1; \

830 
œ°_tick
; \

831 i‡(!
å™•‹t_m≠
) \

832 
öfo
 = 
NULL
; \

833 i‡(
œ°_fd
 =
fd
 && 
œ°_tick
 =
å™•‹t_m≠_modifõd_tick
) \

834 
öfo
 = 
œ°_öfo
; \

837 
öfo
 = 
	`hash_èbÀ_gë
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
); \

838 
œ°_fd
 = 
fd
; \

839 
œ°_öfo
 = 
öfo
; \

840 
œ°_tick
 = 
å™•‹t_m≠_modifõd_tick
; \

842 } 0)

	)

844 
boﬁ


845 
	$pﬁl_öã∫Æ
 (
fd
, 
å™•‹t_öfo
 *
öfo
, 
wf
, 
timeout
)

847 i‡(
timeout
 == -1)

848 
timeout
 = 
›t
.
ªad_timeout
;

849 i‡(
timeout
)

851 
ã°
;

852 i‡(
öfo
 && info->
imp
->
pﬁÀr
)

853 
ã°
 = 
öfo
->
imp
->
	`pﬁÀr
 (
fd
, 
timeout
, 
wf
, info->
˘x
);

855 
ã°
 = 
	`sock_pﬁl
 (
fd
, 
timeout
, 
wf
);

856 i‡(
ã°
 == 0)

857 
î∫o
 = 
ETIMEDOUT
;

858 i‡(
ã°
 <= 0)

859  
Ál£
;

861  
åue
;

862 
	}
}

870 
	$fd_ªad
 (
fd
, *
buf
, 
bufsize
, 
timeout
)

872 
å™•‹t_öfo
 *
öfo
;

873 
	`LAZY_RETRIEVE_INFO
 (
öfo
);

874 i‡(!
	`pﬁl_öã∫Æ
 (
fd
, 
öfo
, 
WAIT_FOR_READ
, 
timeout
))

876 i‡(
öfo
 && info->
imp
->
ªadî
)

877  
öfo
->
imp
->
	`ªadî
 (
fd
, 
buf
, 
bufsize
, info->
˘x
);

879  
	`sock_ªad
 (
fd
, 
buf
, 
bufsize
);

880 
	}
}

895 
	$fd_≥ek
 (
fd
, *
buf
, 
bufsize
, 
timeout
)

897 
å™•‹t_öfo
 *
öfo
;

898 
	`LAZY_RETRIEVE_INFO
 (
öfo
);

899 i‡(!
	`pﬁl_öã∫Æ
 (
fd
, 
öfo
, 
WAIT_FOR_READ
, 
timeout
))

901 i‡(
öfo
 && info->
imp
->
≥ekî
)

902  
öfo
->
imp
->
	`≥ekî
 (
fd
, 
buf
, 
bufsize
, info->
˘x
);

904  
	`sock_≥ek
 (
fd
, 
buf
, 
bufsize
);

905 
	}
}

913 
	$fd_wrôe
 (
fd
, *
buf
, 
bufsize
, 
timeout
)

915 
ªs
;

916 
å™•‹t_öfo
 *
öfo
;

917 
	`LAZY_RETRIEVE_INFO
 (
öfo
);

921 
ªs
 = 0;

922 
bufsize
 > 0)

924 i‡(!
	`pﬁl_öã∫Æ
 (
fd
, 
öfo
, 
WAIT_FOR_WRITE
, 
timeout
))

926 i‡(
öfo
 && info->
imp
->
wrôî
)

927 
ªs
 = 
öfo
->
imp
->
	`wrôî
 (
fd
, 
buf
, 
bufsize
, info->
˘x
);

929 
ªs
 = 
	`sock_wrôe
 (
fd
, 
buf
, 
bufsize
);

930 i‡(
ªs
 <= 0)

932 
buf
 +
ªs
;

933 
bufsize
 -
ªs
;

935  
ªs
;

936 
	}
}

949 
	$fd_îr°r
 (
fd
)

953 
å™•‹t_öfo
 *
öfo
 = 
NULL
;

954 i‡(
å™•‹t_m≠
)

955 
öfo
 = 
	`hash_èbÀ_gë
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
);

957 i‡(
öfo
 && info->
imp
->
îr°r
)

959 c⁄° *
îr
 = 
öfo
->
imp
->
	`îr°r
 (
fd
, info->
˘x
);

960 i‡(
îr
)

961  
îr
;

964  
	`°ªº‹
 (
î∫o
);

965 
	}
}

970 
	$fd_˛o£
 (
fd
)

972 
å™•‹t_öfo
 *
öfo
;

973 i‡(
fd
 < 0)

978 
öfo
 = 
NULL
;

979 i‡(
å™•‹t_m≠
)

980 
öfo
 = 
	`hash_èbÀ_gë
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
);

982 i‡(
öfo
 && info->
imp
->
˛o£r
)

983 
öfo
->
imp
->
	`˛o£r
 (
fd
, info->
˘x
);

985 
	`sock_˛o£
 (
fd
);

987 i‡(
öfo
)

989 
	`hash_èbÀ_ªmove
 (
å™•‹t_m≠
, (*)(
öçå_t
Ë
fd
);

990 
	`x‰ì
 (
öfo
);

991 ++
å™•‹t_m≠_modifõd_tick
;

993 
	}
}

	@src/connect.h

32 #i‚de‡
CONNECT_H


33 
	#CONNECT_H


	)

35 
	~"ho°.h
"

41 
	mE_HOST
 = -100

43 
c⁄√˘_to_ho°
 (const *, );

44 
c⁄√˘_to_ù
 (c⁄° 
ù_addªss
 *, , const *);

46 
böd_loˇl
 (c⁄° 
ù_addªss
 *, *);

47 
ac˚±_c⁄√˘i⁄
 ();

50 
	mENDPOINT_LOCAL
,

51 
	mENDPOINT_PEER


53 
boﬁ
 
sockë_ù_addªss
 (, 
ù_addªss
 *, );

55 
boﬁ
 
ªåyabÀ_sockë_c⁄√˘_îr‹
 ();

59 
	mWAIT_FOR_READ
 = 1,

60 
	mWAIT_FOR_WRITE
 = 2

62 
£À˘_fd
 (, , );

63 
boﬁ
 
ã°_sockë_›í
 ();

65 
	så™•‹t_im∂emíèti⁄
 {

66 (*
	mªadî
) (, *, , *);

67 (*
	mwrôî
) (, *, , *);

68 (*
	mpﬁÀr
) (, , , *);

69 (*
	m≥ekî
) (, *, , *);

70 c⁄° *(*
	mîr°r
) (, *);

71 (*
	m˛o£r
) (, *);

74 
fd_ªgi°î_å™•‹t
 (, 
å™•‹t_im∂emíèti⁄
 *, *);

75 *
fd_å™•‹t_c⁄ãxt
 ();

76 
fd_ªad
 (, *, , );

77 
fd_wrôe
 (, *, , );

78 
fd_≥ek
 (, *, , );

79 c⁄° *
fd_îr°r
 ();

80 
fd_˛o£
 ();

	@src/convert.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<as£π.h
>

39 
	~"c⁄vît.h
"

40 
	~"uæ.h
"

41 
	~"ªcur.h
"

42 
	~"utûs.h
"

43 
	~"hash.h
"

44 
	~"±imî.h
"

45 
	~"ªs.h
"

46 
	~"html-uæ.h
"

47 
	~"css-uæ.h
"

48 
	~"úi.h
"

50 
hash_èbÀ
 *
	gdl_fûe_uæ_m≠
;

51 
hash_èbÀ
 *
	gdl_uæ_fûe_m≠
;

55 
hash_èbÀ
 *
	gdow∆ﬂded_html_£t
;

56 
hash_èbÀ
 *
	gdow∆ﬂded_css_£t
;

58 
c⁄vît_löks
 (c⁄° *, 
uæpos
 *);

62 
	$c⁄vît_löks_ö_hashèbÀ
 (
hash_èbÀ
 *
dow∆ﬂded_£t
,

63 
is_css
,

64 *
fûe_cou¡
)

66 
i
;

68 
˙t
;

69 **
fûe_¨øy
;

71 
˙t
 = 0;

72 i‡(
dow∆ﬂded_£t
)

73 
˙t
 = 
	`hash_èbÀ_cou¡
 (
dow∆ﬂded_£t
);

74 i‡(
˙t
 == 0)

76 
fûe_¨øy
 = 
	`Æloˇ_¨øy
 (*, 
˙t
);

77 
	`°rög_£t_to_¨øy
 (
dow∆ﬂded_£t
, 
fûe_¨øy
);

79 
i
 = 0; i < 
˙t
; i++)

81 
uæpos
 *
uæs
, *
cur_uæ
;

82 *
uæ
;

83 *
fûe
 = 
fûe_¨øy
[
i
];

87 
uæ
 = 
	`hash_èbÀ_gë
 (
dl_fûe_uæ_m≠
, 
fûe
);

88 i‡(!
uæ
)

90 
	`DEBUGP
 (("Aµ¨íéy %†ha†bì¿ªmoved.\n", 
fûe
));

94 
	`DEBUGP
 (("Sˇ¬ög %†(‰om %s)\n", 
fûe
, 
uæ
));

97 
uæs
 = 
is_css
 ? 
	`gë_uæs_css_fûe
 (
fûe
, 
uæ
) :

98 
	`gë_uæs_html
 (
fûe
, 
uæ
, 
NULL
, NULL);

104 
cur_uæ
 = 
uæs
; cur_uæ; cur_uæ = cur_uæ->
√xt
)

106 *
loˇl_«me
;

107 
uæ
 *
u
;

108 
úi
 *
pi
;

110 i‡(
cur_uæ
->
lök_ba£_p
)

115 
cur_uæ
->
c⁄vît
 = 
CO_NULLIFY_BASE
;

123 
pi
 = 
	`úi_√w
 ();

124 
	`£t_uri_ícodög
 (
pi
, 
›t
.
loˇÀ
, 
åue
);

126 
u
 = 
	`uæ_∑r£
 (
cur_uæ
->
uæ
->uæ, 
NULL
, 
pi
, 
åue
);

127 
loˇl_«me
 = 
	`hash_èbÀ_gë
 (
dl_uæ_fûe_m≠
, 
u
->
uæ
);

130 i‡(
loˇl_«me
)

137 
cur_uæ
->
c⁄vît
 = 
CO_CONVERT_TO_RELATIVE
;

138 
cur_uæ
->
loˇl_«me
 = 
	`x°rdup
 (local_name);

139 
	`DEBUGP
 (("wû»c⁄vîàuæ %†tÿloˇ»%s\n", 
u
->
uæ
, 
loˇl_«me
));

147 i‡(!
cur_uæ
->
lök_com∂ëe_p
)

148 
cur_uæ
->
c⁄vît
 = 
CO_CONVERT_TO_COMPLETE
;

149 
cur_uæ
->
loˇl_«me
 = 
NULL
;

150 
	`DEBUGP
 (("wû»c⁄vîàuæ %†tÿcom∂ëe\n", 
u
->
uæ
));

153 
	`uæ_‰ì
 (
u
);

154 
	`úi_‰ì
 (
pi
);

158 
	`c⁄vît_löks
 (
fûe
, 
uæs
);

159 ++*
fûe_cou¡
;

162 
	`‰ì_uæpos
 (
uæs
);

164 
	}
}

182 
	$c⁄vît_Æl_löks
 ()

184 
£cs
;

185 
fûe_cou¡
 = 0;

187 
±imî
 *
timî
 = 
	`±imî_√w
 ();

189 
	`c⁄vît_löks_ö_hashèbÀ
 (
dow∆ﬂded_html_£t
, 0, &
fûe_cou¡
);

190 
	`c⁄vît_löks_ö_hashèbÀ
 (
dow∆ﬂded_css_£t
, 1, &
fûe_cou¡
);

192 
£cs
 = 
	`±imî_mósuª
 (
timî
);

193 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Converted %d files in %s seconds.\n"),

194 
fûe_cou¡
, 
	`¥öt_decimÆ
 (
£cs
));

196 
	`±imî_de°roy
 (
timî
);

197 
	}
}

199 
wrôe_backup_fûe
 (c⁄° *, 
dow∆ﬂded_fûe_t
);

200 c⁄° *
ª∂a˚_∂aö
 (c⁄° *, , 
FILE
*, const *);

201 c⁄° *
ª∂a˚_©å
 (c⁄° *, , 
FILE
 *, const *);

202 c⁄° *
ª∂a˚_©å_ª‰esh_hack
 (c⁄° *, , 
FILE
 *,

204 *
loˇl_quŸe_°rög
 (c⁄° *, 
boﬁ
);

205 *
c⁄°ru˘_ªœtive
 (const *, const *);

211 
	$c⁄vît_löks
 (c⁄° *
fûe
, 
uæpos
 *
löks
)

213 
fûe_mem‹y
 *
fm
;

214 
FILE
 *
Â
;

215 c⁄° *
p
;

216 
dow∆ﬂded_fûe_t
 
dow∆ﬂded_fûe_ªtu∫
;

218 
uæpos
 *
lök
;

219 
to_uæ_cou¡
 = 0, 
to_fûe_cou¡
 = 0;

221 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("C⁄vîtög %s... "), 
fûe
);

227 
dry_cou¡
 = 0;

228 
uæpos
 *
dry
;

229 
dry
 = 
löks
; dry; dry = dry->
√xt
)

230 i‡(
dry
->
c⁄vît
 !
CO_NOCONVERT
)

231 ++
dry_cou¡
;

232 i‡(!
dry_cou¡
)

234 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("nothingÅo do.\n"));

239 
fm
 = 
	`wgë_ªad_fûe
 (
fûe
);

240 i‡(!
fm
)

242 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot convertÜinks in %s: %s\n"),

243 
fûe
, 
	`°ªº‹
 (
î∫o
));

247 
dow∆ﬂded_fûe_ªtu∫
 = 
	`dow∆ﬂded_fûe
 (
CHECK_FOR_FILE
, 
fûe
);

248 i‡(
›t
.
backup_c⁄vîãd
 && 
dow∆ﬂded_fûe_ªtu∫
)

249 
	`wrôe_backup_fûe
 (
fûe
, 
dow∆ﬂded_fûe_ªtu∫
);

255 i‡(
	`u∆ök
 (
fûe
Ë< 0 && 
î∫o
 !
ENOENT
)

257 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("UnableÅo delete %s: %s\n"),

258 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

259 
	`wgë_ªad_fûe_‰ì
 (
fm
);

263 
Â
 = 
	`f›í
 (
fûe
, "wb");

264 i‡(!
Â
)

266 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot convertÜinks in %s: %s\n"),

267 
fûe
, 
	`°ªº‹
 (
î∫o
));

268 
	`wgë_ªad_fûe_‰ì
 (
fm
);

274 
p
 = 
fm
->
c⁄ã¡
;

275 
lök
 = 
löks
;Üök;Üök =Üök->
√xt
)

277 *
uæ_°¨t
 = 
fm
->
c⁄ã¡
 + 
lök
->
pos
;

279 i‡(
lök
->
pos
 >
fm
->
Àngth
)

281 
	`DEBUGP
 (("Something strange is going on. Please investigate."));

285 i‡(
lök
->
c⁄vît
 =
CO_NOCONVERT
)

287 
	`DEBUGP
 (("Skùpög %†©Öosôi⁄ %d.\n", 
lök
->
uæ
->uæ,Üök->
pos
));

293 
	`fwrôe
 (
p
, 1, 
uæ_°¨t
 -Ö, 
Â
);

294 
p
 = 
uæ_°¨t
;

296 
lök
->
c⁄vît
)

298 
CO_CONVERT_TO_RELATIVE
:

301 *
√w«me
 = 
	`c⁄°ru˘_ªœtive
 (
fûe
, 
lök
->
loˇl_«me
);

302 *
quŸed_√w«me
 = 
	`loˇl_quŸe_°rög
 (
√w«me
,

303 
lök
->
lök_css_p
);

305 i‡(
lök
->
lök_css_p
)

306 
p
 = 
	`ª∂a˚_∂aö
 (p, 
lök
->
size
, 
Â
, 
quŸed_√w«me
);

307 i‡(!
lök
->
lök_ª‰esh_p
)

308 
p
 = 
	`ª∂a˚_©å
 (p, 
lök
->
size
, 
Â
, 
quŸed_√w«me
);

310 
p
 = 
	`ª∂a˚_©å_ª‰esh_hack
 (p, 
lök
->
size
, 
Â
, 
quŸed_√w«me
,

311 
lök
->
ª‰esh_timeout
);

313 
	`DEBUGP
 (("TO_RELATIVE: %sÅo %sátÖosition %d in %s.\n",

314 
lök
->
uæ
->uæ, 
√w«me
,Üök->
pos
, 
fûe
));

315 
	`x‰ì
 (
√w«me
);

316 
	`x‰ì
 (
quŸed_√w«me
);

317 ++
to_fûe_cou¡
;

320 
CO_CONVERT_TO_COMPLETE
:

323 *
√wlök
 = 
lök
->
uæ
->url;

324 *
quŸed_√wlök
 = 
	`html_quŸe_°rög
 (
√wlök
);

326 i‡(
lök
->
lök_css_p
)

327 
p
 = 
	`ª∂a˚_∂aö
 (p, 
lök
->
size
, 
Â
, 
√wlök
);

328 i‡(!
lök
->
lök_ª‰esh_p
)

329 
p
 = 
	`ª∂a˚_©å
 (p, 
lök
->
size
, 
Â
, 
quŸed_√wlök
);

331 
p
 = 
	`ª∂a˚_©å_ª‰esh_hack
 (p, 
lök
->
size
, 
Â
, 
quŸed_√wlök
,

332 
lök
->
ª‰esh_timeout
);

334 
	`DEBUGP
 (("TO_COMPLETE: <something>Åo %sátÖosition %d in %s.\n",

335 
√wlök
, 
lök
->
pos
, 
fûe
));

336 
	`x‰ì
 (
quŸed_√wlök
);

337 ++
to_uæ_cou¡
;

340 
CO_NULLIFY_BASE
:

342 
p
 = 
	`ª∂a˚_©å
 (p, 
lök
->
size
, 
Â
, "");

344 
CO_NOCONVERT
:

345 
	`ab‹t
 ();

351 i‡(
p
 - 
fm
->
c⁄ã¡
 < fm->
Àngth
)

352 
	`fwrôe
 (
p
, 1, 
fm
->
Àngth
 - (∞- fm->
c⁄ã¡
), 
Â
);

353 
	`f˛o£
 (
Â
);

354 
	`wgë_ªad_fûe_‰ì
 (
fm
);

356 
	`log¥ötf
 (
LOG_VERBOSE
, "%d-%d\n", 
to_fûe_cou¡
, 
to_uæ_cou¡
);

357 
	}
}

377 
	$c⁄°ru˘_ªœtive
 (c⁄° *
ba£fûe
, c⁄° *
lökfûe
)

379 *
lök
;

380 
ba£dús
;

381 c⁄° *
b
, *
l
;

382 
i
, 
°¨t
;

386 
°¨t
 = 0;

387 
b
 = 
ba£fûe
, 
l
 = 
lökfûe
; *b == *l && *b != '\0'; ++b, ++l)

389 i‡(*
b
 == '/')

390 
°¨t
 = (
b
 - 
ba£fûe
) + 1;

392 
ba£fûe
 +
°¨t
;

393 
lökfûe
 +
°¨t
;

407 
ba£dús
 = 0;

408 
b
 = 
ba£fûe
; *b; b++)

410 i‡(*
b
 == '/')

411 ++
ba£dús
;

415 
lök
 = 
	`xmÆloc
 (3 * 
ba£dús
 + 
	`°æí
 (
lökfûe
) + 1);

416 
i
 = 0; i < 
ba£dús
; i++)

417 
	`mem˝y
 (
lök
 + 3 * 
i
, "../", 3);

418 
	`°r˝y
 (
lök
 + 3 * 
i
, 
lökfûe
);

419  
lök
;

420 
	}
}

424 
hash_èbÀ
 *
	gc⁄vîãd_fûes
;

427 
	$wrôe_backup_fûe
 (c⁄° *
fûe
, 
dow∆ﬂded_fûe_t
 
dow∆ﬂded_fûe_ªtu∫
)

436 
size_t
 
fûíame_Àn
 = 
	`°æí
 (
fûe
);

437 * 
fûíame_∂us_‹ig_suffix
;

440 i‡(
dow∆ﬂded_fûe_ªtu∫
 =
FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
)

449 
fûíame_∂us_‹ig_suffix
 = 
	`Æloˇ
 (
fûíame_Àn
 + 1);

450 
	`°r˝y
 (
fûíame_∂us_‹ig_suffix
, 
fûe
);

451 
	`°r˝y
 ((
fûíame_∂us_‹ig_suffix
 + 
fûíame_Àn
) - 4, "orig");

456 
fûíame_∂us_‹ig_suffix
 = 
	`Æloˇ
 (
fûíame_Àn
 +  (
ORIG_SFX
));

457 
	`°r˝y
 (
fûíame_∂us_‹ig_suffix
, 
fûe
);

458 
	`°r˝y
 (
fûíame_∂us_‹ig_suffix
 + 
fûíame_Àn
, 
ORIG_SFX
);

461 i‡(!
c⁄vîãd_fûes
)

462 
c⁄vîãd_fûes
 = 
	`make_°rög_hash_èbÀ
 (0);

469 i‡(!
	`°rög_£t_c⁄èös
 (
c⁄vîãd_fûes
, 
fûe
))

472 i‡(
	`ª«me
 (
fûe
, 
fûíame_∂us_‹ig_suffix
) != 0)

473 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot back up %sás %s: %s\n"),

474 
fûe
, 
fûíame_∂us_‹ig_suffix
, 
	`°ªº‹
 (
î∫o
));

493 
	`°rög_£t_add
 (
c⁄vîãd_fûes
, 
fûe
);

495 
	}
}

497 
boﬁ
 
föd_‰agmít
 (const *, , const **, const **);

501 
	$ª∂a˚_∂aö
 (c⁄° *
p
, 
size
, 
FILE
 *
Â
, c⁄° *
√w_ãxt
)

503 
	`Âuts
 (
√w_ãxt
, 
Â
);

504 
p
 +
size
;

505  
p
;

506 
	}
}

511 
	$ª∂a˚_©å
 (c⁄° *
p
, 
size
, 
FILE
 *
Â
, c⁄° *
√w_ãxt
)

513 
boﬁ
 
quŸe_Êag
 = 
Ál£
;

514 
quŸe_ch¨
 = '\"';

517 c⁄° *
‰ag_beg
, *
‰ag_íd
;

526 i‡(*
p
 == '\"' || *p == '\'')

528 
quŸe_ch¨
 = *
p
;

529 
quŸe_Êag
 = 
åue
;

530 ++
p
;

531 
size
 -= 2;

533 
	`putc
 (
quŸe_ch¨
, 
Â
);

534 
	`Âuts
 (
√w_ãxt
, 
Â
);

537 i‡(
	`föd_‰agmít
 (
p
, 
size
, &
‰ag_beg
, &
‰ag_íd
))

538 
	`fwrôe
 (
‰ag_beg
, 1, 
‰ag_íd
 - føg_beg, 
Â
);

539 
p
 +
size
;

540 i‡(
quŸe_Êag
)

541 ++
p
;

542 
	`putc
 (
quŸe_ch¨
, 
Â
);

544  
p
;

545 
	}
}

552 
	$ª∂a˚_©å_ª‰esh_hack
 (c⁄° *
p
, 
size
, 
FILE
 *
Â
,

553 c⁄° *
√w_ãxt
, 
timeout
)

556 *
√w_wôh_timeout
 = (*)
	`Æloˇ
 (
	`numdigô
 (
timeout
)

558 + 
	`°æí
 (
√w_ãxt
)

560 
	`•rötf
 (
√w_wôh_timeout
, "%d; URL=%s", 
timeout
, 
√w_ãxt
);

562  
	`ª∂a˚_©å
 (
p
, 
size
, 
Â
, 
√w_wôh_timeout
);

563 
	}
}

572 
boﬁ


573 
	$föd_‰agmít
 (c⁄° *
beg
, 
size
, c⁄° **
bp
, c⁄° **
ï
)

575 c⁄° *
íd
 = 
beg
 + 
size
;

576 
boﬁ
 
ßw_amp
 = 
Ál£
;

577 ; 
beg
 < 
íd
; beg++)

579 *
beg
)

582 
ßw_amp
 = 
åue
;

585 i‡(!
ßw_amp
)

587 *
bp
 = 
beg
;

588 *
ï
 = 
íd
;

589  
åue
;

593 
ßw_amp
 = 
Ál£
;

596  
Ál£
;

597 
	}
}

614 
	$loˇl_quŸe_°rög
 (c⁄° *
fûe
, 
boﬁ
 
no_html_quŸe
)

616 c⁄° *
‰om
;

617 *
√w«me
, *
to
;

619 *
™y
 = 
	`°Ωbrk
 (
fûe
, "?#%;");

620 i‡(!
™y
)

621  
no_html_quŸe
 ? 
	`°rdup
 (
fûe
Ë: 
	`html_quŸe_°rög
 (file);

625 
to
 = 
√w«me
 = (*)
	`Æloˇ
 (3 * 
	`°æí
 (
fûe
) + 1);

626 
‰om
 = 
fûe
; *from; from++)

627 *
‰om
)

630 *
to
++ = '%';

631 *
to
++ = '2';

632 *
to
++ = '5';

635 *
to
++ = '%';

636 *
to
++ = '2';

637 *
to
++ = '3';

640 *
to
++ = '%';

641 *
to
++ = '3';

642 *
to
++ = 'B';

645 i‡(
›t
.
adju°_exãnsi⁄
)

647 *
to
++ = '%';

648 *
to
++ = '3';

649 *
to
++ = 'F';

654 *
to
++ = *
‰om
;

656 *
to
 = '\0';

658  
no_html_quŸe
 ? 
	`°rdup
 (
√w«me
Ë: 
	`html_quŸe_°rög
 (newname);

659 
	}
}

665 
	#ENSURE_TABLES_EXIST
 do { \

666 i‡(!
dl_fûe_uæ_m≠
) \

667 
dl_fûe_uæ_m≠
 = 
	`make_°rög_hash_èbÀ
 (0); \

668 i‡(!
dl_uæ_fûe_m≠
) \

669 
dl_uæ_fûe_m≠
 = 
	`make_°rög_hash_èbÀ
 (0); \

670 } 0)

	)

682 
boﬁ


683 
	$m©ch_ex˚±_ödex
 (c⁄° *
s1
, c⁄° *
s2
)

685 
i
;

686 c⁄° *
 g
;

689 
i
 = 0; *
s1
 && *
s2
 && *s1 == *s2; s1++, s2++, i++)

691 i‡(
i
 == 0)

695  
Ál£
;

697 i‡(!*
s1
 && !*
s2
)

699  
åue
;

700 i‡(*
s1
 && *
s2
)

702  
Ál£
;

703 i‡(*
s1
)

705 
 g
 = 
s1
;

708 
 g
 = 
s2
;

714 i‡(*
 g
 != '/')

716 --
 g
;

718 i‡(*
 g
 == '/' && *(lng + 1) == '\0')

721  
åue
;

723  0 =
	`°rcmp
 (
 g
, "/index.html");

724 
	}
}

727 
	$dissocüã_uæs_‰om_fûe_m≠≥r
 (*
key
, *
vÆue
, *
¨g
)

729 *
m≠pög_uæ
 = (*)
key
;

730 *
m≠pög_fûe
 = (*)
vÆue
;

731 *
fûe
 = (*)
¨g
;

733 i‡(0 =
	`°rcmp
 (
m≠pög_fûe
, 
fûe
))

735 
	`hash_èbÀ_ªmove
 (
dl_uæ_fûe_m≠
, 
m≠pög_uæ
);

736 
	`x‰ì
 (
m≠pög_uæ
);

737 
	`x‰ì
 (
m≠pög_fûe
);

742 
	}
}

747 
	$dissocüã_uæs_‰om_fûe
 (c⁄° *
fûe
)

750 
	`hash_èbÀ_f‹_óch
 (
dl_uæ_fûe_m≠
, 
dissocüã_uæs_‰om_fûe_m≠≥r
,

751 (*Ë
fûe
);

752 
	}
}

760 
	$ªgi°î_dow∆ﬂd
 (c⁄° *
uæ
, c⁄° *
fûe
)

762 *
ﬁd_fûe
, *
ﬁd_uæ
;

764 
ENSURE_TABLES_EXIST
;

771 i‡(
	`hash_èbÀ_gë_∑ú
 (
dl_fûe_uæ_m≠
, 
fûe
, &
ﬁd_fûe
, &
ﬁd_uæ
))

773 i‡(0 =
	`°rcmp
 (
uæ
, 
ﬁd_uæ
))

778 i‡(
	`m©ch_ex˚±_ödex
 (
uæ
, 
ﬁd_uæ
)

779 && !
	`hash_èbÀ_c⁄èös
 (
dl_uæ_fûe_m≠
, 
uæ
))

784 
uæ_⁄ly
;

786 
	`hash_èbÀ_ªmove
 (
dl_fûe_uæ_m≠
, 
fûe
);

787 
	`x‰ì
 (
ﬁd_fûe
);

788 
	`x‰ì
 (
ﬁd_uæ
);

803 
	`dissocüã_uæs_‰om_fûe
 (
fûe
);

806 
	`hash_èbÀ_put
 (
dl_fûe_uæ_m≠
, 
	`x°rdup
 (
fûe
), x°rdu∞(
uæ
));

808 
uæ_⁄ly
:

825 i‡(
	`hash_èbÀ_gë_∑ú
 (
dl_uæ_fûe_m≠
, 
uæ
, &
ﬁd_uæ
, &
ﬁd_fûe
))

827 
	`hash_èbÀ_ªmove
 (
dl_uæ_fûe_m≠
, 
uæ
);

828 
	`x‰ì
 (
ﬁd_uæ
);

829 
	`x‰ì
 (
ﬁd_fûe
);

832 
	`hash_èbÀ_put
 (
dl_uæ_fûe_m≠
, 
	`x°rdup
 (
uæ
), x°rdu∞(
fûe
));

833 
	}
}

840 
	$ªgi°î_ªdúe˘i⁄
 (c⁄° *
‰om
, c⁄° *
to
)

842 *
fûe
;

844 
ENSURE_TABLES_EXIST
;

846 
fûe
 = 
	`hash_èbÀ_gë
 (
dl_uæ_fûe_m≠
, 
to
);

847 
	`as£π
 (
fûe
 !
NULL
);

848 i‡(!
	`hash_èbÀ_c⁄èös
 (
dl_uæ_fûe_m≠
, 
‰om
))

849 
	`hash_èbÀ_put
 (
dl_uæ_fûe_m≠
, 
	`x°rdup
 (
‰om
), x°rdu∞(
fûe
));

850 
	}
}

855 
	$ªgi°î_dñëe_fûe
 (c⁄° *
fûe
)

857 *
ﬁd_uæ
, *
ﬁd_fûe
;

859 
ENSURE_TABLES_EXIST
;

861 i‡(!
	`hash_èbÀ_gë_∑ú
 (
dl_fûe_uæ_m≠
, 
fûe
, &
ﬁd_fûe
, &
ﬁd_uæ
))

864 
	`hash_èbÀ_ªmove
 (
dl_fûe_uæ_m≠
, 
fûe
);

865 
	`x‰ì
 (
ﬁd_fûe
);

866 
	`x‰ì
 (
ﬁd_uæ
);

867 
	`dissocüã_uæs_‰om_fûe
 (
fûe
);

868 
	}
}

873 
	$ªgi°î_html
 (c⁄° *
uæ
, c⁄° *
fûe
)

875 i‡(!
dow∆ﬂded_html_£t
)

876 
dow∆ﬂded_html_£t
 = 
	`make_°rög_hash_èbÀ
 (0);

877 
	`°rög_£t_add
 (
dow∆ﬂded_html_£t
, 
fûe
);

878 
	}
}

883 
	$ªgi°î_css
 (c⁄° *
uæ
, c⁄° *
fûe
)

885 i‡(!
dow∆ﬂded_css_£t
)

886 
dow∆ﬂded_css_£t
 = 
	`make_°rög_hash_èbÀ
 (0);

887 
	`°rög_£t_add
 (
dow∆ﬂded_css_£t
, 
fûe
);

888 
	}
}

890 
dow∆ﬂded_fûes_‰ì
 ();

895 
	$c⁄vît_˛ónup
 ()

897 i‡(
dl_fûe_uæ_m≠
)

899 
	`‰ì_keys_™d_vÆues
 (
dl_fûe_uæ_m≠
);

900 
	`hash_èbÀ_de°roy
 (
dl_fûe_uæ_m≠
);

901 
dl_fûe_uæ_m≠
 = 
NULL
;

903 i‡(
dl_uæ_fûe_m≠
)

905 
	`‰ì_keys_™d_vÆues
 (
dl_uæ_fûe_m≠
);

906 
	`hash_èbÀ_de°roy
 (
dl_uæ_fûe_m≠
);

907 
dl_uæ_fûe_m≠
 = 
NULL
;

909 i‡(
dow∆ﬂded_html_£t
)

910 
	`°rög_£t_‰ì
 (
dow∆ﬂded_html_£t
);

911 
	`dow∆ﬂded_fûes_‰ì
 ();

912 i‡(
c⁄vîãd_fûes
)

913 
	`°rög_£t_‰ì
 (
c⁄vîãd_fûes
);

914 
	}
}

924 
hash_èbÀ
 *
	gdow∆ﬂded_fûes_hash
;

931 
dow∆ﬂded_fûe_t
 *

932 
	$dow∆ﬂded_mode_to_±r
 (
dow∆ﬂded_fûe_t
 
mode
)

934 
dow∆ﬂded_fûe_t


935 
v1
 = 
FILE_NOT_ALREADY_DOWNLOADED
,

936 
v2
 = 
FILE_DOWNLOADED_NORMALLY
,

937 
v3
 = 
FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
,

938 
v4
 = 
CHECK_FOR_FILE
;

940 
mode
)

942 
FILE_NOT_ALREADY_DOWNLOADED
:

943  &
v1
;

944 
FILE_DOWNLOADED_NORMALLY
:

945  &
v2
;

946 
FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
:

947  &
v3
;

948 
CHECK_FOR_FILE
:

949  &
v4
;

951  
NULL
;

952 
	}
}

969 
dow∆ﬂded_fûe_t


970 
	$dow∆ﬂded_fûe
 (
dow∆ﬂded_fûe_t
 
mode
, c⁄° *
fûe
)

972 
dow∆ﬂded_fûe_t
 *
±r
;

974 i‡(
mode
 =
CHECK_FOR_FILE
)

976 i‡(!
dow∆ﬂded_fûes_hash
)

977  
FILE_NOT_ALREADY_DOWNLOADED
;

978 
±r
 = 
	`hash_èbÀ_gë
 (
dow∆ﬂded_fûes_hash
, 
fûe
);

979 i‡(!
±r
)

980  
FILE_NOT_ALREADY_DOWNLOADED
;

981  *
±r
;

984 i‡(!
dow∆ﬂded_fûes_hash
)

985 
dow∆ﬂded_fûes_hash
 = 
	`make_°rög_hash_èbÀ
 (0);

987 
±r
 = 
	`hash_èbÀ_gë
 (
dow∆ﬂded_fûes_hash
, 
fûe
);

988 i‡(
±r
)

989  *
±r
;

991 
±r
 = 
	`dow∆ﬂded_mode_to_±r
 (
mode
);

992 
	`hash_èbÀ_put
 (
dow∆ﬂded_fûes_hash
, 
	`x°rdup
 (
fûe
), 
±r
);

994  
FILE_NOT_ALREADY_DOWNLOADED
;

995 
	}
}

998 
	$dow∆ﬂded_fûes_‰ì
 ()

1000 i‡(
dow∆ﬂded_fûes_hash
)

1002 
hash_èbÀ_ôî©‹
 
ôî
;

1003 
	`hash_èbÀ_ôî©e
 (
dow∆ﬂded_fûes_hash
, &
ôî
);

1004 
	`hash_èbÀ_ôî_√xt
 (&
ôî
);

1006 
	`x‰ì
 (
ôî
.
key
);

1007 
	`hash_èbÀ_de°roy
 (
dow∆ﬂded_fûes_hash
);

1008 
dow∆ﬂded_fûes_hash
 = 
NULL
;

1010 
	}
}

1024 
	$html_quŸe_°rög
 (c⁄° *
s
)

1026 c⁄° *
b
 = 
s
;

1027 *
p
, *
ªs
;

1028 
i
;

1031 
i
 = 0; *
s
; s++, i++)

1033 i‡(*
s
 == '&')

1034 
i
 += 4;

1035 i‡(*
s
 == '<' || *s == '>')

1036 
i
 += 3;

1037 i‡(*
s
 == '\"')

1038 
i
 += 5;

1039 i‡(*
s
 == ' ')

1040 
i
 += 4;

1042 
ªs
 = 
	`xmÆloc
 (
i
 + 1);

1043 
s
 = 
b
;

1044 
p
 = 
ªs
; *
s
; s++)

1046 *
s
)

1049 *
p
++ = '&';

1050 *
p
++ = 'a';

1051 *
p
++ = 'm';

1052 *
p
++ = 'p';

1053 *
p
++ = ';';

1056 *
p
++ = '&';

1057 *
p
++ = (*
s
 == '<' ? 'l' : 'g');

1058 *
p
++ = 't';

1059 *
p
++ = ';';

1062 *
p
++ = '&';

1063 *
p
++ = 'q';

1064 *
p
++ = 'u';

1065 *
p
++ = 'o';

1066 *
p
++ = 't';

1067 *
p
++ = ';';

1070 *
p
++ = '&';

1071 *
p
++ = '#';

1072 *
p
++ = '3';

1073 *
p
++ = '2';

1074 *
p
++ = ';';

1077 *
p
++ = *
s
;

1080 *
p
 = '\0';

1081  
ªs
;

1082 
	}
}

	@src/convert.h

31 #i‚de‡
CONVERT_H


32 
	#CONVERT_H


	)

34 
	ghash_èbÀ
;

35 
hash_èbÀ
 *
dl_uæ_fûe_m≠
;

36 
hash_èbÀ
 *
dow∆ﬂded_html_£t
;

37 
hash_èbÀ
 *
dow∆ﬂded_css_£t
;

39 
	ec⁄vît_›ti⁄s
 {

40 
	mCO_NOCONVERT
 = 0,

41 
	mCO_CONVERT_TO_RELATIVE
,

43 
	mCO_CONVERT_TO_COMPLETE
,

45 
	mCO_NULLIFY_BASE


48 
	guæ
;

53 
	suæpos
 {

54 
uæ
 *
	muæ
;

56 *
	mloˇl_«me
;

61 
	mign‹e_whí_dow∆ﬂdög
 :1;

65 
	mlök_ªœtive_p
 :1;

66 
	mlök_com∂ëe_p
 :1;

67 
	mlök_ba£_p
 :1;

68 
	mlök_ölöe_p
 :1;

69 
	mlök_css_p
 :1;

70 
	mlök_ex≥˘_html
 :1;

71 
	mlök_ex≥˘_css
 :1;

73 
	mlök_ª‰esh_p
 :1;

75 
	mª‰esh_timeout
;

78 
c⁄vît_›ti⁄s
 
	mc⁄vît
;

81 
	mpos
, 
	msize
;

83 
uæpos
 *
	m√xt
;

90 
	mFILE_NOT_ALREADY_DOWNLOADED
 = 0,

93 
	mFILE_DOWNLOADED_NORMALLY
,

94 
	mFILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
,

97 
	mCHECK_FOR_FILE


98 } 
	tdow∆ﬂded_fûe_t
;

100 
dow∆ﬂded_fûe_t
 
dow∆ﬂded_fûe
 (downloaded_file_t, const *);

102 
ªgi°î_dow∆ﬂd
 (const *, const *);

103 
ªgi°î_ªdúe˘i⁄
 (const *, const *);

104 
ªgi°î_html
 (const *, const *);

105 
ªgi°î_css
 (const *, const *);

106 
ªgi°î_dñëe_fûe
 (const *);

107 
c⁄vît_Æl_löks
 ();

108 
c⁄vît_˛ónup
 ();

110 *
html_quŸe_°rög
 (const *);

	@src/cookies.c

46 
	~"wgë.h
"

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<°dlib.h
>

51 
	~<as£π.h
>

52 
	~<î∫o.h
>

53 
	~<time.h
>

54 
	~"utûs.h
"

55 
	~"hash.h
"

56 
	~"cookõs.h
"

57 
	~"hâp.h
"

73 
	scookõ_j¨
 {

75 
hash_èbÀ
 *
	mchaös
;

77 
	mcookõ_cou¡
;

82 
time_t
 
	gcookõs_now
;

84 
cookõ_j¨
 *

85 
	$cookõ_j¨_√w
 ()

87 
cookõ_j¨
 *
j¨
 = 
	`x√w
 (cookie_jar);

88 
j¨
->
chaös
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (0);

89 
j¨
->
cookõ_cou¡
 = 0;

90  
j¨
;

91 
	}
}

93 
	scookõ
 {

94 *
	mdomaö
;

95 
	mp‹t
;

96 *
	m∑th
;

98 
	mdisˇrd_ªque°ed
 :1;

102 
	m£cuª
 :1;

105 
	mdomaö_exa˘
 :1;

108 
	m≥rm™ít
 :1;

110 
time_t
 
	mexpúy_time
;

113 *
	m©å
;

114 *
	mvÆue
;

116 
cookõ
 *
	m√xt
;

120 
	#PORT_ANY
 (-1)

	)

124 
cookõ
 *

125 
	$cookõ_√w
 ()

127 
cookõ
 *cookõ = 
	`x√w0
 (cookie);

133 
cookõ
->
p‹t
 = 
PORT_ANY
;

134  
cookõ
;

135 
	}
}

140 
boﬁ


141 
	$cookõ_expúed_p
 (c⁄° 
cookõ
 *
c
)

143  
c
->
expúy_time
 !0 && c->expúy_timê< 
cookõs_now
;

144 
	}
}

149 
	$dñëe_cookõ
 (
cookõ
 *cookie)

151 
	`x‰ì_nuŒ
 (
cookõ
->
domaö
);

152 
	`x‰ì_nuŒ
 (
cookõ
->
∑th
);

153 
	`x‰ì_nuŒ
 (
cookõ
->
©å
);

154 
	`x‰ì_nuŒ
 (
cookõ
->
vÆue
);

155 
	`x‰ì
 (
cookõ
);

156 
	}
}

172 
cookõ
 *

173 
	$föd_m©chög_cookõ
 (
cookõ_j¨
 *
j¨
, 
cookõ
 *cookie,

174 
cookõ
 **
¥ev±r
)

176 
cookõ
 *
chaö
, *
¥ev
;

178 
chaö
 = 
	`hash_èbÀ_gë
 (
j¨
->
chaös
, 
cookõ
->
domaö
);

179 i‡(!
chaö
)

180 
nom©ch
;

182 
¥ev
 = 
NULL
;

183 ; 
chaö
; 
¥ev
 = chaö, chaö = chaö->
√xt
)

184 i‡(0 =
	`°rcmp
 (
cookõ
->
∑th
, 
chaö
->path)

185 && 0 =
	`°rcmp
 (
cookõ
->
©å
, 
chaö
->attr)

186 && 
cookõ
->
p‹t
 =
chaö
->port)

188 *
¥ev±r
 = 
¥ev
;

189  
chaö
;

192 
nom©ch
:

193 *
¥ev±r
 = 
NULL
;

194  
NULL
;

195 
	}
}

207 
	$°‹e_cookõ
 (
cookõ_j¨
 *
j¨
, 
cookõ
 *cookie)

209 
cookõ
 *
chaö_hód
;

210 *
chaö_key
;

212 i‡(
	`hash_èbÀ_gë_∑ú
 (
j¨
->
chaös
, 
cookõ
->
domaö
,

213 &
chaö_key
, &
chaö_hód
))

218 
cookõ
 *
¥ev
;

219 
cookõ
 *
vi˘im
 = 
	`föd_m©chög_cookõ
 (
j¨
, cookõ, &
¥ev
);

221 i‡(
vi˘im
)

225 i‡(
¥ev
)

227 
¥ev
->
√xt
 = 
vi˘im
->next;

228 
cookõ
->
√xt
 = 
chaö_hód
;

235 
cookõ
->
√xt
 = 
vi˘im
->next;

237 
	`dñëe_cookõ
 (
vi˘im
);

238 --
j¨
->
cookõ_cou¡
;

239 
	`DEBUGP
 (("Deleted old cookie (to beÑeplaced.)\n"));

242 
cookõ
->
√xt
 = 
chaö_hód
;

251 
cookõ
->
√xt
 = 
NULL
;

252 
chaö_key
 = 
	`x°rdup
 (
cookõ
->
domaö
);

255 
	`hash_èbÀ_put
 (
j¨
->
chaös
, 
chaö_key
, 
cookõ
);

256 ++
j¨
->
cookõ_cou¡
;

258 
IF_DEBUG


260 
time_t
 
ex±ime
 = 
cookõ
->
expúy_time
;

261 
	`DEBUGP
 (("\nStored cookie %s %d%s %s <%s> <%s> [expiry %s] %s %s\n",

262 
cookõ
->
domaö
, cookõ->
p‹t
,

263 
cookõ
->
p‹t
 =
PORT_ANY
 ? " (ANY)" : "",

264 
cookõ
->
∑th
,

265 
cookõ
->
≥rm™ít
 ? "permanent" : "session",

266 
cookõ
->
£cuª
 ? "secure" : "insecure",

267 
cookõ
->
expúy_time
 ? 
	`d©ëime_°r
 (
ex±ime
) : "none",

268 
cookõ
->
©å
, cookõ->
vÆue
));

270 
	}
}

279 
	$disˇrd_m©chög_cookõ
 (
cookõ_j¨
 *
j¨
, 
cookõ
 *cookie)

281 
cookõ
 *
¥ev
, *
vi˘im
;

283 i‡(!
	`hash_èbÀ_cou¡
 (
j¨
->
chaös
))

287 
vi˘im
 = 
	`föd_m©chög_cookõ
 (
j¨
, 
cookõ
, &
¥ev
);

288 i‡(
vi˘im
)

290 i‡(
¥ev
)

292 
¥ev
->
√xt
 = 
vi˘im
->next;

297 *
chaö_key
 = 
NULL
;

298 
ªs
;

300 
ªs
 = 
	`hash_èbÀ_gë_∑ú
 (
j¨
->
chaös
, 
vi˘im
->
domaö
,

301 &
chaö_key
, 
NULL
);

302 
	`as£π
 (
ªs
 != 0);

303 i‡(!
vi˘im
->
√xt
)

307 
	`hash_èbÀ_ªmove
 (
j¨
->
chaös
, 
vi˘im
->
domaö
);

308 
	`x‰ì
 (
chaö_key
);

311 
	`hash_èbÀ_put
 (
j¨
->
chaös
, 
chaö_key
, 
vi˘im
->
√xt
);

313 
	`dñëe_cookõ
 (
vi˘im
);

314 
	`DEBUGP
 (("Discarded old cookie.\n"));

316 
	}
}

321 
	#TOKEN_IS
(
tokí
, 
°rög_lôîÆ
) \

322 
	`BOUNDED_EQUAL_NO_CASE
 (
tokí
.
b
,Åokí.
e
, 
°rög_lôîÆ
)

	)

324 
	#TOKEN_NON_EMPTY
(
tokí
Ë—okí.
b
 !
NULL
 &&Åokí.b !tokí.
e
)

	)

342 
cookõ
 *

343 
	$∑r£_£t_cookõ
 (c⁄° *
£t_cookõ
, 
boﬁ
 
sûít
)

345 c⁄° *
±r
 = 
£t_cookõ
;

346 
cookõ
 *cookõ = 
	`cookõ_√w
 ();

347 
∑øm_tokí
 
«me
, 
vÆue
;

349 i‡(!
	`exåa˘_∑øm
 (&
±r
, &
«me
, &
vÆue
, ';'))

350 
îr‹
;

351 i‡(!
vÆue
.
b
)

352 
îr‹
;

355 i‡(*(
vÆue
.
b
 - 1) == '"')

356 
vÆue
.
b
--;

357 i‡(*
vÆue
.
e
 == '"')

358 
vÆue
.
e
++;

360 
cookõ
->
©å
 = 
	`°rdupdñim
 (
«me
.
b
,Çame.
e
);

361 
cookõ
->
vÆue
 = 
	`°rdupdñim
 (vÆue.
b
, vÆue.
e
);

363 
	`exåa˘_∑øm
 (&
±r
, &
«me
, &
vÆue
, ';'))

365 i‡(
	`TOKEN_IS
 (
«me
, "domain"))

367 i‡(!
	`TOKEN_NON_EMPTY
 (
vÆue
))

368 
îr‹
;

369 
	`x‰ì_nuŒ
 (
cookõ
->
domaö
);

374 i‡(*
vÆue
.
b
 == '.')

375 ++
vÆue
.
b
;

376 
cookõ
->
domaö
 = 
	`°rdupdñim
 (
vÆue
.
b
, vÆue.
e
);

378 i‡(
	`TOKEN_IS
 (
«me
, "path"))

380 i‡(!
	`TOKEN_NON_EMPTY
 (
vÆue
))

381 
îr‹
;

382 
	`x‰ì_nuŒ
 (
cookõ
->
∑th
);

383 
cookõ
->
∑th
 = 
	`°rdupdñim
 (
vÆue
.
b
, vÆue.
e
);

385 i‡(
	`TOKEN_IS
 (
«me
, "expires"))

387 *
vÆue_c›y
;

388 
time_t
 
expúes
;

390 i‡(!
	`TOKEN_NON_EMPTY
 (
vÆue
))

391 
îr‹
;

392 
	`BOUNDED_TO_ALLOCA
 (
vÆue
.
b
, vÆue.
e
, 
vÆue_c›y
);

394 
expúes
 = 
	`hâp_©Ÿm
 (
vÆue_c›y
);

395 i‡(
expúes
 !(
time_t
) -1)

397 
cookõ
->
≥rm™ít
 = 1;

398 
cookõ
->
expúy_time
 = 
expúes
;

402 i‡(
cookõ
->
expúy_time
 < 
cookõs_now
)

403 
cookõ
->
disˇrd_ªque°ed
 = 1;

410 i‡(
	`TOKEN_IS
 (
«me
, "max-age"))

412 
maxage
 = -1;

413 *
vÆue_c›y
;

415 i‡(!
	`TOKEN_NON_EMPTY
 (
vÆue
))

416 
îr‹
;

417 
	`BOUNDED_TO_ALLOCA
 (
vÆue
.
b
, vÆue.
e
, 
vÆue_c›y
);

419 
	`ssˇnf
 (
vÆue_c›y
, "%lf", &
maxage
);

420 i‡(
maxage
 == -1)

422 
îr‹
;

423 
cookõ
->
≥rm™ít
 = 1;

424 
cookõ
->
expúy_time
 = 
cookõs_now
 + 
maxage
;

428 i‡(
maxage
 == 0)

429 
cookõ
->
disˇrd_ªque°ed
 = 1;

431 i‡(
	`TOKEN_IS
 (
«me
, "secure"))

434 
cookõ
->
£cuª
 = 1;

440 i‡(*
±r
)

442 
îr‹
;

445  
cookõ
;

447 
îr‹
:

448 i‡(!
sûít
)

449 
	`log¥ötf
 (
LOG_NOTQUIET
,

450 
	`_
("SyntaxÉrror in Set-Cookie: %sátÖosition %d.\n"),

451 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
£t_cookõ
),

452 (Ë(
±r
 - 
£t_cookõ
));

453 
	`dñëe_cookõ
 (
cookõ
);

454  
NULL
;

455 
	}
}

457 #unde‡
TOKEN_IS


458 #unde‡
TOKEN_NON_EMPTY


465 
	#REQUIRE_DIGITS
(
p
) do { \

466 i‡(!
	`c_isdigô
 (*
p
)) \

467  
Ál£
; \

468 ++
p
; 
	`c_isdigô
 (*p);Ö++) \

470 } 0)

	)

472 
	#REQUIRE_DOT
(
p
) do { \

473 i‡(*
p
++ != '.') \

474  
Ál£
; \

475 } 0)

	)

483 
boﬁ


484 
	$numîic_addªss_p
 (c⁄° *
addr
)

486 c⁄° *
p
 = 
addr
;

488 
	`REQUIRE_DIGITS
 (
p
);

489 
	`REQUIRE_DOT
 (
p
);

490 
	`REQUIRE_DIGITS
 (
p
);

491 
	`REQUIRE_DOT
 (
p
);

492 
	`REQUIRE_DIGITS
 (
p
);

493 
	`REQUIRE_DOT
 (
p
);

494 
	`REQUIRE_DIGITS
 (
p
);

496 i‡(*
p
 != '\0')

497  
Ál£
;

498  
åue
;

499 
	}
}

506 
boﬁ


507 
	$check_domaö_m©ch
 (c⁄° *
cookõ_domaö
, c⁄° *
ho°
)

509 
	`DEBUGP
 (("cdm: 1"));

513 i‡(
	`numîic_addªss_p
 (
cookõ_domaö
))

514  0 =
	`°rcmp
 (
cookõ_domaö
, 
ho°
);

516 
	`DEBUGP
 ((" 2"));

519 i‡(0 =
	`°rˇ£cmp
 (
cookõ_domaö
, 
ho°
))

520  
åue
;

522 
	`DEBUGP
 ((" 3"));

525 i‡(!
	`m©ch_èû
 (
ho°
, 
cookõ_domaö
, 
åue
))

526  
Ál£
;

554 c⁄° *
p
 = 
cookõ_domaö
;

555 
dccou¡
 = 1;

556 
ld˛
 = 0;

557 
∆d˛
 = 0;

558 
out
;

559 i‡(*
p
 == '.')

561 ++
p
;

562 
	`DEBUGP
 ((" 4"));

563 
out
 = 0; !out; 
p
++)

564 *
p
)

567 
out
 = 1;

570 i‡(
ld˛
 == 0)

572  
Ál£
;

573 i‡(*(
p
 + 1) == '\0')

577 
out
 = 1;

580 
∆d˛
 = 
ld˛
;

581 
ld˛
 = 0;

582 ++
dccou¡
;

585 ++
ld˛
;

588 
	`DEBUGP
 ((" 5"));

590 i‡(
dccou¡
 < 2)

591  
Ál£
;

593 
	`DEBUGP
 ((" 6"));

595 i‡(
dccou¡
 == 2)

597 
size_t
 
i
;

598 
known_t›Àvñ
 = 
Ál£
;

599 c⁄° *
known_t›Àvñ_domaös
[] = {

602 
i
 = 0; i < 
	`cou¡of
 (
known_t›Àvñ_domaös
); i++)

603 i‡(
	`m©ch_èû
 (
cookõ_domaö
, 
known_t›Àvñ_domaös
[
i
], 
åue
))

605 
known_t›Àvñ
 = 
åue
;

608 i‡(!
known_t›Àvñ
 && 
∆d˛
 <= 3)

609  
Ál£
;

613 
	`DEBUGP
 ((" 7"));

617 i‡(*
cookõ_domaö
 != '.')

619 
dÀn
 = 
	`°æí
 (
cookõ_domaö
);

620 
hÀn
 = 
	`°æí
 (
ho°
);

624 i‡(
hÀn
 > 
dÀn
 && 
ho°
[hlen - dlen - 1] != '.')

625  
Ál£
;

628 
	`DEBUGP
 ((" 8"));

630  
åue
;

631 
	}
}

633 
∑th_m©ches
 (const *, const *);

637 
boﬁ


638 
	$check_∑th_m©ch
 (c⁄° *
cookõ_∑th
, c⁄° *
∑th
)

640  
	`∑th_m©ches
 (
∑th
, 
cookõ_∑th
) != 0;

641 
	}
}

646 
	#PREPEND_SLASH
(
s
) do { \

647 *
PS_√w°r
 = (*Ë
	`Æloˇ
 (1 + 
	`°æí
 (
s
) + 1); \

648 *
PS_√w°r
 = '/'; \

649 
	`°r˝y
 (
PS_√w°r
 + 1, 
s
); \

650 
s
 = 
PS_√w°r
; \

651 } 0)

	)

659 
	$cookõ_h™dÀ_£t_cookõ
 (
cookõ_j¨
 *
j¨
,

660 c⁄° *
ho°
, 
p‹t
,

661 c⁄° *
∑th
, c⁄° *
£t_cookõ
)

663 
cookõ
 *cookie;

664 
cookõs_now
 = 
	`time
 (
NULL
);

669 
	`PREPEND_SLASH
 (
∑th
);

671 
cookõ
 = 
	`∑r£_£t_cookõ
 (
£t_cookõ
, 
Ál£
);

672 i‡(!
cookõ
)

673 
out
;

677 i‡(!
cookõ
->
domaö
)

679 
c›y_domaö
:

682 
cookõ
->
domaö
 = 
	`x°rdup
 (
ho°
);

683 
cookõ
->
domaö_exa˘
 = 1;

685 i‡(
p‹t
 != 80 &&Öort != 443)

686 
cookõ
->
p‹t
 =Öort;

690 i‡(!
	`check_domaö_m©ch
 (
cookõ
->
domaö
, 
ho°
))

692 
	`log¥ötf
 (
LOG_NOTQUIET
,

693 
	`_
("Cookie coming from %sáttemptedÅo set domainÅo %s\n"),

694 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ho°
),

695 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
cookõ
->
domaö
));

696 
	`x‰ì
 (
cookõ
->
domaö
);

697 
c›y_domaö
;

701 i‡(!
cookõ
->
∑th
)

705 *
åaûög_¶ash
 = 
	`°ºchr
 (
∑th
, '/');

706 i‡(
åaûög_¶ash
)

707 
cookõ
->
∑th
 = 
	`°rdupdñim
 (∑th, 
åaûög_¶ash
 + 1);

710 
cookõ
->
∑th
 = 
	`x°rdup
 (path);

715 i‡(!
	`check_∑th_m©ch
 (
cookõ
->
∑th
,Öath))

717 
	`DEBUGP
 (("AttemptÅo fakeÅheÖath: %s, %s\n",

718 
cookõ
->
∑th
,Öath));

719 
out
;

726 i‡(
cookõ
->
disˇrd_ªque°ed
)

728 
	`disˇrd_m©chög_cookõ
 (
j¨
, 
cookõ
);

729 
out
;

732 
	`°‹e_cookõ
 (
j¨
, 
cookõ
);

735 
out
:

736 i‡(
cookõ
)

737 
	`dñëe_cookõ
 (
cookõ
);

738 
	}
}

747 
	$cou¡_ch¨
 (c⁄° *
°rög
, 
chr
)

749 c⁄° *
p
;

750 
cou¡
 = 0;

751 
p
 = 
°rög
; *p;Ö++)

752 i‡(*
p
 =
chr
)

753 ++
cou¡
;

754  
cou¡
;

755 
	}
}

770 
	$föd_chaös_of_ho°
 (
cookõ_j¨
 *
j¨
, c⁄° *
ho°
,

771 
cookõ
 *
de°
[])

773 
de°_cou¡
 = 0;

774 
∑s£s
, 
∑ss˙t
;

777 i‡(!
	`hash_èbÀ_cou¡
 (
j¨
->
chaös
))

780 i‡(
	`numîic_addªss_p
 (
ho°
))

782 
∑s£s
 = 1;

787 
∑s£s
 = 
	`cou¡_ch¨
 (
ho°
, '.');

789 
∑ss˙t
 = 0;

797 
cookõ
 *
chaö
 = 
	`hash_èbÀ_gë
 (
j¨
->
chaös
, 
ho°
);

798 i‡(
chaö
)

799 
de°
[
de°_cou¡
++] = 
chaö
;

800 i‡(++
∑ss˙t
 >
∑s£s
)

802 
ho°
 = 
	`°rchr
 (host, '.') + 1;

805  
de°_cou¡
;

806 
	}
}

812 
	$∑th_m©ches
 (c⁄° *
fuŒ_∑th
, c⁄° *
¥efix
)

814 
Àn
 = 
	`°æí
 (
¥efix
);

816 i‡(0 !
	`°∫cmp
 (
fuŒ_∑th
, 
¥efix
, 
Àn
))

821  
Àn
 + 1;

822 
	}
}

831 
boﬁ


832 
	$cookõ_m©ches_uæ
 (c⁄° 
cookõ
 *cookie,

833 c⁄° *
ho°
, 
p‹t
, c⁄° *
∑th
,

834 
boﬁ
 
£cÊag
, *
∑th_good√ss
)

836 
pg
;

838 i‡(
	`cookõ_expúed_p
 (
cookõ
))

844  
Ál£
;

846 i‡(
cookõ
->
£cuª
 && !
£cÊag
)

848  
Ál£
;

849 i‡(
cookõ
->
p‹t
 !
PORT_ANY
 && cookie->port !=Öort)

850  
Ál£
;

855 i‡(
cookõ
->
domaö_exa˘


856 && 0 !
	`°rˇ£cmp
 (
ho°
, 
cookõ
->
domaö
))

857  
Ál£
;

859 
pg
 = 
	`∑th_m©ches
 (
∑th
, 
cookõ
->path);

860 i‡(
pg
 == 0)

861  
Ál£
;

863 i‡(
∑th_good√ss
)

867 *
∑th_good√ss
 = 
pg
;

868  
åue
;

869 
	}
}

876 
	sweighed_cookõ
 {

877 
cookõ
 *
	mcookõ
;

878 
	mdomaö_good√ss
;

879 
	m∑th_good√ss
;

885 
	$equÆôy_com∑øt‹
 (c⁄° *
p1
, c⁄° *
p2
)

887 
weighed_cookõ
 *
wc1
 = (weighed_cookõ *)
p1
;

888 
weighed_cookõ
 *
wc2
 = (weighed_cookõ *)
p2
;

890 
«mecmp
 = 
	`°rcmp
 (
wc1
->
cookõ
->
©å
, 
wc2
->cookie->attr);

891 
vÆuecmp
 = 
	`°rcmp
 (
wc1
->
cookõ
->
vÆue
, 
wc2
->cookie->value);

895  
«mecmp
 ?Çamecm∞: 
vÆuecmp
;

896 
	}
}

903 
	$ñimö©e_dups
 (
weighed_cookõ
 *
outgoög
, 
cou¡
)

905 
weighed_cookõ
 *
h
;

906 
weighed_cookõ
 *
t
;

907 
weighed_cookõ
 *
íd
 = 
outgoög
 + 
cou¡
;

913 
	`qs‹t
 (
outgoög
, 
cou¡
,  (
weighed_cookõ
), 
equÆôy_com∑øt‹
);

919 
h
 = 
t
 = 
outgoög
; h < 
íd
; h++)

921 i‡(
h
 !
íd
 - 1)

923 
cookõ
 *
c0
 = 
h
[0].cookie;

924 
cookõ
 *
c1
 = 
h
[1].cookie;

925 i‡(!
	`°rcmp
 (
c0
->
©å
, 
c1
->©åË&& !°rcm∞(c0->
vÆue
, c1->value))

932 i‡(
h
 !
t
)

933 *
t
++ = *
h
;

935 
t
++;

937  
t
 - 
outgoög
;

938 
	}
}

943 
	$good√ss_com∑øt‹
 (c⁄° *
p1
, c⁄° *
p2
)

945 
weighed_cookõ
 *
wc1
 = (weighed_cookõ *)
p1
;

946 
weighed_cookõ
 *
wc2
 = (weighed_cookõ *)
p2
;

950 
dgdiff
 = 
wc2
->
domaö_good√ss
 - 
wc1
->domain_goodness;

951 
pgdiff
 = 
wc2
->
∑th_good√ss
 - 
wc1
->path_goodness;

956  
dgdiff
 ? dgdif‡: 
pgdiff
;

957 
	}
}

966 
	$cookõ_hódî
 (
cookõ_j¨
 *
j¨
, c⁄° *
ho°
,

967 
p‹t
, c⁄° *
∑th
, 
boﬁ
 
£cÊag
)

969 
cookõ
 **
chaös
;

970 
chaö_cou¡
;

972 
cookõ
 *cookie;

973 
weighed_cookõ
 *
outgoög
;

974 
cou¡
, 
i
, 
o˙t
;

975 *
ªsu…
;

976 
ªsu…_size
, 
pos
;

977 
	`PREPEND_SLASH
 (
∑th
);

984 
chaös
 = 
	`Æloˇ_¨øy
 (
cookõ
 *, 1 + 
	`cou¡_ch¨
 (
ho°
, '.'));

985 
chaö_cou¡
 = 
	`föd_chaös_of_ho°
 (
j¨
, 
ho°
, 
chaös
);

988 i‡(!
chaö_cou¡
)

989  
NULL
;

991 
cookõs_now
 = 
	`time
 (
NULL
);

998 
cou¡
 = 0;

999 
i
 = 0; i < 
chaö_cou¡
; i++)

1000 
cookõ
 = 
chaös
[
i
]; cookõ; cookõ = cookõ->
√xt
)

1001 i‡(
	`cookõ_m©ches_uæ
 (
cookõ
, 
ho°
, 
p‹t
, 
∑th
, 
£cÊag
, 
NULL
))

1002 ++
cou¡
;

1003 i‡(!
cou¡
)

1004  
NULL
;

1007 
outgoög
 = 
	`Æloˇ_¨øy
 (
weighed_cookõ
, 
cou¡
);

1011 
o˙t
 = 0;

1012 
i
 = 0; i < 
chaö_cou¡
; i++)

1013 
cookõ
 = 
chaös
[
i
]; cookõ; cookõ = cookõ->
√xt
)

1015 
pg
;

1016 i‡(!
	`cookõ_m©ches_uæ
 (
cookõ
, 
ho°
, 
p‹t
, 
∑th
, 
£cÊag
, &
pg
))

1018 
outgoög
[
o˙t
].
cookõ
 = cookie;

1019 
outgoög
[
o˙t
].
domaö_good√ss
 = 
	`°æí
 (
cookõ
->
domaö
);

1020 
outgoög
[
o˙t
].
∑th_good√ss
 = 
pg
;

1021 ++
o˙t
;

1023 
	`as£π
 (
o˙t
 =
cou¡
);

1027 
cou¡
 = 
	`ñimö©e_dups
 (
outgoög
, count);

1031 
	`qs‹t
 (
outgoög
, 
cou¡
,  (
weighed_cookõ
), 
good√ss_com∑øt‹
);

1034 
ªsu…_size
 = 0;

1035 
i
 = 0; i < 
cou¡
; i++)

1037 
cookõ
 *
c
 = 
outgoög
[
i
].cookie;

1039 
ªsu…_size
 +
	`°æí
 (
c
->
©å
Ë+ 1 + såÀ¿(c->
vÆue
);

1046 
ªsu…_size
 =Ñesu…_sizê+ (
cou¡
 - 1) * 2 + 1;

1047 
ªsu…
 = 
	`xmÆloc
 (
ªsu…_size
);

1048 
pos
 = 0;

1049 
i
 = 0; i < 
cou¡
; i++)

1051 
cookõ
 *
c
 = 
outgoög
[
i
].cookie;

1052 
«mÀn
 = 
	`°æí
 (
c
->
©å
);

1053 
vÆÀn
 = 
	`°æí
 (
c
->
vÆue
);

1055 
	`mem˝y
 (
ªsu…
 + 
pos
, 
c
->
©å
, 
«mÀn
);

1056 
pos
 +
«mÀn
;

1057 
ªsu…
[
pos
++] = '=';

1058 
	`mem˝y
 (
ªsu…
 + 
pos
, 
c
->
vÆue
, 
vÆÀn
);

1059 
pos
 +
vÆÀn
;

1060 i‡(
i
 < 
cou¡
 - 1)

1062 
ªsu…
[
pos
++] = ';';

1063 
ªsu…
[
pos
++] = ' ';

1066 
ªsu…
[
pos
++] = '\0';

1067 
	`as£π
 (
pos
 =
ªsu…_size
);

1068  
ªsu…
;

1069 
	}
}

1105 
	$domaö_p‹t
 (c⁄° *
domaö_b
, c⁄° *
domaö_e
,

1106 c⁄° **
domaö_e_±r
)

1108 
p‹t
 = 0;

1109 c⁄° *
p
;

1110 c⁄° *
cﬁ⁄
 = 
	`memchr
 (
domaö_b
, ':', 
domaö_e
 - domain_b);

1111 i‡(!
cﬁ⁄
)

1113 
p
 = 
cﬁ⁄
 + 1;Ö < 
domaö_e
 && 
	`c_isdigô
 (*p);Ö++)

1114 
p‹t
 = 10 *Ö‹à+ (*
p
 - '0');

1115 i‡(
p
 < 
domaö_e
)

1118 *
domaö_e_±r
 = 
cﬁ⁄
;

1119  
p‹t
;

1120 
	}
}

1122 
	#GET_WORD
(
p
, 
b
, 
e
) do { \

1123 
b
 = 
p
; \

1124 *
p
 && *p != '\t') \

1125 ++
p
; \

1126 
e
 = 
p
; \

1127 i‡(
b
 =
e
 || !*
p
) \

1128 
√xt
; \

1129 ++
p
; \

1130 } 0)

	)

1135 
	$cookõ_j¨_lﬂd
 (
cookõ_j¨
 *
j¨
, c⁄° *
fûe
)

1137 *
löe
;

1138 
FILE
 *
Â
 = 
	`f›í
 (
fûe
, "r");

1139 i‡(!
Â
)

1141 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot open cookies file %s: %s\n"),

1142 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

1145 
cookõs_now
 = 
	`time
 (
NULL
);

1147 ; ((
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
); 
	`x‰ì
 (line))

1149 
cookõ
 *cookie;

1150 *
p
 = 
löe
;

1152 
expúy
;

1153 
p‹t
;

1155 *
domaö_b
 = 
NULL
, *
domaö_e
 = NULL;

1156 *
domÊag_b
 = 
NULL
, *
domÊag_e
 = NULL;

1157 *
∑th_b
 = 
NULL
, *
∑th_e
 = NULL;

1158 *
£cuª_b
 = 
NULL
, *
£cuª_e
 = NULL;

1159 *
expúes_b
 = 
NULL
, *
expúes_e
 = NULL;

1160 *
«me_b
 = 
NULL
, *
«me_e
 = NULL;

1161 *
vÆue_b
 = 
NULL
, *
vÆue_e
 = NULL;

1164 *
p
 && 
	`c_is•a˚
 (*p))

1165 ++
p
;

1167 i‡(!*
p
 || *p == '#')

1170 
	`GET_WORD
 (
p
, 
domaö_b
, 
domaö_e
);

1171 
	`GET_WORD
 (
p
, 
domÊag_b
, 
domÊag_e
);

1172 
	`GET_WORD
 (
p
, 
∑th_b
, 
∑th_e
);

1173 
	`GET_WORD
 (
p
, 
£cuª_b
, 
£cuª_e
);

1174 
	`GET_WORD
 (
p
, 
expúes_b
, 
expúes_e
);

1175 
	`GET_WORD
 (
p
, 
«me_b
, 
«me_e
);

1179 
vÆue_b
 = 
p
;

1180 
vÆue_e
 = 
p
 + 
	`°æí
 (p);

1181 i‡(
vÆue_e
 > 
vÆue_b
 && value_e[-1] == '\n')

1182 --
vÆue_e
;

1183 i‡(
vÆue_e
 > 
vÆue_b
 && value_e[-1] == '\r')

1184 --
vÆue_e
;

1187 
cookõ
 = 
	`cookõ_√w
 ();

1189 
cookõ
->
©å
 = 
	`°rdupdñim
 (
«me_b
, 
«me_e
);

1190 
cookõ
->
vÆue
 = 
	`°rdupdñim
 (
vÆue_b
, 
vÆue_e
);

1191 
cookõ
->
∑th
 = 
	`°rdupdñim
 (
∑th_b
, 
∑th_e
);

1192 
cookõ
->
£cuª
 = 
	`BOUNDED_EQUAL
 (
£cuª_b
, 
£cuª_e
, "TRUE");

1198 
cookõ
->
domaö_exa˘
 = !
	`BOUNDED_EQUAL
 (
domÊag_b
, 
domÊag_e
, "TRUE");

1202 
p‹t
 = 
	`domaö_p‹t
 (
domaö_b
, 
domaö_e
, (const **)&domain_e);

1203 i‡(
p‹t
)

1204 
cookõ
->
p‹t
 =Öort;

1206 i‡(*
domaö_b
 == '.')

1207 ++
domaö_b
;

1208 
cookõ
->
domaö
 = 
	`°rdupdñim
 (
domaö_b
, 
domaö_e
);

1211 
expúy
 = ()
cookõs_now
 - 1;

1215 *
expúes_e
 = '\0';

1216 
	`ssˇnf
 (
expúes_b
, "%lf", &
expúy
);

1218 i‡(
expúy
 == 0)

1227 i‡(
expúy
 < 
cookõs_now
)

1228 
ab‹t_cookõ
;

1229 
cookõ
->
expúy_time
 = 
expúy
;

1230 
cookõ
->
≥rm™ít
 = 1;

1233 
	`°‹e_cookõ
 (
j¨
, 
cookõ
);

1235 
√xt
:

1238 
ab‹t_cookõ
:

1239 
	`dñëe_cookõ
 (
cookõ
);

1241 
	`f˛o£
 (
Â
);

1242 
	}
}

1247 
	$cookõ_j¨_ßve
 (
cookõ_j¨
 *
j¨
, c⁄° *
fûe
)

1249 
FILE
 *
Â
;

1250 
hash_èbÀ_ôî©‹
 
ôî
;

1252 
	`DEBUGP
 (("Savög cookõ†tÿ%s.\n", 
fûe
));

1254 
cookõs_now
 = 
	`time
 (
NULL
);

1256 
Â
 = 
	`f›í
 (
fûe
, "w");

1257 i‡(!
Â
)

1259 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot open cookies file %s: %s\n"),

1260 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

1264 
	`Âuts
 ("# HTTP cookõ fûe.\n", 
Â
);

1265 
	`Ârötf
 (
Â
, "# Gíî©ed by Wgë o¿%s.\n", 
	`d©ëime_°r
 (
cookõs_now
));

1266 
	`Âuts
 ("# Edôáàyou∏ow¿risk.\n\n", 
Â
);

1268 
	`hash_èbÀ_ôî©e
 (
j¨
->
chaös
, &
ôî
);

1269 
	`hash_èbÀ_ôî_√xt
 (&
ôî
);

1272 c⁄° *
domaö
 = 
ôî
.
key
;

1273 
cookõ
 *cookõ = 
ôî
.
vÆue
;

1274 ; 
cookõ
; cookõ = cookõ->
√xt
)

1276 i‡(!
cookõ
->
≥rm™ít
 && !
›t
.
kìp_£ssi⁄_cookõs
)

1278 i‡(
	`cookõ_expúed_p
 (
cookõ
))

1280 i‡(!
cookõ
->
domaö_exa˘
)

1281 
	`Âutc
 ('.', 
Â
);

1282 
	`Âuts
 (
domaö
, 
Â
);

1283 i‡(
cookõ
->
p‹t
 !
PORT_ANY
)

1284 
	`Ârötf
 (
Â
, ":%d", 
cookõ
->
p‹t
);

1285 
	`Ârötf
 (
Â
, "\t%s\t%s\t%s\t%.0f\t%s\t%s\n",

1286 
cookõ
->
domaö_exa˘
 ? "FALSE" : "TRUE",

1287 
cookõ
->
∑th
, cookõ->
£cuª
 ? "TRUE" : "FALSE",

1288 ()
cookõ
->
expúy_time
,

1289 
cookõ
->
©å
, cookõ->
vÆue
);

1290 i‡(
	`„º‹
 (
Â
))

1291 
out
;

1294 
out
:

1295 i‡(
	`„º‹
 (
Â
))

1296 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Error writingÅo %s: %s\n"),

1297 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

1298 i‡(
	`f˛o£
 (
Â
) < 0)

1299 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Error closing %s: %s\n"),

1300 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

1302 
	`DEBUGP
 (("Done saving cookies.\n"));

1303 
	}
}

1308 
	$cookõ_j¨_dñëe
 (
cookõ_j¨
 *
j¨
)

1311 
hash_èbÀ_ôî©‹
 
ôî
;

1312 
	`hash_èbÀ_ôî©e
 (
j¨
->
chaös
, &
ôî
); 
	`hash_èbÀ_ôî_√xt
 (&iter); )

1314 
cookõ
 *
chaö
 = 
ôî
.
vÆue
;

1315 
	`x‰ì
 (
ôî
.
key
);

1317 
chaö
)

1319 
cookõ
 *
√xt
 = 
chaö
->next;

1320 
	`dñëe_cookõ
 (
chaö
);

1321 
chaö
 = 
√xt
;

1324 
	`hash_èbÀ_de°roy
 (
j¨
->
chaös
);

1325 
	`x‰ì
 (
j¨
);

1326 
	}
}

1332 #ifde‡
TEST_COOKIES


1334 
	$ã°_cookõs
 ()

1338 c⁄° *
d©a
;

1339 c⁄° *
ªsu…s
[10];

1340 } 
ã°s_succ
[] = {

1341 { "¨g=vÆue", {"¨g", "vÆue", 
NULL
} },

1342 { "¨g1=vÆue1;¨g2=vÆue2", {"¨g1", "vÆue1", "¨g2", "vÆue2", 
NULL
} },

1343 { "¨g1=vÆue1;árg2=vÆue2", {"¨g1", "vÆue1", "¨g2", "vÆue2", 
NULL
} },

1344 { "¨g1=vÆue1;árg2=vÆue2;", {"¨g1", "vÆue1", "¨g2", "vÆue2", 
NULL
} },

1345 { "¨g1=vÆue1;árg2=vÆue2; ", {"¨g1", "vÆue1", "¨g2", "vÆue2", 
NULL
} },

1346 { "¨g1=\"vÆue1\";árg2=\"\"", {"¨g1", "vÆue1", "¨g2", "", 
NULL
} },

1347 { "¨g=", {"¨g", "", 
NULL
} },

1348 { "¨g1=;árg2=", {"¨g1", "", "¨g2", "", 
NULL
} },

1349 { "¨g1 = ;árg2", {"¨g1", "", "¨g2", "", 
NULL
} },

1353 *
ã°s_Áû
[] = {

1359 
i
;

1361 
i
 = 0; i < 
	`cou¡of
 (
ã°s_succ
); i++)

1363 
öd
;

1364 c⁄° *
d©a
 = 
ã°s_succ
[
i
].data;

1365 c⁄° **
ex≥˘ed
 = 
ã°s_succ
[
i
].
ªsu…s
;

1366 
cookõ
 *
c
;

1368 
c
 = 
	`∑r£_£t_cookõ
 (
d©a
, 
åue
);

1369 i‡(!
c
)

1371 
	`¥ötf
 ("NULL cookõÑëu∫ed f‹ vÆid d©a: %s\n", 
d©a
);

1377 
∑øm_tokí
 
«me
, 
vÆue
;

1378 c⁄° *
±r
 = 
d©a
;

1379 
j
 = 0;

1380 
	`exåa˘_∑øm
 (&
±r
, &
«me
, &
vÆue
, ';'))

1382 *
n
 = 
	`°rdupdñim
 (
«me
.
b
,Çame.
e
);

1383 *
v
 = 
	`°rdupdñim
 (
vÆue
.
b
, vÆue.
e
);

1384 i‡(!
ex≥˘ed
[
j
])

1386 
	`¥ötf
 ("Toÿm™yÖ¨amëî†f‹ '%s'\n", 
d©a
);

1389 i‡(0 !
	`°rcmp
 (
ex≥˘ed
[
j
], 
n
))

1390 
	`¥ötf
 ("InvalidÇame %d for '%s' (expected '%s', got '%s')\n",

1391 
j
 / 2 + 1, 
d©a
, 
ex≥˘ed
[j], 
n
);

1392 i‡(0 !
	`°rcmp
 (
ex≥˘ed
[
j
 + 1], 
v
))

1393 
	`¥ötf
 ("Invalid value %d for '%s' (expected '%s', got '%s')\n",

1394 
j
 / 2 + 1, 
d©a
, 
ex≥˘ed
[j + 1], 
v
);

1395 
j
 += 2;

1396 
	`‰ì
 (
n
);

1397 
	`‰ì
 (
v
);

1399 i‡(
ex≥˘ed
[
j
])

1400 
	`¥ötf
 ("Toÿ„wÖ¨amëî†f‹ '%s'\n", 
d©a
);

1404 
i
 = 0; i < 
	`cou¡of
 (
ã°s_Áû
); i++)

1406 
cookõ
 *
c
;

1407 *
d©a
 = 
ã°s_Áû
[
i
];

1408 
c
 = 
	`∑r£_£t_cookõ
 (
d©a
, 
åue
);

1409 i‡(
c
)

1410 
	`¥ötf
 ("FaûedÅÿªp‹àîr‹ o¿övÆid d©a: %s\n", 
d©a
);

1412 
	}
}

	@src/cookies.h

31 #i‚de‡
COOKIES_H


32 
	#COOKIES_H


	)

34 
	gcookõ_j¨
;

36 
cookõ_j¨
 *
cookõ_j¨_√w
 ();

37 
cookõ_j¨_dñëe
 (
cookõ_j¨
 *);

39 
cookõ_h™dÀ_£t_cookõ
 (
cookõ_j¨
 *, const *, ,

41 *
cookõ_hódî
 (
cookõ_j¨
 *, const *, ,

42 c⁄° *, 
boﬁ
);

44 
cookõ_j¨_lﬂd
 (
cookõ_j¨
 *, const *);

45 
cookõ_j¨_ßve
 (
cookõ_j¨
 *, const *);

	@src/css-tokens.h

30 #i‚de‡
CSS_TOKENS_H


31 
	#CSS_TOKENS_H


	)

34 
	mCSSEOF
,

35 
	mS
,

36 
	mCDO
,

37 
	mCDC
,

38 
	mINCLUDES
,

39 
	mDASHMATCH
,

40 
	mLBRACE
,

41 
	mPLUS
,

42 
	mGREATER
,

43 
	mCOMMA
,

44 
	mSTRING
,

45 
	mINVALID
,

46 
	mIDENT
,

47 
	mHASH
,

48 
	mIMPORT_SYM
,

49 
	mPAGE_SYM
,

50 
	mMEDIA_SYM
,

51 
	mCHARSET_SYM
,

52 
	mIMPORTANT_SYM
,

53 
	mEMS
,

54 
	mEXS
,

55 
	mLENGTH
,

56 
	mANGLE
,

57 
	mTIME
,

58 
	mFREQ
,

59 
	mDIMENSION
,

60 
	mPERCENTAGE
,

61 
	mNUMBER
,

62 
	mURI
,

63 
	mFUNCTION


	@src/css-url.c

41 
	~<wgë.h
>

43 
	~<°dio.h
>

44 #ifde‡
HAVE_STRING_H


45 
	~<°rög.h
>

47 
	~<°rögs.h
>

49 
	~<°dlib.h
>

50 
	~<˘y≥.h
>

51 
	~<î∫o.h
>

53 
	~"wgë.h
"

54 
	~"utûs.h
"

55 
	~"c⁄vît.h
"

56 
	~"html-uæ.h
"

57 
	~"css-tokís.h
"

60 *
yyãxt
;

61 
yyÀng
;

62 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

63 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (c⁄° *
byãs
,
Àn
 );

64 
yyÀx
 ();

67 c⁄° *
	gtokí_«mes
[] = {

111 
	$gë_uri_°rög
 (c⁄° *
©
, *
pos
, *
Àngth
)

113 *
uri
;

119 i‡(0 !
	`°∫ˇ£cmp
 (
©
 + *
pos
, "url(", 4))

120  
NULL
;

122 *
pos
 += 4;

123 *
Àngth
 -= 5;

125 
	`is•a˚
 (
©
[*
pos
]))

127 (*
pos
)++;

128 i‡(--(*
Àngth
) == 0)

129  
NULL
;

133 
	`is•a˚
 (
©
[*
pos
 + *
Àngth
 - 1]))

135 (*
Àngth
)--;

138 i‡(
©
[*
pos
] == '\'' ||át[*pos] == '"')

140 (*
pos
)++;

141 *
Àngth
 -= 2;

144 
uri
 = 
	`xmÆloc
 (*
Àngth
 + 1);

145 i‡(
uri
)

147 
	`°∫˝y
 (
uri
, 
©
 + *
pos
, *
Àngth
);

148 
uri
[*
Àngth
] = '\0';

151  
uri
;

152 
	}
}

155 
	$gë_uæs_css
 (
m≠_c⁄ãxt
 *
˘x
, 
off£t
, 
buf_Àngth
)

157 
tokí
;

159 
buf„r_pos
 = 0;

160 
pos
, 
Àngth
;

161 *
uri
;

170 
	`yy_sˇn_byãs
 (
˘x
->
ãxt
 + 
off£t
, 
buf_Àngth
);

172 (
tokí
 = 
	`yyÀx
()Ë!
CSSEOF
)

178 if(
tokí
 =
IMPORT_SYM
)

181 
buf„r_pos
 +
yyÀng
;

182 } (
tokí
 = 
	`yyÀx
()Ë=
S
);

186 i‡(
tokí
 =
STRING
 ||Åokí =
URI
)

189 
pos
 = 
buf„r_pos
 + 
off£t
;

190 
Àngth
 = 
yyÀng
;

192 i‡(
tokí
 =
URI
)

194 
uri
 = 
	`gë_uri_°rög
 (
˘x
->
ãxt
, &
pos
, &
Àngth
);

199 
pos
++;

200 
Àngth
 -= 2;

201 
uri
 = 
	`xmÆloc
 (
Àngth
 + 1);

202 
	`°∫˝y
 (
uri
, 
yyãxt
 + 1, 
Àngth
);

203 
uri
[
Àngth
] = '\0';

206 i‡(
uri
)

208 
uæpos
 *
up
 = 
	`≠≥nd_uæ
 (
uri
, 
pos
, 
Àngth
, 
˘x
);

209 
	`DEBUGP
 (("Found @imp‹t: [%s]áà%d [%s]\n", 
yyãxt
, 
buf„r_pos
, 
uri
));

211 i‡(
up
)

213 
up
->
lök_ölöe_p
 = 1;

214 
up
->
lök_css_p
 = 1;

215 
up
->
lök_ex≥˘_css
 = 1;

218 
	`x‰ì
(
uri
);

226 if(
tokí
 =
URI
)

228 
pos
 = 
buf„r_pos
 + 
off£t
;

229 
Àngth
 = 
yyÀng
;

230 
uri
 = 
	`gë_uri_°rög
 (
˘x
->
ãxt
, &
pos
, &
Àngth
);

232 i‡(
uri
)

234 
uæpos
 *
up
 = 
	`≠≥nd_uæ
 (
uri
, 
pos
, 
Àngth
, 
˘x
);

235 
	`DEBUGP
 (("Found URI: [%s]áà%d [%s]\n", 
yyãxt
, 
buf„r_pos
, 
uri
));

236 i‡(
up
)

238 
up
->
lök_ölöe_p
 = 1;

239 
up
->
lök_css_p
 = 1;

242 
	`x‰ì
 (
uri
);

245 
buf„r_pos
 +
yyÀng
;

247 
	`DEBUGP
 (("\n"));

248 
	}
}

250 
uæpos
 *

251 
	$gë_uæs_css_fûe
 (c⁄° *
fûe
, c⁄° *
uæ
)

253 
fûe_mem‹y
 *
fm
;

254 
m≠_c⁄ãxt
 
˘x
;

257 
fm
 = 
	`wgë_ªad_fûe
 (
fûe
);

258 i‡(!
fm
)

260 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

261  
NULL
;

263 
	`DEBUGP
 (("Lﬂded %†(sizê%s).\n", 
fûe
, 
	`numbî_to_°©ic_°rög
 (
fm
->
Àngth
)));

265 
˘x
.
ãxt
 = 
fm
->
c⁄ã¡
;

266 
˘x
.
hód
 = 
NULL
;

267 
˘x
.
ba£
 = 
NULL
;

268 
˘x
.
∑ª¡_ba£
 = 
uæ
 ? uæ : 
›t
.
ba£_hªf
;

269 
˘x
.
documít_fûe
 = 
fûe
;

270 
˘x
.
nofﬁlow
 = 0;

272 
	`gë_uæs_css
 (&
˘x
, 0, 
fm
->
Àngth
);

273 
	`wgë_ªad_fûe_‰ì
 (
fm
);

274  
˘x
.
hód
;

275 
	}
}

	@src/css-url.h

30 #i‚de‡
CSS_URL_H


31 
	#CSS_URL_H


	)

33 
gë_uæs_css
 (
m≠_c⁄ãxt
 *, , );

34 
uæpos
 *
gë_uæs_css_fûe
 (const *, const *);

	@src/css.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 5

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

91 #ifde‡
__˝lu•lus


94 
	#YY_USE_CONST


	)

99 #i‡
deföed
 (
__STDC__
)

101 
	#YY_USE_CONST


	)

106 #ifde‡
YY_USE_CONST


107 
	#yyc⁄°
 c⁄°

	)

109 
	#yyc⁄°


	)

113 
	#YY_NULL
 0

	)

120 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

126 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

132 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

133 
	#YYSTATE
 
YY_START


	)

136 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

139 
	#YY_NEW_FILE
 
	`yyª°¨t
(
yyö
 )

	)

141 
	#YY_END_OF_BUFFER_CHAR
 0

	)

144 #i‚de‡
YY_BUF_SIZE


145 #ifde‡
__ü64__


150 
	#YY_BUF_SIZE
 32768

	)

152 
	#YY_BUF_SIZE
 16384

	)

158 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

160 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


161 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

162 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

165 
yyÀng
;

167 
FILE
 *
yyö
, *
yyout
;

169 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

170 
	#EOB_ACT_END_OF_FILE
 1

	)

171 
	#EOB_ACT_LAST_MATCH
 2

	)

173 
	#YY_LESS_LINENO
(
n
)

	)

176 
	#yyÀss
(
n
) \

180 
yyÀss_ma¸o_¨g
 = (
n
); \

181 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

182 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

183 
YY_RESTORE_YY_MORE_OFFSET
 \

184 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

185 
YY_DO_BEFORE_ACTION
; \

187  0 )

	)

189 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

191 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


192 
	#YY_TYPEDEF_YY_SIZE_T


	)

193 
size_t
 
	tyy_size_t
;

196 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


197 
	#YY_STRUCT_YY_BUFFER_STATE


	)

198 
	syy_buf„r_°©e


200 
FILE
 *
	myy_öput_fûe
;

202 *
	myy_ch_buf
;

203 *
	myy_buf_pos
;

208 
yy_size_t
 
	myy_buf_size
;

213 
	myy_n_ch¨s
;

219 
	myy_is_our_buf„r
;

226 
	myy_is_öãø˘ive
;

232 
	myy_©_bﬁ
;

234 
	myy_bs_löío
;

235 
	myy_bs_cﬁumn
;

240 
	myy_fûl_buf„r
;

242 
	myy_buf„r_°©us
;

244 
	#YY_BUFFER_NEW
 0

	)

245 
	#YY_BUFFER_NORMAL
 1

	)

256 
	#YY_BUFFER_EOF_PENDING
 2

	)

262 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

263 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

264 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

272 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

273 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

274 : 
NULL
)

	)

279 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

282 
	gyy_hﬁd_ch¨
;

283 
	gyy_n_ch¨s
;

284 
	gyyÀng
;

287 *
	gyy_c_buf_p
 = (*) 0;

288 
	gyy_öô
 = 0;

289 
	gyy_°¨t
 = 0;

294 
	gyy_did_buf„r_swôch_⁄_eof
;

296 
yyª°¨t
 (
FILE
 *
öput_fûe
 );

297 
yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

298 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

299 
yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

300 
yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

301 
yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

302 
yyp›_buf„r_°©e
 ();

304 
yyísuª_buf„r_°ack
 ();

305 
yy_lﬂd_buf„r_°©e
 ();

306 
yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

308 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

310 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

311 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

312 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

314 *
yyÆloc
 (
yy_size_t
 );

315 *
yyªÆloc
 (*,
yy_size_t
 );

316 
yy‰ì
 (* );

318 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

320 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

322 i‡–! 
YY_CURRENT_BUFFER
 ){ \

323 
	`yyísuª_buf„r_°ack
 (); \

324 
YY_CURRENT_BUFFER_LVALUE
 = \

325 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

327 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

328 }

	)

330 
	#yy_£t_bﬁ
(
©_bﬁ
) \

332 i‡–! 
YY_CURRENT_BUFFER
 ){\

333 
	`yyísuª_buf„r_°ack
 (); \

334 
YY_CURRENT_BUFFER_LVALUE
 = \

335 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

337 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

338 }

	)

340 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

344 
	#yywøp
(
n
Ë1

	)

345 
	#YY_SKIP_YYWRAP


	)

347 
	tYY_CHAR
;

349 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

351 
	tyy_°©e_ty≥
;

353 
yylöío
;

355 
	gyylöío
 = 1;

357 *
yyãxt
;

358 
	#yyãxt_±r
 
yyãxt


	)

360 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

361 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

362 
yy_gë_√xt_buf„r
 ();

363 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

368 
	#YY_DO_BEFORE_ACTION
 \

369 (
yyãxt_±r
Ë
yy_bp
; \

370 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

371 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

372 *
yy_˝
 = '\0'; \

373 (
yy_c_buf_p
Ë
yy_˝
;

	)

375 
	#YY_NUM_RULES
 42

	)

376 
	#YY_END_OF_BUFFER
 43

	)

379 
	syy_å™s_öfo


381 
Êex_öt32_t
 
	myy_vîify
;

382 
Êex_öt32_t
 
	myy_nxt
;

384 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[1153] =

515 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

547 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[82] =

560 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[1307] =

708 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[1307] =

856 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[17346] =

2768 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[17346] =

4680 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

4681 *
	gyy_œ°_ac˚±ög_˝os
;

4683 
yy_Êex_debug
;

4684 
	gyy_Êex_debug
 = 0;

4689 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

4690 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

4691 
	#YY_MORE_ADJ
 0

	)

4692 
	#YY_RESTORE_YY_MORE_OFFSET


	)

4693 *
	gyyãxt
;

4726 
	#YY_NO_INPUT


	)

4728 
	~"css-tokís.h
"

4732 
	#INITIAL
 0

	)

4734 #i‚de‡
YY_NO_UNISTD_H


4739 
	~<uni°d.h
>

4742 #i‚de‡
YY_EXTRA_TYPE


4743 
	#YY_EXTRA_TYPE
 *

	)

4746 
yy_öô_globÆs
 ();

4751 
yyÀx_de°roy
 ();

4753 
yygë_debug
 ();

4755 
yy£t_debug
 (
debug_Êag
 );

4757 
YY_EXTRA_TYPE
 
yygë_exåa
 ();

4759 
yy£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

4761 
FILE
 *
yygë_ö
 ();

4763 
yy£t_ö
 (
FILE
 * 
ö_°r
 );

4765 
FILE
 *
yygë_out
 ();

4767 
yy£t_out
 (
FILE
 * 
out_°r
 );

4769 
yygë_Àng
 ();

4771 *
yygë_ãxt
 ();

4773 
yygë_löío
 ();

4775 
yy£t_löío
 (
löe_numbî
 );

4781 #i‚de‡
YY_SKIP_YYWRAP


4782 #ifde‡
__˝lu•lus


4783 "C" 
yywøp
 ();

4785 
yywøp
 ();

4789 #i‚de‡
yyãxt_±r


4790 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

4793 #ifde‡
YY_NEED_STRLEN


4794 
yy_Êex_°æí
 (
yyc⁄°
 * );

4797 #i‚de‡
YY_NO_INPUT


4799 #ifde‡
__˝lu•lus


4800 
yyöput
 ();

4802 
öput
 ();

4808 #i‚de‡
YY_READ_BUF_SIZE


4809 #ifde‡
__ü64__


4811 
	#YY_READ_BUF_SIZE
 16384

	)

4813 
	#YY_READ_BUF_SIZE
 8192

	)

4818 #i‚de‡
ECHO


4822 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

4828 #i‚de‡
YY_INPUT


4829 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

4830 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

4832 
c
 = '*'; \

4833 
size_t
 
n
; \

4834  
n
 = 0;Ç < 
max_size
 && \

4835 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

4836 
buf
[
n
] = (Ë
c
; \

4837 i‡–
c
 == '\n' ) \

4838 
buf
[
n
++] = (Ë
c
; \

4839 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

4840 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

4841 
ªsu…
 = 
n
; \

4845 
î∫o
=0; \

4846  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

4848 if–
î∫o
 !
EINTR
) \

4850 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

4853 
î∫o
=0; \

4854 
	`˛óªº
(
yyö
); \

4858 

	)

4865 #i‚de‡
yyãrmö©e


4866 
	#yyãrmö©e
(Ë 
YY_NULL


	)

4870 #i‚de‡
YY_START_STACK_INCR


4871 
	#YY_START_STACK_INCR
 25

	)

4875 #i‚de‡
YY_FATAL_ERROR


4876 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

4884 #i‚de‡
YY_DECL


4885 
	#YY_DECL_IS_OURS
 1

	)

4887 
yyÀx
 ();

4889 
	#YY_DECL
 
	`yyÀx
 ()

	)

4895 #i‚de‡
YY_USER_ACTION


4896 
	#YY_USER_ACTION


	)

4900 #i‚de‡
YY_BREAK


4901 
	#YY_BREAK
 ;

	)

4904 
	#YY_RULE_SETUP
 \

4905 
YY_USER_ACTION


	)

4909 
	gYY_DECL


4911 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

4912 *
	gyy_˝
, *
	gyy_bp
;

4913 
	gyy_a˘
;

4920 i‡–!(
	gyy_öô
) )

4922 (
	gyy_öô
) = 1;

4924 #ifde‡
YY_USER_INIT


4925 
	gYY_USER_INIT
;

4928 i‡–! (
	gyy_°¨t
) )

4929 (
	gyy_°¨t
) = 1;

4931 i‡–! 
	gyyö
 )

4932 
	gyyö
 = 
°dö
;

4934 i‡–! 
	gyyout
 )

4935 
	gyyout
 = 
°dout
;

4937 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

4938 
yyísuª_buf„r_°ack
 ();

4939 
	gYY_CURRENT_BUFFER_LVALUE
 =

4940 
yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

4943 
yy_lﬂd_buf„r_°©e
( );

4948 
	gyy_˝
 = (
yy_c_buf_p
);

4951 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

4956 
	gyy_bp
 = 
yy_˝
;

4958 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

4959 
	gyy_m©ch
:

4962 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

4963 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

4965 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

4966 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

4968  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

4970 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

4971 i‡–
	gyy_cuºít_°©e
 >= 1153 )

4972 
yy_c
 = 
yy_mëa
[() yy_c];

4974 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

4975 ++
	gyy_˝
;

4977  
	gyy_cuºít_°©e
 != 1152 );

4978 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

4979 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

4981 
	gyy_föd_a˘i⁄
:

4982 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

4984 
	gYY_DO_BEFORE_ACTION
;

4986 
	gdo_a˘i⁄
:

4988  
yy_a˘
 )

4992 *
yy_˝
 = (
yy_hﬁd_ch¨
);

4993 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

4994 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

4995 
	gyy_föd_a˘i⁄
;

4999 
YY_RULE_SETUP


5001 { 
S
;}

5002 
YY_BREAK


5005 
YY_RULE_SETUP


5007 { 
S
;}

5008 
YY_BREAK


5010 
YY_RULE_SETUP


5012 { 
CDO
;}

5013 
YY_BREAK


5015 
YY_RULE_SETUP


5017 { 
CDC
;}

5018 
YY_BREAK


5020 
YY_RULE_SETUP


5022 { 
INCLUDES
;}

5023 
YY_BREAK


5025 
YY_RULE_SETUP


5027 { 
DASHMATCH
;}

5028 
YY_BREAK


5031 
YY_RULE_SETUP


5033 { 
LBRACE
;}

5034 
YY_BREAK


5037 
YY_RULE_SETUP


5039 { 
PLUS
;}

5040 
YY_BREAK


5043 
YY_RULE_SETUP


5045 { 
GREATER
;}

5046 
YY_BREAK


5049 
YY_RULE_SETUP


5051 { 
COMMA
;}

5052 
YY_BREAK


5055 
YY_RULE_SETUP


5057 { 
STRING
;}

5058 
YY_BREAK


5061 
YY_RULE_SETUP


5063 { 
INVALID
; }

5064 
YY_BREAK


5067 
YY_RULE_SETUP


5069 { 
IDENT
;}

5070 
YY_BREAK


5073 
YY_RULE_SETUP


5075 { 
HASH
;}

5076 
YY_BREAK


5078 
YY_RULE_SETUP


5080 { 
IMPORT_SYM
;}

5081 
YY_BREAK


5083 
YY_RULE_SETUP


5085 { 
PAGE_SYM
;}

5086 
YY_BREAK


5088 
YY_RULE_SETUP


5090 { 
MEDIA_SYM
;}

5091 
YY_BREAK


5093 
YY_RULE_SETUP


5095 { 
CHARSET_SYM
;}

5096 
YY_BREAK


5099 
YY_RULE_SETUP


5101 { 
IMPORTANT_SYM
;}

5102 
YY_BREAK


5105 
YY_RULE_SETUP


5107 { 
EMS
;}

5108 
YY_BREAK


5111 
YY_RULE_SETUP


5113 { 
EXS
;}

5114 
YY_BREAK


5117 
YY_RULE_SETUP


5119 { 
LENGTH
;}

5120 
YY_BREAK


5123 
YY_RULE_SETUP


5125 { 
LENGTH
;}

5126 
YY_BREAK


5129 
YY_RULE_SETUP


5131 { 
LENGTH
;}

5132 
YY_BREAK


5135 
YY_RULE_SETUP


5137 { 
LENGTH
;}

5138 
YY_BREAK


5141 
YY_RULE_SETUP


5143 { 
LENGTH
;}

5144 
YY_BREAK


5147 
YY_RULE_SETUP


5149 { 
LENGTH
;}

5150 
YY_BREAK


5153 
YY_RULE_SETUP


5155 { 
ANGLE
;}

5156 
YY_BREAK


5159 
YY_RULE_SETUP


5161 { 
ANGLE
;}

5162 
YY_BREAK


5165 
YY_RULE_SETUP


5167 { 
ANGLE
;}

5168 
YY_BREAK


5171 
YY_RULE_SETUP


5173 { 
TIME
;}

5174 
YY_BREAK


5177 
YY_RULE_SETUP


5179 { 
TIME
;}

5180 
YY_BREAK


5183 
YY_RULE_SETUP


5185 { 
FREQ
;}

5186 
YY_BREAK


5189 
YY_RULE_SETUP


5191 { 
FREQ
;}

5192 
YY_BREAK


5195 
YY_RULE_SETUP


5197 { 
DIMENSION
;}

5198 
YY_BREAK


5200 
YY_RULE_SETUP


5202 { 
PERCENTAGE
;}

5203 
YY_BREAK


5205 
YY_RULE_SETUP


5207 { 
NUMBER
;}

5208 
YY_BREAK


5211 
YY_RULE_SETUP


5213 { 
URI
;}

5214 
YY_BREAK


5217 
YY_RULE_SETUP


5219 { 
URI
;}

5220 
YY_BREAK


5223 
YY_RULE_SETUP


5225 { 
FUNCTION
;}

5226 
YY_BREAK


5228 
YY_RULE_SETUP


5230 { *
yyãxt
;}

5231 
YY_BREAK


5233 
YY_RULE_SETUP


5235 
ECHO
;

5236 
	gYY_BREAK


5238 
YY_STATE_EOF
(
INITIAL
):

5239 
yyãrmö©e
();

5241 
	gYY_END_OF_BUFFER
:

5244 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

5247 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

5248 
YY_RESTORE_YY_MORE_OFFSET


5250 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

5261 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

5262 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

5263 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

5273 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

5275 
yy_°©e_ty≥
 
yy_√xt_°©e
;

5277 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

5279 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5290 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

5292 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5294 i‡–
	gyy_√xt_°©e
 )

5297 
	gyy_˝
 = ++(
yy_c_buf_p
);

5298 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

5299 
	gyy_m©ch
;

5304 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

5305 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

5306 
	gyy_föd_a˘i⁄
;

5310  
yy_gë_√xt_buf„r
( ) )

5312 
	gEOB_ACT_END_OF_FILE
:

5314 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

5316 i‡–
yywøp
( ) )

5327 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5329 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

5330 
	gdo_a˘i⁄
;

5335 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

5336 
	gYY_NEW_FILE
;

5341 
	gEOB_ACT_CONTINUE_SCAN
:

5342 (
yy_c_buf_p
) =

5343 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

5345 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5347 
	gyy_˝
 = (
yy_c_buf_p
);

5348 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5349 
	gyy_m©ch
;

5351 
	gEOB_ACT_LAST_MATCH
:

5352 (
yy_c_buf_p
) =

5353 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

5355 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5357 
	gyy_˝
 = (
yy_c_buf_p
);

5358 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5359 
	gyy_föd_a˘i⁄
;

5365 
YY_FATAL_ERROR
(

5378 
	$yy_gë_√xt_buf„r
 ()

5380 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

5381 *
sour˚
 = (
yyãxt_±r
);

5382 
numbî_to_move
, 
i
;

5383 
ªt_vÆ
;

5385 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

5386 
	`YY_FATAL_ERROR
(

5389 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

5391 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

5396  
EOB_ACT_END_OF_FILE
;

5404  
EOB_ACT_LAST_MATCH
;

5411 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

5413  
i
 = 0; i < 
numbî_to_move
; ++i )

5414 *(
de°
++Ë*(
sour˚
++);

5416 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

5420 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

5424 
num_to_ªad
 =

5425 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

5427  
num_to_ªad
 <= 0 )

5431 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

5433 
yy_c_buf_p_off£t
 =

5434 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

5436 i‡–
b
->
yy_is_our_buf„r
 )

5438 
√w_size
 = 
b
->
yy_buf_size
 * 2;

5440 i‡–
√w_size
 <= 0 )

5441 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

5443 
b
->
yy_buf_size
 *= 2;

5445 
b
->
yy_ch_buf
 = (*)

5447 
	`yyªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

5451 
b
->
yy_ch_buf
 = 0;

5453 i‡–! 
b
->
yy_ch_buf
 )

5454 
	`YY_FATAL_ERROR
(

5457 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

5459 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

5460 
numbî_to_move
 - 1;

5464 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

5465 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

5468 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

5469 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

5471 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5474 i‡–(
yy_n_ch¨s
) == 0 )

5476 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

5478 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

5479 
	`yyª°¨t
(
yyö
 );

5484 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

5485 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

5486 
YY_BUFFER_EOF_PENDING
;

5491 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

5493 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

5495 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

5496 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

5497 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

5498 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

5501 (
yy_n_ch¨s
Ë+
numbî_to_move
;

5502 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

5503 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

5505 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

5507  
ªt_vÆ
;

5508 
	}
}

5512 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

5514 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

5515 *
yy_˝
;

5517 
yy_cuºít_°©e
 = (
yy_°¨t
);

5519  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

5521 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

5522 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

5524 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

5525 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

5527  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

5529 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

5530 i‡–
yy_cuºít_°©e
 >= 1153 )

5531 
yy_c
 = 
yy_mëa
[() yy_c];

5533 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

5536  
yy_cuºít_°©e
;

5537 
	}
}

5544 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

5546 
yy_is_jam
;

5547 *
yy_˝
 = (
yy_c_buf_p
);

5549 
YY_CHAR
 
yy_c
 = 1;

5550 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

5552 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

5553 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

5555  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

5557 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

5558 i‡–
yy_cuºít_°©e
 >= 1153 )

5559 
yy_c
 = 
yy_mëa
[() yy_c];

5561 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

5562 
yy_is_jam
 = (
yy_cuºít_°©e
 == 1152);

5564  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

5565 
	}
}

5567 #i‚de‡
YY_NO_INPUT


5568 #ifde‡
__˝lu•lus


5569 
	$yyöput
 ()

5571 
	$öput
 ()

5575 
c
;

5577 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5579 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

5585 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

5587 *(
yy_c_buf_p
) = '\0';

5591 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

5592 ++(
yy_c_buf_p
);

5594  
	`yy_gë_√xt_buf„r
( ) )

5596 
EOB_ACT_LAST_MATCH
:

5608 
	`yyª°¨t
(
yyö
 );

5612 
EOB_ACT_END_OF_FILE
:

5614 i‡–
	`yywøp
( ) )

5615  
EOF
;

5617 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

5618 
YY_NEW_FILE
;

5619 #ifde‡
__˝lu•lus


5620  
	`yyöput
();

5622  
	`öput
();

5626 
EOB_ACT_CONTINUE_SCAN
:

5627 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

5633 
c
 = *(*Ë(
yy_c_buf_p
);

5634 *(
yy_c_buf_p
) = '\0';

5635 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

5637  
c
;

5638 
	}
}

5646 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

5649 i‡–! 
YY_CURRENT_BUFFER
 ){

5650 
	`yyísuª_buf„r_°ack
 ();

5651 
YY_CURRENT_BUFFER_LVALUE
 =

5652 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

5655 
	`yy_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

5656 
	`yy_lﬂd_buf„r_°©e
( );

5657 
	}
}

5663 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

5671 
	`yyísuª_buf„r_°ack
 ();

5672 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

5675 i‡–
YY_CURRENT_BUFFER
 )

5678 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5679 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

5680 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5683 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

5684 
	`yy_lﬂd_buf„r_°©e
( );

5691 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5692 
	}
}

5694 
	$yy_lﬂd_buf„r_°©e
 ()

5696 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

5697 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

5698 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

5699 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

5700 
	}
}

5708 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

5710 
YY_BUFFER_STATE
 
b
;

5712 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

5713 i‡–! 
b
 )

5714 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

5716 
b
->
yy_buf_size
 = 
size
;

5721 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
(b->
yy_buf_size
 + 2 );

5722 i‡–! 
b
->
yy_ch_buf
 )

5723 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

5725 
b
->
yy_is_our_buf„r
 = 1;

5727 
	`yy_öô_buf„r
(
b
,
fûe
 );

5729  
b
;

5730 
	}
}

5736 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

5739 i‡–! 
b
 )

5742 i‡–
b
 =
YY_CURRENT_BUFFER
 )

5743 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

5745 i‡–
b
->
yy_is_our_buf„r
 )

5746 
	`yy‰ì
((*Ë
b
->
yy_ch_buf
 );

5748 
	`yy‰ì
((*Ë
b
 );

5749 
	}
}

5755 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

5758 
€ºno
 = 
î∫o
;

5760 
	`yy_Êush_buf„r
(
b
 );

5762 
b
->
yy_öput_fûe
 = 
fûe
;

5763 
b
->
yy_fûl_buf„r
 = 1;

5769 i‡(
b
 !
YY_CURRENT_BUFFER
){

5770 
b
->
yy_bs_löío
 = 1;

5771 
b
->
yy_bs_cﬁumn
 = 0;

5774 
b
->
yy_is_öãø˘ive
 = 0;

5776 
î∫o
 = 
€ºno
;

5777 
	}
}

5783 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

5785 i‡–! 
b
 )

5788 
b
->
yy_n_ch¨s
 = 0;

5794 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

5795 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

5797 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

5799 
b
->
yy_©_bﬁ
 = 1;

5800 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

5802 i‡–
b
 =
YY_CURRENT_BUFFER
 )

5803 
	`yy_lﬂd_buf„r_°©e
( );

5804 
	}
}

5812 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

5814 i‡(
√w_buf„r
 =
NULL
)

5817 
	`yyísuª_buf„r_°ack
();

5820 i‡–
YY_CURRENT_BUFFER
 )

5823 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5824 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

5825 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5829 i‡(
YY_CURRENT_BUFFER
)

5830 (
yy_buf„r_°ack_t›
)++;

5831 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

5834 
	`yy_lﬂd_buf„r_°©e
( );

5835 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5836 
	}
}

5842 
	$yyp›_buf„r_°©e
 ()

5844 i‡(!
YY_CURRENT_BUFFER
)

5847 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

5848 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

5849 i‡((
yy_buf„r_°ack_t›
) > 0)

5850 --(
yy_buf„r_°ack_t›
);

5852 i‡(
YY_CURRENT_BUFFER
) {

5853 
	`yy_lﬂd_buf„r_°©e
( );

5854 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5856 
	}
}

5861 
	$yyísuª_buf„r_°ack
 ()

5863 
num_to_Æloc
;

5865 i‡(!(
yy_buf„r_°ack
)) {

5871 
num_to_Æloc
 = 1;

5872 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


5873 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

5875 i‡–! (
yy_buf„r_°ack
) )

5876 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

5878 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

5880 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

5881 (
yy_buf„r_°ack_t›
) = 0;

5885 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

5888 
grow_size
 = 8 ;

5890 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

5891 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


5892 ((
yy_buf„r_°ack
),

5893 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

5895 i‡–! (
yy_buf„r_°ack
) )

5896 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

5899 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

5900 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

5902 
	}
}

5910 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

5912 
YY_BUFFER_STATE
 
b
;

5914 i‡–
size
 < 2 ||

5915 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

5916 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

5920 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

5921 i‡–! 
b
 )

5922 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

5924 
b
->
yy_buf_size
 = 
size
 - 2;

5925 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

5926 
b
->
yy_is_our_buf„r
 = 0;

5927 
b
->
yy_öput_fûe
 = 0;

5928 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

5929 
b
->
yy_is_öãø˘ive
 = 0;

5930 
b
->
yy_©_bﬁ
 = 1;

5931 
b
->
yy_fûl_buf„r
 = 0;

5932 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

5934 
	`yy_swôch_to_buf„r
(
b
 );

5936  
b
;

5937 
	}
}

5947 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

5950  
	`yy_sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

5951 
	}
}

5960 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

5962 
YY_BUFFER_STATE
 
b
;

5963 *
buf
;

5964 
yy_size_t
 
n
;

5965 
i
;

5968 
n
 = 
_yybyãs_Àn
 + 2;

5969 
buf
 = (*Ë
	`yyÆloc
(
n
 );

5970 i‡–! 
buf
 )

5971 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

5973  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

5974 
buf
[
i
] = 
yybyãs
[i];

5976 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

5978 
b
 = 
	`yy_sˇn_buf„r
(
buf
,
n
 );

5979 i‡–! 
b
 )

5980 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

5985 
b
->
yy_is_our_buf„r
 = 1;

5987  
b
;

5988 
	}
}

5990 #i‚de‡
YY_EXIT_FAILURE


5991 
	#YY_EXIT_FAILURE
 2

	)

5994 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

5996 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

5997 
	`exô
–
YY_EXIT_FAILURE
 );

5998 
	}
}

6002 #unde‡
yyÀss


6003 
	#yyÀss
(
n
) \

6007 
yyÀss_ma¸o_¨g
 = (
n
); \

6008 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

6009 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

6010 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

6011 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

6012 *(
yy_c_buf_p
) = '\0'; \

6013 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

6015  0 )

	)

6022 
	$yygë_löío
 ()

6025  
yylöío
;

6026 
	}
}

6031 
FILE
 *
	$yygë_ö
 ()

6033  
yyö
;

6034 
	}
}

6039 
FILE
 *
	$yygë_out
 ()

6041  
yyout
;

6042 
	}
}

6047 
	$yygë_Àng
 ()

6049  
yyÀng
;

6050 
	}
}

6056 *
	$yygë_ãxt
 ()

6058  
yyãxt
;

6059 
	}
}

6065 
	$yy£t_löío
 (
löe_numbî
 )

6068 
yylöío
 = 
löe_numbî
;

6069 
	}
}

6077 
	$yy£t_ö
 (
FILE
 * 
ö_°r
 )

6079 
yyö
 = 
ö_°r
 ;

6080 
	}
}

6082 
	$yy£t_out
 (
FILE
 * 
out_°r
 )

6084 
yyout
 = 
out_°r
 ;

6085 
	}
}

6087 
	$yygë_debug
 ()

6089  
yy_Êex_debug
;

6090 
	}
}

6092 
	$yy£t_debug
 (
bdebug
 )

6094 
yy_Êex_debug
 = 
bdebug
 ;

6095 
	}
}

6097 
	$yy_öô_globÆs
 ()

6103 (
yy_buf„r_°ack
) = 0;

6104 (
yy_buf„r_°ack_t›
) = 0;

6105 (
yy_buf„r_°ack_max
) = 0;

6106 (
yy_c_buf_p
) = (*) 0;

6107 (
yy_öô
) = 0;

6108 (
yy_°¨t
) = 0;

6111 #ifde‡
YY_STDINIT


6112 
yyö
 = 
°dö
;

6113 
yyout
 = 
°dout
;

6115 
yyö
 = (
FILE
 *) 0;

6116 
yyout
 = (
FILE
 *) 0;

6123 
	}
}

6126 
	$yyÀx_de°roy
 ()

6130 
YY_CURRENT_BUFFER
){

6131 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

6132 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

6133 
	`yyp›_buf„r_°©e
();

6137 
	`yy‰ì
((
yy_buf„r_°ack
) );

6138 (
yy_buf„r_°ack
Ë
NULL
;

6142 
	`yy_öô_globÆs
( );

6145 
	}
}

6151 #i‚de‡
yyãxt_±r


6152 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

6154 
i
;

6155  
i
 = 0; i < 
n
; ++i )

6156 
s1
[
i
] = 
s2
[i];

6157 
	}
}

6160 #ifde‡
YY_NEED_STRLEN


6161 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

6163 
n
;

6164  
n
 = 0; 
s
[n]; ++n )

6167  
n
;

6168 
	}
}

6171 *
	$yyÆloc
 (
yy_size_t
 
size
 )

6173  (*Ë
	`mÆloc
–
size
 );

6174 
	}
}

6176 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

6185  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

6186 
	}
}

6188 
	$yy‰ì
 (* 
±r
 )

6190 
	`‰ì
–(*Ë
±r
 );

6191 
	}
}

6193 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@src/css.l

1 %
›ti⁄
 -
ö£nsôive


2 %
›ti⁄
 
noyywøp


3 %
›ti⁄
 
√vî
-
öãø˘ive


4 %
›ti⁄
 
nou≈ut


37 
	#YY_NO_INPUT


	)

39 
	~"css-tokís.h
"

43 
h
 [0-9a-
f
]

44 
n⁄ascii
 [\200-\377]

45 
unicode
 \\{
h
}{1,6}(\
r
\
n
|[ \
t
\r\n\
f
])?

46 
esˇ≥
 {
unicode
}|\\[^\
r
\
n
\
f0
-9a-
f
]

47 
nm°¨t
 [
_a
-
z
]|{
n⁄ascii
}|{
esˇ≥
}

48 
nmch¨
 [
_a
-
z0
-9-]|{
n⁄ascii
}|{
esˇ≥
}

49 
°rög1
 \"([^\n\r\f\\"]|\\{
∆
}|{
esˇ≥
})*\"

50 
°rög2
 \'([^\n\r\f\\']|\\{
∆
}|{
esˇ≥
})*\'

51 
övÆid1
 \"([^\n\r\f\\"]|\\{
∆
}|{
esˇ≥
})*

52 
övÆid2
 \'([^\n\r\f\\']|\\{
∆
}|{
esˇ≥
})*

54 
commít
 \/\*[^*]*\*+([^

88 "<!--" { 
CDO
;}

89 "-->" { 
CDC
;}

90 "~=" { 
INCLUDES
;}

91 "|=" { 
DASHMATCH
;}

93 {
w
}"{" { 
LBRACE
;}

94 {
w
}"+" { 
PLUS
;}

95 {
w
}">" { 
GREATER
;}

96 {
w
}"," { 
COMMA
;}

98 {
°rög
} { 
STRING
;}

99 {
övÆid
} { 
INVALID
; }

101 {
idít
} { 
IDENT
;}

103 "#"{
«me
} { 
HASH
;}

105 "@imp‹t" { 
IMPORT_SYM
;}

106 "@∑ge" { 
PAGE_SYM
;}

107 "@medü" { 
MEDIA_SYM
;}

108 "@ch¨£à" { 
CHARSET_SYM
;}

110 "!"{
w
}"imp‹è¡" { 
IMPORTANT_SYM
;}

112 {
num
}{
E
}{
M
} { 
EMS
;}

113 {
num
}{
E
}{
X
} { 
EXS
;}

114 {
num
}{
P
}{
X
} { 
LENGTH
;}

115 {
num
}{
C
}{
M
} { 
LENGTH
;}

116 {
num
}{
M
}{M} { 
LENGTH
;}

117 {
num
}{
I
}{
N
} { 
LENGTH
;}

118 {
num
}{
P
}{
T
} { 
LENGTH
;}

119 {
num
}{
P
}{
C
} { 
LENGTH
;}

120 {
num
}{
D
}{
E
}{
G
} { 
ANGLE
;}

121 {
num
}{
R
}{
A
}{
D
} { 
ANGLE
;}

122 {
num
}{
G
}{
R
}{
A
}{
D
} { 
ANGLE
;}

123 {
num
}{
M
}{
S
} { 
TIME
;}

124 {
num
}{
S
} { 
TIME
;}

125 {
num
}{
H
}{
Z
} { 
FREQ
;}

126 {
num
}{
K
}{
H
}{
Z
} { 
FREQ
;}

127 {
num
}{
idít
} { 
DIMENSION
;}

129 {
num
}% { 
PERCENTAGE
;}

130 {
num
} { 
NUMBER
;}

132 "uæ("{
w
}{
°rög
}{w}")" { 
URI
;}

133 "uæ("{
w
}{
uæ
}{w}")" { 
URI
;}

134 {
idít
}"(" { 
FUNCTION
;}

136 . { *
yyãxt
;}

138 %% /* 
	$yyÀx
 */

	@src/css_.c

1 
	~"wgë.h
"

6 
	#YY_INT_ALIGNED
 

	)

10 
	#FLEX_SCANNER


	)

11 
	#YY_FLEX_MAJOR_VERSION
 2

	)

12 
	#YY_FLEX_MINOR_VERSION
 5

	)

13 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

14 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

15 
	#FLEX_BETA


	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

24 
	~<°dlib.h
>

30 #i‚de‡
FLEXINT_H


31 
	#FLEXINT_H


	)

35 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

40 #i‚de‡
__STDC_LIMIT_MACROS


41 
	#__STDC_LIMIT_MACROS
 1

	)

44 
	~<öây≥s.h
>

45 
öt8_t
 
	tÊex_öt8_t
;

46 
uöt8_t
 
	tÊex_uöt8_t
;

47 
öt16_t
 
	tÊex_öt16_t
;

48 
uöt16_t
 
	tÊex_uöt16_t
;

49 
öt32_t
 
	tÊex_öt32_t
;

50 
uöt32_t
 
	tÊex_uöt32_t
;

52 sig√d 
	tÊex_öt8_t
;

53 
	tÊex_öt16_t
;

54 
	tÊex_öt32_t
;

55 
	tÊex_uöt8_t
;

56 
	tÊex_uöt16_t
;

57 
	tÊex_uöt32_t
;

60 #i‚de‡
INT8_MIN


61 
	#INT8_MIN
 (-128)

	)

63 #i‚de‡
INT16_MIN


64 
	#INT16_MIN
 (-32767-1)

	)

66 #i‚de‡
INT32_MIN


67 
	#INT32_MIN
 (-2147483647-1)

	)

69 #i‚de‡
INT8_MAX


70 
	#INT8_MAX
 (127)

	)

72 #i‚de‡
INT16_MAX


73 
	#INT16_MAX
 (32767)

	)

75 #i‚de‡
INT32_MAX


76 
	#INT32_MAX
 (2147483647)

	)

78 #i‚de‡
UINT8_MAX


79 
	#UINT8_MAX
 (255U)

	)

81 #i‚de‡
UINT16_MAX


82 
	#UINT16_MAX
 (65535U)

	)

84 #i‚de‡
UINT32_MAX


85 
	#UINT32_MAX
 (4294967295U)

	)

92 #ifde‡
__˝lu•lus


95 
	#YY_USE_CONST


	)

100 #i‡
deföed
 (
__STDC__
)

102 
	#YY_USE_CONST


	)

107 #ifde‡
YY_USE_CONST


108 
	#yyc⁄°
 c⁄°

	)

110 
	#yyc⁄°


	)

114 
	#YY_NULL
 0

	)

121 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

127 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

133 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

134 
	#YYSTATE
 
YY_START


	)

137 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

140 
	#YY_NEW_FILE
 
	`yyª°¨t
(
yyö
 )

	)

142 
	#YY_END_OF_BUFFER_CHAR
 0

	)

145 #i‚de‡
YY_BUF_SIZE


146 #ifde‡
__ü64__


151 
	#YY_BUF_SIZE
 32768

	)

153 
	#YY_BUF_SIZE
 16384

	)

159 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

161 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


162 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

163 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

166 
yyÀng
;

168 
FILE
 *
yyö
, *
yyout
;

170 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

171 
	#EOB_ACT_END_OF_FILE
 1

	)

172 
	#EOB_ACT_LAST_MATCH
 2

	)

174 
	#YY_LESS_LINENO
(
n
)

	)

177 
	#yyÀss
(
n
) \

181 
yyÀss_ma¸o_¨g
 = (
n
); \

182 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

183 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

184 
YY_RESTORE_YY_MORE_OFFSET
 \

185 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

186 
YY_DO_BEFORE_ACTION
; \

188  0 )

	)

190 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

192 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


193 
	#YY_TYPEDEF_YY_SIZE_T


	)

194 
size_t
 
	tyy_size_t
;

197 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


198 
	#YY_STRUCT_YY_BUFFER_STATE


	)

199 
	syy_buf„r_°©e


201 
FILE
 *
	myy_öput_fûe
;

203 *
	myy_ch_buf
;

204 *
	myy_buf_pos
;

209 
yy_size_t
 
	myy_buf_size
;

214 
	myy_n_ch¨s
;

220 
	myy_is_our_buf„r
;

227 
	myy_is_öãø˘ive
;

233 
	myy_©_bﬁ
;

235 
	myy_bs_löío
;

236 
	myy_bs_cﬁumn
;

241 
	myy_fûl_buf„r
;

243 
	myy_buf„r_°©us
;

245 
	#YY_BUFFER_NEW
 0

	)

246 
	#YY_BUFFER_NORMAL
 1

	)

257 
	#YY_BUFFER_EOF_PENDING
 2

	)

263 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

264 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

265 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

273 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

274 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

275 : 
NULL
)

	)

280 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

283 
	gyy_hﬁd_ch¨
;

284 
	gyy_n_ch¨s
;

285 
	gyyÀng
;

288 *
	gyy_c_buf_p
 = (*) 0;

289 
	gyy_öô
 = 0;

290 
	gyy_°¨t
 = 0;

295 
	gyy_did_buf„r_swôch_⁄_eof
;

297 
yyª°¨t
 (
FILE
 *
öput_fûe
 );

298 
yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

299 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

300 
yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

301 
yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

302 
yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

303 
yyp›_buf„r_°©e
 ();

305 
yyísuª_buf„r_°ack
 ();

306 
yy_lﬂd_buf„r_°©e
 ();

307 
yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

309 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

311 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

312 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

313 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

315 *
yyÆloc
 (
yy_size_t
 );

316 *
yyªÆloc
 (*,
yy_size_t
 );

317 
yy‰ì
 (* );

319 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

321 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

323 i‡–! 
YY_CURRENT_BUFFER
 ){ \

324 
	`yyísuª_buf„r_°ack
 (); \

325 
YY_CURRENT_BUFFER_LVALUE
 = \

326 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

328 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

329 }

	)

331 
	#yy_£t_bﬁ
(
©_bﬁ
) \

333 i‡–! 
YY_CURRENT_BUFFER
 ){\

334 
	`yyísuª_buf„r_°ack
 (); \

335 
YY_CURRENT_BUFFER_LVALUE
 = \

336 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

338 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

339 }

	)

341 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

345 
	#yywøp
(
n
Ë1

	)

346 
	#YY_SKIP_YYWRAP


	)

348 
	tYY_CHAR
;

350 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

352 
	tyy_°©e_ty≥
;

354 
yylöío
;

356 
	gyylöío
 = 1;

358 *
yyãxt
;

359 
	#yyãxt_±r
 
yyãxt


	)

361 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

362 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

363 
yy_gë_√xt_buf„r
 ();

364 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

369 
	#YY_DO_BEFORE_ACTION
 \

370 (
yyãxt_±r
Ë
yy_bp
; \

371 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

372 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

373 *
yy_˝
 = '\0'; \

374 (
yy_c_buf_p
Ë
yy_˝
;

	)

376 
	#YY_NUM_RULES
 42

	)

377 
	#YY_END_OF_BUFFER
 43

	)

380 
	syy_å™s_öfo


382 
Êex_öt32_t
 
	myy_vîify
;

383 
Êex_öt32_t
 
	myy_nxt
;

385 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[1153] =

516 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

548 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[82] =

561 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[1307] =

709 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[1307] =

857 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[17346] =

2769 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[17346] =

4681 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

4682 *
	gyy_œ°_ac˚±ög_˝os
;

4684 
yy_Êex_debug
;

4685 
	gyy_Êex_debug
 = 0;

4690 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

4691 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

4692 
	#YY_MORE_ADJ
 0

	)

4693 
	#YY_RESTORE_YY_MORE_OFFSET


	)

4694 *
	gyyãxt
;

4727 
	#YY_NO_INPUT


	)

4729 
	~"css-tokís.h
"

4733 
	#INITIAL
 0

	)

4735 #i‚de‡
YY_NO_UNISTD_H


4740 
	~<uni°d.h
>

4743 #i‚de‡
YY_EXTRA_TYPE


4744 
	#YY_EXTRA_TYPE
 *

	)

4747 
yy_öô_globÆs
 ();

4752 
yyÀx_de°roy
 ();

4754 
yygë_debug
 ();

4756 
yy£t_debug
 (
debug_Êag
 );

4758 
YY_EXTRA_TYPE
 
yygë_exåa
 ();

4760 
yy£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

4762 
FILE
 *
yygë_ö
 ();

4764 
yy£t_ö
 (
FILE
 * 
ö_°r
 );

4766 
FILE
 *
yygë_out
 ();

4768 
yy£t_out
 (
FILE
 * 
out_°r
 );

4770 
yygë_Àng
 ();

4772 *
yygë_ãxt
 ();

4774 
yygë_löío
 ();

4776 
yy£t_löío
 (
löe_numbî
 );

4782 #i‚de‡
YY_SKIP_YYWRAP


4783 #ifde‡
__˝lu•lus


4784 "C" 
yywøp
 ();

4786 
yywøp
 ();

4790 #i‚de‡
yyãxt_±r


4791 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

4794 #ifde‡
YY_NEED_STRLEN


4795 
yy_Êex_°æí
 (
yyc⁄°
 * );

4798 #i‚de‡
YY_NO_INPUT


4800 #ifde‡
__˝lu•lus


4801 
yyöput
 ();

4803 
öput
 ();

4809 #i‚de‡
YY_READ_BUF_SIZE


4810 #ifde‡
__ü64__


4812 
	#YY_READ_BUF_SIZE
 16384

	)

4814 
	#YY_READ_BUF_SIZE
 8192

	)

4819 #i‚de‡
ECHO


4823 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

4829 #i‚de‡
YY_INPUT


4830 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

4831 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

4833 
c
 = '*'; \

4834 
size_t
 
n
; \

4835  
n
 = 0;Ç < 
max_size
 && \

4836 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

4837 
buf
[
n
] = (Ë
c
; \

4838 i‡–
c
 == '\n' ) \

4839 
buf
[
n
++] = (Ë
c
; \

4840 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

4841 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

4842 
ªsu…
 = 
n
; \

4846 
î∫o
=0; \

4847  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

4849 if–
î∫o
 !
EINTR
) \

4851 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

4854 
î∫o
=0; \

4855 
	`˛óªº
(
yyö
); \

4859 

	)

4866 #i‚de‡
yyãrmö©e


4867 
	#yyãrmö©e
(Ë 
YY_NULL


	)

4871 #i‚de‡
YY_START_STACK_INCR


4872 
	#YY_START_STACK_INCR
 25

	)

4876 #i‚de‡
YY_FATAL_ERROR


4877 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

4885 #i‚de‡
YY_DECL


4886 
	#YY_DECL_IS_OURS
 1

	)

4888 
yyÀx
 ();

4890 
	#YY_DECL
 
	`yyÀx
 ()

	)

4896 #i‚de‡
YY_USER_ACTION


4897 
	#YY_USER_ACTION


	)

4901 #i‚de‡
YY_BREAK


4902 
	#YY_BREAK
 ;

	)

4905 
	#YY_RULE_SETUP
 \

4906 
YY_USER_ACTION


	)

4910 
	gYY_DECL


4912 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

4913 *
	gyy_˝
, *
	gyy_bp
;

4914 
	gyy_a˘
;

4921 i‡–!(
	gyy_öô
) )

4923 (
	gyy_öô
) = 1;

4925 #ifde‡
YY_USER_INIT


4926 
	gYY_USER_INIT
;

4929 i‡–! (
	gyy_°¨t
) )

4930 (
	gyy_°¨t
) = 1;

4932 i‡–! 
	gyyö
 )

4933 
	gyyö
 = 
°dö
;

4935 i‡–! 
	gyyout
 )

4936 
	gyyout
 = 
°dout
;

4938 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

4939 
yyísuª_buf„r_°ack
 ();

4940 
	gYY_CURRENT_BUFFER_LVALUE
 =

4941 
yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

4944 
yy_lﬂd_buf„r_°©e
( );

4949 
	gyy_˝
 = (
yy_c_buf_p
);

4952 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

4957 
	gyy_bp
 = 
yy_˝
;

4959 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

4960 
	gyy_m©ch
:

4963 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

4964 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

4966 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

4967 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

4969  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

4971 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

4972 i‡–
	gyy_cuºít_°©e
 >= 1153 )

4973 
yy_c
 = 
yy_mëa
[() yy_c];

4975 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

4976 ++
	gyy_˝
;

4978  
	gyy_cuºít_°©e
 != 1152 );

4979 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

4980 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

4982 
	gyy_föd_a˘i⁄
:

4983 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

4985 
	gYY_DO_BEFORE_ACTION
;

4987 
	gdo_a˘i⁄
:

4989  
yy_a˘
 )

4993 *
yy_˝
 = (
yy_hﬁd_ch¨
);

4994 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

4995 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

4996 
	gyy_föd_a˘i⁄
;

5000 
YY_RULE_SETUP


5002 { 
S
;}

5003 
YY_BREAK


5006 
YY_RULE_SETUP


5008 { 
S
;}

5009 
YY_BREAK


5011 
YY_RULE_SETUP


5013 { 
CDO
;}

5014 
YY_BREAK


5016 
YY_RULE_SETUP


5018 { 
CDC
;}

5019 
YY_BREAK


5021 
YY_RULE_SETUP


5023 { 
INCLUDES
;}

5024 
YY_BREAK


5026 
YY_RULE_SETUP


5028 { 
DASHMATCH
;}

5029 
YY_BREAK


5032 
YY_RULE_SETUP


5034 { 
LBRACE
;}

5035 
YY_BREAK


5038 
YY_RULE_SETUP


5040 { 
PLUS
;}

5041 
YY_BREAK


5044 
YY_RULE_SETUP


5046 { 
GREATER
;}

5047 
YY_BREAK


5050 
YY_RULE_SETUP


5052 { 
COMMA
;}

5053 
YY_BREAK


5056 
YY_RULE_SETUP


5058 { 
STRING
;}

5059 
YY_BREAK


5062 
YY_RULE_SETUP


5064 { 
INVALID
; }

5065 
YY_BREAK


5068 
YY_RULE_SETUP


5070 { 
IDENT
;}

5071 
YY_BREAK


5074 
YY_RULE_SETUP


5076 { 
HASH
;}

5077 
YY_BREAK


5079 
YY_RULE_SETUP


5081 { 
IMPORT_SYM
;}

5082 
YY_BREAK


5084 
YY_RULE_SETUP


5086 { 
PAGE_SYM
;}

5087 
YY_BREAK


5089 
YY_RULE_SETUP


5091 { 
MEDIA_SYM
;}

5092 
YY_BREAK


5094 
YY_RULE_SETUP


5096 { 
CHARSET_SYM
;}

5097 
YY_BREAK


5100 
YY_RULE_SETUP


5102 { 
IMPORTANT_SYM
;}

5103 
YY_BREAK


5106 
YY_RULE_SETUP


5108 { 
EMS
;}

5109 
YY_BREAK


5112 
YY_RULE_SETUP


5114 { 
EXS
;}

5115 
YY_BREAK


5118 
YY_RULE_SETUP


5120 { 
LENGTH
;}

5121 
YY_BREAK


5124 
YY_RULE_SETUP


5126 { 
LENGTH
;}

5127 
YY_BREAK


5130 
YY_RULE_SETUP


5132 { 
LENGTH
;}

5133 
YY_BREAK


5136 
YY_RULE_SETUP


5138 { 
LENGTH
;}

5139 
YY_BREAK


5142 
YY_RULE_SETUP


5144 { 
LENGTH
;}

5145 
YY_BREAK


5148 
YY_RULE_SETUP


5150 { 
LENGTH
;}

5151 
YY_BREAK


5154 
YY_RULE_SETUP


5156 { 
ANGLE
;}

5157 
YY_BREAK


5160 
YY_RULE_SETUP


5162 { 
ANGLE
;}

5163 
YY_BREAK


5166 
YY_RULE_SETUP


5168 { 
ANGLE
;}

5169 
YY_BREAK


5172 
YY_RULE_SETUP


5174 { 
TIME
;}

5175 
YY_BREAK


5178 
YY_RULE_SETUP


5180 { 
TIME
;}

5181 
YY_BREAK


5184 
YY_RULE_SETUP


5186 { 
FREQ
;}

5187 
YY_BREAK


5190 
YY_RULE_SETUP


5192 { 
FREQ
;}

5193 
YY_BREAK


5196 
YY_RULE_SETUP


5198 { 
DIMENSION
;}

5199 
YY_BREAK


5201 
YY_RULE_SETUP


5203 { 
PERCENTAGE
;}

5204 
YY_BREAK


5206 
YY_RULE_SETUP


5208 { 
NUMBER
;}

5209 
YY_BREAK


5212 
YY_RULE_SETUP


5214 { 
URI
;}

5215 
YY_BREAK


5218 
YY_RULE_SETUP


5220 { 
URI
;}

5221 
YY_BREAK


5224 
YY_RULE_SETUP


5226 { 
FUNCTION
;}

5227 
YY_BREAK


5229 
YY_RULE_SETUP


5231 { *
yyãxt
;}

5232 
YY_BREAK


5234 
YY_RULE_SETUP


5236 
ECHO
;

5237 
	gYY_BREAK


5239 
YY_STATE_EOF
(
INITIAL
):

5240 
yyãrmö©e
();

5242 
	gYY_END_OF_BUFFER
:

5245 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

5248 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

5249 
YY_RESTORE_YY_MORE_OFFSET


5251 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

5262 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

5263 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

5264 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

5274 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

5276 
yy_°©e_ty≥
 
yy_√xt_°©e
;

5278 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

5280 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5291 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

5293 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5295 i‡–
	gyy_√xt_°©e
 )

5298 
	gyy_˝
 = ++(
yy_c_buf_p
);

5299 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

5300 
	gyy_m©ch
;

5305 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

5306 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

5307 
	gyy_föd_a˘i⁄
;

5311  
yy_gë_√xt_buf„r
( ) )

5313 
	gEOB_ACT_END_OF_FILE
:

5315 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

5317 i‡–
yywøp
( ) )

5328 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5330 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

5331 
	gdo_a˘i⁄
;

5336 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

5337 
	gYY_NEW_FILE
;

5342 
	gEOB_ACT_CONTINUE_SCAN
:

5343 (
yy_c_buf_p
) =

5344 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

5346 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5348 
	gyy_˝
 = (
yy_c_buf_p
);

5349 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5350 
	gyy_m©ch
;

5352 
	gEOB_ACT_LAST_MATCH
:

5353 (
yy_c_buf_p
) =

5354 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

5356 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

5358 
	gyy_˝
 = (
yy_c_buf_p
);

5359 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

5360 
	gyy_föd_a˘i⁄
;

5366 
YY_FATAL_ERROR
(

5379 
	$yy_gë_√xt_buf„r
 ()

5381 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

5382 *
sour˚
 = (
yyãxt_±r
);

5383 
numbî_to_move
, 
i
;

5384 
ªt_vÆ
;

5386 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

5387 
	`YY_FATAL_ERROR
(

5390 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

5392 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

5397  
EOB_ACT_END_OF_FILE
;

5405  
EOB_ACT_LAST_MATCH
;

5412 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

5414  
i
 = 0; i < 
numbî_to_move
; ++i )

5415 *(
de°
++Ë*(
sour˚
++);

5417 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

5421 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

5425 
num_to_ªad
 =

5426 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

5428  
num_to_ªad
 <= 0 )

5432 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

5434 
yy_c_buf_p_off£t
 =

5435 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

5437 i‡–
b
->
yy_is_our_buf„r
 )

5439 
√w_size
 = 
b
->
yy_buf_size
 * 2;

5441 i‡–
√w_size
 <= 0 )

5442 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

5444 
b
->
yy_buf_size
 *= 2;

5446 
b
->
yy_ch_buf
 = (*)

5448 
	`yyªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

5452 
b
->
yy_ch_buf
 = 0;

5454 i‡–! 
b
->
yy_ch_buf
 )

5455 
	`YY_FATAL_ERROR
(

5458 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

5460 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

5461 
numbî_to_move
 - 1;

5465 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

5466 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

5469 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

5470 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

5472 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5475 i‡–(
yy_n_ch¨s
) == 0 )

5477 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

5479 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

5480 
	`yyª°¨t
(
yyö
 );

5485 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

5486 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

5487 
YY_BUFFER_EOF_PENDING
;

5492 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

5494 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

5496 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

5497 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

5498 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

5499 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

5502 (
yy_n_ch¨s
Ë+
numbî_to_move
;

5503 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

5504 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

5506 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

5508  
ªt_vÆ
;

5509 
	}
}

5513 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

5515 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

5516 *
yy_˝
;

5518 
yy_cuºít_°©e
 = (
yy_°¨t
);

5520  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

5522 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

5523 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

5525 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

5526 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

5528  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

5530 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

5531 i‡–
yy_cuºít_°©e
 >= 1153 )

5532 
yy_c
 = 
yy_mëa
[() yy_c];

5534 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

5537  
yy_cuºít_°©e
;

5538 
	}
}

5545 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

5547 
yy_is_jam
;

5548 *
yy_˝
 = (
yy_c_buf_p
);

5550 
YY_CHAR
 
yy_c
 = 1;

5551 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

5553 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

5554 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

5556  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

5558 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

5559 i‡–
yy_cuºít_°©e
 >= 1153 )

5560 
yy_c
 = 
yy_mëa
[() yy_c];

5562 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

5563 
yy_is_jam
 = (
yy_cuºít_°©e
 == 1152);

5565  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

5566 
	}
}

5568 #i‚de‡
YY_NO_INPUT


5569 #ifde‡
__˝lu•lus


5570 
	$yyöput
 ()

5572 
	$öput
 ()

5576 
c
;

5578 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5580 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

5586 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

5588 *(
yy_c_buf_p
) = '\0';

5592 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

5593 ++(
yy_c_buf_p
);

5595  
	`yy_gë_√xt_buf„r
( ) )

5597 
EOB_ACT_LAST_MATCH
:

5609 
	`yyª°¨t
(
yyö
 );

5613 
EOB_ACT_END_OF_FILE
:

5615 i‡–
	`yywøp
( ) )

5616  
EOF
;

5618 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

5619 
YY_NEW_FILE
;

5620 #ifde‡
__˝lu•lus


5621  
	`yyöput
();

5623  
	`öput
();

5627 
EOB_ACT_CONTINUE_SCAN
:

5628 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

5634 
c
 = *(*Ë(
yy_c_buf_p
);

5635 *(
yy_c_buf_p
) = '\0';

5636 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

5638  
c
;

5639 
	}
}

5647 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

5650 i‡–! 
YY_CURRENT_BUFFER
 ){

5651 
	`yyísuª_buf„r_°ack
 ();

5652 
YY_CURRENT_BUFFER_LVALUE
 =

5653 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

5656 
	`yy_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

5657 
	`yy_lﬂd_buf„r_°©e
( );

5658 
	}
}

5664 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

5672 
	`yyísuª_buf„r_°ack
 ();

5673 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

5676 i‡–
YY_CURRENT_BUFFER
 )

5679 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5680 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

5681 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5684 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

5685 
	`yy_lﬂd_buf„r_°©e
( );

5692 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5693 
	}
}

5695 
	$yy_lﬂd_buf„r_°©e
 ()

5697 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

5698 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

5699 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

5700 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

5701 
	}
}

5709 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

5711 
YY_BUFFER_STATE
 
b
;

5713 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

5714 i‡–! 
b
 )

5715 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

5717 
b
->
yy_buf_size
 = 
size
;

5722 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
(b->
yy_buf_size
 + 2 );

5723 i‡–! 
b
->
yy_ch_buf
 )

5724 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

5726 
b
->
yy_is_our_buf„r
 = 1;

5728 
	`yy_öô_buf„r
(
b
,
fûe
 );

5730  
b
;

5731 
	}
}

5737 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

5740 i‡–! 
b
 )

5743 i‡–
b
 =
YY_CURRENT_BUFFER
 )

5744 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

5746 i‡–
b
->
yy_is_our_buf„r
 )

5747 
	`yy‰ì
((*Ë
b
->
yy_ch_buf
 );

5749 
	`yy‰ì
((*Ë
b
 );

5750 
	}
}

5756 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

5759 
€ºno
 = 
î∫o
;

5761 
	`yy_Êush_buf„r
(
b
 );

5763 
b
->
yy_öput_fûe
 = 
fûe
;

5764 
b
->
yy_fûl_buf„r
 = 1;

5770 i‡(
b
 !
YY_CURRENT_BUFFER
){

5771 
b
->
yy_bs_löío
 = 1;

5772 
b
->
yy_bs_cﬁumn
 = 0;

5775 
b
->
yy_is_öãø˘ive
 = 0;

5777 
î∫o
 = 
€ºno
;

5778 
	}
}

5784 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

5786 i‡–! 
b
 )

5789 
b
->
yy_n_ch¨s
 = 0;

5795 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

5796 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

5798 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

5800 
b
->
yy_©_bﬁ
 = 1;

5801 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

5803 i‡–
b
 =
YY_CURRENT_BUFFER
 )

5804 
	`yy_lﬂd_buf„r_°©e
( );

5805 
	}
}

5813 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

5815 i‡(
√w_buf„r
 =
NULL
)

5818 
	`yyísuª_buf„r_°ack
();

5821 i‡–
YY_CURRENT_BUFFER
 )

5824 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

5825 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

5826 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

5830 i‡(
YY_CURRENT_BUFFER
)

5831 (
yy_buf„r_°ack_t›
)++;

5832 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

5835 
	`yy_lﬂd_buf„r_°©e
( );

5836 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5837 
	}
}

5843 
	$yyp›_buf„r_°©e
 ()

5845 i‡(!
YY_CURRENT_BUFFER
)

5848 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

5849 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

5850 i‡((
yy_buf„r_°ack_t›
) > 0)

5851 --(
yy_buf„r_°ack_t›
);

5853 i‡(
YY_CURRENT_BUFFER
) {

5854 
	`yy_lﬂd_buf„r_°©e
( );

5855 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

5857 
	}
}

5862 
	$yyísuª_buf„r_°ack
 ()

5864 
num_to_Æloc
;

5866 i‡(!(
yy_buf„r_°ack
)) {

5872 
num_to_Æloc
 = 1;

5873 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


5874 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

5876 i‡–! (
yy_buf„r_°ack
) )

5877 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

5879 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

5881 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

5882 (
yy_buf„r_°ack_t›
) = 0;

5886 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

5889 
grow_size
 = 8 ;

5891 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

5892 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


5893 ((
yy_buf„r_°ack
),

5894 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

5896 i‡–! (
yy_buf„r_°ack
) )

5897 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

5900 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

5901 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

5903 
	}
}

5911 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

5913 
YY_BUFFER_STATE
 
b
;

5915 i‡–
size
 < 2 ||

5916 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

5917 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

5921 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

5922 i‡–! 
b
 )

5923 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

5925 
b
->
yy_buf_size
 = 
size
 - 2;

5926 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

5927 
b
->
yy_is_our_buf„r
 = 0;

5928 
b
->
yy_öput_fûe
 = 0;

5929 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

5930 
b
->
yy_is_öãø˘ive
 = 0;

5931 
b
->
yy_©_bﬁ
 = 1;

5932 
b
->
yy_fûl_buf„r
 = 0;

5933 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

5935 
	`yy_swôch_to_buf„r
(
b
 );

5937  
b
;

5938 
	}
}

5948 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

5951  
	`yy_sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

5952 
	}
}

5961 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

5963 
YY_BUFFER_STATE
 
b
;

5964 *
buf
;

5965 
yy_size_t
 
n
;

5966 
i
;

5969 
n
 = 
_yybyãs_Àn
 + 2;

5970 
buf
 = (*Ë
	`yyÆloc
(
n
 );

5971 i‡–! 
buf
 )

5972 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

5974  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

5975 
buf
[
i
] = 
yybyãs
[i];

5977 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

5979 
b
 = 
	`yy_sˇn_buf„r
(
buf
,
n
 );

5980 i‡–! 
b
 )

5981 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

5986 
b
->
yy_is_our_buf„r
 = 1;

5988  
b
;

5989 
	}
}

5991 #i‚de‡
YY_EXIT_FAILURE


5992 
	#YY_EXIT_FAILURE
 2

	)

5995 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

5997 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

5998 
	`exô
–
YY_EXIT_FAILURE
 );

5999 
	}
}

6003 #unde‡
yyÀss


6004 
	#yyÀss
(
n
) \

6008 
yyÀss_ma¸o_¨g
 = (
n
); \

6009 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

6010 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

6011 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

6012 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

6013 *(
yy_c_buf_p
) = '\0'; \

6014 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

6016  0 )

	)

6023 
	$yygë_löío
 ()

6026  
yylöío
;

6027 
	}
}

6032 
FILE
 *
	$yygë_ö
 ()

6034  
yyö
;

6035 
	}
}

6040 
FILE
 *
	$yygë_out
 ()

6042  
yyout
;

6043 
	}
}

6048 
	$yygë_Àng
 ()

6050  
yyÀng
;

6051 
	}
}

6057 *
	$yygë_ãxt
 ()

6059  
yyãxt
;

6060 
	}
}

6066 
	$yy£t_löío
 (
löe_numbî
 )

6069 
yylöío
 = 
löe_numbî
;

6070 
	}
}

6078 
	$yy£t_ö
 (
FILE
 * 
ö_°r
 )

6080 
yyö
 = 
ö_°r
 ;

6081 
	}
}

6083 
	$yy£t_out
 (
FILE
 * 
out_°r
 )

6085 
yyout
 = 
out_°r
 ;

6086 
	}
}

6088 
	$yygë_debug
 ()

6090  
yy_Êex_debug
;

6091 
	}
}

6093 
	$yy£t_debug
 (
bdebug
 )

6095 
yy_Êex_debug
 = 
bdebug
 ;

6096 
	}
}

6098 
	$yy_öô_globÆs
 ()

6104 (
yy_buf„r_°ack
) = 0;

6105 (
yy_buf„r_°ack_t›
) = 0;

6106 (
yy_buf„r_°ack_max
) = 0;

6107 (
yy_c_buf_p
) = (*) 0;

6108 (
yy_öô
) = 0;

6109 (
yy_°¨t
) = 0;

6112 #ifde‡
YY_STDINIT


6113 
yyö
 = 
°dö
;

6114 
yyout
 = 
°dout
;

6116 
yyö
 = (
FILE
 *) 0;

6117 
yyout
 = (
FILE
 *) 0;

6124 
	}
}

6127 
	$yyÀx_de°roy
 ()

6131 
YY_CURRENT_BUFFER
){

6132 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

6133 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

6134 
	`yyp›_buf„r_°©e
();

6138 
	`yy‰ì
((
yy_buf„r_°ack
) );

6139 (
yy_buf„r_°ack
Ë
NULL
;

6143 
	`yy_öô_globÆs
( );

6146 
	}
}

6152 #i‚de‡
yyãxt_±r


6153 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

6155 
i
;

6156  
i
 = 0; i < 
n
; ++i )

6157 
s1
[
i
] = 
s2
[i];

6158 
	}
}

6161 #ifde‡
YY_NEED_STRLEN


6162 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

6164 
n
;

6165  
n
 = 0; 
s
[n]; ++n )

6168  
n
;

6169 
	}
}

6172 *
	$yyÆloc
 (
yy_size_t
 
size
 )

6174  (*Ë
	`mÆloc
–
size
 );

6175 
	}
}

6177 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

6186  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

6187 
	}
}

6189 
	$yy‰ì
 (* 
±r
 )

6191 
	`‰ì
–(*Ë
±r
 );

6192 
	}
}

6194 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@src/exits.c

22 
	~"wgë.h
"

23 
	~"exôs.h
"

30 
	mWGET_EXIT_SUCCESS
 = 0,

32 
	mWGET_EXIT_MINIMUM
 = 3,

33 
	mWGET_EXIT_IO_FAIL
 = 
WGET_EXIT_MINIMUM
,

34 
	mWGET_EXIT_NETWORK_FAIL
 = 4,

35 
	mWGET_EXIT_SSL_AUTH_FAIL
 = 5,

36 
	mWGET_EXIT_SERVER_AUTH_FAIL
 = 6,

37 
	mWGET_EXIT_PROTOCOL_ERROR
 = 7,

38 
	mWGET_EXIT_SERVER_ERROR
 = 8,

40 
	mWGET_EXIT_UNKNOWN


43 
	gföÆ_exô_°©us
 = 
WGET_EXIT_SUCCESS
;

56 
	$gë_°©us_f‹_îr
 (
uîr_t
 
îr
)

58 
îr
)

60 
RETROK
:

61  
WGET_EXIT_SUCCESS
;

62 
FOPENERR
: 
FOPEN_EXCL_ERR
: 
FWRITEERR
: 
WRITEFAILED
:

63 
UNLINKERR
:

64  
WGET_EXIT_IO_FAIL
;

65 
NOCONERROR
: 
HOSTERR
: 
CONSOCKERR
: 
CONERROR
:

66 
CONSSLERR
: 
CONIMPOSSIBLE
: 
FTPRERR
: 
FTPINVPASV
:

67 
READERR
: 
TRYLIMEXC
:

68  
WGET_EXIT_NETWORK_FAIL
;

69 
VERIFCERTERR
:

70  
WGET_EXIT_SSL_AUTH_FAIL
;

71 
FTPLOGINC
: 
FTPLOGREFUSED
: 
AUTHFAILED
:

72  
WGET_EXIT_SERVER_AUTH_FAIL
;

73 
HEOF
: 
HERR
:

74  
WGET_EXIT_PROTOCOL_ERROR
;

75 
WRONGCODE
: 
FTPPORTERR
: 
FTPSYSERR
:

76 
FTPNSFOD
: 
FTPUNKNOWNTYPE
: 
FTPSRVERR
:

77 
FTPRETRINT
: 
FTPRESTFAIL
: 
FTPNOPASV
:

78 
CONTNOTSUPPORTED
: 
RANGEERR
: 
RETRBADPATTERN
:

79 
PROXERR
:

80  
WGET_EXIT_SERVER_ERROR
;

81 
URLERROR
: 
QUOTEXC
: 
SSLINITFAILED
:

83  
WGET_EXIT_UNKNOWN
;

85 
	}
}

93 
	$öf‹m_exô_°©us
 (
uîr_t
 
îr
)

95 
√w_°©us
 = 
	`gë_°©us_f‹_îr
 (
îr
);

97 i‡(
√w_°©us
 !
WGET_EXIT_SUCCESS


98 && (
föÆ_exô_°©us
 =
WGET_EXIT_SUCCESS


99 || 
√w_°©us
 < 
föÆ_exô_°©us
))

101 
föÆ_exô_°©us
 = 
√w_°©us
;

103 
	}
}

106 
	$gë_exô_°©us
 ()

109 (
föÆ_exô_°©us
 =
WGET_EXIT_UNKNOWN
)

111 : 
föÆ_exô_°©us
;

112 
	}
}

	@src/exits.h

19 #i‚de‡
WGET_EXITS_H


20 
	#WGET_EXITS_H


	)

22 
	~"wgë.h
"

25 
öf‹m_exô_°©us
 (
uîr_t
 
îr
);

27 
gë_exô_°©us
 ();

	@src/ftp-basic.c

32 
	~"wgë.h
"

34 
	~<as£π.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<î∫o.h
>

39 
	~<°rög.h
>

40 
	~<uni°d.h
>

41 
	~"utûs.h
"

42 
	~"c⁄√˘.h
"

43 
	~"ho°.h
"

44 
	~"·p.h
"

45 
	~"ªå.h
"

47 
	g·p_œ°_ª•löe
[128];

59 
uîr_t


60 
	$·p_ª•⁄£
 (
fd
, **
ªt_löe
)

64 *
p
;

65 *
löe
 = 
	`fd_ªad_löe
 (
fd
);

66 i‡(!
löe
)

67  
FTPRERR
;

71 
p
 = 
	`°rchr
 (
löe
, '\0');

72 i‡(
p
 > 
löe
 &&Ö[-1] == '\n')

73 *--
p
 = '\0';

74 i‡(
p
 > 
löe
 &&Ö[-1] == '\r')

75 *--
p
 = '\0';

77 i‡(
›t
.
£rvî_ª•⁄£
)

78 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s\n",

79 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
löe
));

81 
	`DEBUGP
 (("%s\n", 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
löe
)));

84 i‡(
	`c_isdigô
 (
löe
[0]) && c_isdigit (line[1]) && c_isdigit (line[2])

85 && 
löe
[3] == ' ')

87 
	`°∫˝y
 (
·p_œ°_ª•löe
, 
löe
,  (ftp_last_respline));

88 
·p_œ°_ª•löe
[ (ftp_last_respline) - 1] = '\0';

89 *
ªt_löe
 = 
löe
;

90  
FTPOK
;

92 
	`x‰ì
 (
löe
);

94 
	}
}

100 
	$·p_ªque°
 (c⁄° *
comm™d
, c⁄° *
vÆue
)

102 *
ªs
;

103 i‡(
vÆue
)

110 i‡(
	`°Ωbrk
 (
vÆue
, "\r\n"))

113 *
deÁnged
, *
p
;

114 
	`STRDUP_ALLOCA
 (
deÁnged
, 
vÆue
);

115 
p
 = 
deÁnged
; *p;Ö++)

116 i‡(*
p
 == '\r' || *p == '\n')

117 *
p
 = ' ';

118 
	`DEBUGP
 (("\nDetectedÇewlines in %s \"%s\"; changingÅo %s \"%s\"\n",

119 
comm™d
, 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
vÆue
),

120 
comm™d
, 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
deÁnged
)));

122 
vÆue
 = 
deÁnged
;

124 
ªs
 = 
	`c⁄ˇt_°rögs
 (
comm™d
, " ", 
vÆue
, "\r\n", (*) 0);

127 
ªs
 = 
	`c⁄ˇt_°rögs
 (
comm™d
, "\r\n", (*) 0);

128 i‡(
›t
.
£rvî_ª•⁄£
)

131 i‡(
	`°∫cmp
 (
ªs
, "PASS", 4) != 0)

132 
	`log¥ötf
 (
LOG_ALWAYS
, "--> %s\n", 
ªs
);

134 
	`logputs
 (
LOG_ALWAYS
, "--> PASS Turtle Power!\n\n");

137 
	`DEBUGP
 (("\n--> %s\n", 
ªs
));

138  
ªs
;

139 
	}
}

143 
uîr_t


144 
	$·p_logö
 (
csock
, c⁄° *
acc
, c⁄° *
∑ss
)

146 
uîr_t
 
îr
;

147 *
ªque°
, *
ª•löe
;

148 
nwrôãn
;

151 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

152 i‡(
îr
 !
FTPOK
)

153  
îr
;

154 i‡(*
ª•löe
 != '2')

156 
	`x‰ì
 (
ª•löe
);

157  
FTPSRVERR
;

159 
	`x‰ì
 (
ª•löe
);

161 
ªque°
 = 
	`·p_ªque°
 ("USER", 
acc
);

162 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

163 i‡(
nwrôãn
 < 0)

165 
	`x‰ì
 (
ªque°
);

166  
WRITEFAILED
;

168 
	`x‰ì
 (
ªque°
);

170 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

171 i‡(
îr
 !
FTPOK
)

172  
îr
;

174 i‡(*
ª•löe
 == '2')

176 
	`x‰ì
 (
ª•löe
);

177  
FTPOK
;

180 i‡(*
ª•löe
 != '3')

182 
	`x‰ì
 (
ª•löe
);

183  
FTPLOGREFUSED
;

185 #ifde‡
ENABLE_OPIE


187 c⁄° *
skey_hód
[] = {

191 
size_t
 
i
;

192 c⁄° *
£ed
 = 
NULL
;

194 
i
 = 0; i < 
	`cou¡of
 (
skey_hód
); i++)

196 
l
 = 
	`°æí
 (
skey_hód
[
i
]);

197 i‡(0 =
	`°∫ˇ£cmp
 (
skey_hód
[
i
], 
ª•löe
, 
l
))

199 
£ed
 = 
ª•löe
 + 
l
;

203 i‡(
£ed
)

205 
skey_£quí˚
 = 0;

208 ; 
	`c_isdigô
 (*
£ed
); seed++)

209 
skey_£quí˚
 = 10 * skey_£quí˚ + *
£ed
 - '0';

210 i‡(*
£ed
 == ' ')

211 ++
£ed
;

214 
	`x‰ì
 (
ª•löe
);

215  
FTPLOGREFUSED
;

219 
∑ss
 = 
	`skey_ª•⁄£
 (
skey_£quí˚
, 
£ed
,Öass);

223 
	`x‰ì
 (
ª•löe
);

225 
ªque°
 = 
	`·p_ªque°
 ("PASS", 
∑ss
);

226 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

227 i‡(
nwrôãn
 < 0)

229 
	`x‰ì
 (
ªque°
);

230  
WRITEFAILED
;

232 
	`x‰ì
 (
ªque°
);

234 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

235 i‡(
îr
 !
FTPOK
)

236  
îr
;

237 i‡(*
ª•löe
 != '2')

239 
	`x‰ì
 (
ª•löe
);

240  
FTPLOGINC
;

242 
	`x‰ì
 (
ª•löe
);

244  
FTPOK
;

245 
	}
}

248 
	$ù_addªss_to_p‹t_ª¥
 (c⁄° 
ù_addªss
 *
addr
, 
p‹t
, *
buf
,

249 
size_t
 
buÊí
)

251 *
±r
;

253 
	`as£π
 (
addr
->
Ámûy
 =
AF_INET
);

255 
	`as£π
 (
buÊí
 >= 6 * 4);

257 
±r
 = 
	`IP_INADDR_DATA
 (
addr
);

258 
	`¢¥ötf
 (
buf
, 
buÊí
, "%d,%d,%d,%d,%d,%d", 
±r
[0],Ötr[1],

259 
±r
[2],Öå[3], (
p‹t
 & 0xff00) >> 8,Öort & 0xff);

260 
buf
[
buÊí
 - 1] = '\0';

261 
	}
}

266 
uîr_t


267 
	$·p_p‹t
 (
csock
, *
loˇl_sock
)

269 
uîr_t
 
îr
;

270 *
ªque°
, *
ª•löe
;

271 
ù_addªss
 
addr
;

272 
nwrôãn
;

273 
p‹t
;

275 
byãs
[6 * 4 + 1];

278 i‡(!
	`sockë_ù_addªss
 (
csock
, &
addr
, 
ENDPOINT_LOCAL
))

279  
FTPSYSERR
;

281 
	`as£π
 (
addr
.
Ámûy
 =
AF_INET
);

284 
p‹t
 = 0;

287 *
loˇl_sock
 = 
	`böd_loˇl
 (&
addr
, &
p‹t
);

288 i‡(*
loˇl_sock
 < 0)

289  
FTPSYSERR
;

292 
	`ù_addªss_to_p‹t_ª¥
 (&
addr
, 
p‹t
, 
byãs
,  (bytes));

295 
ªque°
 = 
	`·p_ªque°
 ("PORT", 
byãs
);

296 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

297 i‡(
nwrôãn
 < 0)

299 
	`x‰ì
 (
ªque°
);

300 
	`fd_˛o£
 (*
loˇl_sock
);

301  
WRITEFAILED
;

303 
	`x‰ì
 (
ªque°
);

306 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

307 i‡(
îr
 !
FTPOK
)

309 
	`fd_˛o£
 (*
loˇl_sock
);

310  
îr
;

312 i‡(*
ª•löe
 != '2')

314 
	`x‰ì
 (
ª•löe
);

315 
	`fd_˛o£
 (*
loˇl_sock
);

316  
FTPPORTERR
;

318 
	`x‰ì
 (
ª•löe
);

319  
FTPOK
;

320 
	}
}

322 #ifde‡
ENABLE_IPV6


324 
	$ù_addªss_to_Õπ_ª¥
 (c⁄° 
ù_addªss
 *
addr
, 
p‹t
, *
buf
,

325 
size_t
 
buÊí
)

327 *
±r
 = 
	`IP_INADDR_DATA
 (
addr
);

330 
	`as£π
 (
buÊí
 >= 21 * 4);

333 
addr
->
Ámûy
)

335 
AF_INET
:

336 
	`¢¥ötf
 (
buf
, 
buÊí
, "%d,%d,%d,%d,%d,%d,%d,%d,%d", 4, 4,

337 
±r
[0],Ötr[1],Ötr[2],Ötr[3], 2,

338 (
p‹t
 & 0xff00) >> 8,Öort & 0xff);

340 
AF_INET6
:

341 
	`¢¥ötf
 (
buf
, 
buÊí
,

344 
±r
[0],Ötr[1],Ötr[2],Ötr[3],Ötr[4],Ötr[5],Ötr[6],Ötr[7],

345 
±r
[8],Ötr[9],Ötr[10],Ötr[11],Ötr[12],Ötr[13],Ötr[14],Ötr[15],

346 2, (
p‹t
 & 0xff00) >> 8,Öort & 0xff);

349 
	`ab‹t
 ();

351 
	}
}

356 
uîr_t


357 
	$·p_Õπ
 (
csock
, *
loˇl_sock
)

359 
uîr_t
 
îr
;

360 *
ªque°
, *
ª•löe
;

361 
ù_addªss
 
addr
;

362 
nwrôãn
;

363 
p‹t
;

365 
byãs
[21 * 4 + 1];

368 i‡(!
	`sockë_ù_addªss
 (
csock
, &
addr
, 
ENDPOINT_LOCAL
))

369  
FTPSYSERR
;

371 
	`as£π
 (
addr
.
Ámûy
 =
AF_INET
 ||áddr.Ámûy =
AF_INET6
);

374 
p‹t
 = 0;

377 *
loˇl_sock
 = 
	`böd_loˇl
 (&
addr
, &
p‹t
);

378 i‡(*
loˇl_sock
 < 0)

379  
FTPSYSERR
;

382 
	`ù_addªss_to_Õπ_ª¥
 (&
addr
, 
p‹t
, 
byãs
,  (bytes));

385 
ªque°
 = 
	`·p_ªque°
 ("LPRT", 
byãs
);

386 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

387 i‡(
nwrôãn
 < 0)

389 
	`x‰ì
 (
ªque°
);

390 
	`fd_˛o£
 (*
loˇl_sock
);

391  
WRITEFAILED
;

393 
	`x‰ì
 (
ªque°
);

395 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

396 i‡(
îr
 !
FTPOK
)

398 
	`fd_˛o£
 (*
loˇl_sock
);

399  
îr
;

401 i‡(*
ª•löe
 != '2')

403 
	`x‰ì
 (
ª•löe
);

404 
	`fd_˛o£
 (*
loˇl_sock
);

405  
FTPPORTERR
;

407 
	`x‰ì
 (
ª•löe
);

408  
FTPOK
;

409 
	}
}

412 
	$ù_addªss_to_ïπ_ª¥
 (c⁄° 
ù_addªss
 *
addr
, 
p‹t
, *
buf
,

413 
size_t
 
buÊí
)

415 
a‚um
;

420 
	`as£π
 (
buÊí
 >4 + 
INET6_ADDRSTRLEN
 + 1 + 5);

423 
a‚um
 = (
addr
->
Ámûy
 =
AF_INET
 ? 1 : 2);

424 
	`¢¥ötf
 (
buf
, 
buÊí
, "|%d|%s|%d|", 
a‚um
, 
	`¥öt_addªss
 (
addr
), 
p‹t
);

425 
buf
[
buÊí
 - 1] = '\0';

426 
	}
}

431 
uîr_t


432 
	$·p_ïπ
 (
csock
, *
loˇl_sock
)

434 
uîr_t
 
îr
;

435 *
ªque°
, *
ª•löe
;

436 
ù_addªss
 
addr
;

437 
nwrôãn
;

438 
p‹t
;

442 
byãs
[4 + 
INET6_ADDRSTRLEN
 + 1 + 5 + 1];

445 i‡(!
	`sockë_ù_addªss
 (
csock
, &
addr
, 
ENDPOINT_LOCAL
))

446  
FTPSYSERR
;

449 
p‹t
 = 0;

452 *
loˇl_sock
 = 
	`böd_loˇl
 (&
addr
, &
p‹t
);

453 i‡(*
loˇl_sock
 < 0)

454  
FTPSYSERR
;

457 
	`ù_addªss_to_ïπ_ª¥
 (&
addr
, 
p‹t
, 
byãs
,  (bytes));

460 
ªque°
 = 
	`·p_ªque°
 ("EPRT", 
byãs
);

461 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

462 i‡(
nwrôãn
 < 0)

464 
	`x‰ì
 (
ªque°
);

465 
	`fd_˛o£
 (*
loˇl_sock
);

466  
WRITEFAILED
;

468 
	`x‰ì
 (
ªque°
);

470 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

471 i‡(
îr
 !
FTPOK
)

473 
	`fd_˛o£
 (*
loˇl_sock
);

474  
îr
;

476 i‡(*
ª•löe
 != '2')

478 
	`x‰ì
 (
ª•löe
);

479 
	`fd_˛o£
 (*
loˇl_sock
);

480  
FTPPORTERR
;

482 
	`x‰ì
 (
ª•löe
);

483  
FTPOK
;

484 
	}
}

490 
uîr_t


491 
	$·p_∑sv
 (
csock
, 
ù_addªss
 *
addr
, *
p‹t
)

493 *
ªque°
, *
ª•löe
, *
s
;

494 
nwrôãn
, 
i
;

495 
uîr_t
 
îr
;

496 
tmp
[6];

498 
	`as£π
 (
addr
 !
NULL
);

499 
	`as£π
 (
p‹t
 !
NULL
);

501 
	`xzîo
 (*
addr
);

504 
ªque°
 = 
	`·p_ªque°
 ("PASV", 
NULL
);

506 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

507 i‡(
nwrôãn
 < 0)

509 
	`x‰ì
 (
ªque°
);

510  
WRITEFAILED
;

512 
	`x‰ì
 (
ªque°
);

514 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

515 i‡(
îr
 !
FTPOK
)

516  
îr
;

517 i‡(*
ª•löe
 != '2')

519 
	`x‰ì
 (
ª•löe
);

520  
FTPNOPASV
;

523 
s
 = 
ª•löe
;

524 
s
 +4; *†&& !
	`c_isdigô
 (*s); s++)

526 i‡(!*
s
)

527  
FTPINVPASV
;

528 
i
 = 0; i < 6; i++)

530 
tmp
[
i
] = 0;

531 ; 
	`c_isdigô
 (*
s
); s++)

532 
tmp
[
i
] = (*
s
 - '0') + 10 *Åmp[i];

533 i‡(*
s
 == ',')

534 
s
++;

535 i‡(
i
 < 5)

538 
	`x‰ì
 (
ª•löe
);

539  
FTPINVPASV
;

542 
	`x‰ì
 (
ª•löe
);

544 
addr
->
Ámûy
 = 
AF_INET
;

545 
	`mem˝y
 (
	`IP_INADDR_DATA
 (
addr
), 
tmp
, 4);

546 *
p‹t
 = ((
tmp
[4] << 8) & 0xff00) +Åmp[5];

548  
FTPOK
;

549 
	}
}

551 #ifde‡
ENABLE_IPV6


555 
uîr_t


556 
	$·p_Õsv
 (
csock
, 
ù_addªss
 *
addr
, *
p‹t
)

558 *
ªque°
, *
ª•löe
, *
s
;

559 
nwrôãn
, 
i
, 
af
, 
addæí
, 
p‹éí
;

560 
uîr_t
 
îr
;

561 
tmp
[16];

562 
tmµπ
[2];

564 
	`as£π
 (
addr
 !
NULL
);

565 
	`as£π
 (
p‹t
 !
NULL
);

567 
	`xzîo
 (*
addr
);

570 
ªque°
 = 
	`·p_ªque°
 ("LPSV", 
NULL
);

573 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

574 i‡(
nwrôãn
 < 0)

576 
	`x‰ì
 (
ªque°
);

577  
WRITEFAILED
;

579 
	`x‰ì
 (
ªque°
);

582 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

583 i‡(
îr
 !
FTPOK
)

584  
îr
;

585 i‡(*
ª•löe
 != '2')

587 
	`x‰ì
 (
ª•löe
);

588  
FTPNOPASV
;

592 
s
 = 
ª•löe
;

593 
s
 +4; *†&& !
	`c_isdigô
 (*s); s++)

595 i‡(!*
s
)

596  
FTPINVPASV
;

599 
af
 = 0;

600 ; 
	`c_isdigô
 (*
s
); s++)

601 
af
 = (*
s
 - '0') + 10 *áf;

603 i‡(
af
 != 4 &&áf != 6)

605 
	`x‰ì
 (
ª•löe
);

606  
FTPINVPASV
;

609 i‡(!*
s
 || *s++ != ',')

611 
	`x‰ì
 (
ª•löe
);

612  
FTPINVPASV
;

616 
addæí
 = 0;

617 ; 
	`c_isdigô
 (*
s
); s++)

618 
addæí
 = (*
s
 - '0') + 10 *áddrlen;

620 i‡(!*
s
 || *s++ != ',')

622 
	`x‰ì
 (
ª•löe
);

623  
FTPINVPASV
;

626 i‡(
addæí
 > 16)

628 
	`x‰ì
 (
ª•löe
);

629  
FTPINVPASV
;

632 i‡((
af
 =4 && 
addæí
 != 4)

633 || (
af
 =6 && 
addæí
 != 16))

635 
	`x‰ì
 (
ª•löe
);

636  
FTPINVPASV
;

640 
i
 = 0; i < 
addæí
; i++)

642 
tmp
[
i
] = 0;

643 ; 
	`c_isdigô
 (*
s
); s++)

644 
tmp
[
i
] = (*
s
 - '0') + 10 *Åmp[i];

645 i‡(*
s
 == ',')

646 
s
++;

649 
	`x‰ì
 (
ª•löe
);

650  
FTPINVPASV
;

655 
p‹éí
 = 0;

656 ; 
	`c_isdigô
 (*
s
); s++)

657 
p‹éí
 = (*
s
 - '0') + 10 *Öortlen;

659 i‡(!*
s
 || *s++ != ',')

661 
	`x‰ì
 (
ª•löe
);

662  
FTPINVPASV
;

665 i‡(
p‹éí
 > 2)

667 
	`x‰ì
 (
ª•löe
);

668  
FTPINVPASV
;

672 
tmµπ
[0] = 0;

673 ; 
	`c_isdigô
 (*
s
); s++)

674 
tmµπ
[0] = (*
s
 - '0') + 10 *Åmpprt[0];

676 i‡(!*
s
 || *s++ != ',')

678 
	`x‰ì
 (
ª•löe
);

679  
FTPINVPASV
;

682 
tmµπ
[1] = 0;

683 ; 
	`c_isdigô
 (*
s
); s++)

684 
tmµπ
[1] = (*
s
 - '0') + 10 *Åmpprt[1];

686 
	`as£π
 (
s
 !
NULL
);

688 i‡(
af
 == 4)

690 
addr
->
Ámûy
 = 
AF_INET
;

691 
	`mem˝y
 (
	`IP_INADDR_DATA
 (
addr
), 
tmp
, 4);

692 *
p‹t
 = ((
tmµπ
[0] << 8) & 0xff00) +Åmpprt[1];

693 
	`DEBUGP
 (("Õsvádd∏is: %s\n", 
	`¥öt_addªss
(
addr
)));

694 
	`DEBUGP
 (("tmµπ[0] is: %d\n", 
tmµπ
[0]));

695 
	`DEBUGP
 (("tmµπ[1] is: %d\n", 
tmµπ
[1]));

696 
	`DEBUGP
 (("*p‹àis: %d\n", *
p‹t
));

700 
	`as£π
 (
af
 == 6);

701 
addr
->
Ámûy
 = 
AF_INET6
;

702 
	`mem˝y
 (
	`IP_INADDR_DATA
 (
addr
), 
tmp
, 16);

703 *
p‹t
 = ((
tmµπ
[0] << 8) & 0xff00) +Åmpprt[1];

704 
	`DEBUGP
 (("Õsvádd∏is: %s\n", 
	`¥öt_addªss
(
addr
)));

705 
	`DEBUGP
 (("tmµπ[0] is: %d\n", 
tmµπ
[0]));

706 
	`DEBUGP
 (("tmµπ[1] is: %d\n", 
tmµπ
[1]));

707 
	`DEBUGP
 (("*p‹àis: %d\n", *
p‹t
));

710 
	`x‰ì
 (
ª•löe
);

711  
FTPOK
;

712 
	}
}

717 
uîr_t


718 
	$·p_ïsv
 (
csock
, 
ù_addªss
 *
ù
, *
p‹t
)

720 *
ªque°
, *
ª•löe
, *
°¨t
, 
dñim
, *
s
;

721 
nwrôãn
, 
i
;

722 
uîr_t
 
îr
;

723 
ç‹t
;

725 
	`as£π
 (
ù
 !
NULL
);

726 
	`as£π
 (
p‹t
 !
NULL
);

733 
ªque°
 = 
	`·p_ªque°
 ("EPSV", (
ù
->
Ámûy
 =
AF_INET
 ? "1" : "2"));

736 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

737 i‡(
nwrôãn
 < 0)

739 
	`x‰ì
 (
ªque°
);

740  
WRITEFAILED
;

742 
	`x‰ì
 (
ªque°
);

745 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

746 i‡(
îr
 !
FTPOK
)

747  
îr
;

748 i‡(*
ª•löe
 != '2')

750 
	`x‰ì
 (
ª•löe
);

751  
FTPNOPASV
;

754 
	`as£π
 (
ª•löe
 !
NULL
);

756 
	`DEBUGP
(("ª•löêi†%s\n", 
ª•löe
));

759 
°¨t
 = 
	`°rchr
 (
ª•löe
, '(');

760 i‡(
°¨t
 =
NULL
)

762 
	`x‰ì
 (
ª•löe
);

763  
FTPINVPASV
;

767 
s
 = 
°¨t
 + 1;

768 
dñim
 = *
s
++;

769 i‡(
dñim
 < 33 || delim > 126)

771 
	`x‰ì
 (
ª•löe
);

772  
FTPINVPASV
;

775 
i
 = 0; i < 2; i++)

777 i‡(*
s
++ !
dñim
)

779 
	`x‰ì
 (
ª•löe
);

780  
FTPINVPASV
;

785 
ç‹t
 = 0;

786 
i
 = 1; 
	`c_isdigô
 (*
s
); s++)

788 i‡(
i
 > 5)

790 
	`x‰ì
 (
ª•löe
);

791  
FTPINVPASV
;

793 
ç‹t
 = (*
s
 - '0') + 10 *Åport;

797 i‡(*
s
++ !
dñim
)

799 
	`x‰ì
 (
ª•löe
);

800  
FTPINVPASV
;

803 i‡(*
s
 != ')')

805 
	`x‰ì
 (
ª•löe
);

806  
FTPINVPASV
;

809 *
p‹t
 = 
ç‹t
;

811 
	`x‰ì
 (
ª•löe
);

812  
FTPOK
;

813 
	}
}

817 
uîr_t


818 
	$·p_ty≥
 (
csock
, 
ty≥
)

820 *
ªque°
, *
ª•löe
;

821 
nwrôãn
;

822 
uîr_t
 
îr
;

823 
°y≥
[2];

826 
°y≥
[0] = 
ty≥
;

827 
°y≥
[1] = 0;

829 
ªque°
 = 
	`·p_ªque°
 ("TYPE", 
°y≥
);

830 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

831 i‡(
nwrôãn
 < 0)

833 
	`x‰ì
 (
ªque°
);

834  
WRITEFAILED
;

836 
	`x‰ì
 (
ªque°
);

838 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

839 i‡(
îr
 !
FTPOK
)

840  
îr
;

841 i‡(*
ª•löe
 != '2')

843 
	`x‰ì
 (
ª•löe
);

844  
FTPUNKNOWNTYPE
;

846 
	`x‰ì
 (
ª•löe
);

848  
FTPOK
;

849 
	}
}

853 
uîr_t


854 
	$·p_cwd
 (
csock
, c⁄° *
dú
)

856 *
ªque°
, *
ª•löe
;

857 
nwrôãn
;

858 
uîr_t
 
îr
;

861 
ªque°
 = 
	`·p_ªque°
 ("CWD", 
dú
);

862 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

863 i‡(
nwrôãn
 < 0)

865 
	`x‰ì
 (
ªque°
);

866  
WRITEFAILED
;

868 
	`x‰ì
 (
ªque°
);

870 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

871 i‡(
îr
 !
FTPOK
)

872  
îr
;

873 i‡(*
ª•löe
 == '5')

875 
	`x‰ì
 (
ª•löe
);

876  
FTPNSFOD
;

878 i‡(*
ª•löe
 != '2')

880 
	`x‰ì
 (
ª•löe
);

881  
FTPRERR
;

883 
	`x‰ì
 (
ª•löe
);

885  
FTPOK
;

886 
	}
}

889 
uîr_t


890 
	$·p_ª°
 (
csock
, 
wgöt
 
off£t
)

892 *
ªque°
, *
ª•löe
;

893 
nwrôãn
;

894 
uîr_t
 
îr
;

896 
ªque°
 = 
	`·p_ªque°
 ("REST", 
	`numbî_to_°©ic_°rög
 (
off£t
));

897 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

898 i‡(
nwrôãn
 < 0)

900 
	`x‰ì
 (
ªque°
);

901  
WRITEFAILED
;

903 
	`x‰ì
 (
ªque°
);

905 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

906 i‡(
îr
 !
FTPOK
)

907  
îr
;

908 i‡(*
ª•löe
 != '3')

910 
	`x‰ì
 (
ª•löe
);

911  
FTPRESTFAIL
;

913 
	`x‰ì
 (
ª•löe
);

915  
FTPOK
;

916 
	}
}

919 
uîr_t


920 
	$·p_ªå
 (
csock
, c⁄° *
fûe
)

922 *
ªque°
, *
ª•löe
;

923 
nwrôãn
;

924 
uîr_t
 
îr
;

927 
ªque°
 = 
	`·p_ªque°
 ("RETR", 
fûe
);

928 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

929 i‡(
nwrôãn
 < 0)

931 
	`x‰ì
 (
ªque°
);

932  
WRITEFAILED
;

934 
	`x‰ì
 (
ªque°
);

936 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

937 i‡(
îr
 !
FTPOK
)

938  
îr
;

939 i‡(*
ª•löe
 == '5')

941 
	`x‰ì
 (
ª•löe
);

942  
FTPNSFOD
;

944 i‡(*
ª•löe
 != '1')

946 
	`x‰ì
 (
ª•löe
);

947  
FTPRERR
;

949 
	`x‰ì
 (
ª•löe
);

951  
FTPOK
;

952 
	}
}

956 
uîr_t


957 
	$·p_li°
 (
csock
, c⁄° *
fûe
, 
°y≥
 
rs
)

959 *
ªque°
, *
ª•löe
;

960 
nwrôãn
;

961 
uîr_t
 
îr
;

962 
boﬁ
 
ok
 = 
Ál£
;

963 
size_t
 
i
 = 0;

965 c⁄° *
li°_comm™ds
[] = { "LIST -a",

972 i‡(
rs
 =
ST_VMS
)

973 
i
 = 
	`cou¡of
 (
li°_comm™ds
)- 1;

977 
ªque°
 = 
	`·p_ªque°
 (
li°_comm™ds
[
i
], 
fûe
);

978 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

979 i‡(
nwrôãn
 < 0)

981 
	`x‰ì
 (
ªque°
);

982  
WRITEFAILED
;

984 
	`x‰ì
 (
ªque°
);

986 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

987 i‡(
îr
 =
FTPOK
)

989 i‡(*
ª•löe
 == '5')

991 
îr
 = 
FTPNSFOD
;

993 i‡(*
ª•löe
 == '1')

995 
îr
 = 
FTPOK
;

996 
ok
 = 
åue
;

1000 
îr
 = 
FTPRERR
;

1002 
	`x‰ì
 (
ª•löe
);

1004 ++
i
;

1005 } 
i
 < 
	`cou¡of
 (
li°_comm™ds
Ë&& !
ok
);

1007  
îr
;

1008 
	}
}

1011 
uîr_t


1012 
	$·p_sy°
 (
csock
, 
°y≥
 *
£rvî_ty≥
)

1014 *
ªque°
, *
ª•löe
;

1015 
nwrôãn
;

1016 
uîr_t
 
îr
;

1019 
ªque°
 = 
	`·p_ªque°
 ("SYST", 
NULL
);

1020 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

1021 i‡(
nwrôãn
 < 0)

1023 
	`x‰ì
 (
ªque°
);

1024  
WRITEFAILED
;

1026 
	`x‰ì
 (
ªque°
);

1029 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

1030 i‡(
îr
 !
FTPOK
)

1031  
îr
;

1032 i‡(*
ª•löe
 == '5')

1034 
	`x‰ì
 (
ª•löe
);

1035  
FTPSRVERR
;

1039 
	`°πok
 (
ª•löe
, " ");

1043 
ªque°
 = 
	`°πok
 (
NULL
, " ");

1045 i‡(
ªque°
 =
NULL
)

1046 *
£rvî_ty≥
 = 
ST_OTHER
;

1047 i‡(!
	`°rˇ£cmp
 (
ªque°
, "VMS"))

1048 *
£rvî_ty≥
 = 
ST_VMS
;

1049 i‡(!
	`°rˇ£cmp
 (
ªque°
, "UNIX"))

1050 *
£rvî_ty≥
 = 
ST_UNIX
;

1051 i‡(!
	`°rˇ£cmp
 (
ªque°
, "WINDOWS_NT")

1052 || !
	`°rˇ£cmp
 (
ªque°
, "WINDOWS2000"))

1053 *
£rvî_ty≥
 = 
ST_WINNT
;

1054 i‡(!
	`°rˇ£cmp
 (
ªque°
, "MACOS"))

1055 *
£rvî_ty≥
 = 
ST_MACOS
;

1056 i‡(!
	`°rˇ£cmp
 (
ªque°
, "OS/400"))

1057 *
£rvî_ty≥
 = 
ST_OS400
;

1059 *
£rvî_ty≥
 = 
ST_OTHER
;

1061 
	`x‰ì
 (
ª•löe
);

1063  
FTPOK
;

1064 
	}
}

1067 
uîr_t


1068 
	$·p_pwd
 (
csock
, **
pwd
)

1070 *
ªque°
, *
ª•löe
;

1071 
nwrôãn
;

1072 
uîr_t
 
îr
;

1075 
ªque°
 = 
	`·p_ªque°
 ("PWD", 
NULL
);

1076 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

1077 i‡(
nwrôãn
 < 0)

1079 
	`x‰ì
 (
ªque°
);

1080  
WRITEFAILED
;

1082 
	`x‰ì
 (
ªque°
);

1084 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

1085 i‡(
îr
 !
FTPOK
)

1086  
îr
;

1087 i‡(*
ª•löe
 == '5')

1089 
îr
:

1090 
	`x‰ì
 (
ª•löe
);

1091  
FTPSRVERR
;

1096 
	`°πok
 (
ª•löe
, "\"");

1097 
ªque°
 = 
	`°πok
 (
NULL
, "\"");

1098 i‡(!
ªque°
)

1101 
îr
;

1104 
	`x‰ì_nuŒ
 (*
pwd
);

1106 *
pwd
 = 
	`x°rdup
 (
ªque°
);

1108 
	`x‰ì
 (
ª•löe
);

1110  
FTPOK
;

1111 
	}
}

1115 
uîr_t


1116 
	$·p_size
 (
csock
, c⁄° *
fûe
, 
wgöt
 *
size
)

1118 *
ªque°
, *
ª•löe
;

1119 
nwrôãn
;

1120 
uîr_t
 
îr
;

1123 
ªque°
 = 
	`·p_ªque°
 ("SIZE", 
fûe
);

1124 
nwrôãn
 = 
	`fd_wrôe
 (
csock
, 
ªque°
, 
	`°æí
 (request), -1);

1125 i‡(
nwrôãn
 < 0)

1127 
	`x‰ì
 (
ªque°
);

1128 *
size
 = 0;

1129  
WRITEFAILED
;

1131 
	`x‰ì
 (
ªque°
);

1133 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

1134 i‡(
îr
 !
FTPOK
)

1136 *
size
 = 0;

1137  
îr
;

1139 i‡(*
ª•löe
 == '5')

1145 
	`x‰ì
 (
ª•löe
);

1146 *
size
 = 0;

1147  
FTPOK
;

1150 
î∫o
 = 0;

1151 *
size
 = 
	`°r_to_wgöt
 (
ª•löe
 + 4, 
NULL
, 10);

1152 i‡(
î∫o
)

1160 
	`x‰ì
 (
ª•löe
);

1161 *
size
 = 0;

1162  
FTPOK
;

1165 
	`x‰ì
 (
ª•löe
);

1167  
FTPOK
;

1168 
	}
}

1173 
	$·p_¥o˚ss_ty≥
 (c⁄° *
∑øms
)

1175 i‡(
∑øms


1176 && 0 =
	`°∫ˇ£cmp
 (
∑øms
, "type=", 5)

1177 && 
∑øms
[5] != '\0')

1178  
	`c_touµî
 (
∑øms
[5]);

1181 
	}
}

	@src/ftp-ls.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

39 
	~<time.h
>

40 
	~"utûs.h
"

41 
	~"·p.h
"

42 
	~"uæ.h
"

43 
	~"c⁄vît.h
"

44 
	~"ªå.h
"

50 
	$sym≥rms
 (c⁄° *
s
)

52 
≥rms
 = 0, 
i
;

54 i‡(
	`°æí
 (
s
) < 9)

56 
i
 = 0; i < 3; i++, 
s
 += 3)

58 
≥rms
 <<= 3;

59 
≥rms
 +(((
s
[0] == 'r') << 2) + ((s[1] == 'w') << 1) +

60 (
s
[2] == 'x' || s[2] == 's'));

62  
≥rms
;

63 
	}
}

71 
	$˛ón_löe
(*
löe
)

73 
Àn
 = 
	`°æí
 (
löe
);

74 i‡(!
Àn
)  0;

75 i‡(
löe
[
Àn
 - 1] == '\n')

76 
löe
[--
Àn
] = '\0';

77 i‡(!
Àn
)  0;

78 i‡(
löe
[
Àn
 - 1] == '\r')

79 
löe
[--
Àn
] = '\0';

80  ; *
löe
 ;Üine++ ) if (*line == '\t') *line = ' ';

81  
Àn
;

82 
	}
}

92 
fûeöfo
 *

93 
	$·p_∑r£_unix_ls
 (c⁄° *
fûe
, 
ign‹e_≥rms
)

95 
FILE
 *
Â
;

96 c⁄° *
m⁄ths
[] = {

100 
√xt
, 
Àn
, 
i
, 
îr‹
, 
ign‹e
;

101 
yór
, 
m⁄th
, 
day
;

102 
hour
, 
mö
, 
£c
, 
±y≥
;

103 
tm
 
time°ru˘
, *
äow
;

104 
time_t
 
timíow
;

106 *
löe
, *
tok
, *
±ok
;

107 
fûeöfo
 *
dú
, *
l
, 
cur
;

109 
Â
 = 
	`f›í
 (
fûe
, "rb");

110 i‡(!
Â
)

112 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

113  
NULL
;

115 
dú
 = 
l
 = 
NULL
;

118 (
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
)

120 
Àn
 = 
	`˛ón_löe
 (
löe
);

122 i‡(!
	`°∫ˇ£cmp
 (
löe
, "total", 5))

124 
	`x‰ì
 (
löe
);

128 
tok
 = 
	`°πok
 (
löe
, " ");

129 i‡(!
tok
)

131 
	`x‰ì
 (
löe
);

135 
cur
.
«me
 = 
NULL
;

136 
cur
.
lökto
 = 
NULL
;

139 *
tok
)

142 
cur
.
ty≥
 = 
FT_PLAINFILE
;

143 
	`DEBUGP
 (("PLAINFILE; "));

146 
cur
.
ty≥
 = 
FT_DIRECTORY
;

147 
	`DEBUGP
 (("DIRECTORY; "));

150 
cur
.
ty≥
 = 
FT_SYMLINK
;

151 
	`DEBUGP
 (("SYMLINK; "));

154 
cur
.
ty≥
 = 
FT_UNKNOWN
;

155 
	`DEBUGP
 (("UNKNOWN; "));

159 i‡(
ign‹e_≥rms
)

161 
cur
.
ty≥
)

163 
FT_PLAINFILE
:

164 
cur
.
≥rms
 = 0644;

166 
FT_DIRECTORY
:

167 
cur
.
≥rms
 = 0755;

171 
cur
.
≥rms
 = 0644;

173 
	`DEBUGP
 (("im∂icôÖîm†%0o; ", 
cur
.
≥rms
));

177 
cur
.
≥rms
 = 
	`sym≥rms
 (
tok
 + 1);

178 
	`DEBUGP
 (("≥rm†%0o; ", 
cur
.
≥rms
));

181 
îr‹
 = 
ign‹e
 = 0;

183 
yór
 = 
hour
 = 
mö
 = 
£c
 = 0;

184 
m⁄th
 = 
day
 = 0;

185 
±y≥
 = 
TT_DAY
;

186 
√xt
 = -1;

198 
tok
 = 
löe
;

199 
±ok
 = 
tok
,

200 (
tok
 = 
	`°πok
 (
NULL
, " ")) != NULL)

202 --
√xt
;

203 i‡(
√xt
 < 0)

205 
i
 = 0; i < 12; i++)

206 i‡(!
	`°rcmp
 (
tok
, 
m⁄ths
[
i
]))

210 i‡(
i
 != 12)

212 
wgöt
 
size
;

215 i‡(
±ok
 =
löe
)

218 
îr‹
 = 1;

221 
î∫o
 = 0;

222 
size
 = 
	`°r_to_wgöt
 (
±ok
, 
NULL
, 10);

223 i‡(
size
 =
WGINT_MAX
 && 
î∫o
 =
ERANGE
)

226 
cur
.
size
 = 0;

228 
cur
.
size
 = size;

229 
	`DEBUGP
 (("size: %s; ", 
	`numbî_to_°©ic_°rög
(
cur
.
size
)));

231 
m⁄th
 = 
i
;

232 
√xt
 = 5;

233 
	`DEBUGP
 (("m⁄th: %s; ", 
m⁄ths
[
m⁄th
]));

236 i‡(
√xt
 == 4)

238 i‡(
tok
[1])

239 
day
 = 10 * (*
tok
 - '0') +Åok[1] - '0';

241 
day
 = *
tok
 - '0';

242 
	`DEBUGP
 (("day: %d; ", 
day
));

244 i‡(
√xt
 == 3)

252 
yór
 = 0;

253 
mö
 = 
hour
 = 
£c
 = 0;

255 i‡(
	`c_isdigô
 (*
tok
))

258 ; 
	`c_isdigô
 (*
tok
);Åok++)

259 
yór
 = (*
tok
 - '0') + 10 * year;

260 i‡(*
tok
 == ':')

263 
hour
 = 
yór
;

264 
yór
 = 0;

265 
±y≥
 = 
TT_HOUR_MIN
;

266 ++
tok
;

268 ; 
	`c_isdigô
 (*
tok
);Åok++)

269 
mö
 = (*
tok
 - '0') + 10 * min;

270 i‡(*
tok
 == ':')

273 ++
tok
;

274 ; 
	`c_isdigô
 (*
tok
);Åok++)

275 
£c
 = (*
tok
 - '0') + 10 * sec;

279 i‡(
yór
)

280 
	`DEBUGP
 (("yór: %d (nÿtm); ", 
yór
));

282 
	`DEBUGP
 (("time: %02d:%02d:%02d (nÿyr); ", 
hour
, 
mö
, 
£c
));

284 i‡(
√xt
 == 2)

286 
‚Àn
;

287 *
p
;

291 
‚Àn
 = 
	`°æí
 (
tok
);

292 i‡(
‚Àn
 < 
Àn
 - (
tok
 - 
löe
))

296 
tok
[
‚Àn
] = ' ';

299 i‡(
cur
.
ty≥
 =
FT_SYMLINK
)

301 
p
 = 
	`°r°r
 (
tok
, " -> ");

302 i‡(!
p
)

304 
îr‹
 = 1;

307 
cur
.
lökto
 = 
	`x°rdup
 (
p
 + 4);

308 
	`DEBUGP
 (("lökÅo: %s\n", 
cur
.
lökto
));

310 *
p
 = '\0';

316 i‡(!
	`°rcmp
 (
tok
, ".") || !strcmp (tok, ".."))

318 
	`DEBUGP
 (("\nIgnoring `.'ánd `..'; "));

319 
ign‹e
 = 1;

330 
‚Àn
 = 
	`°æí
 (
tok
);

331 
cur
.
«me
 = 
	`xmÆloc
 (
‚Àn
 + 1);

332 
	`mem˝y
 (
cur
.
«me
, 
tok
, 
‚Àn
 + 1);

333 i‡(
‚Àn
)

335 i‡(
cur
.
ty≥
 =
FT_DIRECTORY
 && cur.
«me
[
‚Àn
 - 1] == '/')

337 
cur
.
«me
[
‚Àn
 - 1] = '\0';

338 
	`DEBUGP
 (("trailing `/' on dir.\n"));

340 i‡(
cur
.
ty≥
 =
FT_SYMLINK
 && cur.
«me
[
‚Àn
 - 1] == '@')

342 
cur
.
«me
[
‚Àn
 - 1] = '\0';

343 
	`DEBUGP
 (("trailing `@' onÜink.\n"));

345 i‡(
cur
.
ty≥
 =
FT_PLAINFILE


346 && (
cur
.
≥rms
 & 0111)

347 && 
cur
.
«me
[
‚Àn
 - 1] == '*')

349 
cur
.
«me
[
‚Àn
 - 1] = '\0';

350 
	`DEBUGP
 (("trailing `*' onÉxec.\n"));

354 
îr‹
 = 1;

358 
	`ab‹t
 ();

361 i‡(!
cur
.
«me
 || (cur.
ty≥
 =
FT_SYMLINK
 && !cur.
lökto
))

362 
îr‹
 = 1;

364 
	`DEBUGP
 (("%s\n", 
cur
.
«me
 ? cur.name : ""));

366 i‡(
îr‹
 || 
ign‹e
)

368 
	`DEBUGP
 (("Skipping.\n"));

369 
	`x‰ì_nuŒ
 (
cur
.
«me
);

370 
	`x‰ì_nuŒ
 (
cur
.
lökto
);

371 
	`x‰ì
 (
löe
);

375 i‡(!
dú
)

377 
l
 = 
dú
 = 
	`x√w
 (
fûeöfo
);

378 
	`mem˝y
 (
l
, &
cur
,  (cur));

379 
l
->
¥ev
 =Ü->
√xt
 = 
NULL
;

383 
cur
.
¥ev
 = 
l
;

384 
l
->
√xt
 = 
	`x√w
 (
fûeöfo
);

385 
l
 =Ü->
√xt
;

386 
	`mem˝y
 (
l
, &
cur
,  (cur));

387 
l
->
√xt
 = 
NULL
;

390 
timíow
 = 
	`time
 (
NULL
);

391 
äow
 = 
	`loˇ…ime
 (&
timíow
);

393 
time°ru˘
.
tm_£c
 = 
£c
;

394 
time°ru˘
.
tm_mö
 = 
mö
;

395 
time°ru˘
.
tm_hour
 = 
hour
;

396 
time°ru˘
.
tm_mday
 = 
day
;

397 
time°ru˘
.
tm_m⁄
 = 
m⁄th
;

398 i‡(
yór
 == 0)

405 i‡(
m⁄th
 > 
äow
->
tm_m⁄
)

406 
time°ru˘
.
tm_yór
 = 
äow
->tm_year - 1;

408 
time°ru˘
.
tm_yór
 = 
äow
->tm_year;

411 
time°ru˘
.
tm_yór
 = 
yór
;

412 i‡(
time°ru˘
.
tm_yór
 >= 1900)

413 
time°ru˘
.
tm_yór
 -= 1900;

414 
time°ru˘
.
tm_wday
 = 0;

415 
time°ru˘
.
tm_yday
 = 0;

416 
time°ru˘
.
tm_isd°
 = -1;

417 
l
->
t°amp
 = 
	`mktime
 (&
time°ru˘
);

418 
l
->
±y≥
 =Ötype;

420 
	`x‰ì
 (
löe
);

423 
	`f˛o£
 (
Â
);

424  
dú
;

425 
	}
}

427 
fûeöfo
 *

428 
	$·p_∑r£_wö¡_ls
 (c⁄° *
fûe
)

430 
FILE
 *
Â
;

431 
Àn
;

432 
yór
, 
m⁄th
, 
day
;

433 
hour
, 
mö
;

434 
tm
 
time°ru˘
;

436 *
löe
, *
tok
;

437 
fûeöfo
 *
dú
, *
l
, 
cur
;

439 
Â
 = 
	`f›í
 (
fûe
, "rb");

440 i‡(!
Â
)

442 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

443  
NULL
;

445 
dú
 = 
l
 = 
NULL
;

448 (
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
)

450 
Àn
 = 
	`˛ón_löe
 (
löe
);

458 i‡(
Àn
 < 40Ë
c⁄töue_lo›
;

459 
tok
 = 
löe
 + 39;

460 
cur
.
«me
 = 
	`x°rdup
(
tok
);

461 
	`DEBUGP
 (("Name: '%s'\n", 
cur
.
«me
));

465 
tok
 = 
	`°πok
(
löe
, "-");

466 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

467 
m⁄th
 = 
	`©oi
(
tok
) - 1;

468 i‡(
m⁄th
 < 0) month = 0;

469 
tok
 = 
	`°πok
(
NULL
, "-");

470 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

471 
day
 = 
	`©oi
(
tok
);

472 
tok
 = 
	`°πok
(
NULL
, " ");

473 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

474 
yór
 = 
	`©oi
(
tok
);

476 i‡(
yór
 <= 70) year += 100;

480 
tok
 = 
	`°πok
(
NULL
, ":");

481 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

482 
hour
 = 
	`©oi
(
tok
);

483 
tok
 = 
	`°πok
(
NULL
, "M");

484 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

485 
mö
 = 
	`©oi
(
tok
);

488 
tok
+=2;

489 i‡(
hour
 == 12) hour = 0;

490 i‡(*
tok
 ='P'Ë
hour
 += 12;

492 
	`DEBUGP
 (("YYYY/MM/DD HH:MM - %d/%02d/%02d %02d:%02d\n",

493 
yór
+1900, 
m⁄th
, 
day
, 
hour
, 
mö
));

496 
time°ru˘
.
tm_£c
 = 0;

497 
time°ru˘
.
tm_mö
 = 
mö
;

498 
time°ru˘
.
tm_hour
 = 
hour
;

499 
time°ru˘
.
tm_mday
 = 
day
;

500 
time°ru˘
.
tm_m⁄
 = 
m⁄th
;

501 
time°ru˘
.
tm_yór
 = 
yór
;

502 
time°ru˘
.
tm_wday
 = 0;

503 
time°ru˘
.
tm_yday
 = 0;

504 
time°ru˘
.
tm_isd°
 = -1;

505 
cur
.
t°amp
 = 
	`mktime
 (&
time°ru˘
);

506 
cur
.
±y≥
 = 
TT_HOUR_MIN
;

508 
	`DEBUGP
 (("Time°amp: %ld\n", 
cur
.
t°amp
));

514 
tok
 = 
	`°πok
(
NULL
, " ");

515 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

516 (
tok
 !
NULL
Ë&& (*tok ='\0')Ëtok = 
	`°πok
(NULL, " ");

517 i‡(
tok
 =
NULL
Ë
c⁄töue_lo›
;

518 i‡(*
tok
 == '<')

520 
cur
.
ty≥
 = 
FT_DIRECTORY
;

521 
cur
.
size
 = 0;

522 
cur
.
≥rms
 = 0755;

523 
	`DEBUGP
 (("Directory\n"));

527 
wgöt
 
size
;

528 
cur
.
ty≥
 = 
FT_PLAINFILE
;

529 
î∫o
 = 0;

530 
size
 = 
	`°r_to_wgöt
 (
tok
, 
NULL
, 10);

531 i‡(
size
 =
WGINT_MAX
 && 
î∫o
 =
ERANGE
)

532 
cur
.
size
 = 0;

534 
cur
.
size
 = size;

535 
cur
.
≥rms
 = 0644;

536 
	`DEBUGP
 (("Fûe, sizê%†byãs\n", 
	`numbî_to_°©ic_°rög
 (
cur
.
size
)));

539 
cur
.
lökto
 = 
NULL
;

542 i‡(!
dú
)

544 
l
 = 
dú
 = 
	`x√w
 (
fûeöfo
);

545 
	`mem˝y
 (
l
, &
cur
,  (cur));

546 
l
->
¥ev
 =Ü->
√xt
 = 
NULL
;

550 
cur
.
¥ev
 = 
l
;

551 
l
->
√xt
 = 
	`x√w
 (
fûeöfo
);

552 
l
 =Ü->
√xt
;

553 
	`mem˝y
 (
l
, &
cur
,  (cur));

554 
l
->
√xt
 = 
NULL
;

557 
c⁄töue_lo›
:

558 
	`x‰ì
 (
löe
);

561 
	`f˛o£
(
Â
);

562  
dú
;

563 
	}
}

585 
	#VMS_DEFAULT_PROT_FILE
 0644

	)

586 
	#VMS_DEFAULT_PROT_DIR
 0755

	)

597 
	$ót_ˇªts
–*
°r
)

600 *
°rd
;

601 
hdgt
;

602 
uchr
;

603 
¥›
;

606 (*
°r
 != '\0') && (*str != '^'))

607 
°r
++;

610 i‡(*
°r
 != '\0')

613 
°rd
 = 
°r
;

614 *
°r
 != '\0')

616 
uchr
 = *
°r
;

617 i‡(
uchr
 == '^')

620 
uchr
 = *(++
°r
);

621 
¥›
 = 
ch¨_¥›
[ 
uchr
];

622 i‡(
¥›
& 64)

625 i‡(
uchr
 <= '9')

627 
hdgt
 = 
uchr
- '0';

631 
hdgt
 = ((
uchr
- 'A')& 7)+ 10;

633 
hdgt
 <<= 4;

634 
uchr
 = *(++
°r
);

635 i‡(
uchr
 <= '9')

637 
uchr
 = 
hdgt
+ uchr- '0';

641 
uchr
 = 
hdgt
+ ((uchr- 'A')& 15)+ 10;

644 i‡(
uchr
 == '_')

647 
uchr
 = ' ';

649 i‡(
uchr
 == '/')

656 
uchr
 = '?';

663 *
°rd
 = 
uchr
;

666 
°rd
++;

667 
°r
++;

670 *
°rd
 = '\0';

672 
	}
}

675 
fûeöfo
 *

676 
	$·p_∑r£_vms_ls
 (c⁄° *
fûe
)

678 
FILE
 *
Â
;

679 
dt
, 
i
, 
j
, 
Àn
;

680 
≥rms
;

681 
time_t
 
timíow
;

682 
tm
 *
time°ru˘
;

683 
d©e_°r
[ 32];

685 *
löe
, *
tok
;

686 
fûeöfo
 *
dú
, *
l
, 
cur
;

688 
Â
 = 
	`f›í
 (
fûe
, "r");

689 i‡(!
Â
)

691 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

692  
NULL
;

694 
dú
 = 
l
 = 
NULL
;

698 
j
 = 0;

701 
löe
 = 
	`ªad_whﬁe_löe
 (
Â
);

702 i‡(
löe
 =
NULL
)

708 
i
 = 
	`˛ón_löe
 (
löe
);

709 i‡(
i
 <= 0)

711 
	`x‰ì
 (
löe
);

716 i‡((
j
 =0Ë&& (
löe
[ 
i
- 1] == ']'))

721 
j
 = 1;

723 i‡(!
	`°∫cmp
 (
löe
, "Total of ", 9))

728 
	`x‰ì
 (
löe
);

729 
löe
 = 
NULL
;

737 
	`x‰ì
 (
löe
);

743 
löe
 !
NULL
)

745 *
p
;

753 
tok
 = 
	`°πok
(
löe
, " ");

754 i‡(
tok
 =
NULL
Ëtok = 
löe
;

755 
	`DEBUGP
 (("fûê«me: '%s'\n", 
tok
));

768 #i‡(!
	`deföed
–
__VMS
Ë&& !deföed–
PRESERVE_VMS_VERSIONS
))

769 
p
 = 
tok
 + 
	`°æí
 (tok); (--∞>ÅokË&& 
	`c_isdigô
( *p); );

770 i‡((*
p
 == ';') && (*(p- 1) != '^'))

772 *
p
 = '\0';

780 
	`ót_ˇªts
 (
tok
);

781 
	`DEBUGP
 (("fûê«me-^: '%s'\n", 
tok
));

790 
Àn
 = 
	`°æí
 (
tok
);

791 i‡(!
	`°∫ˇ£cmp
((
tok
 + (
Àn
 - 4)), ".DIR", 4))

793 *(
tok
+ (
Àn
 - 4)) = '\0';

794 
cur
.
ty≥
 = 
FT_DIRECTORY
;

795 
cur
.
≥rms
 = 
VMS_DEFAULT_PROT_DIR
;

796 
	`DEBUGP
 (("Directory (nv)\n"));

798 i‡(!
	`°∫ˇ£cmp
 ((
tok
 + (
Àn
 - 6)), ".DIR;1", 6))

800 *(
tok
+ (
Àn
 - 6)) = '\0';

801 
cur
.
ty≥
 = 
FT_DIRECTORY
;

802 
cur
.
≥rms
 = 
VMS_DEFAULT_PROT_DIR
;

803 
	`DEBUGP
 (("Directory (v)\n"));

807 
cur
.
ty≥
 = 
FT_PLAINFILE
;

808 
cur
.
≥rms
 = 
VMS_DEFAULT_PROT_FILE
;

809 
	`DEBUGP
 (("File\n"));

811 
cur
.
«me
 = 
	`x°rdup
 (
tok
);

812 
	`DEBUGP
 (("Name: '%s'\n", 
cur
.
«me
));

815 *
d©e_°r
 = '\0';

818 
cur
.
lökto
 = 
NULL
;

824 
cur
.
size
 = 0;

830 
tok
 = 
	`°πok
 (
NULL
, " ");

831 i‡(
tok
 =
NULL
)

833 
	`DEBUGP
 (("GettingádditionalÜine.\n"));

834 
	`x‰ì
 (
löe
);

835 
löe
 = 
	`ªad_whﬁe_löe
 (
Â
);

836 i‡(!
löe
)

838 
	`DEBUGP
 (("EOF. LeavingÜistingÖarser.\n"));

845 i‡(
i
 <= 0)

848 
	`DEBUGP
 (("BlankÜine. LeavingÜistingÖarser.\n"));

849 
	`x‰ì
 (
löe
);

852 i‡(
löe
[ 0] != ' ')

854 
	`DEBUGP
 (("Non-blank in column 1. Must beáÇew fileÇame?\n"));

859 
tok
 = 
	`°πok
 (
löe
, " ");

860 i‡(
tok
 =
NULL
)

863 
	`DEBUGP
 (("NullÅoken. LeavingÜistingÖarser.\n"));

864 
	`x‰ì
 (
löe
);

883 
tok
 !
NULL
)

885 
	`DEBUGP
 (("Tokí: >%s<: ", 
tok
));

887 i‡((
	`°æí
 (
tok
Ë< 12Ë&& (
	`°rchr
–tok, '-'Ë!
NULL
))

890 
	`DEBUGP
 (("Date.\n"));

891 
	`°r˝y
–
d©e_°r
, 
tok
);

892 
	`°rˇt
–
d©e_°r
, " ");

894 i‡((
	`°æí
 (
tok
Ë< 12Ë&& (
	`°rchr
–tok, ':'Ë!
NULL
))

897 
	`DEBUGP
 (("Time. "));

898 
	`°∫ˇt
–
d©e_°r
,

899 
tok
,

900 (–
d©e_°r
)- 
	`°æí
 (date_str) - 1));

901 
	`DEBUGP
 (("D©êtime: >%s<\n", 
d©e_°r
));

903 i‡(
	`°rchr
 ( 
tok
, '['Ë!
NULL
)

906 
	`DEBUGP
 (("Owner.\n"));

908 i‡(
	`°rchr
 (
tok
, '('Ë!
NULL
)

911 
≥rms
 = 0;

912 
j
 = 0;

913 
i
 = 0; i < 
	`°æí
–
tok
); i++)

915 
tok
[ 
i
])

922 i‡(
j
 == 0)

924 
≥rms
 = 0;

925 
j
 = 1;

929 
≥rms
 <<= 3;

933 
≥rms
 |= 4;

936 
≥rms
 |= 2;

939 
≥rms
 |= 1;

942 
≥rms
 |= 2;

946 
cur
.
≥rms
 =Öerms;

947 
	`DEBUGP
 (("PrŸ.Öîm†%0o.\n", 
cur
.
≥rms
));

954 
	`DEBUGP
 (("Ignored (size?).\n"));

957 
tok
 = 
	`°πok
 (
NULL
, " ");

967 
timíow
 = 
	`time
–
NULL
);

968 
time°ru˘
 = 
	`loˇ…ime
–&
timíow
 );

969 
	`°Ωtime
–
d©e_°r
, "%d-%b-%Y %H:%M:%S", 
time°ru˘
);

972 
timíow
 = 
	`mktime
 (
time°ru˘
);

974 i‡((
tok
 = 
	`gëív
 ( "WGET_TIMEZONE_DIFFERENTIAL")Ë!
NULL
)

976 
dt
 = 
	`©oi
 (
tok
);

977 
	`DEBUGP
 (("Timêdif„ª¡ü»%d.\n", 
dt
));

980 
dt
 = 0;

982 i‡(
dt
 >= 0)

983 
timíow
 +
dt
;

985 
timíow
 -(-
dt
);

987 
cur
.
t°amp
 = 
timíow
;

988 
	`DEBUGP
 (("Time°amp: %ld\n", 
cur
.
t°amp
));

989 
cur
.
±y≥
 = 
TT_HOUR_MIN
;

992 i‡(!
dú
)

994 
l
 = 
dú
 = (
fûeöfo
 *)
	`xmÆloc
 ( (fileinfo));

995 
	`mem˝y
 (
l
, &
cur
,  (cur));

996 
l
->
¥ev
 =Ü->
√xt
 = 
NULL
;

1000 
cur
.
¥ev
 = 
l
;

1001 
l
->
√xt
 = (
fûeöfo
 *)
	`xmÆloc
 ( (fileinfo));

1002 
l
 =Ü->
√xt
;

1003 
	`mem˝y
 (
l
, &
cur
,  (cur));

1004 
l
->
√xt
 = 
NULL
;

1008 
	`x‰ì
 (
löe
);

1009 
löe
 = 
	`ªad_whﬁe_löe
 (
Â
);

1010 i‡(
löe
 !
NULL
)

1012 
i
 = 
	`˛ón_löe
 (
löe
);

1013 i‡(
i
 <= 0)

1016 
	`x‰ì
 (
löe
);

1022 
	`f˛o£
 (
Â
);

1023  
dú
;

1024 
	}
}

1033 
fûeöfo
 *

1034 
	$·p_∑r£_ls
 (c⁄° *
fûe
, c⁄° 
°y≥
 
sy°em_ty≥
)

1036 
sy°em_ty≥
)

1038 
ST_UNIX
:

1039  
	`·p_∑r£_unix_ls
 (
fûe
, 0);

1040 
ST_WINNT
:

1043 
FILE
 *
Â
;

1044 
c
;

1045 
Â
 = 
	`f›í
 (
fûe
, "rb");

1046 i‡(!
Â
)

1048 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

1049  
NULL
;

1051 
c
 = 
	`fgëc
(
Â
);

1052 
	`f˛o£
(
Â
);

1055 i‡(
c
 >= '0' && c <='9')

1056  
	`·p_∑r£_wö¡_ls
 (
fûe
);

1058  
	`·p_∑r£_unix_ls
 (
fûe
, 1);

1060 
ST_VMS
:

1061  
	`·p_∑r£_vms_ls
 (
fûe
);

1062 
ST_MACOS
:

1063  
	`·p_∑r£_unix_ls
 (
fûe
, 1);

1065 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("\
ÜistingÅype,Årying UnixÜistingÖarser.\n"));

1067  
	`·p_∑r£_unix_ls
 (
fûe
, 0);

1069 
	}
}

1076 
uîr_t


1077 
	$·p_ödex
 (c⁄° *
fûe
, 
uæ
 *
u
, 
fûeöfo
 *
f
)

1079 
FILE
 *
Â
;

1080 *
upwd
;

1081 *
ht˛dú
;

1082 *
ht˛fûe
;

1083 *
uæ˛fûe
;

1085 i‡(!
ouçut_°ªam
)

1087 
Â
 = 
	`f›í
 (
fûe
, "wb");

1088 i‡(!
Â
)

1090 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

1091  
FOPENERR
;

1095 
Â
 = 
ouçut_°ªam
;

1096 i‡(
u
->
u£r
)

1098 *
tmpu
, *
tmµ
;

1100 
tmpu
 = 
	`uæ_esˇ≥
 (
u
->
u£r
);

1101 
tmµ
 = 
u
->
∑sswd
 ? 
	`uæ_esˇ≥
 (u->∑sswdË: 
NULL
;

1102 i‡(
tmµ
)

1103 
upwd
 = 
	`c⁄ˇt_°rögs
 (
tmpu
, ":", 
tmµ
, "@", (*) 0);

1105 
upwd
 = 
	`c⁄ˇt_°rögs
 (
tmpu
, "@", (*) 0);

1106 
	`x‰ì
 (
tmpu
);

1107 
	`x‰ì_nuŒ
 (
tmµ
);

1110 
upwd
 = 
	`x°rdup
 ("");

1112 
ht˛dú
 = 
	`html_quŸe_°rög
 (
u
->
dú
);

1114 
	`Ârötf
 (
Â
, "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n");

1115 
	`Ârötf
 (
Â
, "<html>\n<head>\n<title>");

1116 
	`Ârötf
 (
Â
, 
	`_
("Index o‡/%†⁄ %s:%d"), 
ht˛dú
, 
u
->
ho°
, u->
p‹t
);

1117 
	`Ârötf
 (
Â
, "</title>\n</head>\n<body>\n<h1>");

1118 
	`Ârötf
 (
Â
, 
	`_
("Index o‡/%†⁄ %s:%d"), 
ht˛dú
, 
u
->
ho°
, u->
p‹t
);

1119 
	`Ârötf
 (
Â
, "</h1>\n<hr>\n<pre>\n");

1121 
f
)

1123 
	`Ârötf
 (
Â
, " ");

1124 i‡(
f
->
t°amp
 != -1)

1128 c⁄° *
m⁄ths
[] = {

1132 
time_t
 
t°amp
 = 
f
->tstamp;

1133 
tm
 *
±m
 = 
	`loˇ…ime
 (&
t°amp
);

1135 
	`Ârötf
 (
Â
, "%d %†%02d ", 
±m
->
tm_yór
 + 1900, 
m⁄ths
[±m->
tm_m⁄
],

1136 
±m
->
tm_mday
);

1137 i‡(
f
->
±y≥
 =
TT_HOUR_MIN
)

1138 
	`Ârötf
 (
Â
, "%02d:%02d ", 
±m
->
tm_hour
,Ötm->
tm_mö
);

1140 
	`Ârötf
 (
Â
, " ");

1143 
	`Ârötf
 (
Â
, 
	`_
("time unknown "));

1144 
f
->
ty≥
)

1146 
FT_PLAINFILE
:

1147 
	`Ârötf
 (
Â
, 
	`_
("File "));

1149 
FT_DIRECTORY
:

1150 
	`Ârötf
 (
Â
, 
	`_
("Directory "));

1152 
FT_SYMLINK
:

1153 
	`Ârötf
 (
Â
, 
	`_
("Link "));

1156 
	`Ârötf
 (
Â
, 
	`_
("Not sure "));

1159 
ht˛fûe
 = 
	`html_quŸe_°rög
 (
f
->
«me
);

1160 
uæ˛fûe
 = 
	`uæ_esˇ≥_unß„_™d_ª£rved
 (
f
->
«me
);

1161 
	`Ârötf
 (
Â
, "<®hªf=\"·p://%s%s:%d", 
upwd
, 
u
->
ho°
, u->
p‹t
);

1162 i‡(*
u
->
dú
 != '/')

1163 
	`putc
 ('/', 
Â
);

1168 
	`Ârötf
 (
Â
, "%s", 
ht˛dú
);

1169 i‡(*
u
->
dú
)

1170 
	`putc
 ('/', 
Â
);

1171 
	`Ârötf
 (
Â
, "%s", 
uæ˛fûe
);

1172 i‡(
f
->
ty≥
 =
FT_DIRECTORY
)

1173 
	`putc
 ('/', 
Â
);

1174 
	`Ârötf
 (
Â
, "\">%s", 
ht˛fûe
);

1175 i‡(
f
->
ty≥
 =
FT_DIRECTORY
)

1176 
	`putc
 ('/', 
Â
);

1177 
	`Ârötf
 (
Â
, "</a> ");

1178 i‡(
f
->
ty≥
 =
FT_PLAINFILE
)

1179 
	`Ârötf
 (
Â
, 
	`_
(" (%†byãs)"), 
	`numbî_to_°©ic_°rög
 (
f
->
size
));

1180 i‡(
f
->
ty≥
 =
FT_SYMLINK
)

1181 
	`Ârötf
 (
Â
, "-> %s", 
f
->
lökto
 ? f->linkto : "(nil)");

1182 
	`putc
 ('\n', 
Â
);

1183 
	`x‰ì
 (
ht˛fûe
);

1184 
	`x‰ì
 (
uæ˛fûe
);

1185 
f
 = f->
√xt
;

1187 
	`Ârötf
 (
Â
, "</pre>\n</body>\n</html>\n");

1188 
	`x‰ì
 (
ht˛dú
);

1189 
	`x‰ì
 (
upwd
);

1190 i‡(!
ouçut_°ªam
)

1191 
	`f˛o£
 (
Â
);

1193 
	`fÊush
 (
Â
);

1194  
FTPOK
;

1195 
	}
}

	@src/ftp-opie.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

37 
	~"md5.h
"

38 
	~"·p.h
"

42 
	gWp
[2048][4] = {

2097 
uöt32_t


2098 
	$exåa˘
 (c⁄° *
s
, 
°¨t
, 
Àngth
)

2100 
˛
 = 
s
[
°¨t
 / 8];

2101 
cc
 = 
s
[
°¨t
 / 8 + 1];

2102 
¸
 = 
s
[
°¨t
 / 8 + 2];

2103 
uöt32_t
 
x
;

2104 
x
 = (
uöt32_t
)(
˛
 << 8 | 
cc
Ë<< 8 | 
¸
;

2105 
x
 >>24 - (
Àngth
 + (
°¨t
 % 8));

2106 
x
 &(0xfff‡>> (16 - 
Àngth
));

2107  
x
;

2108 
	}
}

2113 
	#STRLEN_1_4
(
s
Ë(!(s)[1] ? 1 : !(s)[2] ? 2 : !(s)[3] ? 3 : 4)

	)

2119 
	$bt€
 (*
°‹e
, c⁄° *
c
)

2121 
˝
[10];

2123 
p
, 
i
;

2124 *
°‹e_beg
 = 
°‹e
;

2126 *
°‹e
 = '\0';

2129 
	`xzîo
 (
˝
);

2130 
	`mem˝y
 (
˝
, 
c
, 8);

2133 
p
 = 0, 
i
 = 0; i < 64; i += 2)

2134 
p
 +
	`exåa˘
 (
˝
, 
i
, 2);

2135 
˝
[8] = ()
p
 << 6;

2142 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 0, 11)][0], 4);

2143 
°‹e
 +
	`STRLEN_1_4
 (store);

2144 *
°‹e
++ = ' ';

2145 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 11, 11)][0], 4);

2146 
°‹e
 +
	`STRLEN_1_4
 (store);

2147 *
°‹e
++ = ' ';

2148 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 22, 11)][0], 4);

2149 
°‹e
 +
	`STRLEN_1_4
 (store);

2150 *
°‹e
++ = ' ';

2151 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 33, 11)][0], 4);

2152 
°‹e
 +
	`STRLEN_1_4
 (store);

2153 *
°‹e
++ = ' ';

2154 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 44, 11)][0], 4);

2155 
°‹e
 +
	`STRLEN_1_4
 (store);

2156 *
°‹e
++ = ' ';

2157 
	`mem˝y
 (
°‹e
, &
Wp
[
	`exåa˘
 (
˝
, 55, 11)][0], 4);

2158 
°‹e
[4] = '\0';

2160 
	`DEBUGP
 (("wrŸê%†tÿSTORE\n", 
	`quŸe
 (
°‹e_beg
)));

2161  
°‹e_beg
;

2162 
	}
}

2191 
	$skey_ª•⁄£
 (
£quí˚
, c⁄° *
£ed
, c⁄° *
∑ss
)

2193 
key
[8];

2197 
íglish
[30];

2199 
md5_˘x
 
˘x
;

2200 
uöt32_t
 
checksum
[4];

2202 
	`md5_öô_˘x
 (&
˘x
);

2203 
	`md5_¥o˚ss_byãs
 ((c⁄° *Ë
£ed
, 
	`°æí
 (£ed), &
˘x
);

2204 
	`md5_¥o˚ss_byãs
 ((c⁄° *Ë
∑ss
, 
	`°æí
 (∑ss), &
˘x
);

2205 
	`md5_föish_˘x
 (&
˘x
, (*Ë
checksum
);

2206 
checksum
[0] ^= checksum[2];

2207 
checksum
[1] ^= checksum[3];

2208 
	`mem˝y
 (
key
, 
checksum
, 8);

2210 
£quí˚
-- > 0)

2212 
	`md5_öô_˘x
 (&
˘x
);

2213 
	`md5_¥o˚ss_byãs
 ((*Ë
key
, 8, &
˘x
);

2214 
	`md5_föish_˘x
 (&
˘x
, (*Ë
checksum
);

2215 
checksum
[0] ^= checksum[2];

2216 
checksum
[1] ^= checksum[3];

2217 
	`mem˝y
 (
key
, 
checksum
, 8);

2219  
	`bt€
 (
íglish
, 
key
);

2220 
	}
}

	@src/ftp.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<°rögs.h
>

38 
	~<uni°d.h
>

39 
	~<as£π.h
>

40 
	~<î∫o.h
>

41 
	~<time.h
>

43 
	~"utûs.h
"

44 
	~"uæ.h
"

45 
	~"ªå.h
"

46 
	~"·p.h
"

47 
	~"c⁄√˘.h
"

48 
	~"ho°.h
"

49 
	~"√åc.h
"

50 
	~"c⁄vît.h
"

51 
	~"ªcur.h
"

53 #ifde‡
__VMS


54 
	~"vms.h
"

59 #ifde‡
MSDOS


60 
	#LIST_FILENAME
 "_li°ög"

	)

62 
	#LIST_FILENAME
 ".li°ög"

	)

67 
	m°
;

68 
	mcmd
;

69 
	mcsock
;

70 
	md…ime
;

71 
°y≥
 
	mrs
;

72 *
	mid
;

73 *
	mèrgë
;

74 
uæ
 *
	m¥oxy
;

75 } 
	tcc⁄
;

77 
numuæs
;

82 
wgöt


83 
	$·p_ex≥˘ed_byãs
 (c⁄° *
s
)

85 
wgöt
 
ªs
;

89 *
s
 && *s != '(')

90 ++
s
;

91 i‡(!*
s
)

93 ++
s
;

94 
ªs
 = 
	`°r_to_wgöt
 (
s
, (**) &s, 10);

95 i‡(!*
s
)

97 *
s
 && 
	`c_is•a˚
 (*s))

98 ++
s
;

99 i‡(!*
s
)

101 i‡(
	`c_tﬁowî
 (*
s
) != 'b')

103 i‡(
	`°∫ˇ£cmp
 (
s
, "byte", 4))

108  
ªs
;

109 
	}
}

111 #ifde‡
ENABLE_IPV6


116 
uîr_t


117 
	$·p_do_∑sv
 (
csock
, 
ù_addªss
 *
addr
, *
p‹t
)

119 
uîr_t
 
îr
;

124 i‡(!
	`sockë_ù_addªss
 (
csock
, 
addr
, 
ENDPOINT_PEER
))

125 
	`ab‹t
 ();

130 
addr
->
Ámûy
)

132 
AF_INET
:

133 i‡(!
›t
.
£rvî_ª•⁄£
)

134 
	`logputs
 (
LOG_VERBOSE
, "==> PASV ... ");

135 
îr
 = 
	`·p_∑sv
 (
csock
, 
addr
, 
p‹t
);

137 
AF_INET6
:

138 i‡(!
›t
.
£rvî_ª•⁄£
)

139 
	`logputs
 (
LOG_VERBOSE
, "==> EPSV ... ");

140 
îr
 = 
	`·p_ïsv
 (
csock
, 
addr
, 
p‹t
);

143 i‡(
îr
 =
FTPNOPASV
)

145 i‡(!
›t
.
£rvî_ª•⁄£
)

146 
	`logputs
 (
LOG_VERBOSE
, "==> LPSV ... ");

147 
îr
 = 
	`·p_Õsv
 (
csock
, 
addr
, 
p‹t
);

151 
	`ab‹t
 ();

154  
îr
;

155 
	}
}

161 
uîr_t


162 
	$·p_do_p‹t
 (
csock
, *
loˇl_sock
)

164 
uîr_t
 
îr
;

165 
ù_addªss
 
cù
;

167 i‡(!
	`sockë_ù_addªss
 (
csock
, &
cù
, 
ENDPOINT_PEER
))

168 
	`ab‹t
 ();

173 
cù
.
Ámûy
)

175 
AF_INET
:

176 i‡(!
›t
.
£rvî_ª•⁄£
)

177 
	`logputs
 (
LOG_VERBOSE
, "==> PORT ... ");

178 
îr
 = 
	`·p_p‹t
 (
csock
, 
loˇl_sock
);

180 
AF_INET6
:

181 i‡(!
›t
.
£rvî_ª•⁄£
)

182 
	`logputs
 (
LOG_VERBOSE
, "==> EPRT ... ");

183 
îr
 = 
	`·p_ïπ
 (
csock
, 
loˇl_sock
);

186 i‡(
îr
 =
FTPPORTERR
)

188 i‡(!
›t
.
£rvî_ª•⁄£
)

189 
	`logputs
 (
LOG_VERBOSE
, "==> LPRT ... ");

190 
îr
 = 
	`·p_Õπ
 (
csock
, 
loˇl_sock
);

194 
	`ab‹t
 ();

196  
îr
;

197 
	}
}

200 
uîr_t


201 
	$·p_do_∑sv
 (
csock
, 
ù_addªss
 *
addr
, *
p‹t
)

203 i‡(!
›t
.
£rvî_ª•⁄£
)

204 
	`logputs
 (
LOG_VERBOSE
, "==> PASV ... ");

205  
	`·p_∑sv
 (
csock
, 
addr
, 
p‹t
);

206 
	}
}

208 
uîr_t


209 
	$·p_do_p‹t
 (
csock
, *
loˇl_sock
)

211 i‡(!
›t
.
£rvî_ª•⁄£
)

212 
	`logputs
 (
LOG_VERBOSE
, "==> PORT ... ");

213  
	`·p_p‹t
 (
csock
, 
loˇl_sock
);

214 
	}
}

218 
	$¥öt_Àngth
 (
wgöt
 
size
, wgöà
°¨t
, 
boﬁ
 
auth‹ô©ive
)

220 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Lígth: %s"), 
	`numbî_to_°©ic_°rög
 (
size
));

221 i‡(
size
 >= 1024)

222 
	`log¥ötf
 (
LOG_VERBOSE
, " (%s)", 
	`hum™_ªadabÀ
 (
size
));

223 i‡(
°¨t
 > 0)

225 i‡(
size
 - 
°¨t
 >= 1024)

226 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
(", %s (%s)Ñemaining"),

227 
	`numbî_to_°©ic_°rög
 (
size
 - 
°¨t
),

228 
	`hum™_ªadabÀ
 (
size
 - 
°¨t
));

230 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
(", %sÑemaining"),

231 
	`numbî_to_°©ic_°rög
 (
size
 - 
°¨t
));

233 
	`logputs
 (
LOG_VERBOSE
, !
auth‹ô©ive
 ? 
	`_
(" (unauthoritative)\n") : "\n");

234 
	}
}

236 
uîr_t
 
·p_gë_li°ög
 (
uæ
 *, 
cc⁄
 *, 
fûeöfo
 **);

241 
uîr_t


242 
	$gë·p
 (
uæ
 *
u
, 
wgöt
 
∑s£d_ex≥˘ed_byãs
, wgöà*
qtyªad
,

243 
wgöt
 
ª°vÆ
, 
cc⁄
 *
c⁄
, 
cou¡
)

245 
csock
, 
dtsock
, 
loˇl_sock
, 
ªs
;

246 
uîr_t
 
îr
 = 
RETROK
;

247 
FILE
 *
Â
;

248 *
u£r
, *
∑sswd
, *
ª•löe
;

249 *
tms
;

250 c⁄° *
tmøã
;

251 
cmd
 = 
c⁄
->cmd;

252 
boﬁ
 
∑sv_mode_›í
 = 
Ál£
;

253 
wgöt
 
ex≥˘ed_byãs
 = 0;

254 
boﬁ
 
gŸ_ex≥˘ed_byãs
 = 
Ál£
;

255 
boﬁ
 
ª°_Áûed
 = 
Ál£
;

256 
Êags
;

257 
wgöt
 
rd_size
;

258 
ty≥_ch¨
;

260 
	`as£π
 (
c⁄
 !
NULL
);

261 
	`as£π
 (
c⁄
->
èrgë
 !
NULL
);

266 
	`as£π
 (!((
cmd
 & 
DO_LIST
Ë&& (cmd & 
DO_RETR
)));

268 
	`as£π
 ((
cmd
 & (
DO_LIST
 | 
DO_CWD
 | 
DO_RETR
 | 
DO_LOGIN
)) != 0);

270 *
qtyªad
 = 
ª°vÆ
;

272 
u£r
 = 
u
->user;

273 
∑sswd
 = 
u
->passwd;

274 
	`£¨ch_√åc
 (
u
->
ho°
, (c⁄° **)&
u£r
, (c⁄° **)&
∑sswd
, 1);

275 
u£r
 = u£∏? u£∏: (
›t
.
·p_u£r
 ? opt.ftp_user : opt.user);

276 i‡(!
u£r
) user = "anonymous";

277 
∑sswd
 =Öasswd ?Öasswd : (
›t
.
·p_∑sswd
 ? opt.ftp_passwd : opt.passwd);

278 i‡(!
∑sswd
)Öasswd = "-wget@";

280 
dtsock
 = -1;

281 
loˇl_sock
 = -1;

282 
c⁄
->
d…ime
 = 0;

284 i‡(!(
cmd
 & 
DO_LOGIN
))

285 
csock
 = 
c⁄
->csock;

288 *
ho°
 = 
c⁄
->
¥oxy
 ? c⁄->¥oxy->ho° : 
u
->host;

289 
p‹t
 = 
c⁄
->
¥oxy
 ? c⁄->¥oxy->p‹à: 
u
->port;

290 *
log«me
 = 
u£r
;

292 i‡(
c⁄
->
¥oxy
)

295 
log«me
 = 
	`c⁄ˇt_°rögs
 (
u£r
, "@", 
u
->
ho°
, (*) 0);

302 
csock
 = 
	`c⁄√˘_to_ho°
 (
ho°
, 
p‹t
);

303 i‡(
csock
 =
E_HOST
)

305 i‡(
c⁄
->
¥oxy
)

306 
	`x‰ì
 (
log«me
);

308  
HOSTERR
;

310 i‡(
csock
 < 0)

312 i‡(
c⁄
->
¥oxy
)

313 
	`x‰ì
 (
log«me
);

315  (
	`ªåyabÀ_sockë_c⁄√˘_îr‹
 (
î∫o
)

316 ? 
CONERROR
 : 
CONIMPOSSIBLE
);

319 i‡(
cmd
 & 
LEAVE_PENDING
)

320 
c⁄
->
csock
 = csock;

322 
c⁄
->
csock
 = -1;

325 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Logging inás %s ... "),

326 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
u£r
));

327 i‡(
›t
.
£rvî_ª•⁄£
)

328 
	`logputs
 (
LOG_ALWAYS
, "\n");

329 
îr
 = 
	`·p_logö
 (
csock
, 
log«me
, 
∑sswd
);

331 i‡(
c⁄
->
¥oxy
)

332 
	`x‰ì
 (
log«me
);

335 
îr
)

337 
FTPRERR
:

338 
	`logputs
 (
LOG_VERBOSE
, "\n");

339 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

341 
	`fd_˛o£
 (
csock
);

342 
c⁄
->
csock
 = -1;

343  
îr
;

344 
FTPSRVERR
:

345 
	`logputs
 (
LOG_VERBOSE
, "\n");

346 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Error in server greeting.\n"));

347 
	`fd_˛o£
 (
csock
);

348 
c⁄
->
csock
 = -1;

349  
îr
;

350 
WRITEFAILED
:

351 
	`logputs
 (
LOG_VERBOSE
, "\n");

352 
	`logputs
 (
LOG_NOTQUIET
,

353 
	`_
("Write failed, closing control connection.\n"));

354 
	`fd_˛o£
 (
csock
);

355 
c⁄
->
csock
 = -1;

356  
îr
;

357 
FTPLOGREFUSED
:

358 
	`logputs
 (
LOG_VERBOSE
, "\n");

359 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("The serverÑefusesÜogin.\n"));

360 
	`fd_˛o£
 (
csock
);

361 
c⁄
->
csock
 = -1;

362  
FTPLOGREFUSED
;

363 
FTPLOGINC
:

364 
	`logputs
 (
LOG_VERBOSE
, "\n");

365 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Login incorrect.\n"));

366 
	`fd_˛o£
 (
csock
);

367 
c⁄
->
csock
 = -1;

368  
FTPLOGINC
;

369 
FTPOK
:

370 i‡(!
›t
.
£rvî_ª•⁄£
)

371 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("Logged in!\n"));

374 
	`ab‹t
 ();

377 i‡(!
›t
.
£rvî_ª•⁄£
)

378 
	`log¥ötf
 (
LOG_VERBOSE
, "==> SYST ... ");

379 
îr
 = 
	`·p_sy°
 (
csock
, &
c⁄
->
rs
);

381 
îr
)

383 
FTPRERR
:

384 
	`logputs
 (
LOG_VERBOSE
, "\n");

385 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

387 
	`fd_˛o£
 (
csock
);

388 
c⁄
->
csock
 = -1;

389  
îr
;

390 
FTPSRVERR
:

391 
	`logputs
 (
LOG_VERBOSE
, "\n");

392 
	`logputs
 (
LOG_NOTQUIET
,

393 
	`_
("ServerÉrror, can't determine systemÅype.\n"));

395 
FTPOK
:

399 
	`ab‹t
 ();

401 i‡(!
›t
.
£rvî_ª•⁄£
 && 
îr
 !
FTPSRVERR
)

402 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done. "));

406 i‡(!
›t
.
£rvî_ª•⁄£
)

407 
	`log¥ötf
 (
LOG_VERBOSE
, "==> PWD ... ");

408 
îr
 = 
	`·p_pwd
 (
csock
, &
c⁄
->
id
);

410 
îr
)

412 
FTPRERR
:

413 
	`logputs
 (
LOG_VERBOSE
, "\n");

414 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

416 
	`fd_˛o£
 (
csock
);

417 
c⁄
->
csock
 = -1;

418  
îr
;

419 
FTPSRVERR
 :

421 
	`x‰ì_nuŒ
 (
c⁄
->
id
);

422 
c⁄
->
id
 = 
	`x°rdup
 ("/");

424 
FTPOK
:

428 
	`ab‹t
 ();

443 i‡(
c⁄
->
rs
 =
ST_VMS
)

445 *
∑th
 = 
	`°rchr
 (
c⁄
->
id
, '[');

446 *
∑thíd
 = 
∑th
 ? 
	`°rchr
 (∑th + 1, ']'Ë: 
NULL
;

447 i‡(!
∑th
 || !
∑thíd
)

448 
	`DEBUGP
 (("Initial VMS directoryÇot inÅhe form [...]!\n"));

451 *
idú
 = 
c⁄
->
id
;

452 
	`DEBUGP
 (("PreprocessingÅhe initial VMS directory\n"));

453 
	`DEBUGP
 ((" old = '%s'\n", 
c⁄
->
id
));

457 *
idú
++ = '/';

458 ++
∑th
;Ö©h < 
∑thíd
;Ö©h++, 
idú
++)

459 *
idú
 = *
∑th
 == '.' ? '/' : *path;

460 *
idú
 = '\0';

461 
	`DEBUGP
 (("Çew = '%s'\n\n", 
c⁄
->
id
));

466 i‡(!
›t
.
£rvî_ª•⁄£
)

467 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done.\n"));

470 
ty≥_ch¨
 = 
	`·p_¥o˚ss_ty≥
 (
u
->
∑øms
);

471 i‡(!
›t
.
£rvî_ª•⁄£
)

472 
	`log¥ötf
 (
LOG_VERBOSE
, "==> TYPE %¯... ", 
ty≥_ch¨
);

473 
îr
 = 
	`·p_ty≥
 (
csock
, 
ty≥_ch¨
);

475 
îr
)

477 
FTPRERR
:

478 
	`logputs
 (
LOG_VERBOSE
, "\n");

479 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

481 
	`fd_˛o£
 (
csock
);

482 
c⁄
->
csock
 = -1;

483  
îr
;

484 
WRITEFAILED
:

485 
	`logputs
 (
LOG_VERBOSE
, "\n");

486 
	`logputs
 (
LOG_NOTQUIET
,

487 
	`_
("Write failed, closing control connection.\n"));

488 
	`fd_˛o£
 (
csock
);

489 
c⁄
->
csock
 = -1;

490  
îr
;

491 
FTPUNKNOWNTYPE
:

492 
	`logputs
 (
LOG_VERBOSE
, "\n");

493 
	`log¥ötf
 (
LOG_NOTQUIET
,

494 
	`_
("UnknownÅype `%c', closing control connection.\n"),

495 
ty≥_ch¨
);

496 
	`fd_˛o£
 (
csock
);

497 
c⁄
->
csock
 = -1;

498  
îr
;

499 
FTPOK
:

503 
	`ab‹t
 ();

505 i‡(!
›t
.
£rvî_ª•⁄£
)

506 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done. "));

509 i‡(
cmd
 & 
DO_CWD
)

511 i‡(!*
u
->
dú
)

512 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("==> CWDÇotÇeeded.\n"));

515 *
èrg
 = 
NULL
;

516 
cwd_cou¡
;

517 
cwd_íd
;

518 
cwd_°¨t
;

520 *
èrgë
 = 
u
->
dú
;

522 
	`DEBUGP
 (("changing working directory\n"));

552 i‡(
èrgë
[0] != '/'

553 && !(
c⁄
->
rs
 !
ST_UNIX


554 && 
	`c_ißÕha
 (
èrgë
[0])

555 && 
èrgë
[1] == ':')

556 && (
c⁄
->
rs
 !
ST_OS400
)

557 && (
c⁄
->
rs
 !
ST_VMS
))

559 
idÀn
 = 
	`°æí
 (
c⁄
->
id
);

560 *
¡¨gë
, *
p
;

563 
idÀn
 > 0 && 
c⁄
->
id
[idlen - 1] == '/')

564 --
idÀn
;

565 
p
 = 
¡¨gë
 = (*)
	`Æloˇ
 (
idÀn
 + 1 + 
	`°æí
 (
u
->
dú
) + 1);

566 
	`mem˝y
 (
p
, 
c⁄
->
id
, 
idÀn
);

567 
p
 +
idÀn
;

568 *
p
++ = '/';

569 
	`°r˝y
 (
p
, 
èrgë
);

571 
	`DEBUGP
 (("Prepended initial PWDÅoÑelativeÖath:\n"));

572 
	`DEBUGP
 (("Öwd: '%s'\n old: '%s'\nÇew: '%s'\n",

573 
c⁄
->
id
, 
èrgë
, 
¡¨gë
));

574 
èrgë
 = 
¡¨gë
;

593 i‡(
c⁄
->
rs
 =
ST_VMS
)

595 *
tmµ
;

596 *
¡¨gë
 = (*)
	`Æloˇ
 (
	`°æí
 (
èrgë
) + 2);

601 
	`°r˝y
 (
¡¨gë
, 
èrgë
);

602 
	`as£π
 (*
¡¨gë
 == '/');

603 *
¡¨gë
 = '[';

604 
tmµ
 = 
¡¨gë
 + 1; *tmpp;Åmpp++)

605 i‡(*
tmµ
 == '/')

606 *
tmµ
 = '.';

607 *
tmµ
++ = ']';

608 *
tmµ
 = '\0';

609 
	`DEBUGP
 (("Changed fileÇameÅo VMS syntax:\n"));

610 
	`DEBUGP
 ((" Unix: '%s'\¿ VMS: '%s'\n", 
èrgë
, 
¡¨gë
));

611 
èrgë
 = 
¡¨gë
;

630 i‡((
c⁄
->
rs
 =
ST_VMS
Ë&& (
èrgë
[0] != '/'))

632 
cwd_°¨t
 = 0;

633 
	`DEBUGP
 (("UsingÅwo-step CWD forÑelativeÖath.\n"));

638 
cwd_°¨t
 = 1;

657 i‡((
c⁄
->
rs
 =
ST_VMS
Ë&& (
	`°rchr
–
èrgë
, '/'Ë!
NULL
))

659 
cwd_íd
 = 3;

660 
	`DEBUGP
 (("UsingÉxtra \"CWD []\" step for VMS server.\n"));

664 
cwd_íd
 = 2;

670 
cwd_cou¡
 = 
cwd_°¨t
; cwd_cou¡ < 
cwd_íd
; cwd_count++)

672 
cwd_cou¡
)

678 
èrg
 = 
c⁄
->
id
;

685 
èrg
 = 
èrgë
;

692 
èrg
 = "[]";

697 
	`as£π
 (1);

700 i‡(!
›t
.
£rvî_ª•⁄£
)

701 
	`log¥ötf
 (
LOG_VERBOSE
, "==> CWD (%dË%†... ", 
cwd_cou¡
,

702 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
èrgë
));

703 
îr
 = 
	`·p_cwd
 (
csock
, 
èrg
);

705 
îr
)

707 
FTPRERR
:

708 
	`logputs
 (
LOG_VERBOSE
, "\n");

709 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

711 
	`fd_˛o£
 (
csock
);

712 
c⁄
->
csock
 = -1;

713  
îr
;

714 
WRITEFAILED
:

715 
	`logputs
 (
LOG_VERBOSE
, "\n");

716 
	`logputs
 (
LOG_NOTQUIET
,

717 
	`_
("Write failed, closing control connection.\n"));

718 
	`fd_˛o£
 (
csock
);

719 
c⁄
->
csock
 = -1;

720  
îr
;

721 
FTPNSFOD
:

722 
	`logputs
 (
LOG_VERBOSE
, "\n");

723 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No such directory %s.\n\n"),

724 
	`quŸe
 (
u
->
dú
));

725 
	`fd_˛o£
 (
csock
);

726 
c⁄
->
csock
 = -1;

727  
îr
;

728 
FTPOK
:

731 
	`ab‹t
 ();

733 i‡(!
›t
.
£rvî_ª•⁄£
)

734 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done.\n"));

744 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("==> CWDÇotÑequired.\n"));

746 i‡((
cmd
 & 
DO_RETR
Ë&& 
∑s£d_ex≥˘ed_byãs
 == 0)

748 i‡(
›t
.
vîbo£
)

750 i‡(!
›t
.
£rvî_ª•⁄£
)

751 
	`log¥ötf
 (
LOG_VERBOSE
, "==> SIZE %s ... ",

752 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
u
->
fûe
));

755 
îr
 = 
	`·p_size
 (
csock
, 
u
->
fûe
, &
ex≥˘ed_byãs
);

757 
îr
)

759 
FTPRERR
:

760 
FTPSRVERR
:

761 
	`logputs
 (
LOG_VERBOSE
, "\n");

762 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

764 
	`fd_˛o£
 (
csock
);

765 
c⁄
->
csock
 = -1;

766  
îr
;

767 
FTPOK
:

768 
gŸ_ex≥˘ed_byãs
 = 
åue
;

772 
	`ab‹t
 ();

774 i‡(!
›t
.
£rvî_ª•⁄£
)

775 
	`log¥ötf
 (
LOG_VERBOSE
, 
ex≥˘ed_byãs
 ? "%s\n" : 
	`_
("done.\n"),

776 
	`numbî_to_°©ic_°rög
 (
ex≥˘ed_byãs
));

779 i‡(
cmd
 & 
DO_RETR
 && 
ª°vÆ
 > 0 &&Ñe°vÆ =
ex≥˘ed_byãs
)

783 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("File hasálready beenÑetrieved.\n"));

784 
	`fd_˛o£
 (
csock
);

785 
c⁄
->
csock
 = -1;

786  
RETRFINISHED
;

790 i‡(
cmd
 & (
DO_LIST
 | 
DO_RETR
))

792 i‡(
›t
.
·p_∑sv
)

794 
ù_addªss
 
∑ssive_addr
;

795 
∑ssive_p‹t
;

796 
îr
 = 
	`·p_do_∑sv
 (
csock
, &
∑ssive_addr
, &
∑ssive_p‹t
);

798 
îr
)

800 
FTPRERR
:

801 
	`logputs
 (
LOG_VERBOSE
, "\n");

802 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

804 
	`fd_˛o£
 (
csock
);

805 
c⁄
->
csock
 = -1;

806  
îr
;

807 
WRITEFAILED
:

808 
	`logputs
 (
LOG_VERBOSE
, "\n");

809 
	`logputs
 (
LOG_NOTQUIET
,

810 
	`_
("Write failed, closing control connection.\n"));

811 
	`fd_˛o£
 (
csock
);

812 
c⁄
->
csock
 = -1;

813  
îr
;

814 
FTPNOPASV
:

815 
	`logputs
 (
LOG_VERBOSE
, "\n");

816 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Cannot initiate PASVÅransfer.\n"));

818 
FTPINVPASV
:

819 
	`logputs
 (
LOG_VERBOSE
, "\n");

820 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("CannotÖarse PASVÑesponse.\n"));

822 
FTPOK
:

825 
	`ab‹t
 ();

827 i‡(
îr
==
FTPOK
)

829 
	`DEBUGP
 (("tryingÅo connectÅo %sÖort %d\n",

830 
	`¥öt_addªss
 (&
∑ssive_addr
), 
∑ssive_p‹t
));

831 
dtsock
 = 
	`c⁄√˘_to_ù
 (&
∑ssive_addr
, 
∑ssive_p‹t
, 
NULL
);

832 i‡(
dtsock
 < 0)

834 
ßve_î∫o
 = 
î∫o
;

835 
	`fd_˛o£
 (
csock
);

836 
c⁄
->
csock
 = -1;

837 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("couldn't connectÅo %sÖort %d: %s\n"),

838 
	`¥öt_addªss
 (&
∑ssive_addr
), 
∑ssive_p‹t
,

839 
	`°ªº‹
 (
ßve_î∫o
));

840  (
	`ªåyabÀ_sockë_c⁄√˘_îr‹
 (
ßve_î∫o
)

841 ? 
CONERROR
 : 
CONIMPOSSIBLE
);

844 
∑sv_mode_›í
 = 
åue
;

845 i‡(!
›t
.
£rvî_ª•⁄£
)

846 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done. "));

850 i‡(!
∑sv_mode_›í
)

852 
îr
 = 
	`·p_do_p‹t
 (
csock
, &
loˇl_sock
);

855 
îr
)

857 
FTPRERR
:

858 
	`logputs
 (
LOG_VERBOSE
, "\n");

859 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

861 
	`fd_˛o£
 (
csock
);

862 
c⁄
->
csock
 = -1;

863 
	`fd_˛o£
 (
dtsock
);

864 
	`fd_˛o£
 (
loˇl_sock
);

865  
îr
;

866 
WRITEFAILED
:

867 
	`logputs
 (
LOG_VERBOSE
, "\n");

868 
	`logputs
 (
LOG_NOTQUIET
,

869 
	`_
("Write failed, closing control connection.\n"));

870 
	`fd_˛o£
 (
csock
);

871 
c⁄
->
csock
 = -1;

872 
	`fd_˛o£
 (
dtsock
);

873 
	`fd_˛o£
 (
loˇl_sock
);

874  
îr
;

875 
CONSOCKERR
:

876 
	`logputs
 (
LOG_VERBOSE
, "\n");

877 
	`log¥ötf
 (
LOG_NOTQUIET
, "sockë: %s\n", 
	`°ªº‹
 (
î∫o
));

878 
	`fd_˛o£
 (
csock
);

879 
c⁄
->
csock
 = -1;

880 
	`fd_˛o£
 (
dtsock
);

881 
	`fd_˛o£
 (
loˇl_sock
);

882  
îr
;

883 
FTPSYSERR
:

884 
	`logputs
 (
LOG_VERBOSE
, "\n");

885 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("BindÉrror (%s).\n"),

886 
	`°ªº‹
 (
î∫o
));

887 
	`fd_˛o£
 (
dtsock
);

888  
îr
;

889 
FTPPORTERR
:

890 
	`logputs
 (
LOG_VERBOSE
, "\n");

891 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Invalid PORT.\n"));

892 
	`fd_˛o£
 (
csock
);

893 
c⁄
->
csock
 = -1;

894 
	`fd_˛o£
 (
dtsock
);

895 
	`fd_˛o£
 (
loˇl_sock
);

896  
îr
;

897 
FTPOK
:

900 
	`ab‹t
 ();

902 i‡(!
›t
.
£rvî_ª•⁄£
)

903 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done. "));

908 i‡(
ª°vÆ
 && (
cmd
 & 
DO_RETR
))

910 i‡(!
›t
.
£rvî_ª•⁄£
)

911 
	`log¥ötf
 (
LOG_VERBOSE
, "==> REST %s ... ",

912 
	`numbî_to_°©ic_°rög
 (
ª°vÆ
));

913 
îr
 = 
	`·p_ª°
 (
csock
, 
ª°vÆ
);

916 
îr
)

918 
FTPRERR
:

919 
	`logputs
 (
LOG_VERBOSE
, "\n");

920 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

922 
	`fd_˛o£
 (
csock
);

923 
c⁄
->
csock
 = -1;

924 
	`fd_˛o£
 (
dtsock
);

925 
	`fd_˛o£
 (
loˇl_sock
);

926  
îr
;

927 
WRITEFAILED
:

928 
	`logputs
 (
LOG_VERBOSE
, "\n");

929 
	`logputs
 (
LOG_NOTQUIET
,

930 
	`_
("Write failed, closing control connection.\n"));

931 
	`fd_˛o£
 (
csock
);

932 
c⁄
->
csock
 = -1;

933 
	`fd_˛o£
 (
dtsock
);

934 
	`fd_˛o£
 (
loˇl_sock
);

935  
îr
;

936 
FTPRESTFAIL
:

937 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("\nREST failed, starting from scratch.\n"));

938 
ª°_Áûed
 = 
åue
;

940 
FTPOK
:

943 
	`ab‹t
 ();

945 i‡(
îr
 !
FTPRESTFAIL
 && !
›t
.
£rvî_ª•⁄£
)

946 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done. "));

949 i‡(
cmd
 & 
DO_RETR
)

953 i‡(
›t
.
•idî
)

955 
boﬁ
 
exi°s
 = 
Ál£
;

956 
uîr_t
 
ªs
;

957 
fûeöfo
 *
f
;

958 
ªs
 = 
	`·p_gë_li°ög
 (
u
, 
c⁄
, &
f
);

963 
c⁄
->
cmd
 |
DO_RETR
;

964 i‡(
ªs
 =
RETROK
)

966 
f
)

968 i‡(!
	`°rcmp
 (
f
->
«me
, 
u
->
fûe
))

970 
exi°s
 = 
åue
;

973 
f
 = f->
√xt
;

975 i‡(
exi°s
)

977 
	`logputs
 (
LOG_VERBOSE
, "\n");

978 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("File %sÉxists.\n"),

979 
	`quŸe
 (
u
->
fûe
));

983 
	`logputs
 (
LOG_VERBOSE
, "\n");

984 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No such file %s.\n"),

985 
	`quŸe
 (
u
->
fûe
));

988 
	`fd_˛o£
 (
csock
);

989 
c⁄
->
csock
 = -1;

990 
	`fd_˛o£
 (
dtsock
);

991 
	`fd_˛o£
 (
loˇl_sock
);

992  
RETRFINISHED
;

995 i‡(
›t
.
vîbo£
)

997 i‡(!
›t
.
£rvî_ª•⁄£
)

999 i‡(
ª°vÆ
)

1000 
	`logputs
 (
LOG_VERBOSE
, "\n");

1001 
	`log¥ötf
 (
LOG_VERBOSE
, "==> RETR %s ... ",

1002 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
u
->
fûe
));

1006 
îr
 = 
	`·p_ªå
 (
csock
, 
u
->
fûe
);

1008 
îr
)

1010 
FTPRERR
:

1011 
	`logputs
 (
LOG_VERBOSE
, "\n");

1012 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

1014 
	`fd_˛o£
 (
csock
);

1015 
c⁄
->
csock
 = -1;

1016 
	`fd_˛o£
 (
dtsock
);

1017 
	`fd_˛o£
 (
loˇl_sock
);

1018  
îr
;

1019 
WRITEFAILED
:

1020 
	`logputs
 (
LOG_VERBOSE
, "\n");

1021 
	`logputs
 (
LOG_NOTQUIET
,

1022 
	`_
("Write failed, closing control connection.\n"));

1023 
	`fd_˛o£
 (
csock
);

1024 
c⁄
->
csock
 = -1;

1025 
	`fd_˛o£
 (
dtsock
);

1026 
	`fd_˛o£
 (
loˇl_sock
);

1027  
îr
;

1028 
FTPNSFOD
:

1029 
	`logputs
 (
LOG_VERBOSE
, "\n");

1030 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No such file %s.\n\n"),

1031 
	`quŸe
 (
u
->
fûe
));

1032 
	`fd_˛o£
 (
dtsock
);

1033 
	`fd_˛o£
 (
loˇl_sock
);

1034  
îr
;

1035 
FTPOK
:

1038 
	`ab‹t
 ();

1041 i‡(!
›t
.
£rvî_ª•⁄£
)

1042 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done.\n"));

1044 i‡(! 
gŸ_ex≥˘ed_byãs
)

1045 
ex≥˘ed_byãs
 = 
	`·p_ex≥˘ed_byãs
 (
·p_œ°_ª•löe
);

1048 i‡(
cmd
 & 
DO_LIST
)

1050 i‡(!
›t
.
£rvî_ª•⁄£
)

1051 
	`logputs
 (
LOG_VERBOSE
, "==> LIST ... ");

1055 
îr
 = 
	`·p_li°
 (
csock
, 
NULL
, 
c⁄
->
rs
);

1057 
îr
)

1059 
FTPRERR
:

1060 
	`logputs
 (
LOG_VERBOSE
, "\n");

1061 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
 in serverÑesponse, closing control connection.\n"));

1063 
	`fd_˛o£
 (
csock
);

1064 
c⁄
->
csock
 = -1;

1065 
	`fd_˛o£
 (
dtsock
);

1066 
	`fd_˛o£
 (
loˇl_sock
);

1067  
îr
;

1068 
WRITEFAILED
:

1069 
	`logputs
 (
LOG_VERBOSE
, "\n");

1070 
	`logputs
 (
LOG_NOTQUIET
,

1071 
	`_
("Write failed, closing control connection.\n"));

1072 
	`fd_˛o£
 (
csock
);

1073 
c⁄
->
csock
 = -1;

1074 
	`fd_˛o£
 (
dtsock
);

1075 
	`fd_˛o£
 (
loˇl_sock
);

1076  
îr
;

1077 
FTPNSFOD
:

1078 
	`logputs
 (
LOG_VERBOSE
, "\n");

1079 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No such file or directory %s.\n\n"),

1080 
	`quŸe
 ("."));

1081 
	`fd_˛o£
 (
dtsock
);

1082 
	`fd_˛o£
 (
loˇl_sock
);

1083  
îr
;

1084 
FTPOK
:

1087 
	`ab‹t
 ();

1089 i‡(!
›t
.
£rvî_ª•⁄£
)

1090 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("done.\n"));

1092 i‡(! 
gŸ_ex≥˘ed_byãs
)

1093 
ex≥˘ed_byãs
 = 
	`·p_ex≥˘ed_byãs
 (
·p_œ°_ª•löe
);

1096 i‡(!(
cmd
 & (
DO_LIST
 | 
DO_RETR
)Ë|| (
›t
.
•idî
 && !(cmd & DO_LIST)))

1097  
RETRFINISHED
;

1101 i‡(
∑s£d_ex≥˘ed_byãs
 && 
ª°vÆ
 && 
ex≥˘ed_byãs


1102 && (
ex≥˘ed_byãs
 =
∑s£d_ex≥˘ed_byãs
 - 
ª°vÆ
))

1104 
	`DEBUGP
 (("Lying FTP server found,ádjusting.\n"));

1105 
ex≥˘ed_byãs
 = 
∑s£d_ex≥˘ed_byãs
;

1109 i‡(!
∑sv_mode_›í
)

1114 
dtsock
 = 
	`ac˚±_c⁄√˘i⁄
 (
loˇl_sock
);

1115 i‡(
dtsock
 < 0)

1117 
	`log¥ötf
 (
LOG_NOTQUIET
, "ac˚±: %s\n", 
	`°ªº‹
 (
î∫o
));

1118  
CONERROR
;

1131 i‡(!
ouçut_°ªam
 || 
c⁄
->
cmd
 & 
DO_LIST
)

1134 #ifde‡
__VMS


1135 *
èrg
;

1137 
èrg
 = 
	`ods_c⁄f‹m
 (
c⁄
->
èrgë
);

1138 i‡(
èrg
 !
c⁄
->
èrgë
)

1140 
	`x‰ì
 (
c⁄
->
èrgë
);

1141 
c⁄
->
èrgë
 = 
èrg
;

1145 
	`mkÆldús
 (
c⁄
->
èrgë
);

1146 i‡(
›t
.
backups
)

1147 
	`rŸ©e_backups
 (
c⁄
->
èrgë
);

1155 
	#BIN_TYPE_TRANSFER
 (
ty≥_ch¨
 !'A')

	)

1156 #ifde‡
__VMS


1157 
	#FOPEN_OPT_ARGS
 "f›=sqo", "acc", 
acc_cb
, &
›í_id


	)

1158 
	#FOPEN_OPT_ARGS_BIN
 "˘x=bö,°m", "rfm=fix", "mrs=512" 
FOPEN_OPT_ARGS


	)

1159 
	#BIN_TYPE_FILE
 (
BIN_TYPE_TRANSFER
 && (
›t
.
·p_°mlf
 =0))

	)

1161 
	#BIN_TYPE_FILE
 1

	)

1164 i‡(
ª°vÆ
 && !(
c⁄
->
cmd
 & 
DO_LIST
))

1166 #ifde‡
__VMS


1167 
›í_id
;

1169 i‡(
BIN_TYPE_FILE
)

1171 
›í_id
 = 3;

1172 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "ab", 
FOPEN_OPT_ARGS_BIN
);

1176 
›í_id
 = 4;

1177 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "a", 
FOPEN_OPT_ARGS
);

1180 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "ab");

1183 i‡(
›t
.
no˛obbî
 || o±.
Æways_ª°
 || o±.
time°ampög
 || o±.
dú°ru˘


1184 || 
›t
.
ouçut_documít
 || 
cou¡
 > 0)

1186 i‡(
›t
.
u∆ök
 && 
	`fûe_exi°s_p
 (
c⁄
->
èrgë
))

1188 
ªs
 = 
	`u∆ök
 (
c⁄
->
èrgë
);

1189 i‡(
ªs
 < 0)

1191 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
c⁄
->
èrgë
,

1192 
	`°ªº‹
 (
î∫o
));

1193 
	`fd_˛o£
 (
csock
);

1194 
c⁄
->
csock
 = -1;

1195 
	`fd_˛o£
 (
dtsock
);

1196 
	`fd_˛o£
 (
loˇl_sock
);

1197  
UNLINKERR
;

1201 #ifde‡
__VMS


1202 
›í_id
;

1204 i‡(
BIN_TYPE_FILE
)

1206 
›í_id
 = 5;

1207 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "wb", 
FOPEN_OPT_ARGS_BIN
);

1211 
›í_id
 = 6;

1212 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "w", 
FOPEN_OPT_ARGS
);

1215 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "wb");

1220 
Â
 = 
	`f›í_ex˛
 (
c⁄
->
èrgë
, 
åue
);

1221 i‡(!
Â
 && 
î∫o
 =
EEXIST
)

1227 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s has sprung intoÉxistence.\n"),

1228 
c⁄
->
èrgë
);

1229 
	`fd_˛o£
 (
csock
);

1230 
c⁄
->
csock
 = -1;

1231 
	`fd_˛o£
 (
dtsock
);

1232 
	`fd_˛o£
 (
loˇl_sock
);

1233  
FOPEN_EXCL_ERR
;

1236 i‡(!
Â
)

1238 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
c⁄
->
èrgë
, 
	`°ªº‹
 (
î∫o
));

1239 
	`fd_˛o£
 (
csock
);

1240 
c⁄
->
csock
 = -1;

1241 
	`fd_˛o£
 (
dtsock
);

1242 
	`fd_˛o£
 (
loˇl_sock
);

1243  
FOPENERR
;

1247 
Â
 = 
ouçut_°ªam
;

1249 i‡(
∑s£d_ex≥˘ed_byãs
)

1251 
	`¥öt_Àngth
 (
∑s£d_ex≥˘ed_byãs
, 
ª°vÆ
, 
åue
);

1252 
ex≥˘ed_byãs
 = 
∑s£d_ex≥˘ed_byãs
;

1255 i‡(
ex≥˘ed_byãs
)

1256 
	`¥öt_Àngth
 (
ex≥˘ed_byãs
, 
ª°vÆ
, 
Ál£
);

1259 
Êags
 = 0;

1260 i‡(
ª°vÆ
 && 
ª°_Áûed
)

1261 
Êags
 |
rb_skù_°¨ços
;

1262 
rd_size
 = 0;

1263 
ªs
 = 
	`fd_ªad_body
 (
dtsock
, 
Â
,

1264 
ex≥˘ed_byãs
 ?Éx≥˘ed_byã†- 
ª°vÆ
 : 0,

1265 
ª°vÆ
, &
rd_size
, 
qtyªad
, &
c⁄
->
d…ime
, 
Êags
);

1267 
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

1268 
tmøã
 = 
	`ªå_øã
 (
rd_size
, 
c⁄
->
d…ime
);

1269 
tŸÆ_dow∆ﬂd_time
 +
c⁄
->
d…ime
;

1271 
	`fd_˛o£
 (
loˇl_sock
);

1273 i‡(!
ouçut_°ªam
 || 
c⁄
->
cmd
 & 
DO_LIST
)

1274 
	`f˛o£
 (
Â
);

1277 i‡(
ªs
 == -2)

1279 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: %s, closing control connection.\n"),

1280 
c⁄
->
èrgë
, 
	`°ªº‹
 (
î∫o
));

1281 
	`fd_˛o£
 (
csock
);

1282 
c⁄
->
csock
 = -1;

1283 
	`fd_˛o£
 (
dtsock
);

1284  
FWRITEERR
;

1286 i‡(
ªs
 == -1)

1288 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s (%s) - Data connection: %s; "),

1289 
tms
, 
tmøã
, 
	`fd_îr°r
 (
dtsock
));

1290 i‡(
›t
.
£rvî_ª•⁄£
)

1291 
	`logputs
 (
LOG_ALWAYS
, "\n");

1293 
	`fd_˛o£
 (
dtsock
);

1296 
îr
 = 
	`·p_ª•⁄£
 (
csock
, &
ª•löe
);

1297 i‡(
îr
 !
FTPOK
)

1301 i‡(
ªs
 != -1)

1302 
	`log¥ötf
 (
LOG_NOTQUIET
, "%†(%sË- ", 
tms
, 
tmøã
);

1303 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Control connection closed.\n"));

1308 
	`fd_˛o£
 (
csock
);

1309 
c⁄
->
csock
 = -1;

1310  
FTPRETRINT
;

1316 i‡(*
ª•löe
 != '2')

1318 
	`x‰ì
 (
ª•löe
);

1319 i‡(
ªs
 != -1)

1320 
	`log¥ötf
 (
LOG_NOTQUIET
, "%†(%sË- ", 
tms
, 
tmøã
);

1321 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("DataÅransferáborted.\n"));

1322  
FTPRETRINT
;

1324 
	`x‰ì
 (
ª•löe
);

1326 i‡(
ªs
 == -1)

1330  
FTPRETRINT
;

1333 i‡(!(
cmd
 & 
LEAVE_PENDING
))

1337 
	`fd_˛o£
 (
csock
);

1338 
c⁄
->
csock
 = -1;

1342 i‡(
›t
.
£rvî_ª•⁄£
 && (
c⁄
->
cmd
 & 
DO_LIST
))

1349 #ifde‡
__VMS


1350 *
èrg
;

1352 
èrg
 = 
	`ods_c⁄f‹m
–
c⁄
->
èrgë
);

1353 i‡(
èrg
 !
c⁄
->
èrgë
)

1355 
	`x‰ì
–
c⁄
->
èrgë
);

1356 
c⁄
->
èrgë
 = 
èrg
;

1360 
	`mkÆldús
 (
c⁄
->
èrgë
);

1361 
Â
 = 
	`f›í
 (
c⁄
->
èrgë
, "r");

1362 i‡(!
Â
)

1363 
	`log¥ötf
 (
LOG_ALWAYS
, "%s: %s\n", 
c⁄
->
èrgë
, 
	`°ªº‹
 (
î∫o
));

1366 *
löe
;

1369 (
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
)

1371 *
p
 = 
	`°rchr
 (
löe
, '\0');

1372 
p
 > 
löe
 && (p[-1] == '\n' ||Ö[-1] == '\r'))

1373 *--
p
 = '\0';

1374 
	`log¥ötf
 (
LOG_ALWAYS
, "%s\n",

1375 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
löe
));

1376 
	`x‰ì
 (
löe
);

1378 
	`f˛o£
 (
Â
);

1382  
RETRFINISHED
;

1383 
	}
}

1390 
uîr_t


1391 
	$·p_lo›_öã∫Æ
 (
uæ
 *
u
, 
fûeöfo
 *
f
, 
cc⁄
 *
c⁄
, **
loˇl_fûe
)

1393 
cou¡
, 
‹ig_Õ
;

1394 
wgöt
 
ª°vÆ
, 
Àn
 = 0, 
qtyªad
 = 0;

1395 *
tms
, *
locf
;

1396 c⁄° *
tmøã
 = 
NULL
;

1397 
uîr_t
 
îr
;

1398 
°ru˘_°©
 
°
;

1401 i‡((
f
 =
NULL
Ë&& (
c⁄
->
èrgë
))

1404 
locf
 = 
c⁄
->
èrgë
;

1409 
c⁄
->
èrgë
 = 
	`uæ_fûe_«me
 (
u
, 
NULL
);

1410 i‡(!
›t
.
ouçut_documít
)

1411 
locf
 = 
c⁄
->
èrgë
;

1413 
locf
 = 
›t
.
ouçut_documít
;

1418 i‡(
›t
.
no˛obbî
 && !›t.
ouçut_documít
 && 
	`fûe_exi°s_p
 (
c⁄
->
èrgë
))

1420 
	`log¥ötf
 (
LOG_VERBOSE
,

1421 
	`_
("Fûê%†ÆªadyÅhîe;ÇŸÑërõvög.\n"), 
	`quŸe
 (
c⁄
->
èrgë
));

1423  
RETROK
;

1427 
	`ªmove_lök
 (
c⁄
->
èrgë
);

1429 
cou¡
 = 0;

1431 i‡(
c⁄
->
°
 & 
ON_YOUR_OWN
)

1432 
c⁄
->
°
 = 
ON_YOUR_OWN
;

1434 
‹ig_Õ
 = 
c⁄
->
cmd
 & 
LEAVE_PENDING
 ? 1 : 0;

1440 ++
cou¡
;

1441 
	`¶ìp_bëwìn_ªåõvÆs
 (
cou¡
);

1442 i‡(
c⁄
->
°
 & 
ON_YOUR_OWN
)

1444 
c⁄
->
cmd
 = 0;

1445 
c⁄
->
cmd
 |(
DO_RETR
 | 
LEAVE_PENDING
);

1446 i‡(
c⁄
->
csock
 != -1)

1447 
c⁄
->
cmd
 &~ (
DO_LOGIN
 | 
DO_CWD
);

1449 
c⁄
->
cmd
 |(
DO_LOGIN
 | 
DO_CWD
);

1453 i‡(
c⁄
->
csock
 != -1)

1454 
c⁄
->
cmd
 &~
DO_LOGIN
;

1456 
c⁄
->
cmd
 |
DO_LOGIN
;

1457 i‡(
c⁄
->
°
 & 
DONE_CWD
)

1458 
c⁄
->
cmd
 &~
DO_CWD
;

1460 
c⁄
->
cmd
 |
DO_CWD
;

1464 i‡(
c⁄
->
cmd
 & 
DO_LIST
)

1465 
ª°vÆ
 = 0;

1466 i‡(
›t
.
Æways_ª°


1467 && 
	`°©
 (
locf
, &
°
) == 0

1468 && 
	`S_ISREG
 (
°
.
°_mode
))

1472 
ª°vÆ
 = 
°
.
°_size
;

1473 i‡(
cou¡
 > 1)

1474 
ª°vÆ
 = 
qtyªad
;

1476 
ª°vÆ
 = 0;

1479 
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

1481 i‡(
›t
.
vîbo£
)

1483 *
huæ
 = 
	`uæ_°rög
 (
u
, 
URL_AUTH_HIDE_PASSWD
);

1484 
tmp
[256];

1485 
	`°r˝y
 (
tmp
, " ");

1486 i‡(
cou¡
 > 1)

1487 
	`•rötf
 (
tmp
, 
	`_
("—ry:%2d)"), 
cou¡
);

1488 
	`log¥ötf
 (
LOG_VERBOSE
, "--%s-- %s\n %s => %s\n",

1489 
tms
, 
huæ
, 
tmp
, 
	`quŸe
 (
locf
));

1490 #ifde‡
WINDOWS


1491 
	`ws_ch™gëôÀ
 (
huæ
);

1493 
	`x‰ì
 (
huæ
);

1496 i‡(
f
 && f->
ty≥
 !
FT_SYMLINK
)

1497 
Àn
 = 
f
->
size
;

1499 
Àn
 = 0;

1500 
îr
 = 
	`gë·p
 (
u
, 
Àn
, &
qtyªad
, 
ª°vÆ
, 
c⁄
, 
cou¡
);

1502 i‡(
c⁄
->
csock
 == -1)

1503 
c⁄
->
°
 &~
DONE_CWD
;

1505 
c⁄
->
°
 |
DONE_CWD
;

1507 
îr
)

1509 
HOSTERR
: 
CONIMPOSSIBLE
: 
FWRITEERR
: 
FOPENERR
:

1510 
FTPNSFOD
: 
FTPLOGINC
: 
FTPNOPASV
: 
CONTNOTSUPPORTED
:

1511 
UNLINKERR
:

1513  
îr
;

1514 
CONSOCKERR
: 
CONERROR
: 
FTPSRVERR
: 
FTPRERR
:

1515 
WRITEFAILED
: 
FTPUNKNOWNTYPE
: 
FTPSYSERR
:

1516 
FTPPORTERR
: 
FTPLOGREFUSED
: 
FTPINVPASV
:

1517 
FOPEN_EXCL_ERR
:

1518 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

1520 i‡(
îr
 =
FOPEN_EXCL_ERR
)

1523 
	`x‰ì_nuŒ
 (
c⁄
->
èrgë
);

1524 
c⁄
->
èrgë
 = 
	`uæ_fûe_«me
 (
u
, 
NULL
);

1525 
locf
 = 
c⁄
->
èrgë
;

1528 
FTPRETRINT
:

1531 i‡(!
f
 || 
qtyªad
 !f->
size
)

1533 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

1537 
RETRFINISHED
:

1542 
	`ab‹t
 ();

1544 
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

1545 i‡(!
›t
.
•idî
)

1546 
tmøã
 = 
	`ªå_øã
 (
qtyªad
 - 
ª°vÆ
, 
c⁄
->
d…ime
);

1550 
	`dow∆ﬂded_fûe
 (
FILE_DOWNLOADED_NORMALLY
, 
locf
);

1552 i‡(
c⁄
->
°
 & 
ON_YOUR_OWN
)

1554 
	`fd_˛o£
 (
c⁄
->
csock
);

1555 
c⁄
->
csock
 = -1;

1557 i‡(!
›t
.
•idî
)

1559 
boﬁ
 
wrôe_to_°dout
 = (
›t
.
ouçut_documít
 && 
	`HYPHENP
 (opt.output_document));

1561 
	`log¥ötf
 (
LOG_VERBOSE
,

1562 
wrôe_to_°dout


1563 ? 
	`_
("%s (%s) - writtenÅo stdout %s[%s]\n\n")

1564 : 
	`_
("%s (%s) - %s saved [%s]\n\n"),

1565 
tms
, 
tmøã
,

1566 
wrôe_to_°dout
 ? "" : 
	`quŸe
 (
locf
),

1567 
	`numbî_to_°©ic_°rög
 (
qtyªad
));

1569 i‡(!
›t
.
vîbo£
 && !›t.
quõt
)

1574 *
huæ
 = 
	`uæ_°rög
 (
u
, 
URL_AUTH_HIDE_PASSWD
);

1575 
	`log¥ötf
 (
LOG_NONVERBOSE
, "%s URL: %s [%s] -> \"%s\" [%d]\n",

1576 
tms
, 
huæ
, 
	`numbî_to_°©ic_°rög
 (
qtyªad
), 
locf
, 
cou¡
);

1577 
	`x‰ì
 (
huæ
);

1580 i‡((
c⁄
->
cmd
 & 
DO_LIST
))

1583 i‡(!
›t
.
ªmove_li°ög
)

1587 
tŸÆ_dow∆ﬂded_byãs
 +
qtyªad
;

1588 
numuæs
++;

1595 i‡(!
›t
.
•idî
)

1602 
tŸÆ_dow∆ﬂded_byãs
 +
qtyªad
;

1603 
numuæs
++;

1605 i‡(
›t
.
dñëe_a·î
 && !
	`öput_fûe_uæ
 (›t.
öput_fûíame
))

1607 
	`DEBUGP
 (("\
 file dueÅo --delete-after in ftp_loop_internal():\n"));

1609 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Removög %s.\n"), 
locf
);

1610 i‡(
	`u∆ök
 (
locf
))

1611 
	`log¥ötf
 (
LOG_NOTQUIET
, "u∆ök: %s\n", 
	`°ªº‹
 (
î∫o
));

1616 i‡(
‹ig_Õ
)

1617 
c⁄
->
cmd
 |
LEAVE_PENDING
;

1619 
c⁄
->
cmd
 &~
LEAVE_PENDING
;

1621 i‡(
loˇl_fûe
)

1622 *
loˇl_fûe
 = 
	`x°rdup
 (
locf
);

1624  
RETROK
;

1625 } !
›t
.
¡ry
 || (
cou¡
 < opt.ntry));

1627 i‡(
c⁄
->
csock
 !-1 && (c⁄->
°
 & 
ON_YOUR_OWN
))

1629 
	`fd_˛o£
 (
c⁄
->
csock
);

1630 
c⁄
->
csock
 = -1;

1632  
TRYLIMEXC
;

1633 
	}
}

1637 
uîr_t


1638 
	$·p_gë_li°ög
 (
uæ
 *
u
, 
cc⁄
 *
c⁄
, 
fûeöfo
 **
f
)

1640 
uîr_t
 
îr
;

1641 *
uf
;

1642 *
lf
;

1643 *
ﬁd_èrgë
 = 
c⁄
->
èrgë
;

1645 
c⁄
->
°
 &~
ON_YOUR_OWN
;

1646 
c⁄
->
cmd
 |(
DO_LIST
 | 
LEAVE_PENDING
);

1647 
c⁄
->
cmd
 &~
DO_RETR
;

1652 
uf
 = 
	`uæ_fûe_«me
 (
u
, 
NULL
);

1653 
lf
 = 
	`fûe_mîge
 (
uf
, 
LIST_FILENAME
);

1654 
	`x‰ì
 (
uf
);

1655 
	`DEBUGP
 ((
	`_
("Usög %†a†li°ögÅm∞fûe.\n"), 
	`quŸe
 (
lf
)));

1657 
c⁄
->
èrgë
 = 
	`x°rdup
 (
lf
);

1658 
	`x‰ì
 (
lf
);

1659 
îr
 = 
	`·p_lo›_öã∫Æ
 (
u
, 
NULL
, 
c⁄
, NULL);

1660 
lf
 = 
	`x°rdup
 (
c⁄
->
èrgë
);

1661 
	`x‰ì
 (
c⁄
->
èrgë
);

1662 
c⁄
->
èrgë
 = 
ﬁd_èrgë
;

1664 i‡(
îr
 =
RETROK
)

1666 *
f
 = 
	`·p_∑r£_ls
 (
lf
, 
c⁄
->
rs
);

1667 i‡(
›t
.
ªmove_li°ög
)

1669 i‡(
	`u∆ök
 (
lf
))

1670 
	`log¥ötf
 (
LOG_NOTQUIET
, "u∆ök: %s\n", 
	`°ªº‹
 (
î∫o
));

1672 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Removed %s.\n"), 
	`quŸe
 (
lf
));

1676 *
f
 = 
NULL
;

1677 
	`x‰ì
 (
lf
);

1678 
c⁄
->
cmd
 &~
DO_LIST
;

1679  
îr
;

1680 
	}
}

1682 
uîr_t
 
·p_ªåõve_dús
 (
uæ
 *, 
fûeöfo
 *, 
cc⁄
 *);

1683 
uîr_t
 
·p_ªåõve_glob
 (
uæ
 *, 
cc⁄
 *, );

1684 
fûeöfo
 *
dññemít
 (fileinfo *, fileinfo **);

1685 
‰ìfûeöfo
 (
fûeöfo
 *
f
);

1694 
uîr_t


1695 
	$·p_ªåõve_li°
 (
uæ
 *
u
, 
fûeöfo
 *
f
, 
cc⁄
 *
c⁄
)

1697 
dïth
 = 0;

1698 
uîr_t
 
îr
;

1699 
fûeöfo
 *
‹ig
;

1700 
wgöt
 
loˇl_size
;

1701 
time_t
 
tml
;

1702 
boﬁ
 
d…his
;

1703 c⁄° *
a˘uÆ_èrgë
 = 
NULL
;

1706 ++
dïth
;

1707 i‡(
›t
.
ª˛evñ
 !
INFINITE_RECURSION
 && 
dïth
 > opt.reclevel)

1709 
	`DEBUGP
 ((
	`_
("Recursion depth %dÉxceeded max. depth %d.\n"),

1710 
dïth
, 
›t
.
ª˛evñ
));

1711 --
dïth
;

1712  
RECLEVELEXC
;

1715 
	`as£π
 (
f
 !
NULL
);

1716 
‹ig
 = 
f
;

1718 
c⁄
->
°
 &~
ON_YOUR_OWN
;

1719 i‡(!(
c⁄
->
°
 & 
DONE_CWD
))

1720 
c⁄
->
cmd
 |
DO_CWD
;

1722 
c⁄
->
cmd
 &~
DO_CWD
;

1723 
c⁄
->
cmd
 |(
DO_RETR
 | 
LEAVE_PENDING
);

1725 i‡(
c⁄
->
csock
 < 0)

1726 
c⁄
->
cmd
 |
DO_LOGIN
;

1728 
c⁄
->
cmd
 &~
DO_LOGIN
;

1730 
îr
 = 
RETROK
;

1732 
f
)

1734 *
ﬁd_èrgë
, *
ofûe
;

1736 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

1738 --
dïth
;

1739  
QUOTEXC
;

1741 
ﬁd_èrgë
 = 
c⁄
->
èrgë
;

1743 
ofûe
 = 
	`x°rdup
 (
u
->
fûe
);

1744 
	`uæ_£t_fûe
 (
u
, 
f
->
«me
);

1746 
c⁄
->
èrgë
 = 
	`uæ_fûe_«me
 (
u
, 
NULL
);

1747 
îr
 = 
RETROK
;

1749 
d…his
 = 
åue
;

1750 i‡(
›t
.
time°ampög
 && 
f
->
ty≥
 =
FT_PLAINFILE
)

1752 
°ru˘_°©
 
°
;

1758 i‡(!
	`°©
 (
c⁄
->
èrgë
, &
°
))

1760 
boﬁ
 
eq_size
;

1761 
boﬁ
 
c‹_vÆ
;

1763 
loˇl_size
 = 
°
.
°_size
;

1764 
tml
 = 
°
.
°_mtime
;

1765 #ifde‡
WINDOWS


1768 
tml
++;

1773 
c‹_vÆ
 = (
c⁄
->
rs
 =
ST_UNIX
 || c⁄->r†=
ST_WINNT
);

1774 
eq_size
 = 
c‹_vÆ
 ? (
loˇl_size
 =
f
->
size
Ë: 
åue
;

1775 i‡(
f
->
t°amp
 <
tml
 && 
eq_size
)

1779 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 fûênÿ√wîÅh™Üoˇ»fûê%†--ÇŸÑërõvög.\n"), 
	`quŸe
 (
c⁄
->
èrgë
));

1781 
d…his
 = 
Ál£
;

1783 i‡(
eq_size
)

1786 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 file isÇewerÅhanÜocal file %s --Ñetrieving.\n\n"),

1788 
	`quŸe
 (
c⁄
->
èrgë
));

1793 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 sizes doÇot match (local %s) --Ñetrieving.\n\n"),

1795 
	`numbî_to_°©ic_°rög
 (
loˇl_size
));

1799 
f
->
ty≥
)

1801 
FT_SYMLINK
:

1806 i‡(!
›t
.
ªå_symlöks
)

1808 #ifde‡
HAVE_SYMLINK


1809 i‡(!
f
->
lökto
)

1810 
	`logputs
 (
LOG_NOTQUIET
,

1811 
	`_
("InvalidÇame ofÅhe symlink, skipping.\n"));

1814 
°ru˘_°©
 
°
;

1817 
rc
 = 
	`l°©
 (
c⁄
->
èrgë
, &
°
);

1818 i‡(
rc
 == 0)

1820 
size_t
 
Àn
 = 
	`°æí
 (
f
->
lökto
) + 1;

1821 i‡(
	`S_ISLNK
 (
°
.
°_mode
))

1823 *
lök_èrgë
 = (*)
	`Æloˇ
 (
Àn
);

1824 
size_t
 
n
 = 
	`ªadlök
 (
c⁄
->
èrgë
, 
lök_èrgë
, 
Àn
);

1825 i‡((
n
 =
Àn
 - 1)

1826 && (
	`memcmp
 (
lök_èrgë
, 
f
->
lökto
, 
n
) == 0))

1828 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 have correct symlink %s -> %s\n\n"),

1830 
	`quŸe
 (
c⁄
->
èrgë
),

1831 
	`quŸe
 (
f
->
lökto
));

1832 
d…his
 = 
Ál£
;

1837 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Creating symlink %s -> %s\n"),

1838 
	`quŸe
 (
c⁄
->
èrgë
), quŸê(
f
->
lökto
));

1840 
	`u∆ök
 (
c⁄
->
èrgë
);

1841 i‡(
	`symlök
 (
f
->
lökto
, 
c⁄
->
èrgë
) == -1)

1842 
	`log¥ötf
 (
LOG_NOTQUIET
, "symlök: %s\n", 
	`°ªº‹
 (
î∫o
));

1843 
	`logputs
 (
LOG_VERBOSE
, "\n");

1846 
	`log¥ötf
 (
LOG_NOTQUIET
,

1847 
	`_
("SymlinksÇot supported, skipping symlink %s.\n"),

1848 
	`quŸe
 (
c⁄
->
èrgë
));

1853 i‡(
d…his
)

1854 
îr
 = 
	`·p_lo›_öã∫Æ
 (
u
, 
f
, 
c⁄
, 
NULL
);

1857 
FT_DIRECTORY
:

1858 i‡(!
›t
.
ªcursive
)

1859 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Skipping directory %s.\n"),

1860 
	`quŸe
 (
f
->
«me
));

1862 
FT_PLAINFILE
:

1864 i‡(
d…his
)

1865 
îr
 = 
	`·p_lo›_öã∫Æ
 (
u
, 
f
, 
c⁄
, 
NULL
);

1867 
FT_UNKNOWN
:

1868 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: unknown/unsupported fileÅype.\n"),

1869 
	`quŸe
 (
f
->
«me
));

1881 
	`£t_loˇl_fûe
 (&
a˘uÆ_èrgë
, 
c⁄
->
èrgë
);

1884 i‡(
d…his
 && (
a˘uÆ_èrgë
 !
NULL
Ë&& (
f
->
ty≥
 =
FT_PLAINFILE
))

1886 i‡(
f
->
≥rms
)

1887 
	`chmod
 (
a˘uÆ_èrgë
, 
f
->
≥rms
);

1889 
	`DEBUGP
 (("UƒecognizedÖîmissi⁄†f‹ %s.\n", 
a˘uÆ_èrgë
));

1895 i‡(
a˘uÆ_èrgë
 !
NULL
)

1897 i‡(
›t
.
u££rvîtime°amps


1898 && !(
f
->
ty≥
 =
FT_SYMLINK
 && !
›t
.
ªå_symlöks
)

1899 && 
f
->
t°amp
 != -1

1900 && 
d…his


1901 && 
	`fûe_exi°s_p
 (
c⁄
->
èrgë
))

1903 
	`touch
 (
a˘uÆ_èrgë
, 
f
->
t°amp
);

1905 i‡(
f
->
t°amp
 == -1)

1906 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: corruptÅime-stamp.\n"),

1907 
a˘uÆ_èrgë
);

1910 
	`x‰ì
 (
c⁄
->
èrgë
);

1911 
c⁄
->
èrgë
 = 
ﬁd_èrgë
;

1913 
	`uæ_£t_fûe
 (
u
, 
ofûe
);

1914 
	`x‰ì
 (
ofûe
);

1917 i‡(
îr
 =
QUOTEXC
 ||Éº =
HOSTERR
 ||Éº =
FWRITEERR
)

1919 
c⁄
->
cmd
 &~ (
DO_CWD
 | 
DO_LOGIN
);

1920 
f
 = f->
√xt
;

1924 i‡(
›t
.
ªcursive
 &&

1925 !(
›t
.
ª˛evñ
 !
INFINITE_RECURSION
 && 
dïth
 >= opt.reclevel))

1926 
îr
 = 
	`·p_ªåõve_dús
 (
u
, 
‹ig
, 
c⁄
);

1927 i‡(
›t
.
ªcursive
)

1928 
	`DEBUGP
 ((
	`_
("WillÇotÑetrieve dirs since depth is %d (max %d).\n"),

1929 
dïth
, 
›t
.
ª˛evñ
));

1930 --
dïth
;

1931  
îr
;

1932 
	}
}

1938 
uîr_t


1939 
	$·p_ªåõve_dús
 (
uæ
 *
u
, 
fûeöfo
 *
f
, 
cc⁄
 *
c⁄
)

1941 *
c⁄èöî
 = 
NULL
;

1942 
c⁄èöî_size
 = 0;

1944 ; 
f
; f = f->
√xt
)

1946 
size
;

1947 *
odú
, *
√wdú
;

1949 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

1951 i‡(
f
->
ty≥
 !
FT_DIRECTORY
)

1957 
size
 = 
	`°æí
 (
u
->
dú
Ë+ 1 + såÀ¿(
f
->
«me
) + 1;

1958 i‡(
size
 > 
c⁄èöî_size
)

1959 
c⁄èöî
 = (*)
	`Æloˇ
 (
size
);

1960 
√wdú
 = 
c⁄èöî
;

1962 
odú
 = 
u
->
dú
;

1963 i‡(*
odú
 == '\0'

1964 || (*
odú
 == '/' && *(odir + 1) == '\0'))

1968 
	`•rötf
 (
√wdú
, "%s%s", 
odú
, 
f
->
«me
);

1971 
	`•rötf
 (
√wdú
, "%s/%s", 
odú
, 
f
->
«me
);

1973 
	`DEBUGP
 (("ComposingÇew CWDÑelativeÅoÅhe initial directory.\n"));

1974 
	`DEBUGP
 ((" odir = '%s'\n f->name = '%s'\nÇewdir = '%s'\n\n",

1975 
odú
, 
f
->
«me
, 
√wdú
));

1976 i‡(!
	`accdú
 (
√wdú
))

1978 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 descendingÅo %sás it isÉxcluded/not-included.\n"),

1980 
	`quŸe
 (
√wdú
));

1984 
c⁄
->
°
 &~
DONE_CWD
;

1986 
odú
 = 
	`x°rdup
 (
u
->
dú
);

1988 
	`uæ_£t_dú
 (
u
, 
√wdú
);

1989 
	`·p_ªåõve_glob
 (
u
, 
c⁄
, 
GLOB_GETALL
);

1990 
	`uæ_£t_dú
 (
u
, 
odú
);

1991 
	`x‰ì
 (
odú
);

1996 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

1997  
QUOTEXC
;

1999  
RETROK
;

2000 
	}
}

2003 
boﬁ


2004 
	$has_ö£cuª_«me_p
 (c⁄° *
s
)

2006 i‡(*
s
 == '/')

2007  
åue
;

2009 i‡(
	`°r°r
 (
s
, "../") != 0)

2010  
åue
;

2012  
Ál£
;

2013 
	}
}

2024 
uîr_t


2025 
	$·p_ªåõve_glob
 (
uæ
 *
u
, 
cc⁄
 *
c⁄
, 
a˘i⁄
)

2027 
fûeöfo
 *
f
, *
°¨t
;

2028 
uîr_t
 
ªs
;

2030 
c⁄
->
cmd
 |
LEAVE_PENDING
;

2032 
ªs
 = 
	`·p_gë_li°ög
 (
u
, 
c⁄
, &
°¨t
);

2033 i‡(
ªs
 !
RETROK
)

2034  
ªs
;

2037 i‡(
›t
.
ac˚±s
 || o±.
ªje˘s
)

2039 
f
 = 
°¨t
;

2040 
f
)

2042 i‡(
f
->
ty≥
 !
FT_DIRECTORY
 && !
	`ac˚±abÀ
 (f->
«me
))

2044 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Rejecting %s.\n"),

2045 
	`quŸe
 (
f
->
«me
));

2046 
f
 = 
	`dññemít
 (f, &
°¨t
);

2049 
f
 = f->
√xt
;

2053 
f
 = 
°¨t
;

2054 
f
)

2056 i‡(
	`has_ö£cuª_«me_p
 (
f
->
«me
))

2058 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Rejecting %s.\n"),

2059 
	`quŸe
 (
f
->
«me
));

2060 
f
 = 
	`dññemít
 (f, &
°¨t
);

2063 
f
 = f->
√xt
;

2067 i‡(*
u
->
fûe
)

2069 i‡(
a˘i⁄
 =
GLOB_GLOBALL
)

2071 (*
m©chî
) (const *, const *, )

2072 
›t
.
ign‹e_ˇ£
 ? 
‚m©ch_noˇ£
 : 
‚m©ch
;

2073 
m©chªs
 = 0;

2075 
f
 = 
°¨t
;

2076 
f
)

2078 
m©chªs
 = 
	`m©chî
 (
u
->
fûe
, 
f
->
«me
, 0);

2079 i‡(
m©chªs
 == -1)

2081 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Error matching %ságainst %s: %s\n"),

2082 
u
->
fûe
, 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
f
->
«me
),

2083 
	`°ªº‹
 (
î∫o
));

2086 i‡(
m©chªs
 =
FNM_NOMATCH
)

2087 
f
 = 
	`dññemít
 (f, &
°¨t
);

2089 
f
 = f->
√xt
;

2091 i‡(
m©chªs
 == -1)

2093 
	`‰ìfûeöfo
 (
°¨t
);

2094  
RETRBADPATTERN
;

2097 i‡(
a˘i⁄
 =
GLOB_GETONE
)

2099 #ifde‡
__VMS


2109 (*
cmp
) (const *, const *)

2110 
›t
.
ign‹e_ˇ£
 ? 
°rˇ£cmp
 : ((*)())
°rcmp
;

2112 (*
cmp
) (const *, const *)

2113 
›t
.
ign‹e_ˇ£
 ? 
°rˇ£cmp
 : 
°rcmp
;

2115 
f
 = 
°¨t
;

2116 
f
)

2118 i‡(0 !
	`cmp
(
u
->
fûe
, 
f
->
«me
))

2119 
f
 = 
	`dññemít
 (f, &
°¨t
);

2121 
f
 = f->
√xt
;

2125 i‡(
°¨t
)

2128 
ªs
 = 
	`·p_ªåõve_li°
 (
u
, 
°¨t
, 
c⁄
);

2132 i‡(
a˘i⁄
 =
GLOB_GLOBALL
)

2137 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("No matches onÖattern %s.\n"),

2138 
	`quŸe
 (
u
->
fûe
));

2140 i‡(
a˘i⁄
 =
GLOB_GETONE
)

2143 
c⁄
->
°
 |
ON_YOUR_OWN
;

2144 
ªs
 = 
	`·p_lo›_öã∫Æ
 (
u
, 
NULL
, 
c⁄
, NULL);

2145  
ªs
;

2153 
	`‰ìfûeöfo
 (
°¨t
);

2154 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

2155  
QUOTEXC
;

2157  
ªs
;

2158 
	}
}

2163 
uîr_t


2164 
	$·p_lo›
 (
uæ
 *
u
, **
loˇl_fûe
, *
dt
, uæ *
¥oxy
,

2165 
boﬁ
 
ªcursive
, boﬁ 
glob
)

2167 
cc⁄
 
c⁄
;

2168 
uîr_t
 
ªs
;

2170 *
dt
 = 0;

2172 
	`xzîo
 (
c⁄
);

2174 
c⁄
.
csock
 = -1;

2175 
c⁄
.
°
 = 
ON_YOUR_OWN
;

2176 
c⁄
.
rs
 = 
ST_UNIX
;

2177 
c⁄
.
id
 = 
NULL
;

2178 
c⁄
.
¥oxy
 =Öroxy;

2183 i‡(!*
u
->
fûe
 && !
ªcursive
)

2185 
fûeöfo
 *
f
;

2186 
ªs
 = 
	`·p_gë_li°ög
 (
u
, &
c⁄
, &
f
);

2188 i‡(
ªs
 =
RETROK
)

2190 i‡(
›t
.
htmlify
 && !›t.
•idî
)

2192 *
fûíame
 = (
›t
.
ouçut_documít


2193 ? 
	`x°rdup
 (
›t
.
ouçut_documít
)

2194 : (
c⁄
.
èrgë
 ? 
	`x°rdup
 (con.target)

2195 : 
	`uæ_fûe_«me
 (
u
, 
NULL
)));

2196 
ªs
 = 
	`·p_ödex
 (
fûíame
, 
u
, 
f
);

2197 i‡(
ªs
 =
FTPOK
 && 
›t
.
vîbo£
)

2199 i‡(!
›t
.
ouçut_documít
)

2201 
°ru˘_°©
 
°
;

2202 
wgöt
 
sz
;

2203 i‡(
	`°©
 (
fûíame
, &
°
) == 0)

2204 
sz
 = 
°
.
°_size
;

2206 
sz
 = -1;

2207 
	`log¥ötf
 (
LOG_NOTQUIET
,

2208 
	`_
("Wrote HTML-ized indexÅo %s [%s].\n"),

2209 
	`quŸe
 (
fûíame
), 
	`numbî_to_°©ic_°rög
 (
sz
));

2212 
	`log¥ötf
 (
LOG_NOTQUIET
,

2213 
	`_
("Wrote HTML-ized indexÅo %s.\n"),

2214 
	`quŸe
 (
fûíame
));

2216 
	`x‰ì
 (
fûíame
);

2218 
	`‰ìfûeöfo
 (
f
);

2223 
boﬁ
 
i•©ã∫
 = 
Ál£
;

2224 i‡(
glob
)

2230 *
fûe_∑π
 = 
	`°ºchr
 (
u
->
∑th
, '/');

2231 i‡(!
fûe_∑π
)

2232 
fûe_∑π
 = 
u
->
∑th
;

2233 
i•©ã∫
 = 
	`has_wûdˇrds_p
 (
fûe_∑π
);

2235 i‡(
i•©ã∫
 || 
ªcursive
 || 
›t
.
time°ampög
)

2240 
ªs
 = 
	`·p_ªåõve_glob
 (
u
, &
c⁄
,

2241 
i•©ã∫
 ? 
GLOB_GLOBALL
 : 
GLOB_GETONE
);

2244 
ªs
 = 
	`·p_lo›_öã∫Æ
 (
u
, 
NULL
, &
c⁄
, 
loˇl_fûe
);

2246 i‡(
ªs
 =
FTPOK
)

2247 
ªs
 = 
RETROK
;

2248 i‡(
ªs
 =
RETROK
)

2249 *
dt
 |
RETROKF
;

2251 i‡(
c⁄
.
csock
 != -1)

2252 
	`fd_˛o£
 (
c⁄
.
csock
);

2253 
	`x‰ì_nuŒ
 (
c⁄
.
id
);

2254 
c⁄
.
id
 = 
NULL
;

2255 
	`x‰ì_nuŒ
 (
c⁄
.
èrgë
);

2256 
c⁄
.
èrgë
 = 
NULL
;

2257  
ªs
;

2258 
	}
}

2263 
fûeöfo
 *

2264 
	$dññemít
 (
fûeöfo
 *
f
, fûeöfÿ**
°¨t
)

2266 
fûeöfo
 *
¥ev
 = 
f
->prev;

2267 
fûeöfo
 *
√xt
 = 
f
->next;

2269 
	`x‰ì
 (
f
->
«me
);

2270 
	`x‰ì_nuŒ
 (
f
->
lökto
);

2271 
	`x‰ì
 (
f
);

2273 i‡(
√xt
)

2274 
√xt
->
¥ev
 =Örev;

2275 i‡(
¥ev
)

2276 
¥ev
->
√xt
 =Çext;

2278 *
°¨t
 = 
√xt
;

2279  
√xt
;

2280 
	}
}

2284 
	$‰ìfûeöfo
 (
fûeöfo
 *
f
)

2286 
f
)

2288 
fûeöfo
 *
√xt
 = 
f
->next;

2289 
	`x‰ì
 (
f
->
«me
);

2290 i‡(
f
->
lökto
)

2291 
	`x‰ì
 (
f
->
lökto
);

2292 
	`x‰ì
 (
f
);

2293 
f
 = 
√xt
;

2295 
	}
}

	@src/ftp.h

32 #i‚de‡
FTP_H


33 
	#FTP_H


	)

35 
	~"ho°.h
"

38 
	e°y≥


40 
	mST_UNIX
,

41 
	mST_VMS
,

42 
	mST_WINNT
,

43 
	mST_MACOS
,

44 
	mST_OS400
,

45 
	mST_OTHER


48 
·p_œ°_ª•löe
[];

50 
uîr_t
 
·p_ª•⁄£
 (, **);

51 
uîr_t
 
·p_logö
 (, const *, const *);

52 
uîr_t
 
·p_p‹t
 (, *);

53 
uîr_t
 
·p_∑sv
 (, 
ù_addªss
 *, *);

54 #ifde‡
ENABLE_IPV6


55 
uîr_t
 
·p_Õπ
 (, *);

56 
uîr_t
 
·p_Õsv
 (, 
ù_addªss
 *, *);

57 
uîr_t
 
·p_ïπ
 (, *);

58 
uîr_t
 
·p_ïsv
 (, 
ù_addªss
 *, *);

60 
uîr_t
 
·p_ty≥
 (, );

61 
uîr_t
 
·p_cwd
 (, const *);

62 
uîr_t
 
·p_ªå
 (, const *);

63 
uîr_t
 
·p_ª°
 (, 
wgöt
);

64 
uîr_t
 
·p_li°
 (, c⁄° *, 
°y≥
);

65 
uîr_t
 
·p_sy°
 (, 
°y≥
 *);

66 
uîr_t
 
·p_pwd
 (, **);

67 
uîr_t
 
·p_size
 (, c⁄° *, 
wgöt
 *);

69 #ifde‡
ENABLE_OPIE


70 c⁄° *
skey_ª•⁄£
 (, const *, const *);

73 
	guæ
;

76 
	e·y≥


78 
	mFT_PLAINFILE
,

79 
	mFT_DIRECTORY
,

80 
	mFT_SYMLINK
,

81 
	mFT_UNKNOWN


88 
	mGLOB_GLOBALL
, 
	mGLOB_GETALL
, 
	mGLOB_GETONE


92 
	e∑r£ty≥


94 
	mTT_HOUR_MIN
, 
	mTT_DAY


99 
	sfûeöfo


101 
·y≥
 
	mty≥
;

102 *
	m«me
;

103 
wgöt
 
	msize
;

104 
	mt°amp
;

105 
∑r£ty≥
 
	m±y≥
;

106 
	m≥rms
;

107 *
	mlökto
;

108 
fûeöfo
 *
	m¥ev
;

109 
fûeöfo
 *
	m√xt
;

113 
	ewgë_·p_comm™d


115 
	mDO_LOGIN
 = 0x0001,

116 
	mDO_CWD
 = 0x0002,

117 
	mDO_RETR
 = 0x0004,

118 
	mDO_LIST
 = 0x0008,

119 
	mLEAVE_PENDING
 = 0x0010

122 
	ewgë_·p_f°©us


124 
	mNOTHING
 = 0x0000,

125 
	mON_YOUR_OWN
 = 0x0001,

127 
	mDONE_CWD
 = 0x0002

131 
fûeöfo
 *
·p_∑r£_ls
 (c⁄° *, c⁄° 
°y≥
);

132 
uîr_t
 
·p_lo›
 (
uæ
 *, **, *, uæ *, 
boﬁ
, bool);

134 
uîr_t
 
·p_ödex
 (c⁄° *, 
uæ
 *, 
fûeöfo
 *);

136 
·p_¥o˚ss_ty≥
 (const *);

	@src/gettext.h

20 #i‚de‡
_LIBGETTEXT_H


21 
	#_LIBGETTEXT_H
 1

	)

24 #i‡
ENABLE_NLS


27 
	~<liböé.h
>

32 #ifde‡
DEFAULT_TEXT_DOMAIN


33 #unde‡
gëãxt


34 
	#gëãxt
(
Msgid
) \

35 
	`dgëãxt
 (
DEFAULT_TEXT_DOMAIN
, 
Msgid
)

	)

36 #unde‡
ngëãxt


37 
	#ngëãxt
(
Msgid1
, 
Msgid2
, 
N
) \

38 
	`dngëãxt
 (
DEFAULT_TEXT_DOMAIN
, 
Msgid1
, 
Msgid2
, 
N
)

	)

49 #i‡
deföed
(
__sun
)

50 
	~<loˇÀ.h
>

56 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
__GNUG__
Ë&& (
__GNUC__
 >= 3)

57 
	~<c°dlib
>

58 #i‡(
__GLIBC__
 >2Ë|| 
_GLIBCXX_HAVE_LIBINTL_H


59 
	~<liböé.h
>

68 
	#gëãxt
(
Msgid
Ë((c⁄° *Ë(Msgid))

	)

69 
	#dgëãxt
(
Domaö«me
, 
Msgid
Ë((Ë(Domaö«me), 
	`gëãxt
 (Msgid))

	)

70 
	#dcgëãxt
(
Domaö«me
, 
Msgid
, 
C©eg‹y
) \

71 ((Ë(
C©eg‹y
), 
	`dgëãxt
 (
Domaö«me
, 
Msgid
))

	)

72 
	#ngëãxt
(
Msgid1
, 
Msgid2
, 
N
) \

73 ((
N
) == 1 \

74 ? ((Ë(
Msgid2
), (c⁄° *Ë(
Msgid1
)) \

75 : ((Ë(
Msgid1
), (c⁄° *Ë(
Msgid2
)))

	)

76 
	#dngëãxt
(
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
) \

77 ((Ë(
Domaö«me
), 
	`ngëãxt
 (
Msgid1
, 
Msgid2
, 
N
))

	)

78 
	#d˙gëãxt
(
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
, 
C©eg‹y
) \

79 ((Ë(
C©eg‹y
), 
	`dngëãxt
(
Domaö«me
, 
Msgid1
, 
Msgid2
, 
N
))

	)

80 
	#ãxtdomaö
(
Domaö«me
Ë((c⁄° *Ë(Domaö«me))

	)

81 
	#bödãxtdomaö
(
Domaö«me
, 
Dú«me
) \

82 ((Ë(
Domaö«me
), (c⁄° *Ë(
Dú«me
))

	)

83 
	#böd_ãxtdomaö_code£t
(
Domaö«me
, 
Code£t
) \

84 ((Ë(
Domaö«me
), (c⁄° *Ë(
Code£t
))

	)

95 
	#gëãxt_no›
(
Såög
Ë
	)
String

98 
	#GETTEXT_CONTEXT_GLUE
 "\004"

	)

104 #ifde‡
DEFAULT_TEXT_DOMAIN


105 
	#pgëãxt
(
Msg˘xt
, 
Msgid
) \

106 
	`pgëãxt_aux
 (
DEFAULT_TEXT_DOMAIN
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

108 
	#pgëãxt
(
Msg˘xt
, 
Msgid
) \

109 
	`pgëãxt_aux
 (
NULL
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

111 
	#dpgëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
) \

112 
	`pgëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
LC_MESSAGES
)

	)

113 
	#d˝gëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
C©eg‹y
) \

114 
	`pgëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
C©eg‹y
)

	)

115 #ifde‡
DEFAULT_TEXT_DOMAIN


116 
	#≈gëãxt
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

117 
	`≈gëãxt_aux
 (
DEFAULT_TEXT_DOMAIN
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

119 
	#≈gëãxt
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

120 
	`≈gëãxt_aux
 (
NULL
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

122 
	#d≈gëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

123 
	`≈gëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

124 
	#d˙pgëãxt
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
C©eg‹y
) \

125 
	`≈gëãxt_aux
 (
Domaö«me
, 
Msg˘xt
 
GETTEXT_CONTEXT_GLUE
 
Msgid
, Msgid, 
MsgidPluøl
, 
N
, 
C©eg‹y
)

	)

127 #ifde‡
__GNUC__


128 
	g__ölöe


130 #ifde‡
__˝lu•lus


131 
	gölöe


135 
	$pgëãxt_aux
 (c⁄° *
domaö
,

136 c⁄° *
msg_˘xt_id
, c⁄° *
msgid
,

137 
ˇãg‹y
)

139 c⁄° *
å™¶©i⁄
 = 
	`dcgëãxt
 (
domaö
, 
msg_˘xt_id
, 
ˇãg‹y
);

140 i‡(
å™¶©i⁄
 =
msg_˘xt_id
)

141  
msgid
;

143  
å™¶©i⁄
;

144 
	}
}

146 #ifde‡
__GNUC__


147 
	g__ölöe


149 #ifde‡
__˝lu•lus


150 
	gölöe


154 
	$≈gëãxt_aux
 (c⁄° *
domaö
,

155 c⁄° *
msg_˘xt_id
, c⁄° *
msgid
,

156 c⁄° *
msgid_∂uøl
, 
n
,

157 
ˇãg‹y
)

159 c⁄° *
å™¶©i⁄
 =

160 
	`d˙gëãxt
 (
domaö
, 
msg_˘xt_id
, 
msgid_∂uøl
, 
n
, 
ˇãg‹y
);

161 i‡(
å™¶©i⁄
 =
msg_˘xt_id
 ||Åøn¶©i⁄ =
msgid_∂uøl
)

162  (
n
 =1 ? 
msgid
 : 
msgid_∂uøl
);

164  
å™¶©i⁄
;

165 
	}
}

171 
	~<°rög.h
>

173 
	#_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS
 \

174 (((
__GNUC__
 >3 || 
__GNUG__
 >2Ë&& !
__STRICT_ANSI__
) \

175  )

	)

177 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


178 
	~<°dlib.h
>

181 
	#pgëãxt_ex¥
(
Msg˘xt
, 
Msgid
) \

182 
	`d˝gëãxt_ex¥
 (
NULL
, 
Msg˘xt
, 
Msgid
, 
LC_MESSAGES
)

	)

183 
	#dpgëãxt_ex¥
(
Domaö«me
, 
Msg˘xt
, 
Msgid
) \

184 
	`d˝gëãxt_ex¥
 (
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
LC_MESSAGES
)

	)

186 #ifde‡
__GNUC__


187 
	g__ölöe


189 #ifde‡
__˝lu•lus


190 
	gölöe


194 
	$d˝gëãxt_ex¥
 (c⁄° *
domaö
,

195 c⁄° *
msg˘xt
, c⁄° *
msgid
,

196 
ˇãg‹y
)

198 
size_t
 
msg˘xt_Àn
 = 
	`°æí
 (
msg˘xt
) + 1;

199 
size_t
 
msgid_Àn
 = 
	`°æí
 (
msgid
) + 1;

200 c⁄° *
å™¶©i⁄
;

201 #i‡
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


202 
msg_˘xt_id
[
msg˘xt_Àn
 + 
msgid_Àn
];

204 
buf
[1024];

205 *
msg_˘xt_id
 =

206 (
msg˘xt_Àn
 + 
msgid_Àn
 < (
buf
)

207 ? 
buf


208 : (*Ë
	`mÆloc
 (
msg˘xt_Àn
 + 
msgid_Àn
));

209 i‡(
msg_˘xt_id
 !
NULL
)

212 
	`mem˝y
 (
msg_˘xt_id
, 
msg˘xt
, 
msg˘xt_Àn
 - 1);

213 
msg_˘xt_id
[
msg˘xt_Àn
 - 1] = '\004';

214 
	`mem˝y
 (
msg_˘xt_id
 + 
msg˘xt_Àn
, 
msgid
, 
msgid_Àn
);

215 
å™¶©i⁄
 = 
	`dcgëãxt
 (
domaö
, 
msg_˘xt_id
, 
ˇãg‹y
);

216 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


217 i‡(
msg_˘xt_id
 !
buf
)

218 
	`‰ì
 (
msg_˘xt_id
);

220 i‡(
å™¶©i⁄
 !
msg_˘xt_id
)

221  
å™¶©i⁄
;

223  
msgid
;

224 
	}
}

226 
	#≈gëãxt_ex¥
(
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

227 
	`d˙pgëãxt_ex¥
 (
NULL
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

228 
	#d≈gëãxt_ex¥
(
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
) \

229 
	`d˙pgëãxt_ex¥
 (
Domaö«me
, 
Msg˘xt
, 
Msgid
, 
MsgidPluøl
, 
N
, 
LC_MESSAGES
)

	)

231 #ifde‡
__GNUC__


232 
	g__ölöe


234 #ifde‡
__˝lu•lus


235 
	gölöe


239 
	$d˙pgëãxt_ex¥
 (c⁄° *
domaö
,

240 c⁄° *
msg˘xt
, c⁄° *
msgid
,

241 c⁄° *
msgid_∂uøl
, 
n
,

242 
ˇãg‹y
)

244 
size_t
 
msg˘xt_Àn
 = 
	`°æí
 (
msg˘xt
) + 1;

245 
size_t
 
msgid_Àn
 = 
	`°æí
 (
msgid
) + 1;

246 c⁄° *
å™¶©i⁄
;

247 #i‡
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


248 
msg_˘xt_id
[
msg˘xt_Àn
 + 
msgid_Àn
];

250 
buf
[1024];

251 *
msg_˘xt_id
 =

252 (
msg˘xt_Àn
 + 
msgid_Àn
 < (
buf
)

253 ? 
buf


254 : (*Ë
	`mÆloc
 (
msg˘xt_Àn
 + 
msgid_Àn
));

255 i‡(
msg_˘xt_id
 !
NULL
)

258 
	`mem˝y
 (
msg_˘xt_id
, 
msg˘xt
, 
msg˘xt_Àn
 - 1);

259 
msg_˘xt_id
[
msg˘xt_Àn
 - 1] = '\004';

260 
	`mem˝y
 (
msg_˘xt_id
 + 
msg˘xt_Àn
, 
msgid
, 
msgid_Àn
);

261 
å™¶©i⁄
 = 
	`d˙gëãxt
 (
domaö
, 
msg_˘xt_id
, 
msgid_∂uøl
, 
n
, 
ˇãg‹y
);

262 #i‡!
_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS


263 i‡(
msg_˘xt_id
 !
buf
)

264 
	`‰ì
 (
msg_˘xt_id
);

266 i‡(!(
å™¶©i⁄
 =
msg_˘xt_id
 ||Åøn¶©i⁄ =
msgid_∂uøl
))

267  
å™¶©i⁄
;

269  (
n
 =1 ? 
msgid
 : 
msgid_∂uøl
);

270 
	}
}

	@src/gnutls.c

31 
	~"wgë.h
"

33 
	~<as£π.h
>

34 
	~<î∫o.h
>

35 
	~<uni°d.h
>

36 
	~<°rög.h
>

37 
	~<°dio.h
>

38 
	~<dúít.h
>

39 
	~<°dlib.h
>

41 
	~<gnués/gnués.h
>

42 
	~<gnués/x509.h
>

43 
	~<sys/io˘l.h
>

45 
	~"utûs.h
"

46 
	~"c⁄√˘.h
"

47 
	~"uæ.h
"

48 
	~"±imî.h
"

49 
	~"s¶.h
"

51 
	~<sys/f˙é.h
>

53 #ifde‡
WIN32


54 
	~"w32sock.h
"

62 
gnués_˚πifiˇã_¸edítüls
 
	g¸edítüls
;

63 
boﬁ


64 
	$s¶_öô
 ()

66 c⁄° *
ˇ_dúe˘‹y
;

67 
DIR
 *
dú
;

69 
	`gnués_globÆ_öô
 ();

70 
	`gnués_˚πifiˇã_Æloˇã_¸edítüls
 (&
¸edítüls
);

71 
	`gnués_˚πifiˇã_£t_vîify_Êags
(
¸edítüls
,

72 
GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT
);

74 
ˇ_dúe˘‹y
 = 
›t
.ca_directory ? opt.ca_directory : "/etc/ssl/certs";

76 
dú
 = 
	`›ídú
 (
ˇ_dúe˘‹y
);

77 i‡(
dú
 =
NULL
)

79 i‡(
›t
.
ˇ_dúe˘‹y
)

80 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("ERROR: Cannot open directory %s.\n"),

81 
›t
.
ˇ_dúe˘‹y
);

85 
dúít
 *
dít
;

86 (
dít
 = 
	`ªaddú
 (
dú
)Ë!
NULL
)

88 
°©
 
°
;

89 *
ˇ_fûe
;

90 
	`a•rötf
 (&
ˇ_fûe
, "%s/%s", 
ˇ_dúe˘‹y
, 
dít
->
d_«me
);

92 
	`°©
 (
ˇ_fûe
, &
°
);

94 i‡(
	`S_ISREG
 (
°
.
°_mode
))

95 
	`gnués_˚πifiˇã_£t_x509_åu°_fûe
 (
¸edítüls
, 
ˇ_fûe
,

96 
GNUTLS_X509_FMT_PEM
);

98 
	`‰ì
 (
ˇ_fûe
);

101 
	`˛o£dú
 (
dú
);

104 i‡(
›t
.
ˇ_˚π
)

105 
	`gnués_˚πifiˇã_£t_x509_åu°_fûe
 (
¸edítüls
, 
›t
.
ˇ_˚π
,

106 
GNUTLS_X509_FMT_PEM
);

107  
åue
;

108 
	}
}

110 
	swgnués_å™•‹t_c⁄ãxt


112 
gnués_£ssi⁄
 
	m£ssi⁄
;

113 
	mœ°_îr‹
;

119 
	m≥ekbuf
[512];

120 
	m≥ekÀn
;

123 #i‚de‡
MIN


124 
	#MIN
(
i
, 
j
Ë((iË<(jË? (iË: (j))

	)

129 
	$wgnués_ªad_timeout
 (
fd
, *
buf
, 
bufsize
, *
¨g
, 
timeout
)

131 #ifde‡
F_GETFL


132 
Êags
 = 0;

134 
ªt
 = 0;

135 
±imî
 *
timî
;

136 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

137 
timed_out
 = 0;

139 i‡(
timeout
)

141 #ifde‡
F_GETFL


142 
Êags
 = 
	`f˙é
 (
fd
, 
F_GETFL
, 0);

143 i‡(
Êags
 < 0)

144  
Êags
;

146 
timî
 = 
	`±imî_√w
 ();

147 i‡(
timî
 == 0)

153 
√xt_timeout
 = 
timeout
 - 
	`±imî_mósuª
 (
timî
);

154 i‡(
timeout
 && 
√xt_timeout
 < 0)

157 
ªt
 = 
GNUTLS_E_AGAIN
;

158 i‡(
timeout
 =0 || 
	`gnués_ªc‹d_check_≥ndög
 (
˘x
->
£ssi⁄
)

159 || 
	`£À˘_fd
 (
fd
, 
√xt_timeout
, 
WAIT_FOR_READ
))

161 i‡(
timeout
)

163 #ifde‡
F_GETFL


164 
ªt
 = 
	`f˙é
 (
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

165 i‡(
ªt
 < 0)

166  
ªt
;

169 c⁄° 
⁄e
 = 1;

170 
ªt
 = 
	`io˘l
 (
fd
, 
FIONBIO
, &
⁄e
);

171 i‡(
ªt
 < 0)

172  
ªt
;

176 
ªt
 = 
	`gnués_ªc‹d_ªcv
 (
˘x
->
£ssi⁄
, 
buf
, 
bufsize
);

178 i‡(
timeout
)

180 
°©us
;

181 #ifde‡
F_GETFL


182 
°©us
 = 
	`f˙é
 (
fd
, 
F_SETFL
, 
Êags
);

183 i‡(
°©us
 < 0)

184  
°©us
;

186 c⁄° 
zîo
 = 0;

187 
°©us
 = 
	`io˘l
 (
fd
, 
FIONBIO
, &
zîo
);

188 i‡(
°©us
 < 0)

189  
°©us
;

194 
timed_out
 = 
timeout
 && 
	`±imî_mósuª
 (
timî
) >=Åimeout;

196 
ªt
 =
GNUTLS_E_INTERRUPTED
 || (ªà=
GNUTLS_E_AGAIN
 && !
timed_out
));

198 i‡(
timeout
)

199 
	`±imî_de°roy
 (
timî
);

201 i‡(
timeout
 && 
timed_out
 && 
ªt
 =
GNUTLS_E_AGAIN
)

202 
î∫o
 = 
ETIMEDOUT
;

204  
ªt
;

205 
	}
}

208 
	$wgnués_ªad
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

210 #ifde‡
F_GETFL


211 
Êags
 = 0;

213 
ªt
 = 0;

214 
±imî
 *
timî
;

215 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

217 i‡(
˘x
->
≥ekÀn
)

220 
c›ysize
 = 
	`MIN
 (
bufsize
, 
˘x
->
≥ekÀn
);

221 
	`mem˝y
 (
buf
, 
˘x
->
≥ekbuf
, 
c›ysize
);

222 
˘x
->
≥ekÀn
 -
c›ysize
;

223 i‡(
˘x
->
≥ekÀn
 != 0)

224 
	`memmove
 (
˘x
->
≥ekbuf
, ctx->≥ekbu‡+ 
c›ysize
, ctx->
≥ekÀn
);

226  
c›ysize
;

229 
ªt
 = 
	`wgnués_ªad_timeout
 (
fd
, 
buf
, 
bufsize
, 
¨g
, 
›t
.
ªad_timeout
);

230 i‡(
ªt
 < 0)

231 
˘x
->
œ°_îr‹
 = 
ªt
;

233  
ªt
;

234 
	}
}

237 
	$wgnués_wrôe
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

239 
ªt
;

240 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

242 
ªt
 = 
	`gnués_ªc‹d_£nd
 (
˘x
->
£ssi⁄
, 
buf
, 
bufsize
);

243 
ªt
 =
GNUTLS_E_INTERRUPTED
 ||Ñë =
GNUTLS_E_AGAIN
);

244 i‡(
ªt
 < 0)

245 
˘x
->
œ°_îr‹
 = 
ªt
;

246  
ªt
;

247 
	}
}

250 
	$wgnués_pﬁl
 (
fd
, 
timeout
, 
waô_f‹
, *
¨g
)

252 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

253  
˘x
->
≥ekÀn
 || 
	`gnués_ªc‹d_check_≥ndög
 (˘x->
£ssi⁄
)

254 || 
	`£À˘_fd
 (
fd
, 
timeout
, 
waô_f‹
);

255 
	}
}

258 
	$wgnués_≥ek
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

260 
ªad
 = 0;

261 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

262 
off£t
 = 
	`MIN
 (
bufsize
, 
˘x
->
≥ekÀn
);

263 i‡(
bufsize
 >  
˘x
->
≥ekbuf
)

264 
bufsize
 =  
˘x
->
≥ekbuf
;

266 i‡(
˘x
->
≥ekÀn
)

267 
	`mem˝y
 (
buf
, 
˘x
->
≥ekbuf
, 
off£t
);

269 i‡(
bufsize
 > 
off£t
)

271 i‡(
	`gnués_ªc‹d_check_≥ndög
 (
˘x
->
£ssi⁄
) <= 0

272 && 
	`£À˘_fd
 (
fd
, 0.0, 
WAIT_FOR_READ
) <= 0)

273 
ªad
 = 0;

275 
ªad
 = 
	`wgnués_ªad_timeout
 (
fd
, 
buf
 + 
off£t
, 
bufsize
 - offset,

276 
˘x
, 
›t
.
ªad_timeout
);

277 i‡(
ªad
 < 0)

279 i‡(
off£t
)

280 
ªad
 = 0;

282  
ªad
;

285 i‡(
ªad
 > 0)

287 
	`mem˝y
 (
˘x
->
≥ekbuf
 + 
off£t
, 
buf
 + offset,

288 
ªad
);

289 
˘x
->
≥ekÀn
 +
ªad
;

293  
off£t
 + 
ªad
;

294 
	}
}

297 
	$wgnués_îr°r
 (
fd
, *
¨g
)

299 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

300  
	`gnués_°ªº‹
 (
˘x
->
œ°_îr‹
);

301 
	}
}

304 
	$wgnués_˛o£
 (
fd
, *
¨g
)

306 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

308 
	`gnués_deöô
 (
˘x
->
£ssi⁄
);

309 
	`x‰ì
 (
˘x
);

310 
	`˛o£
 (
fd
);

311 
	}
}

316 
å™•‹t_im∂emíèti⁄
 
	gwgnués_å™•‹t
 =

318 
wgnués_ªad
, 
wgnués_wrôe
, 
wgnués_pﬁl
,

319 
wgnués_≥ek
, 
wgnués_îr°r
, 
wgnués_˛o£


322 
boﬁ


323 
	$s¶_c⁄√˘_wgë
 (
fd
)

325 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
;

326 
gnués_£ssi⁄
 
£ssi⁄
;

327 
îr
;

328 
	`gnués_öô
 (&
£ssi⁄
, 
GNUTLS_CLIENT
);

329 
	`gnués_£t_deÁu…_¥i‹ôy
 (
£ssi⁄
);

330 
	`gnués_¸edítüls_£t
 (
£ssi⁄
, 
GNUTLS_CRD_CERTIFICATE
, 
¸edítüls
);

331 #i‚de‡
FD_TO_SOCKET


332 
	#FD_TO_SOCKET
(
X
Ë(X)

	)

334 
	`gnués_å™•‹t_£t_±r
 (
£ssi⁄
, (
gnués_å™•‹t_±r
Ë
	`FD_TO_SOCKET
 (
fd
));

336 
îr
 = 0;

337 #i‡
HAVE_GNUTLS_PRIORITY_SET_DIRECT


338 
›t
.
£cuª_¥Ÿocﬁ
)

340 
£cuª_¥Ÿocﬁ_auto
:

342 
£cuª_¥Ÿocﬁ_s¶v2
:

343 
£cuª_¥Ÿocﬁ_s¶v3
:

344 
îr
 = 
	`gnués_¥i‹ôy_£t_dúe˘
 (
£ssi⁄
, "NORMAL:-VERS-TLS-ALL", 
NULL
);

346 
£cuª_¥Ÿocﬁ_ésv1
:

347 
îr
 = 
	`gnués_¥i‹ôy_£t_dúe˘
 (
£ssi⁄
, "NORMAL:-VERS-SSL3.0", 
NULL
);

350 
	`ab‹t
 ();

353 
Ælowed_¥Ÿocﬁs
[4] = {0, 0, 0, 0};

354 
›t
.
£cuª_¥Ÿocﬁ
)

356 
£cuª_¥Ÿocﬁ_auto
:

358 
£cuª_¥Ÿocﬁ_s¶v2
:

359 
£cuª_¥Ÿocﬁ_s¶v3
:

360 
Ælowed_¥Ÿocﬁs
[0] = 
GNUTLS_SSL3
;

361 
îr
 = 
	`gnués_¥Ÿocﬁ_£t_¥i‹ôy
 (
£ssi⁄
, 
Ælowed_¥Ÿocﬁs
);

364 
£cuª_¥Ÿocﬁ_ésv1
:

365 
Ælowed_¥Ÿocﬁs
[0] = 
GNUTLS_TLS1_0
;

366 
Ælowed_¥Ÿocﬁs
[1] = 
GNUTLS_TLS1_1
;

367 
Ælowed_¥Ÿocﬁs
[2] = 
GNUTLS_TLS1_2
;

368 
îr
 = 
	`gnués_¥Ÿocﬁ_£t_¥i‹ôy
 (
£ssi⁄
, 
Ælowed_¥Ÿocﬁs
);

372 
	`ab‹t
 ();

376 i‡(
îr
 < 0)

378 
	`log¥ötf
 (
LOG_NOTQUIET
, "GnuTLS: %s\n", 
	`gnués_°ªº‹
 (
îr
));

379 
	`gnués_deöô
 (
£ssi⁄
);

380  
Ál£
;

383 
îr
 = 
	`gnués_h™dshake
 (
£ssi⁄
);

384 i‡(
îr
 < 0)

386 
	`log¥ötf
 (
LOG_NOTQUIET
, "GnuTLS: %s\n", 
	`gnués_°ªº‹
 (
îr
));

387 
	`gnués_deöô
 (
£ssi⁄
);

388  
Ál£
;

391 
˘x
 = 
	`x√w0
 (
wgnués_å™•‹t_c⁄ãxt
);

392 
˘x
->
£ssi⁄
 = session;

393 
	`fd_ªgi°î_å™•‹t
 (
fd
, &
wgnués_å™•‹t
, 
˘x
);

394  
åue
;

395 
	}
}

397 
boﬁ


398 
	$s¶_check_˚πifiˇã
 (
fd
, c⁄° *
ho°
)

400 
wgnués_å™•‹t_c⁄ãxt
 *
˘x
 = 
	`fd_å™•‹t_c⁄ãxt
 (
fd
);

402 
°©us
;

403 
îr
;

407 c⁄° *
£vîôy
 = 
›t
.
check_˚π
 ? 
	`_
("ERROR") : _("WARNING");

408 
boﬁ
 
suc˚ss
 = 
åue
;

410 
îr
 = 
	`gnués_˚πifiˇã_vîify_≥îs2
 (
˘x
->
£ssi⁄
, &
°©us
);

411 i‡(
îr
 < 0)

413 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: No certificateÖresented by %s.\n"),

414 
£vîôy
, 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ho°
));

415 
suc˚ss
 = 
Ál£
;

416 
out
;

419 i‡(
°©us
 & 
GNUTLS_CERT_INVALID
)

421 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: The certificate of %s isÇotÅrusted.\n"),

422 
£vîôy
, 
	`quŸe
 (
ho°
));

423 
suc˚ss
 = 
Ál£
;

425 i‡(
°©us
 & 
GNUTLS_CERT_SIGNER_NOT_FOUND
)

427 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: The certificate of %s hasn't gotá known issuer.\n"),

428 
£vîôy
, 
	`quŸe
 (
ho°
));

429 
suc˚ss
 = 
Ál£
;

431 i‡(
°©us
 & 
GNUTLS_CERT_REVOKED
)

433 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: The certificate of %s has beenÑevoked.\n"),

434 
£vîôy
, 
	`quŸe
 (
ho°
));

435 
suc˚ss
 = 
Ál£
;

438 i‡(
	`gnués_˚πifiˇã_ty≥_gë
 (
˘x
->
£ssi⁄
Ë=
GNUTLS_CRT_X509
)

440 
time_t
 
now
 = 
	`time
 (
NULL
);

441 
gnués_x509_¸t
 
˚π
;

442 c⁄° 
gnués_d©um
 *
˚π_li°
;

443 
˚π_li°_size
;

445 i‡((
îr
 = 
	`gnués_x509_¸t_öô
 (&
˚π
)) < 0)

447 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Error initializing X509 certificate: %s\n"),

448 
	`gnués_°ªº‹
 (
îr
));

449 
suc˚ss
 = 
Ál£
;

450 
out
;

453 
˚π_li°
 = 
	`gnués_˚πifiˇã_gë_≥îs
 (
˘x
->
£ssi⁄
, &
˚π_li°_size
);

454 i‡(!
˚π_li°
)

456 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No certificate found\n"));

457 
suc˚ss
 = 
Ál£
;

458 
out
;

460 
îr
 = 
	`gnués_x509_¸t_imp‹t
 (
˚π
, 
˚π_li°
, 
GNUTLS_X509_FMT_DER
);

461 i‡(
îr
 < 0)

463 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("ErrorÖarsing certificate: %s\n"),

464 
	`gnués_°ªº‹
 (
îr
));

465 
suc˚ss
 = 
Ál£
;

466 
out
;

468 i‡(
now
 < 
	`gnués_x509_¸t_gë_a˘iv©i⁄_time
 (
˚π
))

470 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("The certificate hasÇot yet beenáctivated\n"));

471 
suc˚ss
 = 
Ál£
;

473 i‡(
now
 >
	`gnués_x509_¸t_gë_expú©i⁄_time
 (
˚π
))

475 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("The certificate hasÉxpired\n"));

476 
suc˚ss
 = 
Ál£
;

478 i‡(!
	`gnués_x509_¸t_check_ho°«me
 (
˚π
, 
ho°
))

480 
	`log¥ötf
 (
LOG_NOTQUIET
,

481 
	`_
("The certificate's owner doesÇot match hostname %s\n"),

482 
	`quŸe
 (
ho°
));

483 
suc˚ss
 = 
Ál£
;

485 
	`gnués_x509_¸t_deöô
 (
˚π
);

488 
out
:

489  
›t
.
check_˚π
 ? 
suc˚ss
 : 
åue
;

490 
	}
}

	@src/hash.c

34 #i‚de‡
STANDALONE


35 
	~"wgë.h
"

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<as£π.h
>

41 
	~<°rög.h
>

42 
	~<limôs.h
>

44 #i‚de‡
STANDALONE


46 
	~"utûs.h
"

49 
	#x√w
(
x
Ë
	`xmÆloc
 ( (x))

	)

50 
	#x√w_¨øy
(
ty≥
, 
x
Ë
	`xmÆloc
 ( (ty≥Ë* (x))

	)

51 
	#xmÆloc
 
mÆloc


	)

52 
	#x‰ì
 
‰ì


	)

53 #i‚de‡
cou¡of


54 
	#cou¡of
(
x
Ë( (xË/  ((x)[0]))

	)

56 
	~<˘y≥.h
>

57 
	#c_tﬁowî
(
x
Ë
	`tﬁowî
 ((Ë(x))

	)

58 #ifde‡
HAVE_STDINT_H


59 
	~<°döt.h
>

61 
	tuöçå_t
;

65 
	~"hash.h
"

141 
	#HASH_MAX_FULLNESS
 0.75

	)

146 
	#HASH_RESIZE_FACTOR
 2

	)

148 
	s˚Œ
 {

149 *
	mkey
;

150 *
	mvÆue
;

153 (*
	thashfun_t
) (const *);

154 (*
	tã°fun_t
) (const *, const *);

156 
	shash_èbÀ
 {

157 
hashfun_t
 
hash_fun˘i⁄
;

158 
ã°fun_t
 
ã°_fun˘i⁄
;

160 
˚Œ
 *
˚Œs
;

161 
size
;

163 
cou¡
;

164 
ªsize_thªshﬁd
;

166 
¥ime_off£t
;

181 
	#INVALID_PTR
 ((*Ë~(
uöçå_t
Ë0)

	)

182 #i‚de‡
UCHAR_MAX


183 
	#UCHAR_MAX
 0xff

	)

185 
	#INVALID_PTR_CHAR
 
UCHAR_MAX


	)

188 
	#CELL_OCCUPIED
(
c
Ë((c)->
key
 !
INVALID_PTR
)

	)

191 
	#CLEAR_CELL
(
c
Ë((c)->
key
 = 
INVALID_PTR
)

	)

195 
	#NEXT_CELL
(
c
, 
˚Œs
, 
size
Ë(¯!˚Œ†+ (sizê- 1Ë? c + 1 : cñls)

	)

199 
	#FOREACH_OCCUPIED_ADJACENT
(
c
, 
˚Œs
, 
size
) \

200 ; 
	`CELL_OCCUPIED
 (
c
); c = 
	`NEXT_CELL
 (c, 
˚Œs
, 
size
))

	)

204 
	#HASH_POSITION
(
key
, 
hashfun
, 
size
Ë((hashfunË(keyË% size)

	)

216 
	$¥ime_size
 (
size
, *
¥ime_off£t
)

218 c⁄° 
¥imes
[] = {

229 
size_t
 
i
;

231 
i
 = *
¥ime_off£t
; i < 
	`cou¡of
 (
¥imes
); i++)

232 i‡(
¥imes
[
i
] >
size
)

239 *
¥ime_off£t
 = 
i
 + 1;

240  
¥imes
[
i
];

243 
	`ab‹t
 ();

244 
	}
}

246 
cmp_poöãr
 (const *, const *);

272 
hash_èbÀ
 *

273 
hash_èbÀ_√w
 (
ôems
,

274 (*
hash_fun˘i⁄
) (const *),

275 (*
ã°_fun˘i⁄
) (const *, const *))

277 
size
;

278 
hash_èbÀ
 *
ht
 = 
	`x√w
 (hash_table);

280 
ht
->
hash_fun˘i⁄
 = hash_fun˘i⁄ ? hash_fun˘i⁄ : 
hash_poöãr
;

281 
ht
->
ã°_fun˘i⁄
 =Åe°_fun˘i⁄ ?Åe°_fun˘i⁄ : 
cmp_poöãr
;

285 
ht
->
¥ime_off£t
 = 0;

289 
size
 = 1 + 
ôems
 / 
HASH_MAX_FULLNESS
;

290 
size
 = 
	`¥ime_size
 (size, &
ht
->
¥ime_off£t
);

291 
ht
->
size
 = size;

292 
ht
->
ªsize_thªshﬁd
 = 
size
 * 
HASH_MAX_FULLNESS
;

295 
ht
->
˚Œs
 = 
	`x√w_¨øy
 (
˚Œ
, ht->
size
);

299 
	`mem£t
 (
ht
->
˚Œs
, 
INVALID_PTR_CHAR
, 
size
 *  (
˚Œ
));

301 
ht
->
cou¡
 = 0;

303  
ht
;

304 
	}
}

309 
	$hash_èbÀ_de°roy
 (
hash_èbÀ
 *
ht
)

311 
	`x‰ì
 (
ht
->
˚Œs
);

312 
	`x‰ì
 (
ht
);

313 
	}
}

319 
ölöe
 
˚Œ
 *

320 
	$föd_˚Œ
 (c⁄° 
hash_èbÀ
 *
ht
, c⁄° *
key
)

322 
˚Œ
 *
˚Œs
 = 
ht
->cells;

323 
size
 = 
ht
->size;

324 
˚Œ
 *
c
 = 
˚Œs
 + 
	`HASH_POSITION
 (
key
, 
ht
->
hash_fun˘i⁄
, 
size
);

325 
ã°fun_t
 
equÆs
 = 
ht
->
ã°_fun˘i⁄
;

327 
	`FOREACH_OCCUPIED_ADJACENT
 (
c
, 
˚Œs
, 
size
)

328 i‡(
	`equÆs
 (
key
, 
c
->key))

330  
c
;

331 
	}
}

341 
	$hash_èbÀ_gë
 (c⁄° 
hash_èbÀ
 *
ht
, c⁄° *
key
)

343 
˚Œ
 *
c
 = 
	`föd_˚Œ
 (
ht
, 
key
);

344 i‡(
	`CELL_OCCUPIED
 (
c
))

345  
c
->
vÆue
;

347  
NULL
;

348 
	}
}

354 
	$hash_èbÀ_gë_∑ú
 (c⁄° 
hash_èbÀ
 *
ht
, c⁄° *
lookup_key
,

355 *
‹ig_key
, *
vÆue
)

357 
˚Œ
 *
c
 = 
	`föd_˚Œ
 (
ht
, 
lookup_key
);

358 i‡(
	`CELL_OCCUPIED
 (
c
))

360 i‡(
‹ig_key
)

361 *(**)
‹ig_key
 = 
c
->
key
;

362 i‡(
vÆue
)

363 *(**)
vÆue
 = 
c
->value;

368 
	}
}

373 
	$hash_èbÀ_c⁄èös
 (c⁄° 
hash_èbÀ
 *
ht
, c⁄° *
key
)

375 
˚Œ
 *
c
 = 
	`föd_˚Œ
 (
ht
, 
key
);

376  
	`CELL_OCCUPIED
 (
c
);

377 
	}
}

383 
	$grow_hash_èbÀ
 (
hash_èbÀ
 *
ht
)

385 
hashfun_t
 
hashî
 = 
ht
->
hash_fun˘i⁄
;

386 
˚Œ
 *
ﬁd_˚Œs
 = 
ht
->
˚Œs
;

387 
˚Œ
 *
ﬁd_íd
 = 
ht
->
˚Œs
 + ht->
size
;

388 
˚Œ
 *
c
, *
˚Œs
;

389 
√wsize
;

391 
√wsize
 = 
	`¥ime_size
 (
ht
->
size
 * 
HASH_RESIZE_FACTOR
, &ht->
¥ime_off£t
);

393 
	`¥ötf
 ("growing from %dÅo %d; fullness %.2f%%Åo %.2f%%\n",

394 
ht
->
size
, 
√wsize
,

395 100.0 * 
ht
->
cou¡
 / ht->
size
,

396 100.0 * 
ht
->
cou¡
 / 
√wsize
);

399 
ht
->
size
 = 
√wsize
;

400 
ht
->
ªsize_thªshﬁd
 = 
√wsize
 * 
HASH_MAX_FULLNESS
;

402 
˚Œs
 = 
	`x√w_¨øy
 (
˚Œ
, 
√wsize
);

403 
	`mem£t
 (
˚Œs
, 
INVALID_PTR_CHAR
, 
√wsize
 *  (
˚Œ
));

404 
ht
->
˚Œs
 = cells;

406 
c
 = 
ﬁd_˚Œs
; c < 
ﬁd_íd
; c++)

407 i‡(
	`CELL_OCCUPIED
 (
c
))

409 
˚Œ
 *
√w_c
;

413 
√w_c
 = 
˚Œs
 + 
	`HASH_POSITION
 (
c
->
key
, 
hashî
, 
√wsize
);

414 
	`FOREACH_OCCUPIED_ADJACENT
 (
√w_c
, 
˚Œs
, 
√wsize
)

416 *
√w_c
 = *
c
;

419 
	`x‰ì
 (
ﬁd_˚Œs
);

420 
	}
}

426 
	$hash_èbÀ_put
 (
hash_èbÀ
 *
ht
, c⁄° *
key
, *
vÆue
)

428 
˚Œ
 *
c
 = 
	`föd_˚Œ
 (
ht
, 
key
);

429 i‡(
	`CELL_OCCUPIED
 (
c
))

432 
c
->
key
 = (*)key;

433 
c
->
vÆue
 = value;

439 i‡(
ht
->
cou¡
 >ht->
ªsize_thªshﬁd
)

441 
	`grow_hash_èbÀ
 (
ht
);

442 
c
 = 
	`föd_˚Œ
 (
ht
, 
key
);

446 ++
ht
->
cou¡
;

447 
c
->
key
 = (*)key;

448 
c
->
vÆue
 = value;

449 
	}
}

455 
	$hash_èbÀ_ªmove
 (
hash_èbÀ
 *
ht
, c⁄° *
key
)

457 
˚Œ
 *
c
 = 
	`föd_˚Œ
 (
ht
, 
key
);

458 i‡(!
	`CELL_OCCUPIED
 (
c
))

462 
size
 = 
ht
->size;

463 
˚Œ
 *
˚Œs
 = 
ht
->cells;

464 
hashfun_t
 
hashî
 = 
ht
->
hash_fun˘i⁄
;

466 
	`CLEAR_CELL
 (
c
);

467 --
ht
->
cou¡
;

474 
c
 = 
	`NEXT_CELL
 (c, 
˚Œs
, 
size
);

475 
	`FOREACH_OCCUPIED_ADJACENT
 (
c
, 
˚Œs
, 
size
)

477 c⁄° *
key2
 = 
c
->
key
;

478 
˚Œ
 *
c_√w
;

481 
c_√w
 = 
˚Œs
 + 
	`HASH_POSITION
 (
key2
, 
hashî
, 
size
);

482 
	`FOREACH_OCCUPIED_ADJACENT
 (
c_√w
, 
˚Œs
, 
size
)

483 i‡(
key2
 =
c_√w
->
key
)

486 
√xt_ªhash
;

488 *
c_√w
 = *
c
;

489 
	`CLEAR_CELL
 (
c
);

491 
√xt_ªhash
:

496 
	}
}

503 
	$hash_èbÀ_˛ór
 (
hash_èbÀ
 *
ht
)

505 
	`mem£t
 (
ht
->
˚Œs
, 
INVALID_PTR_CHAR
, ht->
size
 *  (
˚Œ
));

506 
ht
->
cou¡
 = 0;

507 
	}
}

521 
hash_èbÀ_f‹_óch
 (
hash_èbÀ
 *
ht
,

522 (*
‚
Ë(*, *, *), *
¨g
)

524 
˚Œ
 *
c
 = 
ht
->
˚Œs
;

525 
˚Œ
 *
íd
 = 
ht
->
˚Œs
 + ht->
size
;

527 ; 
c
 < 
íd
; c++)

528 i‡(
	`CELL_OCCUPIED
 (
c
))

530 *
key
;

531 
ª≥©
:

532 
key
 = 
c
->key;

533 i‡(
	`‚
 (
key
, 
c
->
vÆue
, 
¨g
))

536 i‡(
c
->
key
 !key && 
	`CELL_OCCUPIED
 (c))

537 
ª≥©
;

539 
	}
}

552 
	$hash_èbÀ_ôî©e
 (
hash_èbÀ
 *
ht
, 
hash_èbÀ_ôî©‹
 *
ôî
)

554 
ôî
->
pos
 = 
ht
->
˚Œs
;

555 
ôî
->
íd
 = 
ht
->
˚Œs
 + ht->
size
;

556 
	}
}

568 
	$hash_èbÀ_ôî_√xt
 (
hash_èbÀ_ôî©‹
 *
ôî
)

570 
˚Œ
 *
c
 = 
ôî
->
pos
;

571 
˚Œ
 *
íd
 = 
ôî
->end;

572 ; 
c
 < 
íd
; c++)

573 i‡(
	`CELL_OCCUPIED
 (
c
))

575 
ôî
->
key
 = 
c
->key;

576 
ôî
->
vÆue
 = 
c
->value;

577 
ôî
->
pos
 = 
c
 + 1;

581 
	}
}

588 
	$hash_èbÀ_cou¡
 (c⁄° 
hash_èbÀ
 *
ht
)

590  
ht
->
cou¡
;

591 
	}
}

642 
	$hash_°rög
 (c⁄° *
key
)

644 c⁄° *
p
 = 
key
;

645 
h
 = *
p
;

647 i‡(
h
)

648 
p
 += 1; *p != '\0';Ö++)

649 
h
 = (h << 5Ë- h + *
p
;

651  
h
;

652 
	}
}

657 
	$cmp_°rög
 (c⁄° *
s1
, c⁄° *
s2
)

659  !
	`°rcmp
 ((c⁄° *)
s1
, (c⁄° *)
s2
);

660 
	}
}

665 
hash_èbÀ
 *

666 
	$make_°rög_hash_èbÀ
 (
ôems
)

668  
	`hash_èbÀ_√w
 (
ôems
, 
hash_°rög
, 
cmp_°rög
);

669 
	}
}

680 
	$hash_°rög_noˇ£
 (c⁄° *
key
)

682 c⁄° *
p
 = 
key
;

683 
h
 = 
	`c_tﬁowî
 (*
p
);

685 i‡(
h
)

686 
p
 += 1; *p != '\0';Ö++)

687 
h
 = (h << 5Ë- h + 
	`c_tﬁowî
 (*
p
);

689  
h
;

690 
	}
}

695 
	$°rög_cmp_noˇ£
 (c⁄° *
s1
, c⁄° *
s2
)

697  !
	`°rˇ£cmp
 ((c⁄° *)
s1
, (c⁄° *)
s2
);

698 
	}
}

703 
hash_èbÀ
 *

704 
	$make_noˇ£_°rög_hash_èbÀ
 (
ôems
)

706  
	`hash_èbÀ_√w
 (
ôems
, 
hash_°rög_noˇ£
, 
°rög_cmp_noˇ£
);

707 
	}
}

718 
	$hash_poöãr
 (c⁄° *
±r
)

720 
uöçå_t
 
key
 = (uöçå_tË
±r
;

721 
key
 += (key << 12);

722 
key
 ^= (key >> 22);

723 
key
 += (key << 4);

724 
key
 ^= (key >> 9);

725 
key
 += (key << 10);

726 
key
 ^= (key >> 2);

727 
key
 += (key << 7);

728 
key
 ^= (key >> 12);

729 #i‡
SIZEOF_VOID_P
 > 4

730 
key
 += (key << 44);

731 
key
 ^= (key >> 54);

732 
key
 += (key << 36);

733 
key
 ^= (key >> 41);

734 
key
 += (key << 42);

735 
key
 ^= (key >> 34);

736 
key
 += (key << 39);

737 
key
 ^= (key >> 44);

739  (Ë
key
;

740 
	}
}

743 
	$cmp_poöãr
 (c⁄° *
±r1
, c⁄° *
±r2
)

745  
±r1
 =
±r2
;

746 
	}
}

748 #ifde‡
TEST


750 
	~<°dio.h
>

751 
	~<°rög.h
>

754 
	$¥öt_hash
 (
hash_èbÀ
 *
sht
)

756 
hash_èbÀ_ôî©‹
 
ôî
;

757 
cou¡
 = 0;

759 
	`hash_èbÀ_ôî©e
 (
sht
, &
ôî
); 
	`hash_èbÀ_ôî_√xt
 (&iter);

760 ++
cou¡
)

761 
	`¥ötf
 ("%s: %s\n", 
ôî
.
key
, iãr.
vÆue
);

762 
	`as£π
 (
cou¡
 =
sht
->count);

763 
	}
}

766 
	$maö
 ()

768 
hash_èbÀ
 *
ht
 = 
	`make_°rög_hash_èbÀ
 (0);

769 
löe
[80];

770 (
	`fgës
 (
löe
,  (löe), 
°dö
)))

772 
Àn
 = 
	`°æí
 (
löe
);

773 i‡(
Àn
 <= 1)

775 
löe
[--
Àn
] = '\0';

776 i‡(!
	`hash_èbÀ_c⁄èös
 (
ht
, 
löe
))

777 
	`hash_èbÀ_put
 (
ht
, 
	`°rdup
 (
löe
), "here Iám!");

779 i‡(
Àn
 % 5 == 0)

781 *
löe_c›y
;

782 i‡(
	`hash_èbÀ_gë_∑ú
 (
ht
, 
löe
, &
löe_c›y
, 
NULL
))

784 
	`hash_èbÀ_ªmove
 (
ht
, 
löe
);

785 
	`x‰ì
 (
löe_c›y
);

791 
	`¥öt_hash
 (
ht
);

794 
	`¥ötf
 ("%d %d\n", 
ht
->
cou¡
, ht->
size
);

797 
	}
}

	@src/hash.h

31 #i‚de‡
HASH_H


32 
	#HASH_H


	)

34 
	ghash_èbÀ
;

36 
hash_èbÀ
 *
hash_èbÀ_√w
 (, (*) (const *),

38 
	`hash_èbÀ_de°roy
 (
hash_èbÀ
 *);

40 *
	`hash_èbÀ_gë
 (c⁄° 
hash_èbÀ
 *, const *);

41 
	`hash_èbÀ_gë_∑ú
 (c⁄° 
hash_èbÀ
 *, const *,

43 
	`hash_èbÀ_c⁄èös
 (c⁄° 
hash_èbÀ
 *, const *);

45 
	`hash_èbÀ_put
 (
hash_èbÀ
 *, const *, *);

46 
	`hash_èbÀ_ªmove
 (
hash_èbÀ
 *, const *);

47 
	`hash_èbÀ_˛ór
 (
hash_èbÀ
 *);

49 
	`hash_èbÀ_f‹_óch
 (
hash_èbÀ
 *,

53 *
key
, *
vÆue
;

54 *
pos
, *
íd
;

55 } 
	thash_èbÀ_ôî©‹
;

56 
	`hash_èbÀ_ôî©e
 (
hash_èbÀ
 *, 
hash_èbÀ_ôî©‹
 *);

57 
	`hash_èbÀ_ôî_√xt
 (
hash_èbÀ_ôî©‹
 *);

59 
	`hash_èbÀ_cou¡
 (c⁄° 
hash_èbÀ
 *);

61 
hash_èbÀ
 *
	`make_°rög_hash_èbÀ
 ();

62 
hash_èbÀ
 *
	`make_noˇ£_°rög_hash_èbÀ
 ();

64 
	`hash_poöãr
 (const *);

	@src/host.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<as£π.h
>

39 #i‚de‡
WINDOWS


40 
	~<sys/ty≥s.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 #i‚de‡
__BEOS__


44 
	~<¨∑/öë.h
>

46 #ifde‡
__VMS


47 
	~"vms_ù.h
"

49 
	~<√tdb.h
>

51 
	#SET_H_ERRNO
(
îr
Ë(()(
h_î∫o
 = (îr)))

	)

53 
	~<wösock2.h
>

54 
	~<ws2t˝ù.h
>

55 
	#SET_H_ERRNO
(
îr
Ë
	`WSASëLa°Eº‹
 (îr)

	)

58 
	~<î∫o.h
>

60 
	~"utûs.h
"

61 
	~"ho°.h
"

62 
	~"uæ.h
"

63 
	~"hash.h
"

65 #i‚de‡
NO_ADDRESS


66 
	#NO_ADDRESS
 
NO_DATA


	)

69 #i‡!
HAVE_DECL_H_ERRNO
 && !
deföed
(
WINDOWS
)

70 
h_î∫o
;

77 
	saddªss_li°
 {

78 
	mcou¡
;

79 
ù_addªss
 *
	maddªs£s
;

81 
	mÁu…y
;

82 
boﬁ
 
	mc⁄√˘ed
;

86 
	mªfcou¡
;

93 
	$addªss_li°_gë_bounds
 (c⁄° 
addªss_li°
 *
Æ
, *
°¨t
, *
íd
)

95 *
°¨t
 = 
Æ
->
Áu…y
;

96 *
íd
 = 
Æ
->
cou¡
;

97 
	}
}

101 c⁄° 
ù_addªss
 *

102 
	$addªss_li°_addªss_©
 (c⁄° 
addªss_li°
 *
Æ
, 
pos
)

104 
	`as£π
 (
pos
 >
Æ
->
Áu…y
 &&Öo†<ál->
cou¡
);

105  
Æ
->
addªs£s
 + 
pos
;

106 
	}
}

110 
boﬁ


111 
	$addªss_li°_c⁄èös
 (c⁄° 
addªss_li°
 *
Æ
, c⁄° 
ù_addªss
 *
ù
)

113 
i
;

114 
ù
->
Ámûy
)

116 
AF_INET
:

117 
i
 = 0; i < 
Æ
->
cou¡
; i++)

119 
ù_addªss
 *
cur
 = 
Æ
->
addªs£s
 + 
i
;

120 i‡(
cur
->
Ámûy
 =
AF_INET


121 && (
cur
->
d©a
.
d4
.
s_addr
 =
ù
->data.d4.s_addr))

122  
åue
;

124  
Ál£
;

125 #ifde‡
ENABLE_IPV6


126 
AF_INET6
:

127 
i
 = 0; i < 
Æ
->
cou¡
; i++)

129 
ù_addªss
 *
cur
 = 
Æ
->
addªs£s
 + 
i
;

130 i‡(
cur
->
Ámûy
 =
AF_INET6


131 #ifde‡
HAVE_SOCKADDR_IN6_SCOPE_ID


132 && 
cur
->
ùv6_sc›e
 =
ù
->ipv6_scope

134 && 
	`IN6_ARE_ADDR_EQUAL
 (&
cur
->
d©a
.
d6
, &
ù
->data.d6))

135  
åue
;

137  
Ál£
;

140 
	`ab‹t
 ();

142 
	}
}

148 
	$addªss_li°_£t_Áu…y
 (
addªss_li°
 *
Æ
, 
ödex
)

153 
	`as£π
 (
ödex
 =
Æ
->
Áu…y
);

155 ++
Æ
->
Áu…y
;

156 i‡(
Æ
->
Áu…y
 >Æ->
cou¡
)

161 
Æ
->
Áu…y
 = 0;

162 
	}
}

168 
	$addªss_li°_£t_c⁄√˘ed
 (
addªss_li°
 *
Æ
)

170 
Æ
->
c⁄√˘ed
 = 
åue
;

171 
	}
}

175 
boﬁ


176 
	$addªss_li°_c⁄√˘ed_p
 (c⁄° 
addªss_li°
 *
Æ
)

178  
Æ
->
c⁄√˘ed
;

179 
	}
}

181 #ifde‡
ENABLE_IPV6


186 
addªss_li°
 *

187 
	$addªss_li°_‰om_addröfo
 (c⁄° 
addröfo
 *
ai
)

189 
addªss_li°
 *
Æ
;

190 c⁄° 
addröfo
 *
±r
;

191 
˙t
;

192 
ù_addªss
 *
ù
;

194 
˙t
 = 0;

195 
±r
 = 
ai
;Öå !
NULL
 ;Öå =Öå->
ai_√xt
)

196 i‡(
±r
->
ai_Ámûy
 =
AF_INET
 ||Öå->ai_Ámûy =
AF_INET6
)

197 ++
˙t
;

198 i‡(
˙t
 == 0)

199  
NULL
;

201 
Æ
 = 
	`x√w0
 (
addªss_li°
);

202 
Æ
->
addªs£s
 = 
	`x√w_¨øy
 (
ù_addªss
, 
˙t
);

203 
Æ
->
cou¡
 = 
˙t
;

204 
Æ
->
ªfcou¡
 = 1;

206 
ù
 = 
Æ
->
addªs£s
;

207 
±r
 = 
ai
;Öå !
NULL
;Öå =Öå->
ai_√xt
)

208 i‡(
±r
->
ai_Ámûy
 =
AF_INET6
)

210 c⁄° 
sockaddr_ö6
 *
sö6
 =

211 (c⁄° 
sockaddr_ö6
 *)
±r
->
ai_addr
;

212 
ù
->
Ámûy
 = 
AF_INET6
;

213 
ù
->
d©a
.
d6
 = 
sö6
->
sö6_addr
;

214 #ifde‡
HAVE_SOCKADDR_IN6_SCOPE_ID


215 
ù
->
ùv6_sc›e
 = 
sö6
->
sö6_sc›e_id
;

217 ++
ù
;

219 i‡(
±r
->
ai_Ámûy
 =
AF_INET
)

221 c⁄° 
sockaddr_ö
 *
sö
 =

222 (c⁄° 
sockaddr_ö
 *)
±r
->
ai_addr
;

223 
ù
->
Ámûy
 = 
AF_INET
;

224 
ù
->
d©a
.
d4
 = 
sö
->
sö_addr
;

225 ++
ù
;

227 
	`as£π
 (
ù
 - 
Æ
->
addªs£s
 =
˙t
);

228  
Æ
;

229 
	}
}

231 
	#IS_IPV4
(
addr
Ë(((c⁄° 
ù_addªss
 *Ëaddr)->
Ámûy
 =
AF_INET
)

	)

242 
	$cmp_¥e„r_ùv4
 (c⁄° *
addr1
, c⁄° *
addr2
)

244  !
	`IS_IPV4
 (
addr1
Ë- !IS_IPV4 (
addr2
);

245 
	}
}

247 
	#IS_IPV6
(
addr
Ë(((c⁄° 
ù_addªss
 *Ëaddr)->
Ámûy
 =
AF_INET6
)

	)

252 
	$cmp_¥e„r_ùv6
 (c⁄° *
addr1
, c⁄° *
addr2
)

254  !
	`IS_IPV6
 (
addr1
Ë- !IS_IPV6 (
addr2
);

255 
	}
}

262 
addªss_li°
 *

263 
	$addªss_li°_‰om_ùv4_addªs£s
 (**
vec
)

265 
cou¡
, 
i
;

266 
addªss_li°
 *
Æ
 = 
	`x√w0
 (address_list);

268 
cou¡
 = 0;

269 
vec
[
cou¡
])

270 ++
cou¡
;

271 
	`as£π
 (
cou¡
 > 0);

273 
Æ
->
addªs£s
 = 
	`x√w_¨øy
 (
ù_addªss
, 
cou¡
);

274 
Æ
->
cou¡
 = count;

275 
Æ
->
ªfcou¡
 = 1;

277 
i
 = 0; i < 
cou¡
; i++)

279 
ù_addªss
 *
ù
 = &
Æ
->
addªs£s
[
i
];

280 
ù
->
Ámûy
 = 
AF_INET
;

281 
	`mem˝y
 (
	`IP_INADDR_DATA
 (
ù
), 
vec
[
i
], 4);

284  
Æ
;

285 
	}
}

290 
	$addªss_li°_dñëe
 (
addªss_li°
 *
Æ
)

292 
	`x‰ì
 (
Æ
->
addªs£s
);

293 
	`x‰ì
 (
Æ
);

294 
	}
}

301 
	$addªss_li°_ªÀa£
 (
addªss_li°
 *
Æ
)

303 --
Æ
->
ªfcou¡
;

304 
	`DEBUGP
 (("Rñósög 0x%0*lx (√wÑefcou¡ %d).\n", 
	`PTR_FORMAT
 (
Æ
),

305 
Æ
->
ªfcou¡
));

306 i‡(
Æ
->
ªfcou¡
 <= 0)

308 
	`DEBUGP
 (("Dñëög unu£d 0x%0*lx.\n", 
	`PTR_FORMAT
 (
Æ
)));

309 
	`addªss_li°_dñëe
 (
Æ
);

311 
	}
}

315 #i‚de‡
ENABLE_IPV6


317 
	sghbnwt_c⁄ãxt
 {

318 c⁄° *
	mho°_«me
;

319 
ho°ít
 *
	mh±r
;

323 
	$gëho°by«me_wôh_timeout_ˇŒback
 (*
¨g
)

325 
ghbnwt_c⁄ãxt
 *
˘x
 = (ghbnwt_c⁄ãxà*)
¨g
;

326 
˘x
->
h±r
 = 
	`gëho°by«me
 (˘x->
ho°_«me
);

327 
	}
}

334 
ho°ít
 *

335 
	$gëho°by«me_wôh_timeout
 (c⁄° *
ho°_«me
, 
timeout
)

337 
ghbnwt_c⁄ãxt
 
˘x
;

338 
˘x
.
ho°_«me
 = host_name;

339 i‡(
	`run_wôh_timeout
 (
timeout
, 
gëho°by«me_wôh_timeout_ˇŒback
, &
˘x
))

341 
	`SET_H_ERRNO
 (
HOST_NOT_FOUND
);

342 
î∫o
 = 
ETIMEDOUT
;

343  
NULL
;

345 i‡(!
˘x
.
h±r
)

346 
î∫o
 = 0;

347  
˘x
.
h±r
;

348 
	}
}

352 
	$ho°_îr°r
 (
îr‹
)

357 i‡(
îr‹
 =
HOST_NOT_FOUND


358 || 
îr‹
 =
NO_RECOVERY


359 || 
îr‹
 =
NO_DATA


360 || 
îr‹
 =
NO_ADDRESS
)

361  
	`_
("Unknown host");

362 i‡(
îr‹
 =
TRY_AGAIN
)

365  
	`_
("Temporary failure inÇameÑesolution");

367  
	`_
("UnknownÉrror");

368 
	}
}

372 
	sgaiwt_c⁄ãxt
 {

373 c⁄° *
	mnode
;

374 c⁄° *
	m£rvi˚
;

375 c⁄° 
addröfo
 *
	mhöts
;

376 
addröfo
 **
	mªs
;

377 
	mexô_code
;

381 
	$gëaddröfo_wôh_timeout_ˇŒback
 (*
¨g
)

383 
gaiwt_c⁄ãxt
 *
˘x
 = (gaiwt_c⁄ãxà*)
¨g
;

384 
˘x
->
exô_code
 = 
	`gëaddröfo
 (˘x->
node
, ctx->
£rvi˚
, ctx->
höts
, ctx->
ªs
);

385 
	}
}

392 
	$gëaddröfo_wôh_timeout
 (c⁄° *
node
, c⁄° *
£rvi˚
,

393 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
,

394 
timeout
)

396 
gaiwt_c⁄ãxt
 
˘x
;

397 
˘x
.
node
 =Çode;

398 
˘x
.
£rvi˚
 = service;

399 
˘x
.
höts
 = hints;

400 
˘x
.
ªs
 =Ñes;

402 i‡(
	`run_wôh_timeout
 (
timeout
, 
gëaddröfo_wôh_timeout_ˇŒback
, &
˘x
))

404 
î∫o
 = 
ETIMEDOUT
;

405  
EAI_SYSTEM
;

407  
˘x
.
exô_code
;

408 
	}
}

417 
	$¥öt_addªss
 (c⁄° 
ù_addªss
 *
addr
)

419 #ifde‡
ENABLE_IPV6


420 
buf
[64];

421 i‡(!
	`öë_¡›
 (
addr
->
Ámûy
, 
	`IP_INADDR_DATA
 (addr), 
buf
,  buf))

422 
	`¢¥ötf
 (
buf
,  buf, "<îr‹: %s>", 
	`°ªº‹
 (
î∫o
));

423  
buf
;

425  
	`öë_¡ﬂ
 (
addr
->
d©a
.
d4
);

427 
	}
}

432 
boﬁ


433 
	$is_vÆid_ùv4_addªss
 (c⁄° *
°r
, c⁄° *
íd
)

435 
boﬁ
 
ßw_digô
 = 
Ál£
;

436 
o˘ës
 = 0;

437 
vÆ
 = 0;

439 
°r
 < 
íd
)

441 
ch
 = *
°r
++;

443 i‡(
ch
 >= '0' && ch <= '9')

445 
vÆ
 = vÆ * 10 + (
ch
 - '0');

447 i‡(
vÆ
 > 255)

448  
Ál£
;

449 i‡(!
ßw_digô
)

451 i‡(++
o˘ës
 > 4)

452  
Ál£
;

453 
ßw_digô
 = 
åue
;

456 i‡(
ch
 ='.' && 
ßw_digô
)

458 i‡(
o˘ës
 == 4)

459  
Ál£
;

460 
vÆ
 = 0;

461 
ßw_digô
 = 
Ál£
;

464  
Ál£
;

466 i‡(
o˘ës
 < 4)

467  
Ál£
;

469  
åue
;

470 
	}
}

472 
boﬁ


473 
	$is_vÆid_ùv6_addªss
 (c⁄° *
°r
, c⁄° *
íd
)

477 
ns_öaddrsz
 = 4,

478 
ns_ö6addrsz
 = 16,

479 
ns_öt16sz
 = 2

482 c⁄° *
cuπok
;

483 
ç
;

484 c⁄° *
cﬁ⁄p
;

485 
boﬁ
 
ßw_xdigô
;

486 
vÆ
;

488 
ç
 = 0;

489 
cﬁ⁄p
 = 
NULL
;

491 i‡(
°r
 =
íd
)

492  
Ál£
;

495 i‡(*
°r
 == ':')

497 ++
°r
;

498 i‡(
°r
 =
íd
 || *str != ':')

499  
Ál£
;

502 
cuπok
 = 
°r
;

503 
ßw_xdigô
 = 
Ál£
;

504 
vÆ
 = 0;

506 
°r
 < 
íd
)

508 
ch
 = *
°r
++;

511 i‡(
	`c_isxdigô
 (
ch
))

513 
vÆ
 <<= 4;

514 
vÆ
 |
	`XDIGIT_TO_NUM
 (
ch
);

515 i‡(
vÆ
 > 0xffff)

516  
Ál£
;

517 
ßw_xdigô
 = 
åue
;

522 i‡(
ch
 == ':')

524 
cuπok
 = 
°r
;

525 i‡(!
ßw_xdigô
)

527 i‡(
cﬁ⁄p
 !
NULL
)

528  
Ál£
;

529 
cﬁ⁄p
 = 
°r
 + 
ç
;

532 i‡(
°r
 =
íd
)

533  
Ál£
;

534 i‡(
ç
 > 
ns_ö6addrsz
 - 
ns_öt16sz
)

535  
Ál£
;

536 
ç
 +
ns_öt16sz
;

537 
ßw_xdigô
 = 
Ál£
;

538 
vÆ
 = 0;

543 i‡(
ch
 ='.' && (
ç
 <
ns_ö6addrsz
 - 
ns_öaddrsz
)

544 && 
	`is_vÆid_ùv4_addªss
 (
cuπok
, 
íd
) == 1)

546 
ç
 +
ns_öaddrsz
;

547 
ßw_xdigô
 = 
Ál£
;

551  
Ál£
;

554 i‡(
ßw_xdigô
)

556 i‡(
ç
 > 
ns_ö6addrsz
 - 
ns_öt16sz
)

557  
Ál£
;

558 
ç
 +
ns_öt16sz
;

561 i‡(
cﬁ⁄p
 !
NULL
)

563 i‡(
ç
 =
ns_ö6addrsz
)

564  
Ál£
;

565 
ç
 = 
ns_ö6addrsz
;

568 i‡(
ç
 !
ns_ö6addrsz
)

569  
Ál£
;

571  
åue
;

572 
	}
}

580 
hash_èbÀ
 *
	gho°_«me_addªs£s_m≠
;

586 
addªss_li°
 *

587 
	$ˇche_quîy
 (c⁄° *
ho°
)

589 
addªss_li°
 *
Æ
;

590 i‡(!
ho°_«me_addªs£s_m≠
)

591  
NULL
;

592 
Æ
 = 
	`hash_èbÀ_gë
 (
ho°_«me_addªs£s_m≠
, 
ho°
);

593 i‡(
Æ
)

595 
	`DEBUGP
 (("Found %†ö ho°_«me_addªs£s_m≠ (%p)\n", 
ho°
, 
Æ
));

596 ++
Æ
->
ªfcou¡
;

597  
Æ
;

599  
NULL
;

600 
	}
}

606 
	$ˇche_°‹e
 (c⁄° *
ho°
, 
addªss_li°
 *
Æ
)

608 i‡(!
ho°_«me_addªs£s_m≠
)

609 
ho°_«me_addªs£s_m≠
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (0);

611 ++
Æ
->
ªfcou¡
;

612 
	`hash_èbÀ_put
 (
ho°_«me_addªs£s_m≠
, 
	`x°rdup_lowî
 (
ho°
), 
Æ
);

614 
IF_DEBUG


616 
i
;

617 
	`debug_log¥ötf
 ("Cachög %†=>", 
ho°
);

618 
i
 = 0; i < 
Æ
->
cou¡
; i++)

619 
	`debug_log¥ötf
 (" %s", 
	`¥öt_addªss
 (
Æ
->
addªs£s
 + 
i
));

620 
	`debug_log¥ötf
 ("\n");

622 
	}
}

628 
	$ˇche_ªmove
 (c⁄° *
ho°
)

630 
addªss_li°
 *
Æ
;

631 i‡(!
ho°_«me_addªs£s_m≠
)

633 
Æ
 = 
	`hash_èbÀ_gë
 (
ho°_«me_addªs£s_m≠
, 
ho°
);

634 i‡(
Æ
)

636 
	`addªss_li°_ªÀa£
 (
Æ
);

637 
	`hash_èbÀ_ªmove
 (
ho°_«me_addªs£s_m≠
, 
ho°
);

639 
	}
}

663 
addªss_li°
 *

664 
	$lookup_ho°
 (c⁄° *
ho°
, 
Êags
)

666 
addªss_li°
 *
Æ
;

667 
boﬁ
 
sûít
 = !!(
Êags
 & 
LH_SILENT
);

668 
boﬁ
 
u£_ˇche
;

669 
boﬁ
 
numîic_addªss
 = 
Ál£
;

670 
timeout
 = 
›t
.
dns_timeout
;

672 #i‚de‡
ENABLE_IPV6


678 
uöt32_t
 
addr_ùv4
 = (uöt32_t)
	`öë_addr
 (
ho°
);

679 i‡(
addr_ùv4
 !(
uöt32_t
) -1)

683 *
vec
[2];

684 
vec
[0] = (*)&
addr_ùv4
;

685 
vec
[1] = 
NULL
;

686  
	`addªss_li°_‰om_ùv4_addªs£s
 (
vec
);

696 c⁄° *
íd
 = 
ho°
 + 
	`°æí
 (host);

697 i‡(
	`is_vÆid_ùv4_addªss
 (
ho°
, 
íd
Ë|| 
	`is_vÆid_ùv6_addªss
 (host,Énd))

698 
numîic_addªss
 = 
åue
;

704 
u£_ˇche
 = 
›t
.
dns_ˇche
;

705 #ifde‡
ENABLE_IPV6


706 i‡((
Êags
 & 
LH_BIND
Ë|| 
numîic_addªss
)

707 
u£_ˇche
 = 
Ál£
;

713 i‡(
u£_ˇche
)

715 i‡(!(
Êags
 & 
LH_REFRESH
))

717 
Æ
 = 
	`ˇche_quîy
 (
ho°
);

718 i‡(
Æ
)

719  
Æ
;

722 
	`ˇche_ªmove
 (
ho°
);

727 i‡(!
sûít
 && !
numîic_addªss
)

729 *
°r
 = 
NULL
, *
«me
;

731 i‡(
›t
.
íabÀ_úi
 && (
«me
 = 
	`idn_decode
 ((*Ë
ho°
)Ë!
NULL
)

733 
Àn
 = 
	`°æí
 (
ho°
Ë+ såÀ¿(
«me
) + 4;

734 
°r
 = 
	`xmÆloc
 (
Àn
);

735 
	`¢¥ötf
 (
°r
, 
Àn
, "%†(%s)", 
«me
, 
ho°
);

736 
°r
[
Àn
-1] = '\0';

737 
	`x‰ì
 (
«me
);

740 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Resolving %s... "),

741 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
°r
 ? så : 
ho°
));

743 i‡(
°r
)

744 
	`x‰ì
 (
°r
);

747 #ifde‡
ENABLE_IPV6


749 
îr
;

750 
addröfo
 
höts
, *
ªs
;

752 
	`xzîo
 (
höts
);

753 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

754 i‡(
›t
.
ùv4_⁄ly
)

755 
höts
.
ai_Ámûy
 = 
AF_INET
;

756 i‡(
›t
.
ùv6_⁄ly
)

757 
höts
.
ai_Ámûy
 = 
AF_INET6
;

762 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

764 i‡(
Êags
 & 
LH_BIND
)

765 
höts
.
ai_Êags
 |
AI_PASSIVE
;

767 #ifde‡
AI_NUMERICHOST


768 i‡(
numîic_addªss
)

772 
höts
.
ai_Êags
 |
AI_NUMERICHOST
;

773 
timeout
 = 0;

779 
îr
 = 
	`gëaddröfo_wôh_timeout
 (
ho°
, 
NULL
, &
höts
, &
ªs
, 
timeout
);

780 i‡(
îr
 !0 || 
ªs
 =
NULL
)

782 i‡(!
sûít
)

783 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("failed: %s.\n"),

784 
îr
 !
EAI_SYSTEM
 ? 
	`gai_°ªº‹
 (îrË: 
	`°ªº‹
 (
î∫o
));

785  
NULL
;

787 
Æ
 = 
	`addªss_li°_‰om_addröfo
 (
ªs
);

788 
	`‰ìaddröfo
 (
ªs
);

789 i‡(!
Æ
)

791 
	`log¥ötf
 (
LOG_VERBOSE
,

792 
	`_
("failed: No IPv4/IPv6áddresses for host.\n"));

793  
NULL
;

799 i‡(
Æ
->
cou¡
 > 1 && 
›t
.
¥e„r_Ámûy
 !
¥e„r_n⁄e
)

800 
	`°abÀ_s‹t
 (
Æ
->
addªs£s
,ál->
cou¡
,  (
ù_addªss
),

801 
›t
.
¥e„r_Ámûy
 =
¥e„r_ùv4


802 ? 
cmp_¥e„r_ùv4
 : 
cmp_¥e„r_ùv6
);

806 
ho°ít
 *
h±r
 = 
	`gëho°by«me_wôh_timeout
 (
ho°
, 
timeout
);

807 i‡(!
h±r
)

809 i‡(!
sûít
)

811 i‡(
î∫o
 !
ETIMEDOUT
)

812 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("failed: %s.\n"),

813 
	`ho°_îr°r
 (
h_î∫o
));

815 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("failed:Åimed out.\n"));

817  
NULL
;

820 
Æ
 = 
	`addªss_li°_‰om_ùv4_addªs£s
 (
h±r
->
h_addr_li°
);

826 i‡(!
sûít
 && !
numîic_addªss
)

828 
i
;

829 
¥ötmax
 = 
Æ
->
cou¡
;

831 i‡(!
›t
.
show_Æl_dns_íåõs
 && 
¥ötmax
 > 3)

832 
¥ötmax
 = 3;

834 
i
 = 0; i < 
¥ötmax
; i++)

836 
	`logputs
 (
LOG_VERBOSE
, 
	`¥öt_addªss
 (
Æ
->
addªs£s
 + 
i
));

837 i‡(
i
 < 
¥ötmax
 - 1)

838 
	`logputs
 (
LOG_VERBOSE
, ", ");

840 i‡(
¥ötmax
 !
Æ
->
cou¡
)

841 
	`logputs
 (
LOG_VERBOSE
, ", ...");

842 
	`logputs
 (
LOG_VERBOSE
, "\n");

846 i‡(
u£_ˇche
)

847 
	`ˇche_°‹e
 (
ho°
, 
Æ
);

849  
Æ
;

850 
	}
}

854 
boﬁ


855 
	$ac˚±_domaö
 (
uæ
 *
u
)

857 
	`as£π
 (
u
->
ho°
 !
NULL
);

858 i‡(
›t
.
domaös
)

860 i‡(!
	`sufm©ch
 ((c⁄° **)
›t
.
domaös
, 
u
->
ho°
))

861  
Ál£
;

863 i‡(
›t
.
ex˛ude_domaös
)

865 i‡(
	`sufm©ch
 ((c⁄° **)
›t
.
ex˛ude_domaös
, 
u
->
ho°
))

866  
Ál£
;

868  
åue
;

869 
	}
}

876 
boﬁ


877 
	$sufm©ch
 (c⁄° **
li°
, c⁄° *
wh©
)

879 
i
, 
j
, 
k
, 
lw
;

881 
lw
 = 
	`°æí
 (
wh©
);

882 
i
 = 0; 
li°
[i]; i++)

884 i‡(
li°
[
i
][0] == '\0')

887 
j
 = 
	`°æí
 (
li°
[
i
]), 
k
 = 
lw
; j >= 0 && k >= 0; j--, k--)

888 i‡(
	`c_tﬁowî
 (
li°
[
i
][
j
]Ë!c_tﬁowî (
wh©
[
k
]))

891 i‡(
j
 == -1)

892  
åue
;

894  
Ál£
;

895 
	}
}

898 
	$ho°_˛ónup
 ()

900 i‡(
ho°_«me_addªs£s_m≠
)

902 
hash_èbÀ_ôî©‹
 
ôî
;

903 
	`hash_èbÀ_ôî©e
 (
ho°_«me_addªs£s_m≠
, &
ôî
);

904 
	`hash_èbÀ_ôî_√xt
 (&
ôî
);

907 *
ho°
 = 
ôî
.
key
;

908 
addªss_li°
 *
Æ
 = 
ôî
.
vÆue
;

909 
	`x‰ì
 (
ho°
);

910 
	`as£π
 (
Æ
->
ªfcou¡
 == 1);

911 
	`addªss_li°_dñëe
 (
Æ
);

913 
	`hash_èbÀ_de°roy
 (
ho°_«me_addªs£s_m≠
);

914 
ho°_«me_addªs£s_m≠
 = 
NULL
;

916 
	}
}

	@src/host.h

32 #i‚de‡
HOST_H


33 
	#HOST_H


	)

35 #ifde‡
WINDOWS


36 
	~<wösock2.h
>

38 #ifde‡
__VMS


39 
	~"vms_ù.h
"

41 
	~<√tdb.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 #i‚de‡
__BEOS__


46 
	~<¨∑/öë.h
>

50 
	guæ
;

51 
	gaddªss_li°
;

57 
	mÁmûy
;

61 
ö_addr
 
	md4
;

62 #ifde‡
ENABLE_IPV6


63 
ö6_addr
 
	md6
;

65 } 
	md©a
;

70 #i‡
deföed
 
ENABLE_IPV6
 && deföed 
HAVE_SOCKADDR_IN6_SCOPE_ID


71 
	mùv6_sc›e
;

73 } 
	tù_addªss
;

79 
	#IP_INADDR_DATA
(
x
Ë((*Ë&(x)->
d©a
)

	)

82 
	mLH_SILENT
 = 1,

83 
	mLH_BIND
 = 2,

84 
	mLH_REFRESH
 = 4

86 
addªss_li°
 *
lookup_ho°
 (const *, );

88 
addªss_li°_gë_bounds
 (c⁄° 
addªss_li°
 *, *, *);

89 c⁄° 
ù_addªss
 *
addªss_li°_addªss_©
 (c⁄° 
addªss_li°
 *, );

90 
boﬁ
 
addªss_li°_c⁄èös
 (c⁄° 
addªss_li°
 *, c⁄° 
ù_addªss
 *);

91 
addªss_li°_£t_Áu…y
 (
addªss_li°
 *, );

92 
addªss_li°_£t_c⁄√˘ed
 (
addªss_li°
 *);

93 
boﬁ
 
addªss_li°_c⁄√˘ed_p
 (c⁄° 
addªss_li°
 *);

94 
addªss_li°_ªÀa£
 (
addªss_li°
 *);

96 c⁄° *
¥öt_addªss
 (c⁄° 
ù_addªss
 *);

97 #ifde‡
ENABLE_IPV6


98 
boﬁ
 
is_vÆid_ùv6_addªss
 (const *, const *);

101 
boﬁ
 
ac˚±_domaö
 (
uæ
 *);

102 
boﬁ
 
sufm©ch
 (const **, const *);

104 
ho°_˛ónup
 ();

	@src/html-parse.c

92 
	~"wgë.h
"

94 #ifde‡
STANDALONE


95 
	#I_REALLY_WANT_CTYPE_MACROS


	)

98 
	~<°dio.h
>

99 
	~<°dlib.h
>

100 
	~<°rög.h
>

101 
	~<as£π.h
>

103 
	~"utûs.h
"

104 
	~"html-∑r£.h
"

106 #ifde‡
STANDALONE


107 #unde‡
xmÆloc


108 #unde‡
xªÆloc


109 #unde‡
x‰ì


110 
	#xmÆloc
 
mÆloc


	)

111 
	#xªÆloc
 
ªÆloc


	)

112 
	#x‰ì
 
‰ì


	)

114 #unde‡
c_is•a˚


115 #unde‡
c_isdigô


116 #unde‡
c_isxdigô


117 #unde‡
c_ißÕha


118 #unde‡
c_iß um


119 #unde‡
c_tﬁowî


120 #unde‡
c_touµî


122 
	#c_is•a˚
(
x
Ë
	`is•a˚
 (x)

	)

123 
	#c_isdigô
(
x
Ë
	`isdigô
 (x)

	)

124 
	#c_isxdigô
(
x
Ë
	`isxdigô
 (x)

	)

125 
	#c_ißÕha
(
x
Ë
	`ißÕha
 (x)

	)

126 
	#c_iß um
(
x
Ë
	`iß um
 (x)

	)

127 
	#c_tﬁowî
(
x
Ë
	`tﬁowî
 (x)

	)

128 
	#c_touµî
(
x
Ë
	`touµî
 (x)

	)

130 
	shash_èbÀ
 {

131 
	mdummy
;

134 
	$hash_èbÀ_gë
 (c⁄° 
hash_èbÀ
 *
ht
, *
±r
)

136  
±r
;

137 
	}
}

139 
	~"hash.h
"

153 
	spoﬁ
 {

154 *
	mc⁄ã¡s
;

155 
	msize
;

156 
	mèû
;

157 
boﬁ
 
	mªsized
;

160 *
	m‹ig_c⁄ã¡s
;

164 
	m‹ig_size
;

169 
	#POOL_INIT
(
p
, 
öôül_°‹age
, 
öôül_size
) do { \

170 
poﬁ
 *
P
 = (
p
); \

171 
P
->
c⁄ã¡s
 = (
öôül_°‹age
); \

172 
P
->
size
 = (
öôül_size
); \

173 
P
->
èû
 = 0; \

174 
P
->
ªsized
 = 
Ál£
; \

175 
P
->
‹ig_c⁄ã¡s
 = P->
c⁄ã¡s
; \

176 
P
->
‹ig_size
 = P->
size
; \

177 } 0)

	)

182 
	#POOL_GROW
(
p
, 
ö¸ó£
) \

183 
	`GROW_ARRAY
 ((
p
)->
c⁄ã¡s
, (p)->
size
, (p)->
èû
 + (
ö¸ó£
), \

184 (
p
)->
ªsized
, )

	)

189 
	#POOL_APPEND
(
p
, 
beg
, 
íd
) do { \

190 c⁄° *
PA_beg
 = (
beg
); \

191 
PA_size
 = (
íd
Ë- 
PA_beg
; \

192 
	`POOL_GROW
 (
p
, 
PA_size
); \

193 
	`mem˝y
 ((
p
)->
c⁄ã¡s
 + (p)->
èû
, 
PA_beg
, 
PA_size
); \

194 (
p
)->
èû
 +
PA_size
; \

195 } 0)

	)

200 
	#POOL_APPEND_CHR
(
p
, 
ch
) do { \

201 
PAC_ch¨
 = (
ch
); \

202 
	`POOL_GROW
 (
p
, 1); \

203 (
p
)->
c⁄ã¡s
[’)->
èû
++] = 
PAC_ch¨
; \

204 } 0)

	)

207 
	#POOL_REWIND
(
p
Ë’)->
èû
 = 0

	)

215 
	#POOL_FREE
(
p
) do { \

216 
poﬁ
 *
P
 = 
p
; \

217 i‡(
P
->
ªsized
) \

218 
	`x‰ì
 (
P
->
c⁄ã¡s
); \

219 
P
->
c⁄ã¡s
 = P->
‹ig_c⁄ã¡s
; \

220 
P
->
size
 = P->
‹ig_size
; \

221 
P
->
èû
 = 0; \

222 
P
->
ªsized
 = 
Ál£
; \

223 } 0)

	)

237 
	#GROW_ARRAY
(
ba£v¨
, 
sizev¨
, 
√eded_size
, 
ªsized
, 
ty≥
) do { \

238 
ga_√eded_size
 = (
√eded_size
); \

239 
ga_√wsize
 = (
sizev¨
); \

240 
ga_√wsize
 < 
ga_√eded_size
) \

241 
ga_√wsize
 <<= 1; \

242 i‡(
ga_√wsize
 !(
sizev¨
)) \

244 i‡(
ªsized
) \

245 
ba£v¨
 = 
	`xªÆloc
 (ba£v¨, 
ga_√wsize
 *  (
ty≥
)); \

248 *
ga_√w
 = 
	`xmÆloc
 (
ga_√wsize
 *  (
ty≥
)); \

249 
	`mem˝y
 (
ga_√w
, 
ba£v¨
, (
sizev¨
Ë*  (
ty≥
)); \

250 (
ba£v¨
Ë
ga_√w
; \

251 
ªsized
 = 
åue
; \

253 (
sizev¨
Ë
ga_√wsize
; \

255 } 0)

	)

262 
	#FITS
(
p
, 
n
Ë’ +Ç =
íd
 || (∞+Ç <Énd && !
	`c_iß um
 (p[n])))

	)

266 
	#ENT1
(
p
, 
c0
Ë(
	`FITS
 (p, 1Ë&&Ö[0] =c0)

	)

267 
	#ENT2
(
p
, 
c0
, 
c1
Ë(
	`FITS
 (p, 2Ë&&Ö[0] =c0 &&Ö[1] =c1)

	)

268 
	#ENT3
(
p
, 
c0
, 
c1
, 
c2
Ë(
	`FITS
 (p, 3Ë&&Ö[0]==c0 &&Ö[1]==c1 &&Ö[2]==c2)

	)

273 
	#SKIP_SEMI
(
p
, 
öc
Ë’ +öc,Ö < 
íd
 && *∞=';' ? ++∞:Ö)

	)

275 
	sèg°ack_ôem
 {

276 c⁄° *
	mèg«me_begö
;

277 c⁄° *
	mèg«me_íd
;

278 c⁄° *
	mc⁄ã¡s_begö
;

279 
èg°ack_ôem
 *
	m¥ev
;

280 
èg°ack_ôem
 *
	m√xt
;

283 
èg°ack_ôem
 *

284 
	$èg°ack_push
 (
èg°ack_ôem
 **
hód
, èg°ack_ôem **
èû
)

286 
èg°ack_ôem
 *
ts
 = 
	`xmÆloc
((tagstack_item));

287 i‡(*
hód
 =
NULL
)

289 *
hód
 = *
èû
 = 
ts
;

290 
ts
->
¥ev
 =Ås->
√xt
 = 
NULL
;

294 (*
èû
)->
√xt
 = 
ts
;

295 
ts
->
¥ev
 = *
èû
;

296 *
èû
 = 
ts
;

297 
ts
->
√xt
 = 
NULL
;

300  
ts
;

301 
	}
}

305 
	$èg°ack_p›
 (
èg°ack_ôem
 **
hód
, èg°ack_ôem **
èû
,

306 
èg°ack_ôem
 *
ts
)

308 i‡(*
hód
 =
NULL
)

311 i‡(
ts
 =*
èû
)

313 i‡(
ts
 =*
hód
)

315 
	`x‰ì
 (
ts
);

316 *
hód
 = *
èû
 = 
NULL
;

320 
ts
->
¥ev
->
√xt
 = 
NULL
;

321 *
èû
 = 
ts
->
¥ev
;

322 
	`x‰ì
 (
ts
);

327 i‡(
ts
 =*
hód
)

329 *
hód
 = 
NULL
;

331 *
èû
 = 
ts
->
¥ev
;

333 i‡(
ts
->
¥ev
)

335 
ts
->
¥ev
->
√xt
 = 
NULL
;

337 
ts
)

339 
èg°ack_ôem
 *
p
 = 
ts
->
√xt
;

340 
	`x‰ì
 (
ts
);

341 
ts
 = 
p
;

344 
	}
}

346 
èg°ack_ôem
 *

347 
	$èg°ack_föd
 (
èg°ack_ôem
 *
èû
, c⁄° *
èg«me_begö
,

348 c⁄° *
èg«me_íd
)

350 
Àn
 = 
èg«me_íd
 - 
èg«me_begö
;

351 
èû
)

353 i‡(
Àn
 =(
èû
->
èg«me_íd
 -Åaû->
èg«me_begö
))

355 i‡(0 =
	`°∫ˇ£cmp
 (
èû
->
èg«me_begö
,Åag«me_begö, 
Àn
))

356  
èû
;

358 
èû
 =Åaû->
¥ev
;

360  
NULL
;

361 
	}
}

372 
	$decode_ítôy
 (c⁄° **
±r
, c⁄° *
íd
)

374 c⁄° *
p
 = *
±r
;

375 
vÆue
 = -1;

377 i‡(++
p
 =
íd
)

380 *
p
++)

385 
digôs
 = 0;

386 
vÆue
 = 0;

387 i‡(*
p
 == 'x')

388 ++
p
; 
vÆue
 < 256 &&Ö < 
íd
 && 
	`c_isxdigô
 (*p);Ö++, 
digôs
++)

389 
vÆue
 = (vÆuê<< 4Ë+ 
	`XDIGIT_TO_NUM
 (*
p
);

391 ; 
vÆue
 < 256 && 
p
 < 
íd
 && 
	`c_isdigô
 (*p);Ö++, 
digôs
++)

392 
vÆue
 = (vÆuê* 10Ë+ (*
p
 - '0');

393 i‡(!
digôs
)

397 i‡(!
vÆue
 || (value & ~0x7f))

399 *
±r
 = 
	`SKIP_SEMI
 (
p
, 0);

400  
vÆue
;

404 i‡(
	`ENT1
 (
p
, 't'))

405 
vÆue
 = '>', *
±r
 = 
	`SKIP_SEMI
 (
p
, 1);

408 i‡(
	`ENT1
 (
p
, 't'))

409 
vÆue
 = '<', *
±r
 = 
	`SKIP_SEMI
 (
p
, 1);

412 i‡(
	`ENT2
 (
p
, 'm', 'p'))

413 
vÆue
 = '&', *
±r
 = 
	`SKIP_SEMI
 (
p
, 2);

414 i‡(
	`ENT3
 (
p
, 'p', 'o', 's'))

416 
vÆue
 = '\'', *
±r
 = 
	`SKIP_SEMI
 (
p
, 3);

419 i‡(
	`ENT3
 (
p
, 'u', 'o', 't'))

420 
vÆue
 = '\"', *
±r
 = 
	`SKIP_SEMI
 (
p
, 3);

423  
vÆue
;

424 
	}
}

425 #unde‡
ENT1


426 #unde‡
ENT2


427 #unde‡
ENT3


428 #unde‡
FITS


429 #unde‡
SKIP_SEMI


432 
	mAP_DOWNCASE
 = 1,

433 
	mAP_DECODE_ENTITIES
 = 2,

434 
	mAP_TRIM_BLANKS
 = 4

451 
	$c⁄vît_™d_c›y
 (
poﬁ
 *poﬁ, c⁄° *
beg
, c⁄° *
íd
, 
Êags
)

453 
ﬁd_èû
 = 
poﬁ
->
èû
;

458 i‡(
Êags
 & 
AP_TRIM_BLANKS
)

460 
beg
 < 
íd
 && 
	`c_is•a˚
 (*beg))

461 ++
beg
;

462 
íd
 > 
beg
 && 
	`c_is•a˚
 (end[-1]))

463 --
íd
;

466 i‡(
Êags
 & 
AP_DECODE_ENTITIES
)

475 c⁄° *
‰om
 = 
beg
;

476 *
to
;

477 
boﬁ
 
squash_√wlöes
 = !!(
Êags
 & 
AP_TRIM_BLANKS
);

479 
	`POOL_GROW
 (
poﬁ
, 
íd
 - 
beg
);

480 
to
 = 
poﬁ
->
c⁄ã¡s
 +Öoﬁ->
èû
;

482 
‰om
 < 
íd
)

484 i‡(*
‰om
 == '&')

486 
ítôy
 = 
	`decode_ítôy
 (&
‰om
, 
íd
);

487 i‡(
ítôy
 != -1)

488 *
to
++ = 
ítôy
;

490 *
to
++ = *
‰om
++;

492 i‡((*
‰om
 ='\n' || *‰om ='\r'Ë&& 
squash_√wlöes
)

493 ++
‰om
;

495 *
to
++ = *
‰om
++;

499 
	`as£π
 (
to
 - (
poﬁ
->
c⁄ã¡s
 +Öoﬁ->
èû
Ë<
íd
 - 
beg
);

503 
poﬁ
->
èû
 = 
to
 -Öoﬁ->
c⁄ã¡s
;

504 
	`POOL_APPEND_CHR
 (
poﬁ
, '\0');

509 
	`POOL_APPEND
 (
poﬁ
, 
beg
, 
íd
);

510 
	`POOL_APPEND_CHR
 (
poﬁ
, '\0');

513 i‡(
Êags
 & 
AP_DOWNCASE
)

515 *
p
 = 
poﬁ
->
c⁄ã¡s
 + 
ﬁd_èû
;

516 ; *
p
;Ö++)

517 *
p
 = 
	`c_tﬁowî
 (*p);

519 
	}
}

536 
	#NAME_CHAR_P
(
x
) ((x) > 32 && (x) < 127 \

537 && (
x
) != '=' && (x) != '<' && (x) != '>' \

538 && (
x
Ë!'/')

	)

540 #ifde‡
STANDALONE


541 
	gcommít_backout_cou¡
;

564 
	$adv™˚_de˛¨©i⁄
 (c⁄° *
beg
, c⁄° *
íd
)

566 c⁄° *
p
 = 
beg
;

567 
quŸe_ch¨
 = '\0';

568 
ch
;

571 
AC_S_DONE
,

572 
AC_S_BACKOUT
,

573 
AC_S_BANG
,

574 
AC_S_DEFAULT
,

575 
AC_S_DCLNAME
,

576 
AC_S_DASH1
,

577 
AC_S_DASH2
,

578 
AC_S_COMMENT
,

579 
AC_S_DASH3
,

580 
AC_S_DASH4
,

581 
AC_S_QUOTE1
,

582 
AC_S_IN_QUOTE
,

583 
AC_S_QUOTE2


584 } 
°©e
 = 
AC_S_BANG
;

586 i‡(
beg
 =
íd
)

587  
beg
;

588 
ch
 = *
p
++;

593 
°©e
 !
AC_S_DONE
 && sèã !
AC_S_BACKOUT
)

595 i‡(
p
 =
íd
)

596 
°©e
 = 
AC_S_BACKOUT
;

597 
°©e
)

599 
AC_S_DONE
:

600 
AC_S_BACKOUT
:

602 
AC_S_BANG
:

603 i‡(
ch
 == '!')

605 
ch
 = *
p
++;

606 
°©e
 = 
AC_S_DEFAULT
;

609 
°©e
 = 
AC_S_BACKOUT
;

611 
AC_S_DEFAULT
:

612 
ch
)

615 
°©e
 = 
AC_S_DASH1
;

621 
ch
 = *
p
++;

625 
°©e
 = 
AC_S_DONE
;

629 
°©e
 = 
AC_S_QUOTE1
;

632 i‡(
	`NAME_CHAR_P
 (
ch
))

633 
°©e
 = 
AC_S_DCLNAME
;

635 
°©e
 = 
AC_S_BACKOUT
;

639 
AC_S_DCLNAME
:

640 i‡(
ch
 == '-')

641 
°©e
 = 
AC_S_DASH1
;

642 i‡(
	`NAME_CHAR_P
 (
ch
))

643 
ch
 = *
p
++;

645 
°©e
 = 
AC_S_DEFAULT
;

647 
AC_S_QUOTE1
:

650 
	`as£π
 (
ch
 == '\'' || ch == 0x22);

651 
quŸe_ch¨
 = 
ch
;

654 
ch
 = *
p
++;

655 
°©e
 = 
AC_S_IN_QUOTE
;

657 
AC_S_IN_QUOTE
:

658 i‡(
ch
 =
quŸe_ch¨
)

659 
°©e
 = 
AC_S_QUOTE2
;

661 
ch
 = *
p
++;

663 
AC_S_QUOTE2
:

664 
	`as£π
 (
ch
 =
quŸe_ch¨
);

665 
ch
 = *
p
++;

666 
°©e
 = 
AC_S_DEFAULT
;

668 
AC_S_DASH1
:

669 
	`as£π
 (
ch
 == '-');

670 
ch
 = *
p
++;

671 
°©e
 = 
AC_S_DASH2
;

673 
AC_S_DASH2
:

674 
ch
)

677 
ch
 = *
p
++;

678 
°©e
 = 
AC_S_COMMENT
;

681 
°©e
 = 
AC_S_BACKOUT
;

684 
AC_S_COMMENT
:

685 
ch
)

688 
°©e
 = 
AC_S_DASH3
;

691 
ch
 = *
p
++;

695 
AC_S_DASH3
:

696 
	`as£π
 (
ch
 == '-');

697 
ch
 = *
p
++;

698 
°©e
 = 
AC_S_DASH4
;

700 
AC_S_DASH4
:

701 
ch
)

704 
ch
 = *
p
++;

705 
°©e
 = 
AC_S_DEFAULT
;

708 
°©e
 = 
AC_S_COMMENT
;

715 i‡(
°©e
 =
AC_S_BACKOUT
)

717 #ifde‡
STANDALONE


718 ++
commít_backout_cou¡
;

720  
beg
 + 1;

722  
p
;

723 
	}
}

730 
	$föd_commít_íd
 (c⁄° *
beg
, c⁄° *
íd
)

736 c⁄° *
p
 = 
beg
 - 1;

738 (
p
 +3Ë< 
íd
)

739 
p
[0])

742 i‡(
p
[-1] == '-' &&Ö[-2] == '-')

743  
p
 + 1;

746 
©_dash
:

747 i‡(
p
[-1] == '-')

749 
©_dash_dash
:

750 i‡(++
p
 =
íd
Ë 
NULL
;

751 
p
[0])

753 '>':  
p
 + 1;

754 '-': 
©_dash_dash
;

759 i‡((
p
 +2Ë>
íd
Ë 
NULL
;

760 
p
[0])

763 i‡(
p
[-1] == '-')

764  
p
 + 1;

767 
©_dash
;

771  
NULL
;

772 
	}
}

777 
boﬁ


778 
	$«me_Ælowed
 (c⁄° 
hash_èbÀ
 *
ht
, c⁄° *
b
, c⁄° *
e
)

780 *
c›y
;

781 i‡(!
ht
)

782  
åue
;

783 
	`BOUNDED_TO_ALLOCA
 (
b
, 
e
, 
c›y
);

784  
	`hash_èbÀ_gë
 (
ht
, 
c›y
Ë!
NULL
;

785 
	}
}

790 
	#ADVANCE
(
p
) do { \

791 ++
p
; \

792 i‡(
p
 >
íd
) \

793 
föish
; \

794 } 0)

	)

798 
	#SKIP_WS
(
p
) do { \

799 
	`c_is•a˚
 (*
p
)) { \

800 
	`ADVANCE
 (
p
); \

802 } 0)

	)

806 
	#SKIP_NON_WS
(
p
) do { \

807 !
	`c_is•a˚
 (*
p
)) { \

808 
	`ADVANCE
 (
p
); \

810 } 0)

	)

812 #ifde‡
STANDALONE


813 
	gèg_backout_cou¡
;

831 
m≠_html_ègs
 (c⁄° *
ãxt
, 
size
,

832 (*
m≠fun
Ë(
ègöfo
 *, *), *
m≠¨g
,

833 
Êags
,

834 c⁄° 
hash_èbÀ
 *
Ælowed_ègs
,

835 c⁄° 
hash_èbÀ
 *
Ælowed_©åibuãs
)

839 
poﬁ_öôül_°‹age
[256];

840 
poﬁ
Öool;

842 c⁄° *
p
 = 
ãxt
;

843 c⁄° *
íd
 = 
ãxt
 + 
size
;

845 
©å_∑ú
 
©å_∑ú_öôül_°‹age
[8];

846 
©å_∑ú_size
 = 
	`cou¡of
 (
©å_∑ú_öôül_°‹age
);

847 
boﬁ
 
©å_∑ú_ªsized
 = 
Ál£
;

848 
©å_∑ú
 *
∑ús
 = 
©å_∑ú_öôül_°‹age
;

850 
èg°ack_ôem
 *
hód
 = 
NULL
;

851 
èg°ack_ôem
 *
èû
 = 
NULL
;

853 i‡(!
size
)

856 
	`POOL_INIT
 (&
poﬁ
, 
poﬁ_öôül_°‹age
, 
	`cou¡of
 (pool_initial_storage));

859 
«ârs
, 
íd_èg
;

860 c⁄° *
èg_«me_begö
, *
èg_«me_íd
;

861 c⁄° *
èg_°¨t_posôi⁄
;

862 
boﬁ
 
unöãª°ög_èg
;

864 
look_f‹_èg
:

865 
	`POOL_REWIND
 (&
poﬁ
);

867 
«ârs
 = 0;

868 
íd_èg
 = 0;

872 
p
 = 
	`memchr
 (p, '<', 
íd
 -Ö);

873 i‡(!
p
)

874 
föish
;

876 
èg_°¨t_posôi⁄
 = 
p
;

877 
	`ADVANCE
 (
p
);

881 i‡(*
p
 == '!')

883 i‡(!(
Êags
 & 
MHT_STRICT_COMMENTS
)

884 && 
p
 < 
íd
 + 3 &&Ö[1] == '-' &&Ö[2] == '-')

891 c⁄° *
commít_íd
 = 
	`föd_commít_íd
 (
p
 + 3, 
íd
);

892 i‡(
commít_íd
)

893 
p
 = 
commít_íd
;

901 
p
 = 
	`adv™˚_de˛¨©i⁄
 (p, 
íd
);

903 i‡(
p
 =
íd
)

904 
föish
;

905 
look_f‹_èg
;

907 i‡(*
p
 == '/')

909 
íd_èg
 = 1;

910 
	`ADVANCE
 (
p
);

912 
èg_«me_begö
 = 
p
;

913 
	`NAME_CHAR_P
 (*
p
))

914 
	`ADVANCE
 (
p
);

915 i‡(
p
 =
èg_«me_begö
)

916 
look_f‹_èg
;

917 
èg_«me_íd
 = 
p
;

918 
	`SKIP_WS
 (
p
);

920 i‡(!
íd_èg
)

922 
èg°ack_ôem
 *
ts
 = 
	`èg°ack_push
 (&
hód
, &
èû
);

923 i‡(
ts
)

925 
ts
->
èg«me_begö
 = 
èg_«me_begö
;

926 
ts
->
èg«me_íd
 = 
èg_«me_íd
;

927 
ts
->
c⁄ã¡s_begö
 = 
NULL
;

931 i‡(
íd_èg
 && *
p
 != '>' && *p != '<')

932 
backout_èg
;

934 i‡(!
	`«me_Ælowed
 (
Ælowed_ègs
, 
èg_«me_begö
, 
èg_«me_íd
))

937 
unöãª°ög_èg
 = 
åue
;

940 
unöãª°ög_èg
 = 
Ál£
;

941 
	`c⁄vît_™d_c›y
 (&
poﬁ
, 
èg_«me_begö
, 
èg_«me_íd
, 
AP_DOWNCASE
);

947 c⁄° *
©å_«me_begö
, *
©å_«me_íd
;

948 c⁄° *
©å_vÆue_begö
, *
©å_vÆue_íd
;

949 c⁄° *
©å_øw_vÆue_begö
, *
©å_øw_vÆue_íd
;

950 
›î©i⁄
 = 
AP_DOWNCASE
;

952 
	`SKIP_WS
 (
p
);

954 i‡(*
p
 == '/')

961 
	`ADVANCE
 (
p
);

962 
	`SKIP_WS
 (
p
);

963 i‡(*
p
 != '<' && *p != '>')

964 
backout_èg
;

968 i‡(*
p
 == '<' || *p == '>')

972 
©å_«me_begö
 = 
p
;

974 
	`NAME_CHAR_P
 (*
p
))

975 
	`ADVANCE
 (
p
);

976 
©å_«me_íd
 = 
p
;

978 i‡(
©å_«me_begö
 =
©å_«me_íd
)

979 
backout_èg
;

982 
	`SKIP_WS
 (
p
);

984 i‡(
	`NAME_CHAR_P
 (*
p
) || *p == '/' || *p == '<' || *p == '>')

991 
©å_øw_vÆue_begö
 = 
©å_vÆue_begö
 = 
©å_«me_begö
;

992 
©å_øw_vÆue_íd
 = 
©å_vÆue_íd
 = 
©å_«me_íd
;

994 i‡(*
p
 == '=')

996 
	`ADVANCE
 (
p
);

997 
	`SKIP_WS
 (
p
);

998 i‡(*
p
 == '\"' || *p == '\'')

1000 
boﬁ
 
√wlöe_£í
 = 
Ál£
;

1001 
quŸe_ch¨
 = *
p
;

1002 
©å_øw_vÆue_begö
 = 
p
;

1003 
	`ADVANCE
 (
p
);

1004 
©å_vÆue_begö
 = 
p
;

1006 *
p
 !
quŸe_ch¨
)

1008 i‡(!
√wlöe_£í
 && *
p
 == '\n')

1017 
p
 = 
©å_vÆue_begö
;

1018 
√wlöe_£í
 = 
åue
;

1021 i‡(
√wlöe_£í
 && (*
p
 == '<' || *p == '>'))

1023 
	`ADVANCE
 (
p
);

1025 
©å_vÆue_íd
 = 
p
;

1027 i‡(*
p
 =
quŸe_ch¨
)

1028 
	`ADVANCE
 (
p
);

1030 
look_f‹_èg
;

1031 
©å_øw_vÆue_íd
 = 
p
;

1033 
›î©i⁄
 = 
AP_DECODE_ENTITIES
;

1034 i‡(
Êags
 & 
MHT_TRIM_VALUES
)

1035 
›î©i⁄
 |
AP_TRIM_BLANKS
;

1039 
©å_vÆue_begö
 = 
p
;

1046 !
	`c_is•a˚
 (*
p
) && *p != '<' && *p != '>')

1047 
	`ADVANCE
 (
p
);

1048 
©å_vÆue_íd
 = 
p
;

1050 i‡(
©å_vÆue_begö
 =
©å_vÆue_íd
)

1053 
backout_èg
;

1054 
©å_øw_vÆue_begö
 = 
©å_vÆue_begö
;

1055 
©å_øw_vÆue_íd
 = 
©å_vÆue_íd
;

1056 
›î©i⁄
 = 
AP_DECODE_ENTITIES
;

1064 
backout_èg
;

1070 i‡(
unöãª°ög_èg
)

1076 i‡(!
	`«me_Ælowed
 (
Ælowed_©åibuãs
, 
©å_«me_begö
, 
©å_«me_íd
))

1079 
	`GROW_ARRAY
 (
∑ús
, 
©å_∑ú_size
, 
«ârs
 + 1, 
©å_∑ú_ªsized
,

1080 
©å_∑ú
);

1082 
∑ús
[
«ârs
].
«me_poﬁ_ödex
 = 
poﬁ
.
èû
;

1083 
	`c⁄vît_™d_c›y
 (&
poﬁ
, 
©å_«me_begö
, 
©å_«me_íd
, 
AP_DOWNCASE
);

1085 
∑ús
[
«ârs
].
vÆue_poﬁ_ödex
 = 
poﬁ
.
èû
;

1086 
	`c⁄vît_™d_c›y
 (&
poﬁ
, 
©å_vÆue_begö
, 
©å_vÆue_íd
, 
›î©i⁄
);

1087 
∑ús
[
«ârs
].
vÆue_øw_begönög
 = 
©å_øw_vÆue_begö
;

1088 
∑ús
[
«ârs
].
vÆue_øw_size
 = (
©å_øw_vÆue_íd


1089 - 
©å_øw_vÆue_begö
);

1090 ++
«ârs
;

1093 i‡(!
íd_èg
 && 
èû
 && (èû->
èg«me_begö
 =
èg_«me_begö
))

1095 
èû
->
c⁄ã¡s_begö
 = 
p
+1;

1098 i‡(
unöãª°ög_èg
)

1100 
	`ADVANCE
 (
p
);

1101 
look_f‹_èg
;

1107 
i
;

1108 
ègöfo
Åaginfo;

1109 
èg°ack_ôem
 *
ts
 = 
NULL
;

1111 
ègöfo
.
«me
 = 
poﬁ
.
c⁄ã¡s
;

1112 
ègöfo
.
íd_èg_p
 = 
íd_èg
;

1113 
ègöfo
.
«ârs
 =Çattrs;

1118 
i
 = 0; i < 
«ârs
; i++)

1120 
∑ús
[
i
].
«me
 = 
poﬁ
.
c⁄ã¡s
 +Öaús[i].
«me_poﬁ_ödex
;

1121 
∑ús
[
i
].
vÆue
 = 
poﬁ
.
c⁄ã¡s
 +Öaús[i].
vÆue_poﬁ_ödex
;

1123 
ègöfo
.
©ås
 = 
∑ús
;

1124 
ègöfo
.
°¨t_posôi⁄
 = 
èg_°¨t_posôi⁄
;

1125 
ègöfo
.
íd_posôi⁄
 = 
p
 + 1;

1126 
ègöfo
.
c⁄ã¡s_begö
 = 
NULL
;

1127 
ègöfo
.
c⁄ã¡s_íd
 = 
NULL
;

1129 i‡(
íd_èg
)

1131 
ts
 = 
	`èg°ack_föd
 (
èû
, 
èg_«me_begö
, 
èg_«me_íd
);

1132 i‡(
ts
)

1134 i‡(
ts
->
c⁄ã¡s_begö
)

1136 
ègöfo
.
c⁄ã¡s_begö
 = 
ts
->contents_begin;

1137 
ègöfo
.
c⁄ã¡s_íd
 = 
èg_°¨t_posôi⁄
;

1139 
	`èg°ack_p›
 (&
hód
, &
èû
, 
ts
);

1143 
	`m≠fun
 (&
ègöfo
, 
m≠¨g
);

1144 i‡(*
p
 != '<')

1145 
	`ADVANCE
 (
p
);

1147 
look_f‹_èg
;

1149 
backout_èg
:

1150 #ifde‡
STANDALONE


1151 ++
èg_backout_cou¡
;

1155 
p
 = 
èg_°¨t_posôi⁄
 + 1;

1156 
look_f‹_èg
;

1159 
föish
:

1160 
	`POOL_FREE
 (&
poﬁ
);

1161 i‡(
©å_∑ú_ªsized
)

1162 
	`x‰ì
 (
∑ús
);

1164 
	`èg°ack_p›
 (&
hód
, &
èû
, head);

1165 
	}
}

1167 #unde‡
ADVANCE


1168 #unde‡
SKIP_WS


1169 #unde‡
SKIP_NON_WS


1171 #ifde‡
STANDALONE


1173 
	$ã°_m≠≥r
 (
ègöfo
 *ègöfo, *
¨g
)

1175 
i
;

1177 
	`¥ötf
 ("%s%s", 
ègöfo
->
íd_èg_p
 ? "/" : "",Åagöfo->
«me
);

1178 
i
 = 0; i < 
ègöfo
->
«ârs
; i++)

1179 
	`¥ötf
 (" %s=%s", 
ègöfo
->
©ås
[
i
].
«me
,Åagöfo->©ås[i].
vÆue
);

1180 
	`putch¨
 ('\n');

1181 ++*(*)
¨g
;

1182 
	}
}

1184 
	$maö
 ()

1186 
size
 = 256;

1187 *
x
 = 
	`xmÆloc
 (
size
);

1188 
Àngth
 = 0;

1189 
ªad_cou¡
;

1190 
èg_cou¡î
 = 0;

1192 (
ªad_cou¡
 = 
	`‰ód
 (
x
 + 
Àngth
, 1, 
size
 -Üígth, 
°dö
)))

1194 
Àngth
 +
ªad_cou¡
;

1195 
size
 <<= 1;

1196 
x
 = 
	`xªÆloc
 (x, 
size
);

1199 
	`m≠_html_ègs
 (
x
, 
Àngth
, 
ã°_m≠≥r
, &
èg_cou¡î
, 0, 
NULL
, NULL);

1200 
	`¥ötf
 ("TAGS: %d\n", 
èg_cou¡î
);

1201 
	`¥ötf
 ("Tag backouts: %d\n", 
èg_backout_cou¡
);

1202 
	`¥ötf
 ("Commíàbackouts: %d\n", 
commít_backout_cou¡
);

1204 
	}
}

	@src/html-parse.h

31 #i‚de‡
HTML_PARSE_H


32 
	#HTML_PARSE_H


	)

34 
	s©å_∑ú
 {

35 *
	m«me
;

36 *
	mvÆue
;

40 c⁄° *
	mvÆue_øw_begönög
;

41 
	mvÆue_øw_size
;

44 
	m«me_poﬁ_ödex
, 
	mvÆue_poﬁ_ödex
;

47 
	sègöfo
 {

48 *
	m«me
;

49 
	míd_èg_p
;

50 
	m«ârs
;

51 
©å_∑ú
 *
	m©ås
;

53 c⁄° *
	m°¨t_posôi⁄
;

54 c⁄° *
	míd_posôi⁄
;

56 c⁄° *
	mc⁄ã¡s_begö
;

57 c⁄° *
	mc⁄ã¡s_íd
;

60 
	ghash_èbÀ
;

63 
	#MHT_STRICT_COMMENTS
 1

	)

64 
	#MHT_TRIM_VALUES
 2

	)

67 
m≠_html_ègs
 (const *, ,

68 (*Ë(
ègöfo
 *, *), *, ,

69 c⁄° 
hash_èbÀ
 *, const hash_table *);

	@src/html-url.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

36 
	~<î∫o.h
>

37 
	~<as£π.h
>

39 
	~"exôs.h
"

40 
	~"html-∑r£.h
"

41 
	~"uæ.h
"

42 
	~"utûs.h
"

43 
	~"hash.h
"

44 
	~"c⁄vît.h
"

45 
	~"ªcur.h
"

46 
	~"html-uæ.h
"

47 
	~"css-uæ.h
"

49 (*
	tèg_h™dÀr_t
Ë(, 
	tègöfo
 *, 
	tm≠_c⁄ãxt
 *);

51 
	#DECLARE_TAG_HANDLER
(
fun
) \

52 
	`fun
 (, 
ègöfo
 *, 
m≠_c⁄ãxt
 *)

	)

54 
	`DECLARE_TAG_HANDLER
 (
èg_föd_uæs
);

55 
	`DECLARE_TAG_HANDLER
 (
èg_h™dÀ_ba£
);

56 
	`DECLARE_TAG_HANDLER
 (
èg_h™dÀ_f‹m
);

57 
	`DECLARE_TAG_HANDLER
 (
èg_h™dÀ_lök
);

58 
	`DECLARE_TAG_HANDLER
 (
èg_h™dÀ_mëa
);

61 
TAG_A
,

62 
TAG_APPLET
,

63 
TAG_AREA
,

64 
TAG_BASE
,

65 
TAG_BGSOUND
,

66 
TAG_BODY
,

67 
TAG_EMBED
,

68 
TAG_FIG
,

69 
TAG_FORM
,

70 
TAG_FRAME
,

71 
TAG_IFRAME
,

72 
TAG_IMG
,

73 
TAG_INPUT
,

74 
TAG_LAYER
,

75 
TAG_LINK
,

76 
TAG_META
,

77 
TAG_OBJECT
,

78 
TAG_OVERLAY
,

79 
TAG_SCRIPT
,

80 
TAG_TABLE
,

81 
TAG_TD
,

82 
TAG_TH


87 
	sknown_èg
 {

88 
ègid
;

89 c⁄° *
«me
;

90 
èg_h™dÀr_t
 
h™dÀr
;

91 } 
known_ègs
[] = {

92 { 
TAG_A
, "a", 
èg_föd_uæs
 },

93 { 
TAG_APPLET
, "≠∂ë", 
èg_föd_uæs
 },

94 { 
TAG_AREA
, "¨ó", 
èg_föd_uæs
 },

95 { 
TAG_BASE
, "ba£", 
èg_h™dÀ_ba£
 },

96 { 
TAG_BGSOUND
, "bgsound", 
èg_föd_uæs
 },

97 { 
TAG_BODY
, "body", 
èg_föd_uæs
 },

98 { 
TAG_EMBED
, "embed", 
èg_föd_uæs
 },

99 { 
TAG_FIG
, "fig", 
èg_föd_uæs
 },

100 { 
TAG_FORM
, "f‹m", 
èg_h™dÀ_f‹m
 },

101 { 
TAG_FRAME
, "‰ame", 
èg_föd_uæs
 },

102 { 
TAG_IFRAME
, "i‰ame", 
èg_föd_uæs
 },

103 { 
TAG_IMG
, "img", 
èg_föd_uæs
 },

104 { 
TAG_INPUT
, "öput", 
èg_föd_uæs
 },

105 { 
TAG_LAYER
, "œyî", 
èg_föd_uæs
 },

106 { 
TAG_LINK
, "lök", 
èg_h™dÀ_lök
 },

107 { 
TAG_META
, "mëa", 
èg_h™dÀ_mëa
 },

108 { 
TAG_OBJECT
, "obje˘", 
èg_föd_uæs
 },

109 { 
TAG_OVERLAY
, "ovîœy", 
èg_föd_uæs
 },

110 { 
TAG_SCRIPT
, "s¸ùt", 
èg_föd_uæs
 },

111 { 
TAG_TABLE
, "èbÀ", 
èg_föd_uæs
 },

112 { 
TAG_TD
, "td", 
èg_föd_uæs
 },

113 { 
TAG_TH
, "th", 
èg_föd_uæs
 }

114 
	}
};

124 
	#ATTR_INLINE
 1

	)

131 
	#ATTR_HTML
 2

	)

136 
	mègid
;

137 c⁄° *
	m©å_«me
;

138 
	mÊags
;

139 } 
	gèg_uæ_©åibuãs
[] = {

140 { 
TAG_A
, "hªf", 
ATTR_HTML
 },

141 { 
TAG_APPLET
, "code", 
ATTR_INLINE
 },

142 { 
TAG_AREA
, "hªf", 
ATTR_HTML
 },

143 { 
TAG_BGSOUND
, "§c", 
ATTR_INLINE
 },

144 { 
TAG_BODY
, "background", 
ATTR_INLINE
 },

145 { 
TAG_EMBED
, "hªf", 
ATTR_HTML
 },

146 { 
TAG_EMBED
, "§c", 
ATTR_INLINE
 | 
ATTR_HTML
 },

147 { 
TAG_FIG
, "§c", 
ATTR_INLINE
 },

148 { 
TAG_FRAME
, "§c", 
ATTR_INLINE
 | 
ATTR_HTML
 },

149 { 
TAG_IFRAME
, "§c", 
ATTR_INLINE
 | 
ATTR_HTML
 },

150 { 
TAG_IMG
, "hªf", 
ATTR_INLINE
 },

151 { 
TAG_IMG
, "low§c", 
ATTR_INLINE
 },

152 { 
TAG_IMG
, "§c", 
ATTR_INLINE
 },

153 { 
TAG_INPUT
, "§c", 
ATTR_INLINE
 },

154 { 
TAG_LAYER
, "§c", 
ATTR_INLINE
 | 
ATTR_HTML
 },

155 { 
TAG_OBJECT
, "d©a", 
ATTR_INLINE
 },

156 { 
TAG_OVERLAY
, "§c", 
ATTR_INLINE
 | 
ATTR_HTML
 },

157 { 
TAG_SCRIPT
, "§c", 
ATTR_INLINE
 },

158 { 
TAG_TABLE
, "background", 
ATTR_INLINE
 },

159 { 
TAG_TD
, "background", 
ATTR_INLINE
 },

160 { 
TAG_TH
, "background", 
ATTR_INLINE
 }

166 c⁄° *
	gaddôi⁄Æ_©åibuãs
[] = {

176 
hash_èbÀ
 *
	göãª°ög_ègs
;

177 
hash_èbÀ
 *
	göãª°ög_©åibuãs
;

181 *
	gmëa_ch¨£t
;

184 
	$öô_öãª°ög
 ()

195 
size_t
 
i
;

196 
öãª°ög_ègs
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (
	`cou¡of
 (
known_ègs
));

200 
i
 = 0; i < 
	`cou¡of
 (
known_ègs
); i++)

201 
	`hash_èbÀ_put
 (
öãª°ög_ègs
, 
known_ègs
[
i
].
«me
, known_tags + i);

204 i‡(
›t
.
ign‹e_ègs
)

206 **
ign‹ed
;

207 
ign‹ed
 = 
›t
.
ign‹e_ègs
; *ignored; ignored++)

208 
	`hash_èbÀ_ªmove
 (
öãª°ög_ègs
, *
ign‹ed
);

212 i‡(
›t
.
fﬁlow_ègs
)

216 
hash_èbÀ
 *
öãr£˘
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (0);

217 **
fﬁlowed
;

218 
fﬁlowed
 = 
›t
.
fﬁlow_ègs
; *followed; followed++)

220 
known_èg
 *
t
 = 
	`hash_èbÀ_gë
 (
öãª°ög_ègs
, *
fﬁlowed
);

221 i‡(!
t
)

223 
	`hash_èbÀ_put
 (
öãr£˘
, *
fﬁlowed
, 
t
);

225 
	`hash_èbÀ_de°roy
 (
öãª°ög_ègs
);

226 
öãª°ög_ègs
 = 
öãr£˘
;

230 
öãª°ög_©åibuãs
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (10);

231 
i
 = 0; i < 
	`cou¡of
 (
addôi⁄Æ_©åibuãs
); i++)

232 
	`hash_èbÀ_put
 (
öãª°ög_©åibuãs
, 
addôi⁄Æ_©åibuãs
[
i
], "1");

233 
i
 = 0; i < 
	`cou¡of
 (
èg_uæ_©åibuãs
); i++)

234 
	`hash_èbÀ_put
 (
öãª°ög_©åibuãs
,

235 
èg_uæ_©åibuãs
[
i
].
©å_«me
, "1");

236 
	}
}

243 
	$föd_©å
 (
ègöfo
 *
èg
, c⁄° *
«me
, *
©åöd
)

245 
i
;

246 
i
 = 0; i < 
èg
->
«ârs
; i++)

247 i‡(!
	`°rˇ£cmp
 (
èg
->
©ås
[
i
].
«me
,Çame))

249 i‡(
©åöd
)

250 *
©åöd
 = 
i
;

251  
èg
->
©ås
[
i
].
vÆue
;

253  
NULL
;

254 
	}
}

257 
	#ATTR_POS
(
èg
, 
©åöd
, 
˘x
) \

258 (
èg
->
©ås
[
©åöd
].
vÆue_øw_begönög
 - 
˘x
->
ãxt
)

	)

259 
	#ATTR_SIZE
(
èg
, 
©åöd
) \

260 (
èg
->
©ås
[
©åöd
].
vÆue_øw_size
)

	)

267 
uæpos
 *

268 
	$≠≥nd_uæ
 (c⁄° *
lök_uri
, 
posôi⁄
, 
size
,

269 
m≠_c⁄ãxt
 *
˘x
)

271 
lök_has_scheme
 = 
	`uæ_has_scheme
 (
lök_uri
);

272 
uæpos
 *
√wñ
;

273 c⁄° *
ba£
 = 
˘x
->ba£ ? ctx->ba£ : ctx->
∑ª¡_ba£
;

274 
uæ
 *url;

276 i‡(!
ba£
)

278 
	`DEBUGP
 (("%s:Ço base, merge will use \"%s\".\n",

279 
˘x
->
documít_fûe
, 
lök_uri
));

281 i‡(!
lök_has_scheme
)

287 
	`log¥ötf
 (
LOG_NOTQUIET
,

288 
	`_
("%s: CannotÑesolve incompleteÜink %s.\n"),

289 
˘x
->
documít_fûe
, 
lök_uri
);

290  
NULL
;

293 
uæ
 = 
	`uæ_∑r£
 (
lök_uri
, 
NULL
, NULL, 
Ál£
);

294 i‡(!
uæ
)

296 
	`DEBUGP
 (("%s:Üink \"%s\" doesn'tÖarse.\n",

297 
˘x
->
documít_fûe
, 
lök_uri
));

298  
NULL
;

307 *
com∂ëe_uri
 = 
	`uri_mîge
 (
ba£
, 
lök_uri
);

309 
	`DEBUGP
 (("%s: merge(%s, %s) -> %s\n",

310 
	`quŸórg_n_°yÀ
 (0, 
esˇ≥_quŸög_°yÀ
, 
˘x
->
documít_fûe
),

311 
	`quŸe_n
 (1, 
ba£
),

312 
	`quŸe_n
 (2, 
lök_uri
),

313 
	`quŸórg_n_°yÀ
 (3, 
esˇ≥_quŸög_°yÀ
, 
com∂ëe_uri
)));

315 
uæ
 = 
	`uæ_∑r£
 (
com∂ëe_uri
, 
NULL
, NULL, 
Ál£
);

316 i‡(!
uæ
)

318 
	`DEBUGP
 (("%s: mergedÜink \"%s\" doesn'tÖarse.\n",

319 
˘x
->
documít_fûe
, 
com∂ëe_uri
));

320 
	`x‰ì
 (
com∂ëe_uri
);

321  
NULL
;

323 
	`x‰ì
 (
com∂ëe_uri
);

326 
	`DEBUGP
 (("≠≥ndög %†tÿuæpos.\n", 
	`quŸe
 (
uæ
->url)));

328 
√wñ
 = 
	`x√w0
 (
uæpos
);

329 
√wñ
->
uæ
 = url;

330 
√wñ
->
pos
 = 
posôi⁄
;

331 
√wñ
->
size
 = size;

335 i‡(!
lök_has_scheme
 && *
lök_uri
 != '/')

336 
√wñ
->
lök_ªœtive_p
 = 1;

337 i‡(
lök_has_scheme
)

338 
√wñ
->
lök_com∂ëe_p
 = 1;

341 i‡(
˘x
->
hód
 =
NULL
)

342 
˘x
->
hód
 = 
√wñ
;

345 
uæpos
 *
ô
, *
¥ev
 = 
NULL
;

347 
ô
 = 
˘x
->
hód
;

348 
ô
 && 
posôi⁄
 > it->
pos
)

350 
¥ev
 = 
ô
;

351 
ô
 = it->
√xt
;

354 
√wñ
->
√xt
 = 
ô
;

356 i‡(
¥ev
)

357 
¥ev
->
√xt
 = 
√wñ
;

359 
˘x
->
hód
 = 
√wñ
;

362  
√wñ
;

363 
	}
}

366 
	$check_°yÀ_©å
 (
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

368 
©åöd
;

369 
øw_°¨t
;

370 
øw_Àn
;

371 *
°yÀ
 = 
	`föd_©å
 (
èg
, "°yÀ", &
©åöd
);

372 i‡(!
°yÀ
)

377 
øw_°¨t
 = 
	`ATTR_POS
 (
èg
, 
©åöd
, 
˘x
);

378 
øw_Àn
 = 
	`ATTR_SIZE
 (
èg
, 
©åöd
);

379 if–*(*)(
˘x
->
ãxt
 + 
øw_°¨t
) == '\''

380 || *(*)(
˘x
->
ãxt
 + 
øw_°¨t
) == '"')

382 
øw_°¨t
 += 1;

383 
øw_Àn
 -= 2;

386 if(
øw_Àn
 <= 0)

389 
	`gë_uæs_css
 (
˘x
, 
øw_°¨t
, 
øw_Àn
);

390 
	}
}

399 
	$èg_föd_uæs
 (
ègid
, 
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

401 
size_t
 
i
;

402 
©åöd
;

403 
fú°
 = -1;

405 
i
 = 0; i < 
	`cou¡of
 (
èg_uæ_©åibuãs
); i++)

406 i‡(
èg_uæ_©åibuãs
[
i
].
ègid
 ==Åagid)

410 
fú°
 = 
i
;

413 
	`as£π
 (
fú°
 != -1);

424 
©åöd
 = 0;áâröd < 
èg
->
«ârs
;áttrind++)

428 *
lök
 = 
èg
->
©ås
[
©åöd
].
vÆue
;

429 c⁄° 
size_t
 
size
 = 
	`cou¡of
 (
èg_uæ_©åibuãs
);

435 
i
 = 
fú°
; i < 
size
 && 
èg_uæ_©åibuãs
[i].
ègid
 ==Åagid; i++)

437 i‡(0 =
	`°rˇ£cmp
 (
èg
->
©ås
[
©åöd
].
«me
,

438 
èg_uæ_©åibuãs
[
i
].
©å_«me
))

440 
uæpos
 *
up
 = 
	`≠≥nd_uæ
 (
lök
, 
	`ATTR_POS
(
èg
,
©åöd
,
˘x
),

441 
	`ATTR_SIZE
(
èg
,
©åöd
), 
˘x
);

442 i‡(
up
)

444 
Êags
 = 
èg_uæ_©åibuãs
[
i
].flags;

445 i‡(
Êags
 & 
ATTR_INLINE
)

446 
up
->
lök_ölöe_p
 = 1;

447 i‡(
Êags
 & 
ATTR_HTML
)

448 
up
->
lök_ex≥˘_html
 = 1;

453 
	}
}

458 
	$èg_h™dÀ_ba£
 (
ègid
, 
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

460 
uæpos
 *
ba£_uæpos
;

461 
©åöd
;

462 *
√wba£
 = 
	`föd_©å
 (
èg
, "hªf", &
©åöd
);

463 i‡(!
√wba£
)

466 
ba£_uæpos
 = 
	`≠≥nd_uæ
 (
√wba£
, 
	`ATTR_POS
(
èg
,
©åöd
,
˘x
),

467 
	`ATTR_SIZE
(
èg
,
©åöd
), 
˘x
);

468 i‡(!
ba£_uæpos
)

470 
ba£_uæpos
->
ign‹e_whí_dow∆ﬂdög
 = 1;

471 
ba£_uæpos
->
lök_ba£_p
 = 1;

473 i‡(
˘x
->
ba£
)

474 
	`x‰ì
 (
˘x
->
ba£
);

475 i‡(
˘x
->
∑ª¡_ba£
)

476 
˘x
->
ba£
 = 
	`uri_mîge
 (˘x->
∑ª¡_ba£
, 
√wba£
);

478 
˘x
->
ba£
 = 
	`x°rdup
 (
√wba£
);

479 
	}
}

484 
	$èg_h™dÀ_f‹m
 (
ègid
, 
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

486 
©åöd
;

487 *
a˘i⁄
 = 
	`föd_©å
 (
èg
, "a˘i⁄", &
©åöd
);

489 i‡(
a˘i⁄
)

491 
uæpos
 *
up
 = 
	`≠≥nd_uæ
 (
a˘i⁄
, 
	`ATTR_POS
(
èg
,
©åöd
,
˘x
),

492 
	`ATTR_SIZE
(
èg
,
©åöd
), 
˘x
);

493 i‡(
up
)

494 
up
->
ign‹e_whí_dow∆ﬂdög
 = 1;

496 
	}
}

502 
	$èg_h™dÀ_lök
 (
ègid
, 
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

504 
©åöd
;

505 *
hªf
 = 
	`föd_©å
 (
èg
, "hªf", &
©åöd
);

513 i‡(
hªf
)

515 
uæpos
 *
up
 = 
	`≠≥nd_uæ
 (
hªf
, 
	`ATTR_POS
(
èg
,
©åöd
,
˘x
),

516 
	`ATTR_SIZE
(
èg
,
©åöd
), 
˘x
);

517 i‡(
up
)

519 *
ªl
 = 
	`föd_©å
 (
èg
, "ªl", 
NULL
);

520 i‡(
ªl
)

522 i‡(0 =
	`°rˇ£cmp
 (
ªl
, "stylesheet"))

524 
up
->
lök_ölöe_p
 = 1;

525 
up
->
lök_ex≥˘_css
 = 1;

527 i‡(0 =
	`°rˇ£cmp
 (
ªl
, "shortcut icon"))

529 
up
->
lök_ölöe_p
 = 1;

538 *
ty≥
 = 
	`föd_©å
 (
èg
, "ty≥", 
NULL
);

539 i‡(!
ty≥
 || 
	`°rˇ£cmp
 (type, "text/html") == 0)

540 
up
->
lök_ex≥˘_html
 = 1;

545 
	}
}

551 
	$èg_h™dÀ_mëa
 (
ègid
, 
ègöfo
 *
èg
, 
m≠_c⁄ãxt
 *
˘x
)

553 *
«me
 = 
	`föd_©å
 (
èg
, "«me", 
NULL
);

554 *
hâp_equiv
 = 
	`föd_©å
 (
èg
, "hâp-equiv", 
NULL
);

556 i‡(
hâp_equiv
 && 0 =
	`°rˇ£cmp
 (http_equiv, "refresh"))

567 
uæpos
 *
íåy
;

568 
©åöd
;

569 
timeout
 = 0;

570 *
p
;

572 *
ª‰esh
 = 
	`föd_©å
 (
èg
, "c⁄ã¡", &
©åöd
);

573 i‡(!
ª‰esh
)

576 
p
 = 
ª‰esh
; 
	`c_isdigô
 (*p);Ö++)

577 
timeout
 = 10 *Åimeouà+ *
p
 - '0';

578 i‡(*
p
++ != ';')

581 
	`c_is•a˚
 (*
p
))

582 ++
p
;

583 i‡(!–
	`c_touµî
 (*
p
) == 'U'

584 && 
	`c_touµî
 (*(
p
 + 1)) == 'R'

585 && 
	`c_touµî
 (*(
p
 + 2)) == 'L'

586 && *(
p
 + 3) == '='))

588 
p
 += 4;

589 
	`c_is•a˚
 (*
p
))

590 ++
p
;

592 
íåy
 = 
	`≠≥nd_uæ
 (
p
, 
	`ATTR_POS
(
èg
,
©åöd
,
˘x
),

593 
	`ATTR_SIZE
(
èg
,
©åöd
), 
˘x
);

594 i‡(
íåy
)

596 
íåy
->
lök_ª‰esh_p
 = 1;

597 
íåy
->
ª‰esh_timeout
 = 
timeout
;

598 
íåy
->
lök_ex≥˘_html
 = 1;

601 i‡(
hâp_equiv
 && 0 =
	`°rˇ£cmp
 (http_equiv, "content-type"))

606 *
mch¨£t
;

607 *
c⁄ã¡
 = 
	`föd_©å
 (
èg
, "c⁄ã¡", 
NULL
);

608 i‡(!
c⁄ã¡
)

611 
mch¨£t
 = 
	`∑r£_ch¨£t
 (
c⁄ã¡
);

612 i‡(!
mch¨£t
)

615 
	`x‰ì_nuŒ
 (
mëa_ch¨£t
);

616 
mëa_ch¨£t
 = 
mch¨£t
;

618 i‡(
«me
 && 0 =
	`°rˇ£cmp
 (name, "robots"))

622 *
c⁄ã¡
 = 
	`föd_©å
 (
èg
, "c⁄ã¡", 
NULL
);

623 i‡(!
c⁄ã¡
)

625 i‡(!
	`°rˇ£cmp
 (
c⁄ã¡
, "none"))

626 
˘x
->
nofﬁlow
 = 
åue
;

629 *
c⁄ã¡
)

631 *
íd
;

633 
c⁄ã¡
 +
	`°r•n
 (content, " \f\n\r\t\v");

636 
íd
 = 
c⁄ã¡
 + 
	`°rc•n
 (content, ", \f\n\r\t\v");

637 i‡(!
	`°∫ˇ£cmp
 (
c⁄ã¡
, "nofﬁlow", 
íd
 - content))

638 
˘x
->
nofﬁlow
 = 
åue
;

640 i‡(*
íd
 == ',')

641 ++
íd
;

644 
íd
 = 
	`°rchr
 (end, ',');

645 i‡(
íd
)

646 ++
íd
;

648 
íd
 = 
c⁄ã¡
 + 
	`°æí
 (content);

650 
c⁄ã¡
 = 
íd
;

654 
	}
}

660 
	$cﬁÀ˘_ègs_m≠≥r
 (
ègöfo
 *
èg
, *
¨g
)

662 
m≠_c⁄ãxt
 *
˘x
 = (m≠_c⁄ãxà*)
¨g
;

671 
known_èg
 *
t
 = 
	`hash_èbÀ_gë
 (
öãª°ög_ègs
, 
èg
->
«me
);

673 i‡(
t
 !
NULL
)

674 
t
->
	`h™dÀr
 (t->
ègid
, 
èg
, 
˘x
);

676 
	`check_°yÀ_©å
 (
èg
, 
˘x
);

678 i‡(
èg
->
íd_èg_p
 && (0 =
	`°rˇ£cmp
 (èg->
«me
, "style")) &&

679 
èg
->
c⁄ã¡s_begö
 &&Åag->
c⁄ã¡s_íd
)

682 
	`gë_uæs_css
 (
˘x
, 
èg
->
c⁄ã¡s_begö
 - ctx->
ãxt
,

683 
èg
->
c⁄ã¡s_íd
 -Åag->
c⁄ã¡s_begö
);

685 
	}
}

691 
uæpos
 *

692 
	$gë_uæs_html
 (c⁄° *
fûe
, c⁄° *
uæ
, 
boﬁ
 *
mëa_dißŒow_fﬁlow
,

693 
úi
 *iri)

695 
fûe_mem‹y
 *
fm
;

696 
m≠_c⁄ãxt
 
˘x
;

697 
Êags
;

700 
fm
 = 
	`wgë_ªad_fûe
 (
fûe
);

701 i‡(!
fm
)

703 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

704  
NULL
;

706 
	`DEBUGP
 (("Lﬂded %†(sizê%s).\n", 
fûe
, 
	`numbî_to_°©ic_°rög
 (
fm
->
Àngth
)));

708 
˘x
.
ãxt
 = 
fm
->
c⁄ã¡
;

709 
˘x
.
hód
 = 
NULL
;

710 
˘x
.
ba£
 = 
NULL
;

711 
˘x
.
∑ª¡_ba£
 = 
uæ
 ? uæ : 
›t
.
ba£_hªf
;

712 
˘x
.
documít_fûe
 = 
fûe
;

713 
˘x
.
nofﬁlow
 = 
Ál£
;

715 i‡(!
öãª°ög_ègs
)

716 
	`öô_öãª°ög
 ();

725 
Êags
 = 
MHT_TRIM_VALUES
;

726 i‡(
›t
.
°ri˘_commíts
)

727 
Êags
 |
MHT_STRICT_COMMENTS
;

730 
	`m≠_html_ègs
 (
fm
->
c⁄ã¡
, fm->
Àngth
, 
cﬁÀ˘_ègs_m≠≥r
, &
˘x
, 
Êags
,

731 
NULL
, 
öãª°ög_©åibuãs
);

734 i‡(
úi
 && 
mëa_ch¨£t
)

735 
	`£t_c⁄ã¡_ícodög
 (
úi
, 
mëa_ch¨£t
);

737 
	`DEBUGP
 (("no-fﬁlow i¿%s: %d\n", 
fûe
, 
˘x
.
nofﬁlow
));

738 i‡(
mëa_dißŒow_fﬁlow
)

739 *
mëa_dißŒow_fﬁlow
 = 
˘x
.
nofﬁlow
;

741 
	`x‰ì_nuŒ
 (
˘x
.
ba£
);

742 
	`wgë_ªad_fûe_‰ì
 (
fm
);

743  
˘x
.
hód
;

744 
	}
}

749 
uæpos
 *

750 
	$gë_uæs_fûe
 (c⁄° *
fûe
)

752 
fûe_mem‹y
 *
fm
;

753 
uæpos
 *
hód
, *
èû
;

754 c⁄° *
ãxt
, *
ãxt_íd
;

757 
fm
 = 
	`wgë_ªad_fûe
 (
fûe
);

758 i‡(!
fm
)

760 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

761  
NULL
;

763 
	`DEBUGP
 (("Lﬂded %†(sizê%s).\n", 
fûe
, 
	`numbî_to_°©ic_°rög
 (
fm
->
Àngth
)));

765 
hód
 = 
èû
 = 
NULL
;

766 
ãxt
 = 
fm
->
c⁄ã¡
;

767 
ãxt_íd
 = 
fm
->
c⁄ã¡
 + fm->
Àngth
;

768 
ãxt
 < 
ãxt_íd
)

770 
up_îr‹_code
;

771 *
uæ_ãxt
;

772 
uæpos
 *
íåy
;

773 
uæ
 *url;

775 c⁄° *
löe_beg
 = 
ãxt
;

776 c⁄° *
löe_íd
 = 
	`memchr
 (
ãxt
, '\n', 
ãxt_íd
 -Åext);

777 i‡(!
löe_íd
)

778 
löe_íd
 = 
ãxt_íd
;

780 ++
löe_íd
;

781 
ãxt
 = 
löe_íd
;

784 
löe_beg
 < 
löe_íd
 && 
	`c_is•a˚
 (*line_beg))

785 ++
löe_beg
;

786 
löe_íd
 > 
löe_beg
 && 
	`c_is•a˚
 (*(line_end - 1)))

787 --
löe_íd
;

789 i‡(
löe_beg
 =
löe_íd
)

796 
uæ_ãxt
 = 
	`°rdupdñim
 (
löe_beg
, 
löe_íd
);

798 i‡(
›t
.
ba£_hªf
)

801 *
mîged
 = 
	`uri_mîge
 (
›t
.
ba£_hªf
, 
uæ_ãxt
);

802 
	`x‰ì
 (
uæ_ãxt
);

803 
uæ_ãxt
 = 
mîged
;

806 
uæ
 = 
	`uæ_∑r£
 (
uæ_ãxt
, &
up_îr‹_code
, 
NULL
, 
Ál£
);

807 i‡(!
uæ
)

809 *
îr‹
 = 
	`uæ_îr‹
 (
uæ_ãxt
, 
up_îr‹_code
);

810 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: Invalid URL %s: %s\n"),

811 
fûe
, 
uæ_ãxt
, 
îr‹
);

812 
	`x‰ì
 (
uæ_ãxt
);

813 
	`x‰ì
 (
îr‹
);

814 
	`öf‹m_exô_°©us
 (
URLERROR
);

817 
	`x‰ì
 (
uæ_ãxt
);

819 
íåy
 = 
	`x√w0
 (
uæpos
);

820 
íåy
->
uæ
 = url;

822 i‡(!
hód
)

823 
hód
 = 
íåy
;

825 
èû
->
√xt
 = 
íåy
;

826 
èû
 = 
íåy
;

828 
	`wgë_ªad_fûe_‰ì
 (
fm
);

829  
hód
;

830 
	}
}

833 
	$˛ónup_html_uæ
 ()

837 i‡(
öãª°ög_ègs
)

838 
	`hash_èbÀ_de°roy
 (
öãª°ög_ègs
);

839 i‡(
öãª°ög_©åibuãs
)

840 
	`hash_èbÀ_de°roy
 (
öãª°ög_©åibuãs
);

841 
	}
}

	@src/html-url.h

31 #i‚de‡
HTML_URL_H


32 
	#HTML_URL_H


	)

34 
	sm≠_c⁄ãxt
 {

35 *
	mãxt
;

36 *
	mba£
;

38 c⁄° *
	m∑ª¡_ba£
;

39 c⁄° *
	mdocumít_fûe
;

40 
boﬁ
 
	mnofﬁlow
;

43 
uæpos
 *
	mhód
;

46 
uæpos
 *
gë_uæs_fûe
 (const *);

47 
uæpos
 *
gë_uæs_html
 (c⁄° *, c⁄° *, 
boﬁ
 *, 
úi
 *);

48 
uæpos
 *
≠≥nd_uæ
 (c⁄° *, , , 
m≠_c⁄ãxt
 *);

49 
‰ì_uæpos
 (
uæpos
 *);

	@src/http-ntlm.c

32 
	~"wgë.h
"

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<°dlib.h
>

45 
	~<›ís¶/des.h
>

46 
	~<›ís¶/md4.h
>

47 
	~<›ís¶/›ís¶v.h
>

49 
	~"utûs.h
"

50 
	~"hâp-¡lm.h
"

52 #i‡
OPENSSL_VERSION_NUMBER
 < 0x00907001L

53 
	#DES_key_scheduÀ
 
des_key_scheduÀ


	)

54 
	#DES_cblock
 
des_cblock


	)

55 
	#DES_£t_odd_∑rôy
 
des_£t_odd_∑rôy


	)

56 
	#DES_£t_key
 
des_£t_key


	)

57 
	#DES_ecb_í¸y±
 
des_ecb_í¸y±


	)

60 
	#DESKEY
(
x
Ë
	)
x

61 
	#DESKEYARG
(
x
Ë
	)
x

64 
	#DESKEYARG
(
x
Ë*
	)
x

65 
	#DESKEY
(
x
Ë&
	)
x

69 
	#USE_NTRESPONSES
 1

	)

74 
	#NTLMFLAG_NEGOTIATE_UNICODE
 (1<<0)

	)

75 
	#NTLMFLAG_NEGOTIATE_OEM
 (1<<1)

	)

76 
	#NTLMFLAG_REQUEST_TARGET
 (1<<2)

	)

78 
	#NTLMFLAG_NEGOTIATE_SIGN
 (1<<4)

	)

79 
	#NTLMFLAG_NEGOTIATE_SEAL
 (1<<5)

	)

80 
	#NTLMFLAG_NEGOTIATE_DATAGRAM_STYLE
 (1<<6)

	)

81 
	#NTLMFLAG_NEGOTIATE_LM_KEY
 (1<<7)

	)

82 
	#NTLMFLAG_NEGOTIATE_NETWARE
 (1<<8)

	)

83 
	#NTLMFLAG_NEGOTIATE_NTLM_KEY
 (1<<9)

	)

86 
	#NTLMFLAG_NEGOTIATE_DOMAIN_SUPPLIED
 (1<<12)

	)

87 
	#NTLMFLAG_NEGOTIATE_WORKSTATION_SUPPLIED
 (1<<13)

	)

88 
	#NTLMFLAG_NEGOTIATE_LOCAL_CALL
 (1<<14)

	)

89 
	#NTLMFLAG_NEGOTIATE_ALWAYS_SIGN
 (1<<15)

	)

90 
	#NTLMFLAG_TARGET_TYPE_DOMAIN
 (1<<16)

	)

91 
	#NTLMFLAG_TARGET_TYPE_SERVER
 (1<<17)

	)

92 
	#NTLMFLAG_TARGET_TYPE_SHARE
 (1<<18)

	)

93 
	#NTLMFLAG_NEGOTIATE_NTLM2_KEY
 (1<<19)

	)

94 
	#NTLMFLAG_REQUEST_INIT_RESPONSE
 (1<<20)

	)

95 
	#NTLMFLAG_REQUEST_ACCEPT_RESPONSE
 (1<<21)

	)

96 
	#NTLMFLAG_REQUEST_NONNT_SESSION_KEY
 (1<<22)

	)

97 
	#NTLMFLAG_NEGOTIATE_TARGET_INFO
 (1<<23)

	)

103 
	#NTLMFLAG_NEGOTIATE_128
 (1<<29)

	)

104 
	#NTLMFLAG_NEGOTIATE_KEY_EXCHANGE
 (1<<30)

	)

105 
	#NTLMFLAG_NEGOTIATE_56
 (1<<31)

	)

118 
boﬁ


119 
	$¡lm_öput
 (
¡lmd©a
 *
¡lm
, c⁄° *
hódî
)

121 i‡(0 !
	`°∫cmp
 (
hódî
, "NTLM", 4))

122  
Ál£
;

124 
hódî
 += 4;

125 *
hódî
 && 
	`c_is•a˚
(*header))

126 
hódî
++;

128 i‡(*
hódî
)

143 
size
;

144 *
buf„r
 = (*Ë
	`Æloˇ
 (
	`°æí
 (
hódî
));

146 
	`DEBUGP
 (("ReceivedáÅype-2 NTLM message.\n"));

148 
size
 = 
	`ba£64_decode
 (
hódî
, 
buf„r
);

149 i‡(
size
 < 0)

150  
Ál£
;

152 
¡lm
->
°©e
 = 
NTLMSTATE_TYPE2
;

154 i‡(
size
 >= 48)

156 
	`mem˝y
 (
¡lm
->
n⁄˚
, &
buf„r
[24], 8);

162 i‡(
¡lm
->
°©e
 >
NTLMSTATE_TYPE1
)

164 
	`DEBUGP
 (("UnexpectedÉmpty NTLM message.\n"));

165  
Ál£
;

168 
	`DEBUGP
 (("Empty NTLM message, startingÅransaction.\n"));

169 
¡lm
->
°©e
 = 
NTLMSTATE_TYPE1
;

172  
åue
;

173 
	}
}

180 
£tup_des_key
(*
key_56
,

181 
DES_key_scheduÀ
 
	$DESKEYARG
(
ks
))

183 
DES_cblock
 
key
;

185 
key
[0] = 
key_56
[0];

186 
key
[1] = ((
key_56
[0] << 7) & 0xFF) | (key_56[1] >> 1);

187 
key
[2] = ((
key_56
[1] << 6) & 0xFF) | (key_56[2] >> 2);

188 
key
[3] = ((
key_56
[2] << 5) & 0xFF) | (key_56[3] >> 3);

189 
key
[4] = ((
key_56
[3] << 4) & 0xFF) | (key_56[4] >> 4);

190 
key
[5] = ((
key_56
[4] << 3) & 0xFF) | (key_56[5] >> 5);

191 
key
[6] = ((
key_56
[5] << 2) & 0xFF) | (key_56[6] >> 6);

192 
key
[7] = (
key_56
[6] << 1) & 0xFF;

194 
	`DES_£t_odd_∑rôy
(&
key
);

195 
	`DES_£t_key
(&
key
, 
ks
);

196 
	}
}

204 
	$ˇlc_ª•
(*
keys
, *
∂aöãxt
, *
ªsu…s
)

206 
DES_key_scheduÀ
 
ks
;

208 
	`£tup_des_key
(
keys
, 
	`DESKEY
(
ks
));

209 
	`DES_ecb_í¸y±
((
DES_cblock
*Ë
∂aöãxt
, (DES_cblock*Ë
ªsu…s
,

210 
	`DESKEY
(
ks
), 
DES_ENCRYPT
);

212 
	`£tup_des_key
(
keys
+7, 
	`DESKEY
(
ks
));

213 
	`DES_ecb_í¸y±
((
DES_cblock
*Ë
∂aöãxt
, (DES_cblock*Ë(
ªsu…s
+8),

214 
	`DESKEY
(
ks
), 
DES_ENCRYPT
);

216 
	`£tup_des_key
(
keys
+14, 
	`DESKEY
(
ks
));

217 
	`DES_ecb_í¸y±
((
DES_cblock
*Ë
∂aöãxt
, (DES_cblock*Ë(
ªsu…s
+16),

218 
	`DESKEY
(
ks
), 
DES_ENCRYPT
);

219 
	}
}

225 
mkhash
(c⁄° *
∑ssw‹d
,

226 *
n⁄˚
,

227 *
lmª•


228 #ifde‡
USE_NTRESPONSES


229 , *
¡ª•


233 
	glmbuf„r
[21];

234 #ifde‡
USE_NTRESPONSES


235 
	g¡buf„r
[21];

237 *
	gpw
;

238 c⁄° 
	gmagic
[] = {

241 
	gi
;

242 
	gÀn
 = 
°æí
(
∑ssw‹d
);

245 
	gpw
 = (*Ë
Æloˇ
 (
Àn
 < 7 ? 14 :Üen * 2);

247 i‡(
	gÀn
 > 14)

248 
	gÀn
 = 14;

250 
	gi
=0; i<
	gÀn
; i++)

251 
	gpw
[
i
] = 
c_touµî
 (
∑ssw‹d
[i]);

253 ; 
	gi
<14; i++)

254 
	gpw
[
i
] = 0;

258 
DES_key_scheduÀ
 
	gks
;

260 
£tup_des_key
(
pw
, 
DESKEY
(
ks
));

261 
DES_ecb_í¸y±
((
DES_cblock
 *)
magic
, (DES_cblock *)
lmbuf„r
,

262 
DESKEY
(
ks
), 
DES_ENCRYPT
);

264 
£tup_des_key
(
pw
+7, 
DESKEY
(
ks
));

265 
DES_ecb_í¸y±
((
DES_cblock
 *)
magic
, (DES_cblock *)(
lmbuf„r
+8),

266 
DESKEY
(
ks
), 
DES_ENCRYPT
);

268 
mem£t
(
lmbuf„r
+16, 0, 5);

271 
ˇlc_ª•
(
lmbuf„r
, 
n⁄˚
, 
lmª•
);

273 #ifde‡
USE_NTRESPONSES


276 
MD4_CTX
 
	gMD4
;

278 
	gÀn
 = 
°æí
(
∑ssw‹d
);

280 
	gi
=0; i<
	gÀn
; i++) {

281 
	gpw
[2*
i
] = 
∑ssw‹d
[i];

282 
	gpw
[2*
i
+1] = 0;

285 
MD4_Inô
(&
MD4
);

286 
MD4_Upd©e
(&
MD4
, 
pw
, 2*
Àn
);

287 
MD4_FöÆ
(
¡buf„r
, &
MD4
);

289 
mem£t
(
¡buf„r
+16, 0, 5);

292 
ˇlc_ª•
(
¡buf„r
, 
n⁄˚
, 
¡ª•
);

296 
	#SHORTPAIR
(
x
Ë((xË& 0xff), ((xË>> 8)

	)

297 
	#LONGQUARTET
(
x
) ((x) & 0xff), (((x) >> 8)&0xff), \

298 (((
x
Ë>>16)&0xff), ((x)>>24)

	)

302 
	$¡lm_ouçut
 (
¡lmd©a
 *
¡lm
, c⁄° *
u£r
, c⁄° *
∑sswd
,

303 
boﬁ
 *
ªady
)

305 c⁄° *
domaö
="";

306 c⁄° *
ho°
="";

307 
domÀn
=
	`°æí
(
domaö
);

308 
ho°Àn
 = 
	`°æí
(
ho°
);

309 
ho°off
;

310 
domoff
;

311 
size
;

312 *
ba£64
;

313 
¡lmbuf
[256];

317 *
ouçut
;

319 *
ªady
 = 
Ál£
;

322 if(!
u£r
)

323 
u£r
="";

325 if(!
∑sswd
)

326 
∑sswd
="";

328 
¡lm
->
°©e
) {

329 
NTLMSTATE_TYPE1
:

331 
ho°off
 = 32;

332 
domoff
 = 
ho°off
 + 
ho°Àn
;

334 
	`DEBUGP
 (("CreatingáÅype-1 NTLM message.\n"));

349 
	`¢¥ötf
 (
¡lmbuf
, (ntlmbuf), "NTLMSSP%c"

365 
	`LONGQUARTET
(

366 
NTLMFLAG_NEGOTIATE_OEM
|

367 
NTLMFLAG_NEGOTIATE_NTLM_KEY


370 
	`SHORTPAIR
(
domÀn
),

371 
	`SHORTPAIR
(
domÀn
),

372 
	`SHORTPAIR
(
domoff
),

374 
	`SHORTPAIR
(
ho°Àn
),

375 
	`SHORTPAIR
(
ho°Àn
),

376 
	`SHORTPAIR
(
ho°off
),

378 
ho°
, 
domaö
);

381 
size
 = 32 + 
ho°Àn
 + 
domÀn
;

383 
ba£64
 = (*Ë
	`Æloˇ
 (
	`BASE64_LENGTH
 (
size
) + 1);

384 
	`ba£64_ícode
 (
¡lmbuf
, 
size
, 
ba£64
);

386 
ouçut
 = 
	`c⁄ˇt_°rögs
 ("NTLM ", 
ba£64
, (*) 0);

389 
NTLMSTATE_TYPE2
:

408 
lmª•off
;

409 
¡ª•off
;

410 
u£roff
;

411 
lmª•
[0x18];

412 #ifde‡
USE_NTRESPONSES


413 
¡ª•
[0x18];

415 c⁄° *
u§
;

416 
u£æí
;

418 
	`DEBUGP
 (("CreatingáÅype-3 NTLM message.\n"));

420 
u§
 = 
	`°rchr
(
u£r
, '\\');

421 if(!
u§
)

422 
u§
 = 
	`°rchr
(
u£r
, '/');

424 i‡(
u§
) {

425 
domaö
 = 
u£r
;

426 
domÀn
 = 
u§
 - 
domaö
;

427 
u§
++;

430 
u§
 = 
u£r
;

431 
u£æí
 = 
	`°æí
(
u§
);

433 
	`mkhash
(
∑sswd
, &
¡lm
->
n⁄˚
[0], 
lmª•


434 #ifde‡
USE_NTRESPONSES


435 , 
¡ª•


439 
domoff
 = 64;

440 
u£roff
 = 
domoff
 + 
domÀn
;

441 
ho°off
 = 
u£roff
 + 
u£æí
;

442 
lmª•off
 = 
ho°off
 + 
ho°Àn
;

443 
¡ª•off
 = 
lmª•off
 + 0x18;

447 
size
 = 
	`¢¥ötf
 (
¡lmbuf
, (ntlmbuf),

490 
	`SHORTPAIR
(0x18),

491 
	`SHORTPAIR
(0x18),

492 
	`SHORTPAIR
(
lmª•off
),

495 #ifde‡
USE_NTRESPONSES


496 
	`SHORTPAIR
(0x18),

497 
	`SHORTPAIR
(0x18),

502 
	`SHORTPAIR
(
¡ª•off
),

505 
	`SHORTPAIR
(
domÀn
),

506 
	`SHORTPAIR
(
domÀn
),

507 
	`SHORTPAIR
(
domoff
),

510 
	`SHORTPAIR
(
u£æí
),

511 
	`SHORTPAIR
(
u£æí
),

512 
	`SHORTPAIR
(
u£roff
),

515 
	`SHORTPAIR
(
ho°Àn
),

516 
	`SHORTPAIR
(
ho°Àn
),

517 
	`SHORTPAIR
(
ho°off
),

525 
size
=64;

526 
¡lmbuf
[62]=ntlmbuf[63]=0;

530 if(((
size_t
Ë
size
 + 
u£æí
 + 
domÀn
Ë>(
¡lmbuf
))

531  
NULL
;

533 
	`mem˝y
(&
¡lmbuf
[
size
], 
domaö
, 
domÀn
);

534 
size
 +
domÀn
;

536 
	`mem˝y
(&
¡lmbuf
[
size
], 
u§
, 
u£æí
);

537 
size
 +
u£æí
;

540 if(
size
 < (()(
¡lmbuf
) - 0x18)) {

541 
	`mem˝y
(&
¡lmbuf
[
size
], 
lmª•
, 0x18);

542 
size
 += 0x18;

545 #ifde‡
USE_NTRESPONSES


546 if(
size
 < (()(
¡lmbuf
) - 0x18)) {

547 
	`mem˝y
(&
¡lmbuf
[
size
], 
¡ª•
, 0x18);

548 
size
 += 0x18;

552 
¡lmbuf
[56] = 
size
 & 0xff;

553 
¡lmbuf
[57] = 
size
 >> 8;

556 
ba£64
 = (*Ë
	`Æloˇ
 (
	`BASE64_LENGTH
 (
size
) + 1);

557 
	`ba£64_ícode
 (
¡lmbuf
, 
size
, 
ba£64
);

559 
ouçut
 = 
	`c⁄ˇt_°rögs
 ("NTLM ", 
ba£64
, (*) 0);

561 
¡lm
->
°©e
 = 
NTLMSTATE_TYPE3
;

562 *
ªady
 = 
åue
;

566 
NTLMSTATE_TYPE3
:

569 *
ªady
 = 
åue
;

570 
ouçut
 = 
NULL
;

574  
ouçut
;

575 
	}
}

	@src/http-ntlm.h

1 #i‚de‡
__HTTP_NTLM_H


2 
	#__HTTP_NTLM_H


	)

35 
	mNTLMSTATE_NONE
,

36 
	mNTLMSTATE_TYPE1
,

37 
	mNTLMSTATE_TYPE2
,

38 
	mNTLMSTATE_TYPE3
,

39 
	mNTLMSTATE_LAST


40 } 
	twgë¡lm
;

43 
	s¡lmd©a
 {

44 
wgë¡lm
 
	m°©e
;

45 
	mn⁄˚
[8];

49 
boﬁ
 
¡lm_öput
 (
¡lmd©a
 *, const *);

52 *
¡lm_ouçut
 (
¡lmd©a
 *, c⁄° *, c⁄° *, 
boﬁ
 *);

	@src/http.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<as£π.h
>

39 
	~<î∫o.h
>

40 
	~<time.h
>

41 
	~<loˇÀ.h
>

43 
	~"hash.h
"

44 
	~"hâp.h
"

45 
	~"utûs.h
"

46 
	~"uæ.h
"

47 
	~"ho°.h
"

48 
	~"ªå.h
"

49 
	~"c⁄√˘.h
"

50 
	~"√åc.h
"

51 #ifde‡
HAVE_SSL


52 
	~"s¶.h
"

54 #ifde‡
ENABLE_NTLM


55 
	~"hâp-¡lm.h
"

57 
	~"cookõs.h
"

58 
	~"md5.h
"

59 
	~"c⁄vît.h
"

60 
	~"•idî.h
"

62 #ifde‡
TESTING


63 
	~"ã°.h
"

66 #ifde‡
__VMS


67 
	~"vms.h
"

70 *
vîsi⁄_°rög
;

73 
	ghâp_°©
;

74 *
¸óã_auth‹iz©i⁄_löe
 (const *, const *,

76 c⁄° *, 
boﬁ
 *);

77 *
basic_authítiˇti⁄_ícode
 (const *, const *);

78 
boﬁ
 
known_authítiˇti⁄_scheme_p
 (const *, const *);

79 
ísuª_exãnsi⁄
 (
hâp_°©
 *, const *, *);

80 
lﬂd_cookõs
 ();

82 #i‚de‡
MIN


83 
	#MIN
(
x
, 
y
Ë((xË> (yË? (yË: (x))

	)

87 
boﬁ
 
	gcookõs_lﬂded_p
;

88 
cookõ_j¨
 *
	gwgë_cookõ_j¨
;

90 
	#TEXTHTML_S
 "ãxt/html"

	)

91 
	#TEXTXHTML_S
 "≠∂iˇti⁄/xhtml+xml"

	)

92 
	#TEXTCSS_S
 "ãxt/css"

	)

95 
	#H_10X
(
x
Ë(((xË>100Ë&& ((xË< 200))

	)

96 
	#H_20X
(
x
Ë(((xË>200Ë&& ((xË< 300))

	)

97 
	#H_PARTIAL
(
x
Ë((xË=
HTTP_STATUS_PARTIAL_CONTENTS
)

	)

98 
	#H_REDIRECTED
(
x
Ë((xË=
HTTP_STATUS_MOVED_PERMANENTLY
 \

99 || (
x
Ë=
HTTP_STATUS_MOVED_TEMPORARILY
 \

100 || (
x
Ë=
HTTP_STATUS_SEE_OTHER
 \

101 || (
x
Ë=
HTTP_STATUS_TEMPORARY_REDIRECT
)

	)

105 
	#HTTP_STATUS_OK
 200

	)

106 
	#HTTP_STATUS_CREATED
 201

	)

107 
	#HTTP_STATUS_ACCEPTED
 202

	)

108 
	#HTTP_STATUS_NO_CONTENT
 204

	)

109 
	#HTTP_STATUS_PARTIAL_CONTENTS
 206

	)

112 
	#HTTP_STATUS_MULTIPLE_CHOICES
 300

	)

113 
	#HTTP_STATUS_MOVED_PERMANENTLY
 301

	)

114 
	#HTTP_STATUS_MOVED_TEMPORARILY
 302

	)

115 
	#HTTP_STATUS_SEE_OTHER
 303

	)

116 
	#HTTP_STATUS_NOT_MODIFIED
 304

	)

117 
	#HTTP_STATUS_TEMPORARY_REDIRECT
 307

	)

120 
	#HTTP_STATUS_BAD_REQUEST
 400

	)

121 
	#HTTP_STATUS_UNAUTHORIZED
 401

	)

122 
	#HTTP_STATUS_FORBIDDEN
 403

	)

123 
	#HTTP_STATUS_NOT_FOUND
 404

	)

124 
	#HTTP_STATUS_RANGE_NOT_SATISFIABLE
 416

	)

127 
	#HTTP_STATUS_INTERNAL
 500

	)

128 
	#HTTP_STATUS_NOT_IMPLEMENTED
 501

	)

129 
	#HTTP_STATUS_BAD_GATEWAY
 502

	)

130 
	#HTTP_STATUS_UNAVAILABLE
 503

	)

132 
	eΩ
 {

133 
	mªl_n⁄e
, 
	mªl_«me
, 
	mªl_vÆue
, 
	mªl_bŸh


136 
	sªque°
 {

137 c⁄° *
	mmëhod
;

138 *
	m¨g
;

140 
	sªque°_hódî
 {

141 *
	m«me
, *
	mvÆue
;

142 
Ω
 
	mªÀa£_pﬁicy
;

143 } *
	mhódîs
;

144 
	mhcou¡
, 
	mhˇ∑côy
;

147 
numuæs
;

152 
ªque°
 *

153 
	$ªque°_√w
 ()

155 
ªque°
 *
ªq
 = 
	`x√w0
 (request);

156 
ªq
->
hˇ∑côy
 = 8;

157 
ªq
->
hódîs
 = 
	`x√w_¨øy
 (
ªque°_hódî
,Ñeq->
hˇ∑côy
);

158  
ªq
;

159 
	}
}

166 
	$ªque°_£t_mëhod
 (
ªque°
 *
ªq
, c⁄° *
mëh
, *
¨g
)

168 
ªq
->
mëhod
 = 
mëh
;

169 
ªq
->
¨g
 =árg;

170 
	}
}

176 
	$ªque°_mëhod
 (c⁄° 
ªque°
 *
ªq
)

178  
ªq
->
mëhod
;

179 
	}
}

185 
	$ªÀa£_hódî
 (
ªque°_hódî
 *
hdr
)

187 
hdr
->
ªÀa£_pﬁicy
)

189 
ªl_n⁄e
:

191 
ªl_«me
:

192 
	`x‰ì
 (
hdr
->
«me
);

194 
ªl_vÆue
:

195 
	`x‰ì
 (
hdr
->
vÆue
);

197 
ªl_bŸh
:

198 
	`x‰ì
 (
hdr
->
«me
);

199 
	`x‰ì
 (
hdr
->
vÆue
);

202 
	}
}

233 
	$ªque°_£t_hódî
 (
ªque°
 *
ªq
, *
«me
, *
vÆue
,

234 
Ω
 
ªÀa£_pﬁicy
)

236 
ªque°_hódî
 *
hdr
;

237 
i
;

239 i‡(!
vÆue
)

243 i‡(
ªÀa£_pﬁicy
 =
ªl_«me
 ||Ññó£_pﬁicy =
ªl_bŸh
)

244 
	`x‰ì
 (
«me
);

248 
i
 = 0; i < 
ªq
->
hcou¡
; i++)

250 
hdr
 = &
ªq
->
hódîs
[
i
];

251 i‡(0 =
	`°rˇ£cmp
 (
«me
, 
hdr
->name))

254 
	`ªÀa£_hódî
 (
hdr
);

255 
hdr
->
«me
 =Çame;

256 
hdr
->
vÆue
 = value;

257 
hdr
->
ªÀa£_pﬁicy
 =Ñelease_policy;

264 i‡(
ªq
->
hcou¡
 >ªq->
hˇ∑côy
)

266 
ªq
->
hˇ∑côy
 <<= 1;

267 
ªq
->
hódîs
 = 
	`xªÆloc
 (ªq->hódîs,Ñeq->
hˇ∑côy
 *  (*
hdr
));

269 
hdr
 = &
ªq
->
hódîs
[ªq->
hcou¡
++];

270 
hdr
->
«me
 =Çame;

271 
hdr
->
vÆue
 = value;

272 
hdr
->
ªÀa£_pﬁicy
 =Ñelease_policy;

273 
	}
}

281 
	$ªque°_£t_u£r_hódî
 (
ªque°
 *
ªq
, c⁄° *
hódî
)

283 *
«me
;

284 c⁄° *
p
 = 
	`°rchr
 (
hódî
, ':');

285 i‡(!
p
)

287 
	`BOUNDED_TO_ALLOCA
 (
hódî
, 
p
, 
«me
);

288 ++
p
;

289 
	`c_is•a˚
 (*
p
))

290 ++
p
;

291 
	`ªque°_£t_hódî
 (
ªq
, 
	`x°rdup
 (
«me
), (*Ë
p
, 
ªl_«me
);

292 
	}
}

297 
boﬁ


298 
	$ªque°_ªmove_hódî
 (
ªque°
 *
ªq
, *
«me
)

300 
i
;

301 
i
 = 0; i < 
ªq
->
hcou¡
; i++)

303 
ªque°_hódî
 *
hdr
 = &
ªq
->
hódîs
[
i
];

304 i‡(0 =
	`°rˇ£cmp
 (
«me
, 
hdr
->name))

306 
	`ªÀa£_hódî
 (
hdr
);

308 i‡(
i
 < 
ªq
->
hcou¡
 - 1)

309 
	`memmove
 (
hdr
, hd∏+ 1, (
ªq
->
hcou¡
 - 
i
 - 1) *  (*hdr));

310 --
ªq
->
hcou¡
;

311  
åue
;

314  
Ál£
;

315 
	}
}

317 
	#APPEND
(
p
, 
°r
) do { \

318 
A_Àn
 = 
	`°æí
 (
°r
); \

319 
	`mem˝y
 (
p
, 
°r
, 
A_Àn
); \

320 
p
 +
A_Àn
; \

321 } 0)

	)

326 
	$ªque°_£nd
 (c⁄° 
ªque°
 *
ªq
, 
fd
)

328 *
ªque°_°rög
, *
p
;

329 
i
, 
size
, 
wrôe_îr‹
;

332 
size
 = 0;

335 
size
 +
	`°æí
 (
ªq
->
mëhod
Ë+ 1 + såÀ¿‘eq->
¨g
) + 1 + 8 + 2;

337 
i
 = 0; i < 
ªq
->
hcou¡
; i++)

339 
ªque°_hódî
 *
hdr
 = &
ªq
->
hódîs
[
i
];

341 
size
 +
	`°æí
 (
hdr
->
«me
Ë+ 2 + såÀ¿(hdr->
vÆue
) + 2;

345 
size
 += 3;

347 
p
 = 
ªque°_°rög
 = 
	`Æloˇ_¨øy
 (, 
size
);

351 
	`APPEND
 (
p
, 
ªq
->
mëhod
); *p++ = ' ';

352 
	`APPEND
 (
p
, 
ªq
->
¨g
); *p++ = ' ';

353 
	`mem˝y
 (
p
, "HTTP/1.1\r\n", 10);Ö += 10;

355 
i
 = 0; i < 
ªq
->
hcou¡
; i++)

357 
ªque°_hódî
 *
hdr
 = &
ªq
->
hódîs
[
i
];

358 
	`APPEND
 (
p
, 
hdr
->
«me
);

359 *
p
++ = ':', *p++ = ' ';

360 
	`APPEND
 (
p
, 
hdr
->
vÆue
);

361 *
p
++ = '\r', *p++ = '\n';

364 *
p
++ = '\r', *p++ = '\n', *p++ = '\0';

365 
	`as£π
 (
p
 - 
ªque°_°rög
 =
size
);

367 #unde‡
APPEND


369 
	`DEBUGP
 (("\n---ªque° begö---\n%s---ªque°Énd---\n", 
ªque°_°rög
));

373 
wrôe_îr‹
 = 
	`fd_wrôe
 (
fd
, 
ªque°_°rög
, 
size
 - 1, -1);

374 i‡(
wrôe_îr‹
 < 0)

375 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Failed writing HTTPÑequest: %s.\n"),

376 
	`fd_îr°r
 (
fd
));

377  
wrôe_îr‹
;

378 
	}
}

383 
	$ªque°_‰ì
 (
ªque°
 *
ªq
)

385 
i
;

386 
	`x‰ì_nuŒ
 (
ªq
->
¨g
);

387 
i
 = 0; i < 
ªq
->
hcou¡
; i++)

388 
	`ªÀa£_hódî
 (&
ªq
->
hódîs
[
i
]);

389 
	`x‰ì_nuŒ
 (
ªq
->
hódîs
);

390 
	`x‰ì
 (
ªq
);

391 
	}
}

393 
hash_èbÀ
 *
	gbasic_authed_ho°s
;

399 
boﬁ


400 
	$maybe_£nd_basic_¸eds
 (c⁄° *
ho°«me
, c⁄° *
u£r
,

401 c⁄° *
∑sswd
, 
ªque°
 *
ªq
)

403 
boﬁ
 
do_chÆÀnge
 = 
Ál£
;

405 i‡(
›t
.
auth_wôhout_chÆÀnge
)

407 
	`DEBUGP
 (("Auth-without-challenge set, sending Basic credentials.\n"));

408 
do_chÆÀnge
 = 
åue
;

410 i‡(
basic_authed_ho°s


411 && 
	`hash_èbÀ_c⁄èös
(
basic_authed_ho°s
, 
ho°«me
))

413 
	`DEBUGP
 (("Found %†ö basic_authed_ho°s.\n", 
	`quŸe
 (
ho°«me
)));

414 
do_chÆÀnge
 = 
åue
;

418 
	`DEBUGP
 (("Host %s hasÇot issuedá general basic challenge.\n",

419 
	`quŸe
 (
ho°«me
)));

421 i‡(
do_chÆÀnge
)

423 
	`ªque°_£t_hódî
 (
ªq
, "Authorization",

424 
	`basic_authítiˇti⁄_ícode
 (
u£r
, 
∑sswd
),

425 
ªl_vÆue
);

427  
do_chÆÀnge
;

428 
	}
}

431 
	$ªgi°î_basic_auth_ho°
 (c⁄° *
ho°«me
)

433 i‡(!
basic_authed_ho°s
)

435 
basic_authed_ho°s
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (1);

437 i‡(!
	`hash_èbÀ_c⁄èös
(
basic_authed_ho°s
, 
ho°«me
))

439 
	`hash_èbÀ_put
 (
basic_authed_ho°s
, 
	`x°rdup
(
ho°«me
), 
NULL
);

440 
	`DEBUGP
 (("In£πed %†ötÿbasic_authed_ho°s\n", 
	`quŸe
 (
ho°«me
)));

442 
	}
}

450 
	$po°_fûe
 (
sock
, c⁄° *
fûe_«me
, 
wgöt
 
¥omi£d_size
)

452 
chunk
[8192];

453 
wgöt
 
wrôãn
 = 0;

454 
wrôe_îr‹
;

455 
FILE
 *
Â
;

457 
	`DEBUGP
 (("[wrôög POST fûê%†... ", 
fûe_«me
));

459 
Â
 = 
	`f›í
 (
fûe_«me
, "rb");

460 i‡(!
Â
)

462 !
	`„of
 (
Â
Ë&& 
wrôãn
 < 
¥omi£d_size
)

464 
towrôe
;

465 
Àngth
 = 
	`‰ód
 (
chunk
, 1,  (chunk), 
Â
);

466 i‡(
Àngth
 == 0)

468 
towrôe
 = 
	`MIN
 (
¥omi£d_size
 - 
wrôãn
, 
Àngth
);

469 
wrôe_îr‹
 = 
	`fd_wrôe
 (
sock
, 
chunk
, 
towrôe
, -1);

470 i‡(
wrôe_îr‹
 < 0)

472 
	`f˛o£
 (
Â
);

475 
wrôãn
 +
towrôe
;

477 
	`f˛o£
 (
Â
);

481 i‡(
wrôãn
 < 
¥omi£d_size
)

483 
î∫o
 = 
EINVAL
;

487 
	`as£π
 (
wrôãn
 =
¥omi£d_size
);

488 
	`DEBUGP
 (("done]\n"));

490 
	}
}

499 
	$ª•⁄£_hód_ãrmö©‹
 (c⁄° *
°¨t
, c⁄° *
≥eked
, 
≥ekÀn
)

501 c⁄° *
p
, *
íd
;

506 i‡(
°¨t
 =
≥eked
 && 0 !
	`memcmp
 (°¨t, "HTTP", 
	`MIN
 (
≥ekÀn
, 4)))

507  
°¨t
;

513 
p
 = 
≥eked
 - 
°¨t
 < 2 ? start :Öeeked - 2;

514 
íd
 = 
≥eked
 + 
≥ekÀn
;

517 ; 
p
 < 
íd
 - 2;Ö++)

518 i‡(*
p
 == '\n')

520 i‡(
p
[1] == '\r' &&Ö[2] == '\n')

521  
p
 + 3;

522 i‡(
p
[1] == '\n')

523  
p
 + 2;

526 i‡(
p
[0] == '\n' &&Ö[1] == '\n')

527  
p
 + 2;

529  
NULL
;

530 
	}
}

538 
	#HTTP_RESPONSE_MAX_SIZE
 65536

	)

549 
	$ªad_hâp_ª•⁄£_hód
 (
fd
)

551  
	`fd_ªad_hunk
 (
fd
, 
ª•⁄£_hód_ãrmö©‹
, 512,

552 
HTTP_RESPONSE_MAX_SIZE
);

553 
	}
}

555 
	sª•⁄£
 {

557 c⁄° *
	md©a
;

577 c⁄° **
	mhódîs
;

585 
ª•⁄£
 *

586 
	$ª•_√w
 (c⁄° *
hód
)

588 c⁄° *
hdr
;

589 
cou¡
, 
size
;

591 
ª•⁄£
 *
ª•
 = 
	`x√w0
 (response);

592 
ª•
->
d©a
 = 
hód
;

594 i‡(*
hód
 == '\0')

599  
ª•
;

605 
size
 = 
cou¡
 = 0;

606 
hdr
 = 
hód
;

609 
	`DO_REALLOC
 (
ª•
->
hódîs
, 
size
, 
cou¡
 + 1, const *);

610 
ª•
->
hódîs
[
cou¡
++] = 
hdr
;

613 i‡(!
hdr
[0] || (hdr[0] == '\r' && hdr[1] == '\n') || hdr[0] == '\n')

619 c⁄° *
íd
 = 
	`°rchr
 (
hdr
, '\n');

620 i‡(
íd
)

621 
hdr
 = 
íd
 + 1;

623 
hdr
 +
	`°æí
 (hdr);

625 *
hdr
 == ' ' || *hdr == '\t');

627 
	`DO_REALLOC
 (
ª•
->
hódîs
, 
size
, 
cou¡
 + 1, const *);

628 
ª•
->
hódîs
[
cou¡
] = 
NULL
;

630  
ª•
;

631 
	}
}

646 
	$ª•_hódî_loˇã
 (c⁄° 
ª•⁄£
 *
ª•
, c⁄° *
«me
, 
°¨t
,

647 c⁄° **
beg±r
, c⁄° **
íd±r
)

649 
i
;

650 c⁄° **
hódîs
 = 
ª•
->headers;

651 
«me_Àn
;

653 i‡(!
hódîs
 || !headers[1])

656 
«me_Àn
 = 
	`°æí
 (
«me
);

657 i‡(
°¨t
 > 0)

658 
i
 = 
°¨t
;

660 
i
 = 1;

662 ; 
hódîs
[
i
 + 1]; i++)

664 c⁄° *
b
 = 
hódîs
[
i
];

665 c⁄° *
e
 = 
hódîs
[
i
 + 1];

666 i‡(
e
 - 
b
 > 
«me_Àn


667 && 
b
[
«me_Àn
] == ':'

668 && 0 =
	`°∫ˇ£cmp
 (
b
, 
«me
, 
«me_Àn
))

670 
b
 +
«me_Àn
 + 1;

671 
b
 < 
e
 && 
	`c_is•a˚
 (*b))

672 ++
b
;

673 
b
 < 
e
 && 
	`c_is•a˚
 (e[-1]))

674 --
e
;

675 *
beg±r
 = 
b
;

676 *
íd±r
 = 
e
;

677  
i
;

681 
	}
}

690 
boﬁ


691 
	$ª•_hódî_gë
 (c⁄° 
ª•⁄£
 *
ª•
, c⁄° *
«me
,

692 c⁄° **
beg±r
, c⁄° **
íd±r
)

694 
pos
 = 
	`ª•_hódî_loˇã
 (
ª•
, 
«me
, 0, 
beg±r
, 
íd±r
);

695  
pos
 != -1;

696 
	}
}

706 
boﬁ


707 
	$ª•_hódî_c›y
 (c⁄° 
ª•⁄£
 *
ª•
, c⁄° *
«me
,

708 *
buf
, 
bufsize
)

710 c⁄° *
b
, *
e
;

711 i‡(!
	`ª•_hódî_gë
 (
ª•
, 
«me
, &
b
, &
e
))

712  
Ál£
;

713 i‡(
bufsize
)

715 
Àn
 = 
	`MIN
 (
e
 - 
b
, 
bufsize
 - 1);

716 
	`mem˝y
 (
buf
, 
b
, 
Àn
);

717 
buf
[
Àn
] = '\0';

719  
åue
;

720 
	}
}

726 
	$ª•_hódî_°rdup
 (c⁄° 
ª•⁄£
 *
ª•
, c⁄° *
«me
)

728 c⁄° *
b
, *
e
;

729 i‡(!
	`ª•_hódî_gë
 (
ª•
, 
«me
, &
b
, &
e
))

730  
NULL
;

731  
	`°rdupdñim
 (
b
, 
e
);

732 
	}
}

743 
	$ª•_°©us
 (c⁄° 
ª•⁄£
 *
ª•
, **
mesßge
)

745 
°©us
;

746 c⁄° *
p
, *
íd
;

748 i‡(!
ª•
->
hódîs
)

751 i‡(
mesßge
)

752 *
mesßge
 = 
	`x°rdup
 (
	`_
("No headers,ássuming HTTP/0.9"));

756 
p
 = 
ª•
->
hódîs
[0];

757 
íd
 = 
ª•
->
hódîs
[1];

759 i‡(!
íd
)

763 i‡(
íd
 - 
p
 < 4 || 0 !
	`°∫cmp
 (p, "HTTP", 4))

765 
p
 += 4;

769 i‡(
p
 < 
íd
 && *p == '/')

771 ++
p
;

772 
p
 < 
íd
 && 
	`c_isdigô
 (*p))

773 ++
p
;

774 i‡(
p
 < 
íd
 && *p == '.')

775 ++
p
;

776 
p
 < 
íd
 && 
	`c_isdigô
 (*p))

777 ++
p
;

780 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

781 ++
p
;

782 i‡(
íd
 - 
p
 < 3 || !
	`c_isdigô
 (p[0]) || !c_isdigit (p[1]) || !c_isdigit (p[2]))

785 
°©us
 = 100 * (
p
[0] - '0') + 10 * (p[1] - '0') + (p[2] - '0');

786 
p
 += 3;

788 i‡(
mesßge
)

790 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

791 ++
p
;

792 
p
 < 
íd
 && 
	`c_is•a˚
 (end[-1]))

793 --
íd
;

794 *
mesßge
 = 
	`°rdupdñim
 (
p
, 
íd
);

797  
°©us
;

798 
	}
}

803 
	$ª•_‰ì
 (
ª•⁄£
 *
ª•
)

805 
	`x‰ì_nuŒ
 (
ª•
->
hódîs
);

806 
	`x‰ì
 (
ª•
);

807 
	}
}

816 
	$¥öt_ª•⁄£_löe
(c⁄° *
¥efix
, c⁄° *
b
, c⁄° *
e
)

818 *
c›y
;

819 
	`BOUNDED_TO_ALLOCA
(
b
, 
e
, 
c›y
);

820 
	`log¥ötf
 (
LOG_ALWAYS
, "%s%s\n", 
¥efix
,

821 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
c›y
));

822 
	}
}

828 
	$¥öt_£rvî_ª•⁄£
 (c⁄° 
ª•⁄£
 *
ª•
, c⁄° *
¥efix
)

830 
i
;

831 i‡(!
ª•
->
hódîs
)

833 
i
 = 0; 
ª•
->
hódîs
[i + 1]; i++)

835 c⁄° *
b
 = 
ª•
->
hódîs
[
i
];

836 c⁄° *
e
 = 
ª•
->
hódîs
[
i
 + 1];

838 i‡(
b
 < 
e
 &&É[-1] == '\n')

839 --
e
;

840 i‡(
b
 < 
e
 &&É[-1] == '\r')

841 --
e
;

842 
	`¥öt_ª•⁄£_löe
(
¥efix
, 
b
, 
e
);

844 
	}
}

848 
boﬁ


849 
	$∑r£_c⁄ã¡_ønge
 (c⁄° *
hdr
, 
wgöt
 *
fú°_byã_±r
,

850 
wgöt
 *
œ°_byã_±r
, wgöà*
ítôy_Àngth_±r
)

852 
wgöt
 
num
;

857 i‡(0 =
	`°∫ˇ£cmp
 (
hdr
, "bytes", 5))

859 
hdr
 += 5;

862 i‡(*
hdr
 == ':')

863 ++
hdr
;

864 
	`c_is•a˚
 (*
hdr
))

865 ++
hdr
;

866 i‡(!*
hdr
)

867  
Ál£
;

869 i‡(!
	`c_isdigô
 (*
hdr
))

870  
Ál£
;

871 
num
 = 0; 
	`c_isdigô
 (*
hdr
); hdr++)

872 
num
 = 10 *Çum + (*
hdr
 - '0');

873 i‡(*
hdr
 !'-' || !
	`c_isdigô
 (*(hdr + 1)))

874  
Ál£
;

875 *
fú°_byã_±r
 = 
num
;

876 ++
hdr
;

877 
num
 = 0; 
	`c_isdigô
 (*
hdr
); hdr++)

878 
num
 = 10 *Çum + (*
hdr
 - '0');

879 i‡(*
hdr
 !'/' || !
	`c_isdigô
 (*(hdr + 1)))

880  
Ál£
;

881 *
œ°_byã_±r
 = 
num
;

882 ++
hdr
;

883 i‡(*
hdr
 == '*')

884 
num
 = -1;

886 
num
 = 0; 
	`c_isdigô
 (*
hdr
); hdr++)

887 
num
 = 10 *Çum + (*
hdr
 - '0');

888 *
ítôy_Àngth_±r
 = 
num
;

889  
åue
;

890 
	}
}

901 
boﬁ


902 
	$skù_sh‹t_body
 (
fd
, 
wgöt
 
c⁄éí
, 
boﬁ
 
chunked
)

905 
SKIP_SIZE
 = 512,

906 
SKIP_THRESHOLD
 = 4096

908 
wgöt
 
ªmaöög_chunk_size
 = 0;

909 
dlbuf
[
SKIP_SIZE
 + 1];

910 
dlbuf
[
SKIP_SIZE
] = '\0';

912 
	`as£π
 (
c⁄éí
 != -1 || contlen);

916 i‡(
c⁄éí
 > 
SKIP_THRESHOLD
)

917  
Ál£
;

919 
c⁄éí
 > 0 || 
chunked
)

921 
ªt
;

922 i‡(
chunked
)

924 i‡(
ªmaöög_chunk_size
 == 0)

926 *
löe
 = 
	`fd_ªad_löe
 (
fd
);

927 *
ídl
;

928 i‡(
löe
 =
NULL
)

931 
ªmaöög_chunk_size
 = 
	`°πﬁ
 (
löe
, &
ídl
, 16);

932 i‡(
ªmaöög_chunk_size
 == 0)

934 
	`fd_ªad_löe
 (
fd
);

939 
c⁄éí
 = 
	`MIN
 (
ªmaöög_chunk_size
, 
SKIP_SIZE
);

942 
	`DEBUGP
 (("Skùpög %†byã†o‡body: [", 
	`numbî_to_°©ic_°rög
 (
c⁄éí
)));

944 
ªt
 = 
	`fd_ªad
 (
fd
, 
dlbuf
, 
	`MIN
 (
c⁄éí
, 
SKIP_SIZE
), -1);

945 i‡(
ªt
 <= 0)

949 
	`DEBUGP
 (("]áborting (%s).\n",

950 
ªt
 < 0 ? 
	`fd_îr°r
 (
fd
) : "EOFÑeceived"));

951  
Ál£
;

953 
c⁄éí
 -
ªt
;

955 i‡(
chunked
)

957 
ªmaöög_chunk_size
 -
ªt
;

958 i‡(
ªmaöög_chunk_size
 == 0)

959 i‡(
	`fd_ªad_löe
 (
fd
Ë=
NULL
)

960  
Ál£
;

965 
	`DEBUGP
 (("%.*s", 
ªt
, 
dlbuf
));

968 
	`DEBUGP
 (("] done.\n"));

969  
åue
;

970 
	}
}

972 
	#NOT_RFC2231
 0

	)

973 
	#RFC2231_NOENCODING
 1

	)

974 
	#RFC2231_ENCODING
 2

	)

984 
	$modify_∑øm_«me
(
∑øm_tokí
 *
«me
)

986 c⁄° *
dñim1
 = 
	`memchr
 (
«me
->
b
, '*',Çame->
e
 -Çame->b);

987 c⁄° *
dñim2
 = 
	`memrchr
 (
«me
->
b
, '*',Çame->
e
 -Çame->b);

989 
ªsu…
;

991 if(
dñim1
 =
NULL
)

993 
ªsu…
 = 
NOT_RFC2231
;

995 if(
dñim1
 =
dñim2
)

997 i‡((
«me
->
e
 - 1Ë=
dñim1
)

999 
ªsu…
 = 
RFC2231_ENCODING
;

1003 
ªsu…
 = 
RFC2231_NOENCODING
;

1005 
«me
->
e
 = 
dñim1
;

1009 
«me
->
e
 = 
dñim1
;

1010 
ªsu…
 = 
RFC2231_ENCODING
;

1012  
ªsu…
;

1013 
	}
}

1020 
	$modify_∑øm_vÆue
 (
∑øm_tokí
 *
vÆue
, 
ícodög_ty≥
 )

1022 i‡(
RFC2231_ENCODING
 =
ícodög_ty≥
)

1024 c⁄° *
dñim
 = 
	`memrchr
 (
vÆue
->
b
, '\'', vÆue->
e
 - value->b);

1025 i‡–
dñim
 !
NULL
 )

1027 
vÆue
->
b
 = (
dñim
+1);

1030 
	}
}

1044 
boﬁ


1045 
	$exåa˘_∑øm
 (c⁄° **
sour˚
, 
∑øm_tokí
 *
«me
,Ö¨am_tokí *
vÆue
,

1046 
£∑øt‹
)

1048 c⁄° *
p
 = *
sour˚
;

1050 
	`c_is•a˚
 (*
p
)) ++p;

1051 i‡(!*
p
)

1053 *
sour˚
 = 
p
;

1054  
Ál£
;

1058 
«me
->
b
 = 
p
;

1059 *
p
 && !
	`c_is•a˚
 (*pË&& *∞!'=' && *∞!
£∑øt‹
) ++p;

1060 
«me
->
e
 = 
p
;

1061 i‡(
«me
->
b
 =«me->
e
)

1062  
Ál£
;

1063 
	`c_is•a˚
 (*
p
)) ++p;

1064 i‡(*
p
 =
£∑øt‹
 || !*p)

1066 
	`xzîo
 (*
vÆue
);

1067 i‡(*
p
 =
£∑øt‹
) ++p;

1068 *
sour˚
 = 
p
;

1069  
åue
;

1071 i‡(*
p
 != '=')

1072  
Ál£
;

1075 ++
p
;

1076 
	`c_is•a˚
 (*
p
)) ++p;

1077 i‡(*
p
 == '"')

1079 
vÆue
->
b
 = ++
p
;

1080 *
p
 && *p != '"') ++p;

1081 i‡(!*
p
)

1082  
Ál£
;

1083 
vÆue
->
e
 = 
p
++;

1085 
	`c_is•a˚
 (*
p
)) ++p;

1086 *
p
 && *∞!
£∑øt‹
) ++p;

1087 i‡(*
p
 =
£∑øt‹
)

1088 ++
p
;

1089 i‡(*
p
)

1091  
Ál£
;

1095 
vÆue
->
b
 = 
p
;

1096 *
p
 && *∞!
£∑øt‹
) ++p;

1097 
vÆue
->
e
 = 
p
;

1098 
vÆue
->
e
 !vÆue->
b
 && 
	`c_is•a˚
 (value->e[-1]))

1099 --
vÆue
->
e
;

1100 i‡(*
p
 =
£∑øt‹
) ++p;

1102 *
sour˚
 = 
p
;

1104 
∑øm_ty≥
 = 
	`modify_∑øm_«me
(
«me
);

1105 i‡(
NOT_RFC2231
 !
∑øm_ty≥
)

1107 
	`modify_∑øm_vÆue
(
vÆue
, 
∑øm_ty≥
);

1109  
åue
;

1110 
	}
}

1112 #unde‡
NOT_RFC2231


1113 #unde‡
RFC2231_NOENCODING


1114 #unde‡
RFC2231_ENCODING


1119 
	$≠≥nd_vÆue_to_fûíame
 (**
fûíame
, 
∑øm_tokí
 c⁄° * c⁄° 
vÆue
)

1121 
‹igöÆ_Àngth
 = 
	`°æí
(*
fûíame
);

1122 
√w_Àngth
 = 
	`°æí
(*
fûíame
Ë+ (
vÆue
->
e
 - vÆue->
b
);

1123 *
fûíame
 = 
	`xªÆloc
 (*fûíame, 
√w_Àngth
+1);

1124 
	`mem˝y
 (*
fûíame
 + 
‹igöÆ_Àngth
, 
vÆue
->
b
, (vÆue->
e
 - value->b));

1125 (*
fûíame
)[
√w_Àngth
] = '\0';

1126 
	}
}

1128 #unde‡
MAX


1129 
	#MAX
(
p
, 
q
Ë(’Ë> (qË? (pË: (q))

	)

1153 
boﬁ


1154 
	$∑r£_c⁄ã¡_di•osôi⁄
 (c⁄° *
hdr
, **
fûíame
)

1156 
∑øm_tokí
 
«me
, 
vÆue
;

1157 *
fûíame
 = 
NULL
;

1158 
	`exåa˘_∑øm
 (&
hdr
, &
«me
, &
vÆue
, ';'))

1160 
isFûíame
 = 
	`BOUNDED_EQUAL_NO_CASE
 ( 
«me
.
b
,Çame.
e
, "filename" );

1161 i‡–
isFûíame
 && 
vÆue
.
b
 !
NULL
)

1164 c⁄° *
œ°_¶ash
 = 
	`memrchr
 (
vÆue
.
b
, '/', vÆue.
e
 - value.b);

1165 c⁄° *
œ°_bs
 = 
	`memrchr
 (
vÆue
.
b
, '\\', vÆue.
e
 - value.b);

1166 i‡(
œ°_¶ash
 && 
œ°_bs
)

1167 
vÆue
.
b
 = 1 + 
	`MAX
 (
œ°_¶ash
, 
œ°_bs
);

1168 i‡(
œ°_¶ash
 || 
œ°_bs
)

1169 
vÆue
.
b
 = 1 + (
œ°_¶ash
 ?Üa°_¶ash : 
œ°_bs
);

1170 i‡(
vÆue
.
b
 =vÆue.
e
)

1173 i‡(*
fûíame
)

1174 
	`≠≥nd_vÆue_to_fûíame
 (
fûíame
, &
vÆue
);

1176 *
fûíame
 = 
	`°rdupdñim
 (
vÆue
.
b
, vÆue.
e
);

1180 i‡(*
fûíame
)

1181  
åue
;

1183  
Ál£
;

1184 
	}
}

1194 
boﬁ
 
	gpc⁄n_a˘ive
;

1198 
	msockë
;

1201 *
	mho°
;

1202 
	mp‹t
;

1205 
boﬁ
 
	ms¶
;

1211 
boﬁ
 
	mauth‹ized
;

1213 #ifde‡
ENABLE_NTLM


1215 
¡lmd©a
 
	m¡lm
;

1217 } 
	gpc⁄n
;

1224 
	$övÆid©e_≥rsi°ít
 ()

1226 
	`DEBUGP
 (("Dißblög fuπhîÑeu£ o‡sockë %d.\n", 
pc⁄n
.
sockë
));

1227 
pc⁄n_a˘ive
 = 
Ál£
;

1228 
	`fd_˛o£
 (
pc⁄n
.
sockë
);

1229 
	`x‰ì
 (
pc⁄n
.
ho°
);

1230 
	`xzîo
 (
pc⁄n
);

1231 
	}
}

1242 
	$ªgi°î_≥rsi°ít
 (c⁄° *
ho°
, 
p‹t
, 
fd
, 
boﬁ
 
s¶
)

1244 i‡(
pc⁄n_a˘ive
)

1246 i‡(
pc⁄n
.
sockë
 =
fd
)

1258 
	`övÆid©e_≥rsi°ít
 ();

1262 
pc⁄n_a˘ive
 = 
åue
;

1263 
pc⁄n
.
sockë
 = 
fd
;

1264 
pc⁄n
.
ho°
 = 
	`x°rdup
 (host);

1265 
pc⁄n
.
p‹t
 =Öort;

1266 
pc⁄n
.
s¶
 = ssl;

1267 
pc⁄n
.
auth‹ized
 = 
Ál£
;

1269 
	`DEBUGP
 (("Regi°îed sockë %d f‹Öîsi°íàªu£.\n", 
fd
));

1270 
	}
}

1275 
boﬁ


1276 
	$≥rsi°ít_avaûabÀ_p
 (c⁄° *
ho°
, 
p‹t
, 
boﬁ
 
s¶
,

1277 
boﬁ
 *
ho°_lookup_Áûed
)

1280 i‡(!
pc⁄n_a˘ive
)

1281  
Ál£
;

1286 i‡(
s¶
 !
pc⁄n
.ssl)

1287  
Ál£
;

1290 i‡(
p‹t
 !
pc⁄n
.port)

1291  
Ál£
;

1295 i‡(0 !
	`°rˇ£cmp
 (
ho°
, 
pc⁄n
.host))

1305 
boﬁ
 
found
;

1306 
ù_addªss
 
ù
;

1307 
addªss_li°
 *
Æ
;

1309 i‡(
s¶
)

1313  
Ál£
;

1319 i‡(!
	`sockë_ù_addªss
 (
pc⁄n
.
sockë
, &
ù
, 
ENDPOINT_PEER
))

1323 
	`övÆid©e_≥rsi°ít
 ();

1324  
Ál£
;

1326 
Æ
 = 
	`lookup_ho°
 (
ho°
, 0);

1327 i‡(!
Æ
)

1329 *
ho°_lookup_Áûed
 = 
åue
;

1330  
Ál£
;

1333 
found
 = 
	`addªss_li°_c⁄èös
 (
Æ
, &
ù
);

1334 
	`addªss_li°_ªÀa£
 (
Æ
);

1336 i‡(!
found
)

1337  
Ál£
;

1357 i‡(!
	`ã°_sockë_›í
 (
pc⁄n
.
sockë
))

1362 
	`övÆid©e_≥rsi°ít
 ();

1363  
Ál£
;

1366  
åue
;

1367 
	}
}

1384 
	#CLOSE_FINISH
(
fd
) do { \

1385 i‡(!
kìp_Æive
) \

1387 i‡(
pc⁄n_a˘ive
 && (
fd
Ë=
pc⁄n
.
sockë
) \

1388 
	`övÆid©e_≥rsi°ít
 (); \

1391 
	`fd_˛o£
 (
fd
); \

1392 
fd
 = -1; \

1395 } 0)

	)

1397 
	#CLOSE_INVALIDATE
(
fd
) do { \

1398 i‡(
pc⁄n_a˘ive
 && (
fd
Ë=
pc⁄n
.
sockë
) \

1399 
	`övÆid©e_≥rsi°ít
 (); \

1401 
	`fd_˛o£
 (
fd
); \

1402 
fd
 = -1; \

1403 } 0)

	)

1405 
	shâp_°©


1407 
wgöt
 
	mÀn
;

1408 
wgöt
 
	mc⁄éí
;

1409 
wgöt
 
	mª°vÆ
;

1410 
	mªs
;

1411 *
	mrdîrmsg
;

1412 *
	m√wloc
;

1413 *
	mªmŸe_time
;

1414 *
	mîr‹
;

1415 
	m°©code
;

1416 *
	mmesßge
;

1417 
wgöt
 
	mrd_size
;

1418 
	md…ime
;

1419 c⁄° *
	mª„ªr
;

1420 *
	mloˇl_fûe
;

1421 
boﬁ
 
	mexi°í˚_checked
;

1425 
boﬁ
 
	mtime°amp_checked
;

1427 *
	m‹ig_fûe_«me
;

1429 
wgöt
 
	m‹ig_fûe_size
;

1430 
time_t
 
	m‹ig_fûe_t°amp
;

1435 
	$‰ì_h°©
 (
hâp_°©
 *
hs
)

1437 
	`x‰ì_nuŒ
 (
hs
->
√wloc
);

1438 
	`x‰ì_nuŒ
 (
hs
->
ªmŸe_time
);

1439 
	`x‰ì_nuŒ
 (
hs
->
îr‹
);

1440 
	`x‰ì_nuŒ
 (
hs
->
rdîrmsg
);

1441 
	`x‰ì_nuŒ
 (
hs
->
loˇl_fûe
);

1442 
	`x‰ì_nuŒ
 (
hs
->
‹ig_fûe_«me
);

1443 
	`x‰ì_nuŒ
 (
hs
->
mesßge
);

1446 
hs
->
√wloc
 = 
NULL
;

1447 
hs
->
ªmŸe_time
 = 
NULL
;

1448 
hs
->
îr‹
 = 
NULL
;

1449 
	}
}

1452 
	$gë_fûe_Êags
 (c⁄° *
fûíame
, *
dt
)

1454 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 %†ÆªadyÅhîe;ÇŸÑërõvög.\n\n"), 
	`quŸe
 (
fûíame
));

1457 *
dt
 |
RETROKF
;

1461 i‡(
	`has_html_suffix_p
 (
fûíame
))

1462 *
dt
 |
TEXTHTML
;

1463 
	}
}

1465 
	#BEGINS_WITH
(
löe
, 
°rög_c⁄°™t
) \

1466 (!
	`°∫ˇ£cmp
 (
löe
, 
°rög_c⁄°™t
,  (string_constant) - 1) \

1467 && (
	`c_is•a˚
 (
löe
[ (
°rög_c⁄°™t
) - 1]) \

1468 || !
löe
[ (
°rög_c⁄°™t
Ë- 1]))

	)

1470 #ifde‡
__VMS


1471 
	#SET_USER_AGENT
(
ªq
) do { \

1472 i‡(!
›t
.
u£øgít
) \

1473 
	`ªque°_£t_hódî
 (
ªq
, "User-Agent", \

1474 
	`≠rötf
 ("Wget/%s (VMS %s %s)", \

1475 
vîsi⁄_°rög
, 
	`vms_¨ch
(), 
	`vms_vîs
()), \

1476 
ªl_vÆue
); \

1477 i‡(*
›t
.
u£øgít
) \

1478 
	`ªque°_£t_hódî
 (
ªq
, "U£r-Agít", 
›t
.
u£øgít
, 
ªl_n⁄e
); \

1479 } 0)

	)

1481 
	#SET_USER_AGENT
(
ªq
) do { \

1482 i‡(!
›t
.
u£øgít
) \

1483 
	`ªque°_£t_hódî
 (
ªq
, "User-Agent", \

1484 
	`≠rötf
 ("Wget/%s (%s)", \

1485 
vîsi⁄_°rög
, 
OS_TYPE
), \

1486 
ªl_vÆue
); \

1487 i‡(*
›t
.
u£øgít
) \

1488 
	`ªque°_£t_hódî
 (
ªq
, "U£r-Agít", 
›t
.
u£øgít
, 
ªl_n⁄e
); \

1489 } 0)

	)

1495 
	#ALLOW_CLOBBER
 (
›t
.
no˛obbî
 || o±.
Æways_ª°
 || o±.
time°ampög
 \

1496 || 
›t
.
dú°ru˘
 || o±.
ouçut_documít
)

	)

1508 
uîr_t


1509 
	$gëhâp
 (
uæ
 *
u
, 
hâp_°©
 *
hs
, *
dt
, uæ *
¥oxy
,

1510 
úi
 *úi, 
cou¡
)

1512 
ªque°
 *
ªq
;

1514 *
ty≥
;

1515 *
u£r
, *
∑sswd
;

1516 *
¥oxyauth
;

1517 
°©code
;

1518 
wrôe_îr‹
;

1519 
wgöt
 
c⁄éí
, 
c⁄å™ge
;

1520 
uæ
 *
c⁄n
;

1521 
FILE
 *
Â
;

1523 
sock
 = -1;

1524 
Êags
;

1528 
boﬁ
 
auth_föished
 = 
Ál£
;

1533 
boﬁ
 
basic_auth_föished
 = 
Ál£
;

1536 
boﬁ
 
¡lm_£í
 = 
Ál£
;

1539 
boﬁ
 
usög_s¶
 = 
Ál£
;

1543 
boﬁ
 
hód_⁄ly
 = !!(*
dt
 & 
HEAD_ONLY
);

1545 *
hód
;

1546 
ª•⁄£
 *
ª•
;

1547 
hdrvÆ
[256];

1548 *
mesßge
;

1552 
boﬁ
 
kìp_Æive
;

1555 
boﬁ
 
chunked_å™s„r_ícodög
 = 
Ál£
;

1558 
boﬁ
 
öhibô_kìp_Æive
 =

1559 !
›t
.
hâp_kìp_Æive
 || o±.
ign‹e_Àngth
;

1562 
wgöt
 
po°_d©a_size
 = 0;

1564 
boﬁ
 
ho°_lookup_Áûed
 = 
Ál£
;

1566 #ifde‡
HAVE_SSL


1567 i‡(
u
->
scheme
 =
SCHEME_HTTPS
)

1571 i‡(!
	`s¶_öô
 ())

1573 
	`scheme_dißbÀ
 (
SCHEME_HTTPS
);

1574 
	`log¥ötf
 (
LOG_NOTQUIET
,

1575 
	`_
("Disabling SSL dueÅoÉncounteredÉrrors.\n"));

1576  
SSLINITFAILED
;

1582 
hs
->
Àn
 = 0;

1583 
hs
->
c⁄éí
 = -1;

1584 
hs
->
ªs
 = -1;

1585 
hs
->
rdîrmsg
 = 
NULL
;

1586 
hs
->
√wloc
 = 
NULL
;

1587 
hs
->
ªmŸe_time
 = 
NULL
;

1588 
hs
->
îr‹
 = 
NULL
;

1589 
hs
->
mesßge
 = 
NULL
;

1591 
c⁄n
 = 
u
;

1595 
ªq
 = 
	`ªque°_√w
 ();

1597 *
mëh_¨g
;

1598 c⁄° *
mëh
 = "GET";

1599 i‡(
hód_⁄ly
)

1600 
mëh
 = "HEAD";

1601 i‡(
›t
.
po°_fûe_«me
 || o±.
po°_d©a
)

1602 
mëh
 = "POST";

1606 i‡(
¥oxy


1607 #ifde‡
HAVE_SSL


1611 && 
u
->
scheme
 !
SCHEME_HTTPS


1614 
mëh_¨g
 = 
	`x°rdup
 (
u
->
uæ
);

1616 
mëh_¨g
 = 
	`uæ_fuŒ_∑th
 (
u
);

1617 
	`ªque°_£t_mëhod
 (
ªq
, 
mëh
, 
mëh_¨g
);

1620 
	`ªque°_£t_hódî
 (
ªq
, "Re„ªr", (*Ë
hs
->
ª„ªr
, 
ªl_n⁄e
);

1621 i‡(*
dt
 & 
SEND_NOCACHE
)

1624 
	`ªque°_£t_hódî
 (
ªq
, "Cache-C⁄åﬁ", "no-ˇche, mu°-ªvÆid©e", 
ªl_n⁄e
);

1627 
	`ªque°_£t_hódî
 (
ªq
, "Pøgma", "no-ˇche", 
ªl_n⁄e
);

1629 i‡(
hs
->
ª°vÆ
)

1630 
	`ªque°_£t_hódî
 (
ªq
, "Range",

1631 
	`≠rötf
 ("bytes=%s-",

1632 
	`numbî_to_°©ic_°rög
 (
hs
->
ª°vÆ
)),

1633 
ªl_vÆue
);

1634 
	`SET_USER_AGENT
 (
ªq
);

1635 
	`ªque°_£t_hódî
 (
ªq
, "Ac˚±", "*/*", 
ªl_n⁄e
);

1638 
u£r
 = 
u
->user;

1639 
∑sswd
 = 
u
->passwd;

1640 
	`£¨ch_√åc
 (
u
->
ho°
, (c⁄° **)&
u£r
, (c⁄° **)&
∑sswd
, 0);

1641 
u£r
 = u£∏? u£∏: (
›t
.
hâp_u£r
 ? opt.http_user : opt.user);

1642 
∑sswd
 =Öasswd ?Öasswd : (
›t
.
hâp_∑sswd
 ? opt.http_passwd : opt.passwd);

1647 i‡(
u£r
 && 
∑sswd
 && (!
u
->u£∏|| 
›t
.
auth_wôhout_chÆÀnge
))

1651 
basic_auth_föished
 = 
	`maybe_£nd_basic_¸eds
(
u
->
ho°
, 
u£r
, 
∑sswd
, 
ªq
);

1665 c⁄° *
hfmt
[][2] = {

1668 
add_p‹t
 = 
u
->
p‹t
 !
	`scheme_deÁu…_p‹t
 (u->
scheme
);

1669 
add_squ¨es
 = 
	`°rchr
 (
u
->
ho°
, ':'Ë!
NULL
;

1670 
	`ªque°_£t_hódî
 (
ªq
, "Host",

1671 
	`≠rötf
 (
hfmt
[
add_p‹t
][
add_squ¨es
], 
u
->
ho°
, u->
p‹t
),

1672 
ªl_vÆue
);

1675 i‡(
öhibô_kìp_Æive
)

1676 
	`ªque°_£t_hódî
 (
ªq
, "C⁄√˘i⁄", "Clo£", 
ªl_n⁄e
);

1679 i‡(
¥oxy
 =
NULL
)

1680 
	`ªque°_£t_hódî
 (
ªq
, "C⁄√˘i⁄", "Kìp-Alive", 
ªl_n⁄e
);

1683 
	`ªque°_£t_hódî
 (
ªq
, "C⁄√˘i⁄", "Clo£", 
ªl_n⁄e
);

1684 
	`ªque°_£t_hódî
 (
ªq
, "Proxy-C⁄√˘i⁄", "Kìp-Alive", 
ªl_n⁄e
);

1688 i‡(
›t
.
po°_d©a
 || o±.
po°_fûe_«me
)

1690 
	`ªque°_£t_hódî
 (
ªq
, "Content-Type",

1691 "≠∂iˇti⁄/x-www-f‹m-uæícoded", 
ªl_n⁄e
);

1692 i‡(
›t
.
po°_d©a
)

1693 
po°_d©a_size
 = 
	`°æí
 (
›t
.
po°_d©a
);

1696 
po°_d©a_size
 = 
	`fûe_size
 (
›t
.
po°_fûe_«me
);

1697 i‡(
po°_d©a_size
 == -1)

1699 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("POST data file %s missing: %s\n"),

1700 
	`quŸe
 (
›t
.
po°_fûe_«me
), 
	`°ªº‹
 (
î∫o
));

1701 
po°_d©a_size
 = 0;

1704 
	`ªque°_£t_hódî
 (
ªq
, "Content-Length",

1705 
	`x°rdup
 (
	`numbî_to_°©ic_°rög
 (
po°_d©a_size
)),

1706 
ªl_vÆue
);

1709 
ªåy_wôh_auth
:

1714 i‡(
›t
.
cookõs
)

1715 
	`ªque°_£t_hódî
 (
ªq
, "Cookie",

1716 
	`cookõ_hódî
 (
wgë_cookõ_j¨
,

1717 
u
->
ho°
, u->
p‹t
, u->
∑th
,

1718 #ifde‡
HAVE_SSL


1719 
u
->
scheme
 =
SCHEME_HTTPS


1724 
ªl_vÆue
);

1727 i‡(
›t
.
u£r_hódîs
)

1729 
i
;

1730 
i
 = 0; 
›t
.
u£r_hódîs
[i]; i++)

1731 
	`ªque°_£t_u£r_hódî
 (
ªq
, 
›t
.
u£r_hódîs
[
i
]);

1734 
¥oxyauth
 = 
NULL
;

1735 i‡(
¥oxy
)

1737 *
¥oxy_u£r
, *
¥oxy_∑sswd
;

1743 i‡(
›t
.
¥oxy_u£r
 && o±.
¥oxy_∑sswd
)

1745 
¥oxy_u£r
 = 
›t
.proxy_user;

1746 
¥oxy_∑sswd
 = 
›t
.proxy_passwd;

1750 
¥oxy_u£r
 = 
¥oxy
->
u£r
;

1751 
¥oxy_∑sswd
 = 
¥oxy
->
∑sswd
;

1755 i‡(
¥oxy_u£r
 && 
¥oxy_∑sswd
)

1756 
¥oxyauth
 = 
	`basic_authítiˇti⁄_ícode
 (
¥oxy_u£r
, 
¥oxy_∑sswd
);

1760 
c⁄n
 = 
¥oxy
;

1763 #ifde‡
HAVE_SSL


1764 i‡(
u
->
scheme
 !
SCHEME_HTTPS
)

1766 
	`ªque°_£t_hódî
 (
ªq
, "Proxy-Auth‹iz©i⁄", 
¥oxyauth
, 
ªl_vÆue
);

1769 
kìp_Æive
 = 
åue
;

1773 i‡(
öhibô_kìp_Æive
)

1774 
kìp_Æive
 = 
Ál£
;

1781 
uæ
 *
ªÀv™t
 = 
c⁄n
;

1782 #ifde‡
HAVE_SSL


1783 i‡(
u
->
scheme
 =
SCHEME_HTTPS
)

1784 
ªÀv™t
 = 
u
;

1787 i‡(
	`≥rsi°ít_avaûabÀ_p
 (
ªÀv™t
->
ho°
,Ññev™t->
p‹t
,

1788 #ifde‡
HAVE_SSL


1789 
ªÀv™t
->
scheme
 =
SCHEME_HTTPS
,

1793 &
ho°_lookup_Áûed
))

1795 
sock
 = 
pc⁄n
.
sockë
;

1796 
usög_s¶
 = 
pc⁄n
.
s¶
;

1797 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("ReusingÉxisting connectionÅo %s:%d.\n"),

1798 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
pc⁄n
.
ho°
),

1799 
pc⁄n
.
p‹t
);

1800 
	`DEBUGP
 (("Reusög fd %d.\n", 
sock
));

1801 i‡(
pc⁄n
.
auth‹ized
)

1805 
	`ªque°_ªmove_hódî
 (
ªq
, "Authorization");

1807 i‡(
ho°_lookup_Áûed
)

1809 
	`ªque°_‰ì
 (
ªq
);

1810 
	`log¥ötf
(
LOG_NOTQUIET
,

1811 
	`_
("%s: unableÅoÑesolve hostáddress %s\n"),

1812 
exec_«me
, 
	`quŸe
 (
ªÀv™t
->
ho°
));

1813  
HOSTERR
;

1817 i‡(
sock
 < 0)

1819 
sock
 = 
	`c⁄√˘_to_ho°
 (
c⁄n
->
ho°
, c⁄n->
p‹t
);

1820 i‡(
sock
 =
E_HOST
)

1822 
	`ªque°_‰ì
 (
ªq
);

1823  
HOSTERR
;

1825 i‡(
sock
 < 0)

1827 
	`ªque°_‰ì
 (
ªq
);

1828  (
	`ªåyabÀ_sockë_c⁄√˘_îr‹
 (
î∫o
)

1829 ? 
CONERROR
 : 
CONIMPOSSIBLE
);

1832 #ifde‡
HAVE_SSL


1833 i‡(
¥oxy
 && 
u
->
scheme
 =
SCHEME_HTTPS
)

1837 
ªque°
 *
c⁄ƒeq
 = 
	`ªque°_√w
 ();

1838 
	`ªque°_£t_mëhod
 (
c⁄ƒeq
, "CONNECT",

1839 
	`≠rötf
 ("%s:%d", 
u
->
ho°
, u->
p‹t
));

1840 
	`SET_USER_AGENT
 (
c⁄ƒeq
);

1841 i‡(
¥oxyauth
)

1843 
	`ªque°_£t_hódî
 (
c⁄ƒeq
, "Proxy-Authorization",

1844 
¥oxyauth
, 
ªl_vÆue
);

1848 
¥oxyauth
 = 
NULL
;

1855 
wrôe_îr‹
 = 
	`ªque°_£nd
 (
c⁄ƒeq
, 
sock
);

1856 
	`ªque°_‰ì
 (
c⁄ƒeq
);

1857 i‡(
wrôe_îr‹
 < 0)

1859 
	`CLOSE_INVALIDATE
 (
sock
);

1860  
WRITEFAILED
;

1863 
hód
 = 
	`ªad_hâp_ª•⁄£_hód
 (
sock
);

1864 i‡(!
hód
)

1866 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("FailedÑeadingÖroxyÑesponse: %s\n"),

1867 
	`fd_îr°r
 (
sock
));

1868 
	`CLOSE_INVALIDATE
 (
sock
);

1869  
HERR
;

1871 
mesßge
 = 
NULL
;

1872 i‡(!*
hód
)

1874 
	`x‰ì
 (
hód
);

1875 
Áûed_tu¬ñ
;

1877 
	`DEBUGP
 (("¥oxyÑe•⁄ded wôh: [%s]\n", 
hód
));

1879 
ª•
 = 
	`ª•_√w
 (
hód
);

1880 
°©code
 = 
	`ª•_°©us
 (
ª•
, &
mesßge
);

1881 i‡(
°©code
 < 0)

1883 *
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

1884 
	`log¥ötf
 (
LOG_VERBOSE
, "%d\n", 
°©code
);

1885 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%†ERROR %d: %s.\n"), 
tms
, 
°©code
,

1886 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
,

1887 
	`_
("Malformed statusÜine")));

1888 
	`x‰ì
 (
hód
);

1889  
HERR
;

1891 
hs
->
mesßge
 = 
	`x°rdup
 (message);

1892 
	`ª•_‰ì
 (
ª•
);

1893 
	`x‰ì
 (
hód
);

1894 i‡(
°©code
 != 200)

1896 
Áûed_tu¬ñ
:

1897 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("ProxyÅunneling failed: %s"),

1898 
mesßge
 ? 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, message) : "?");

1899 
	`x‰ì_nuŒ
 (
mesßge
);

1900  
CONSSLERR
;

1902 
	`x‰ì_nuŒ
 (
mesßge
);

1907 
c⁄n
 = 
u
;

1910 i‡(
c⁄n
->
scheme
 =
SCHEME_HTTPS
)

1912 i‡(!
	`s¶_c⁄√˘_wgë
 (
sock
))

1914 
	`fd_˛o£
 (
sock
);

1915  
CONSSLERR
;

1917 i‡(!
	`s¶_check_˚πifiˇã
 (
sock
, 
u
->
ho°
))

1919 
	`fd_˛o£
 (
sock
);

1920  
VERIFCERTERR
;

1922 
usög_s¶
 = 
åue
;

1928 
wrôe_îr‹
 = 
	`ªque°_£nd
 (
ªq
, 
sock
);

1930 i‡(
wrôe_îr‹
 >= 0)

1932 i‡(
›t
.
po°_d©a
)

1934 
	`DEBUGP
 (("[POST d©a: %s]\n", 
›t
.
po°_d©a
));

1935 
wrôe_îr‹
 = 
	`fd_wrôe
 (
sock
, 
›t
.
po°_d©a
, 
po°_d©a_size
, -1);

1937 i‡(
›t
.
po°_fûe_«me
 && 
po°_d©a_size
 != 0)

1938 
wrôe_îr‹
 = 
	`po°_fûe
 (
sock
, 
›t
.
po°_fûe_«me
, 
po°_d©a_size
);

1941 i‡(
wrôe_îr‹
 < 0)

1943 
	`CLOSE_INVALIDATE
 (
sock
);

1944 
	`ªque°_‰ì
 (
ªq
);

1945  
WRITEFAILED
;

1947 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("%sÑequest sent,áwaitingÑesponse... "),

1948 
¥oxy
 ? "Proxy" : "HTTP");

1949 
c⁄éí
 = -1;

1950 
c⁄å™ge
 = 0;

1951 *
dt
 &~
RETROKF
;

1953 
ªad_hódî
:

1954 
hód
 = 
	`ªad_hâp_ª•⁄£_hód
 (
sock
);

1955 i‡(!
hód
)

1957 i‡(
î∫o
 == 0)

1959 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("No dataÑeceived.\n"));

1960 
	`CLOSE_INVALIDATE
 (
sock
);

1961 
	`ªque°_‰ì
 (
ªq
);

1962  
HEOF
;

1966 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("ReadÉrror (%s) in headers.\n"),

1967 
	`fd_îr°r
 (
sock
));

1968 
	`CLOSE_INVALIDATE
 (
sock
);

1969 
	`ªque°_‰ì
 (
ªq
);

1970  
HERR
;

1973 
	`DEBUGP
 (("\n---ª•⁄£ begö---\n%s---ª•⁄£Énd---\n", 
hód
));

1975 
ª•
 = 
	`ª•_√w
 (
hód
);

1978 
mesßge
 = 
NULL
;

1979 
°©code
 = 
	`ª•_°©us
 (
ª•
, &
mesßge
);

1980 i‡(
°©code
 < 0)

1982 *
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

1983 
	`log¥ötf
 (
LOG_VERBOSE
, "%d\n", 
°©code
);

1984 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%†ERROR %d: %s.\n"), 
tms
, 
°©code
,

1985 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
,

1986 
	`_
("Malformed statusÜine")));

1987 
	`CLOSE_INVALIDATE
 (
sock
);

1988 
	`ªque°_‰ì
 (
ªq
);

1989 
	`x‰ì
 (
hód
);

1990  
HERR
;

1993 i‡(
	`H_10X
 (
°©code
))

1995 
	`DEBUGP
 (("IgnoringÑesponse\n"));

1996 
	`x‰ì
 (
hód
);

1997 
ªad_hódî
;

2000 
hs
->
mesßge
 = 
	`x°rdup
 (message);

2001 i‡(!
›t
.
£rvî_ª•⁄£
)

2002 
	`log¥ötf
 (
LOG_VERBOSE
, "%2d %s\n", 
°©code
,

2003 
mesßge
 ? 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, message) : "");

2006 
	`log¥ötf
 (
LOG_VERBOSE
, "\n");

2007 
	`¥öt_£rvî_ª•⁄£
 (
ª•
, " ");

2010 i‡(!
›t
.
ign‹e_Àngth


2011 && 
	`ª•_hódî_c›y
 (
ª•
, "C⁄ã¡-Lígth", 
hdrvÆ
,  (hdrval)))

2013 
wgöt
 
∑r£d
;

2014 
î∫o
 = 0;

2015 
∑r£d
 = 
	`°r_to_wgöt
 (
hdrvÆ
, 
NULL
, 10);

2016 i‡(
∑r£d
 =
WGINT_MAX
 && 
î∫o
 =
ERANGE
)

2023 
c⁄éí
 = -1;

2025 i‡(
∑r£d
 < 0)

2029 
c⁄éí
 = -1;

2032 
c⁄éí
 = 
∑r£d
;

2036 i‡(!
öhibô_kìp_Æive
 && 
c⁄éí
 != -1)

2038 i‡(
	`ª•_hódî_c›y
 (
ª•
, "C⁄√˘i⁄", 
hdrvÆ
,  (hdrval)))

2040 i‡(0 =
	`°rˇ£cmp
 (
hdrvÆ
, "Close"))

2041 
kìp_Æive
 = 
Ál£
;

2045 
chunked_å™s„r_ícodög
 = 
Ál£
;

2046 i‡(
	`ª•_hódî_c›y
 (
ª•
, "Tøns„r-Encodög", 
hdrvÆ
,  (hdrval))

2047 && 0 =
	`°rˇ£cmp
 (
hdrvÆ
, "chunked"))

2048 
chunked_å™s„r_ícodög
 = 
åue
;

2051 i‡(
›t
.
cookõs
)

2053 
s˝os
;

2054 c⁄° *
scbeg
, *
s˚nd
;

2056 
	`as£π
 (
wgë_cookõ_j¨
 !
NULL
);

2057 
s˝os
 = 0;

2058 (
s˝os
 = 
	`ª•_hódî_loˇã
 (
ª•
, "Set-Cookie", scpos,

2059 &
scbeg
, &
s˚nd
)) != -1;

2060 ++
s˝os
)

2062 *
£t_cookõ
; 
	`BOUNDED_TO_ALLOCA
 (
scbeg
, 
s˚nd
, set_cookie);

2063 
	`cookõ_h™dÀ_£t_cookõ
 (
wgë_cookõ_j¨
, 
u
->
ho°
, u->
p‹t
,

2064 
u
->
∑th
, 
£t_cookõ
);

2068 i‡(
kìp_Æive
)

2071 
	`ªgi°î_≥rsi°ít
 (
c⁄n
->
ho°
, c⁄n->
p‹t
, 
sock
, 
usög_s¶
);

2073 i‡(
°©code
 =
HTTP_STATUS_UNAUTHORIZED
)

2076 i‡(
kìp_Æive
 && !
hód_⁄ly


2077 && 
	`skù_sh‹t_body
 (
sock
, 
c⁄éí
, 
chunked_å™s„r_ícodög
))

2078 
	`CLOSE_FINISH
 (
sock
);

2080 
	`CLOSE_INVALIDATE
 (
sock
);

2081 
pc⁄n
.
auth‹ized
 = 
Ál£
;

2082 i‡(!
auth_föished
 && (
u£r
 && 
∑sswd
))

2087 
w≠os
;

2088 c⁄° *
wabeg
, *
w´nd
;

2089 *
www_authítiˇã
 = 
NULL
;

2090 
w≠os
 = 0;

2091 (
w≠os
 = 
	`ª•_hódî_loˇã
 (
ª•
, "WWW-Authenticate", wapos,

2092 &
wabeg
, &
w´nd
)) != -1;

2093 ++
w≠os
)

2094 i‡(
	`known_authítiˇti⁄_scheme_p
 (
wabeg
, 
w´nd
))

2096 
	`BOUNDED_TO_ALLOCA
 (
wabeg
, 
w´nd
, 
www_authítiˇã
);

2100 i‡(!
www_authítiˇã
)

2104 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Unknownáuthentication scheme.\n"));

2106 i‡(!
basic_auth_föished


2107 || !
	`BEGINS_WITH
 (
www_authítiˇã
, "Basic"))

2109 *
±h
;

2110 
±h
 = 
	`uæ_fuŒ_∑th
 (
u
);

2111 
	`ªque°_£t_hódî
 (
ªq
, "Authorization",

2112 
	`¸óã_auth‹iz©i⁄_löe
 (
www_authítiˇã
,

2113 
u£r
, 
∑sswd
,

2114 
	`ªque°_mëhod
 (
ªq
),

2115 
±h
,

2116 &
auth_föished
),

2117 
ªl_vÆue
);

2118 i‡(
	`BEGINS_WITH
 (
www_authítiˇã
, "NTLM"))

2119 
¡lm_£í
 = 
åue
;

2120 i‡(!
u
->
u£r
 && 
	`BEGINS_WITH
 (
www_authítiˇã
, "Basic"))

2124 
	`ªgi°î_basic_auth_ho°
 (
u
->
ho°
);

2126 
	`x‰ì
 (
±h
);

2127 
	`x‰ì_nuŒ
 (
mesßge
);

2128 
	`ª•_‰ì
 (
ª•
);

2129 
	`x‰ì
 (
hód
);

2130 
ªåy_wôh_auth
;

2138 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("Authorization failed.\n"));

2139 
	`ªque°_‰ì
 (
ªq
);

2140 
	`x‰ì_nuŒ
 (
mesßge
);

2141 
	`ª•_‰ì
 (
ª•
);

2142 
	`x‰ì
 (
hód
);

2143  
AUTHFAILED
;

2148 i‡(
¡lm_£í
)

2149 
pc⁄n
.
auth‹ized
 = 
åue
;

2154 i‡(!
hs
->
loˇl_fûe
)

2156 *
loˇl_fûe
 = 
NULL
;

2159 i‡(!
›t
.
c⁄ã¡_di•osôi⁄


2160 || !
	`ª•_hódî_c›y
 (
ª•
, "Content-Disposition",

2161 
hdrvÆ
,  (hdrval))

2162 || !
	`∑r£_c⁄ã¡_di•osôi⁄
 (
hdrvÆ
, &
loˇl_fûe
))

2166 
hs
->
loˇl_fûe
 = 
	`uæ_fûe_«me
 (
u
, 
NULL
);

2170 
	`DEBUGP
 (("Parsed filename from Content-Disposition: %s\n",

2171 
loˇl_fûe
));

2172 
hs
->
loˇl_fûe
 = 
	`uæ_fûe_«me
 (
u
,Üocal_file);

2177 i‡(!
hs
->
exi°í˚_checked
 && 
	`fûe_exi°s_p
 (hs->
loˇl_fûe
))

2179 i‡(
›t
.
no˛obbî
 && !›t.
ouçut_documít
)

2184 
	`gë_fûe_Êags
 (
hs
->
loˇl_fûe
, 
dt
);

2185 
	`x‰ì
 (
hód
);

2186 
	`x‰ì_nuŒ
 (
mesßge
);

2187  
RETRUNNEEDED
;

2189 i‡(!
ALLOW_CLOBBER
)

2191 *
unique
 = 
	`unique_«me
 (
hs
->
loˇl_fûe
, 
åue
);

2192 i‡(
unique
 !
hs
->
loˇl_fûe
)

2193 
	`x‰ì
 (
hs
->
loˇl_fûe
);

2194 
hs
->
loˇl_fûe
 = 
unique
;

2197 
hs
->
exi°í˚_checked
 = 
åue
;

2201 i‡(
›t
.
time°ampög
 && !
hs
->
time°amp_checked
)

2203 
size_t
 
fûíame_Àn
 = 
	`°æí
 (
hs
->
loˇl_fûe
);

2204 *
fûíame_∂us_‹ig_suffix
 = 
	`Æloˇ
 (
fûíame_Àn
 +  (
ORIG_SFX
));

2205 
boﬁ
 
loˇl_dŸ_‹ig_fûe_exi°s
 = 
Ál£
;

2206 *
loˇl_fûíame
 = 
NULL
;

2207 
°ru˘_°©
 
°
;

2209 i‡(
›t
.
backup_c⁄vîãd
)

2227 
	`mem˝y
 (
fûíame_∂us_‹ig_suffix
, 
hs
->
loˇl_fûe
, 
fûíame_Àn
);

2228 
	`mem˝y
 (
fûíame_∂us_‹ig_suffix
 + 
fûíame_Àn
,

2229 
ORIG_SFX
,  (ORIG_SFX));

2232 i‡(
	`°©
 (
fûíame_∂us_‹ig_suffix
, &
°
) == 0)

2234 
loˇl_dŸ_‹ig_fûe_exi°s
 = 
åue
;

2235 
loˇl_fûíame
 = 
fûíame_∂us_‹ig_suffix
;

2239 i‡(!
loˇl_dŸ_‹ig_fûe_exi°s
)

2241 i‡(
	`°©
 (
hs
->
loˇl_fûe
, &
°
) == 0)

2242 
loˇl_fûíame
 = 
hs
->
loˇl_fûe
;

2244 i‡(
loˇl_fûíame
 !
NULL
)

2249 
hs
->
‹ig_fûe_«me
 = 
	`x°rdup
 (
loˇl_fûíame
);

2250 
hs
->
‹ig_fûe_size
 = 
°
.
°_size
;

2251 
hs
->
‹ig_fûe_t°amp
 = 
°
.
°_mtime
;

2252 #ifde‡
WINDOWS


2255 ++
hs
->
‹ig_fûe_t°amp
;

2260 
	`ªque°_‰ì
 (
ªq
);

2262 
hs
->
°©code
 = statcode;

2263 i‡(
°©code
 == -1)

2264 
hs
->
îr‹
 = 
	`x°rdup
 (
	`_
("Malformed statusÜine"));

2265 i‡(!*
mesßge
)

2266 
hs
->
îr‹
 = 
	`x°rdup
 (
	`_
("(no description)"));

2268 
hs
->
îr‹
 = 
	`x°rdup
 (
mesßge
);

2269 
	`x‰ì_nuŒ
 (
mesßge
);

2271 
ty≥
 = 
	`ª•_hódî_°rdup
 (
ª•
, "Content-Type");

2272 i‡(
ty≥
)

2274 *
tmp
 = 
	`°rchr
 (
ty≥
, ';');

2275 i‡(
tmp
)

2278 *
tmp2
 = 
tmp
 + 1;

2280 
tmp
 > 
ty≥
 && 
	`c_is•a˚
 (tmp[-1]))

2281 --
tmp
;

2282 *
tmp
 = '\0';

2285 i‡(
›t
.
íabÀ_úi
 && !›t.
ícodög_ªmŸe
)

2287 
tmp
 = 
	`∑r£_ch¨£t
 (
tmp2
);

2288 i‡(
tmp
)

2289 
	`£t_c⁄ã¡_ícodög
 (
úi
, 
tmp
);

2293 
hs
->
√wloc
 = 
	`ª•_hódî_°rdup
 (
ª•
, "Location");

2294 
hs
->
ªmŸe_time
 = 
	`ª•_hódî_°rdup
 (
ª•
, "Last-Modified");

2296 i‡(
	`ª•_hódî_c›y
 (
ª•
, "C⁄ã¡-R™ge", 
hdrvÆ
,  (hdrval)))

2298 
wgöt
 
fú°_byã_pos
, 
œ°_byã_pos
, 
ítôy_Àngth
;

2299 i‡(
	`∑r£_c⁄ã¡_ønge
 (
hdrvÆ
, &
fú°_byã_pos
, &
œ°_byã_pos
,

2300 &
ítôy_Àngth
))

2302 
c⁄å™ge
 = 
fú°_byã_pos
;

2303 
c⁄éí
 = 
œ°_byã_pos
 - 
fú°_byã_pos
 + 1;

2306 
	`ª•_‰ì
 (
ª•
);

2309 i‡(
	`H_20X
 (
°©code
))

2310 *
dt
 |
RETROKF
;

2313 i‡(
	`H_REDIRECTED
 (
°©code
Ë|| sètcodê=
HTTP_STATUS_MULTIPLE_CHOICES
)

2320 i‡(
°©code
 =
HTTP_STATUS_MULTIPLE_CHOICES
 && !
hs
->
√wloc
)

2321 *
dt
 |
RETROKF
;

2324 
	`log¥ötf
 (
LOG_VERBOSE
,

2325 
	`_
("Location: %s%s\n"),

2326 
hs
->
√wloc
 ? 
	`es˙⁄¥öt_uri
 (hs->√wlocË: 
	`_
("unspecified"),

2327 
hs
->
√wloc
 ? 
	`_
(" [following]") : "");

2328 i‡(
kìp_Æive
 && !
hód_⁄ly


2329 && 
	`skù_sh‹t_body
 (
sock
, 
c⁄éí
, 
chunked_å™s„r_ícodög
))

2330 
	`CLOSE_FINISH
 (
sock
);

2332 
	`CLOSE_INVALIDATE
 (
sock
);

2333 
	`x‰ì_nuŒ
 (
ty≥
);

2334 
	`x‰ì
 (
hód
);

2342 i‡(
°©code
 =
HTTP_STATUS_TEMPORARY_REDIRECT
)

2343  
NEWLOCATION_KEEP_POST
;

2344  
NEWLOCATION
;

2351 i‡(!
ty≥
 ||

2352 0 =
	`°∫ˇ£cmp
 (
ty≥
, 
TEXTHTML_S
, 
	`°æí
 (TEXTHTML_S)) ||

2353 0 =
	`°∫ˇ£cmp
 (
ty≥
, 
TEXTXHTML_S
, 
	`°æí
 (TEXTXHTML_S)))

2354 *
dt
 |
TEXTHTML
;

2356 *
dt
 &~
TEXTHTML
;

2358 i‡(
ty≥
 &&

2359 0 =
	`°∫ˇ£cmp
 (
ty≥
, 
TEXTCSS_S
, 
	`°æí
 (TEXTCSS_S)))

2360 *
dt
 |
TEXTCSS
;

2362 *
dt
 &~
TEXTCSS
;

2364 i‡(
›t
.
adju°_exãnsi⁄
)

2366 i‡(*
dt
 & 
TEXTHTML
)

2372 
	`ísuª_exãnsi⁄
 (
hs
, ".html", 
dt
);

2374 i‡(*
dt
 & 
TEXTCSS
)

2376 
	`ísuª_exãnsi⁄
 (
hs
, ".css", 
dt
);

2380 i‡(
°©code
 =
HTTP_STATUS_RANGE_NOT_SATISFIABLE


2381 || (!
›t
.
time°ampög
 && 
hs
->
ª°vÆ
 > 0 && 
°©code
 =
HTTP_STATUS_OK


2382 && 
c⁄å™ge
 =0 && 
c⁄éí
 >0 && 
hs
->
ª°vÆ
 >= contlen))

2388 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("\
\n The file isálready fullyÑetrieved;ÇothingÅo do.\n\n"));

2391 
hs
->
Àn
 = 
c⁄éí
;

2392 
hs
->
ªs
 = 0;

2394 *
dt
 |
RETROKF
;

2395 
	`x‰ì_nuŒ
 (
ty≥
);

2396 
	`CLOSE_INVALIDATE
 (
sock
);

2398 
	`x‰ì
 (
hód
);

2399  
RETRUNNEEDED
;

2401 i‡((
c⁄å™ge
 !0 && c⁄å™gê!
hs
->
ª°vÆ
)

2402 || (
	`H_PARTIAL
 (
°©code
Ë&& !
c⁄å™ge
))

2406 
	`x‰ì_nuŒ
 (
ty≥
);

2407 
	`CLOSE_INVALIDATE
 (
sock
);

2408 
	`x‰ì
 (
hód
);

2409  
RANGEERR
;

2411 i‡(
c⁄éí
 == -1)

2412 
hs
->
c⁄éí
 = -1;

2414 
hs
->
c⁄éí
 = c⁄éí + 
c⁄å™ge
;

2416 i‡(
›t
.
vîbo£
)

2418 i‡(*
dt
 & 
RETROKF
)

2423 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("Length: "));

2424 i‡(
c⁄éí
 != -1)

2426 
	`logputs
 (
LOG_VERBOSE
, 
	`numbî_to_°©ic_°rög
 (
c⁄éí
 + 
c⁄å™ge
));

2427 i‡(
c⁄éí
 + 
c⁄å™ge
 >= 1024)

2428 
	`log¥ötf
 (
LOG_VERBOSE
, " (%s)",

2429 
	`hum™_ªadabÀ
 (
c⁄éí
 + 
c⁄å™ge
));

2430 i‡(
c⁄å™ge
)

2432 i‡(
c⁄éí
 >= 1024)

2433 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
(", %s (%s)Ñemaining"),

2434 
	`numbî_to_°©ic_°rög
 (
c⁄éí
),

2435 
	`hum™_ªadabÀ
 (
c⁄éí
));

2437 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
(", %sÑemaining"),

2438 
	`numbî_to_°©ic_°rög
 (
c⁄éí
));

2442 
	`logputs
 (
LOG_VERBOSE
,

2443 
›t
.
ign‹e_Àngth
 ? 
	`_
("ignored") : _("unspecified"));

2444 i‡(
ty≥
)

2445 
	`log¥ötf
 (
LOG_VERBOSE
, " [%s]\n", 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ty≥
));

2447 
	`logputs
 (
LOG_VERBOSE
, "\n");

2450 
	`x‰ì_nuŒ
 (
ty≥
);

2451 
ty≥
 = 
NULL
;

2454 i‡(!(*
dt
 & 
RETROKF
Ë|| 
hód_⁄ly
)

2457 
hs
->
Àn
 = 0;

2458 
hs
->
ªs
 = 0;

2459 
	`x‰ì_nuŒ
 (
ty≥
);

2460 i‡(
hód_⁄ly
)

2466 
	`CLOSE_FINISH
 (
sock
);

2467 i‡(
kìp_Æive


2468 && 
	`skù_sh‹t_body
 (
sock
, 
c⁄éí
, 
chunked_å™s„r_ícodög
))

2470 
	`CLOSE_FINISH
 (
sock
);

2472 
	`CLOSE_INVALIDATE
 (
sock
);

2473 
	`x‰ì
 (
hód
);

2474  
RETRFINISHED
;

2480 #ifde‡
__VMS


2481 
	#FOPEN_OPT_ARGS
 "f›=sqo", "acc", 
acc_cb
, &
›í_id


	)

2482 
	#FOPEN_BIN_FLAG
 3

	)

2484 
	#FOPEN_BIN_FLAG
 
åue


	)

2488 i‡(!
ouçut_°ªam
)

2490 
	`mkÆldús
 (
hs
->
loˇl_fûe
);

2491 i‡(
›t
.
backups
)

2492 
	`rŸ©e_backups
 (
hs
->
loˇl_fûe
);

2493 i‡(
hs
->
ª°vÆ
)

2495 #ifde‡
__VMS


2496 
›í_id
;

2498 
›í_id
 = 21;

2499 
Â
 = 
	`f›í
 (
hs
->
loˇl_fûe
, "ab", 
FOPEN_OPT_ARGS
);

2501 
Â
 = 
	`f›í
 (
hs
->
loˇl_fûe
, "ab");

2504 i‡(
ALLOW_CLOBBER
 || 
cou¡
 > 0)

2506 i‡(
›t
.
u∆ök
 && 
	`fûe_exi°s_p
 (
hs
->
loˇl_fûe
))

2508 
ªs
 = 
	`u∆ök
 (
hs
->
loˇl_fûe
);

2509 i‡(
ªs
 < 0)

2511 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
hs
->
loˇl_fûe
,

2512 
	`°ªº‹
 (
î∫o
));

2513 
	`CLOSE_INVALIDATE
 (
sock
);

2514 
	`x‰ì
 (
hód
);

2515  
UNLINKERR
;

2519 #ifde‡
__VMS


2520 
›í_id
;

2522 
›í_id
 = 22;

2523 
Â
 = 
	`f›í
 (
hs
->
loˇl_fûe
, "wb", 
FOPEN_OPT_ARGS
);

2525 
Â
 = 
	`f›í
 (
hs
->
loˇl_fûe
, "wb");

2530 
Â
 = 
	`f›í_ex˛
 (
hs
->
loˇl_fûe
, 
FOPEN_BIN_FLAG
);

2531 i‡(!
Â
 && 
î∫o
 =
EEXIST
)

2537 
	`log¥ötf
 (
LOG_NOTQUIET
,

2538 
	`_
("%s has sprung intoÉxistence.\n"),

2539 
hs
->
loˇl_fûe
);

2540 
	`CLOSE_INVALIDATE
 (
sock
);

2541 
	`x‰ì
 (
hód
);

2542  
FOPEN_EXCL_ERR
;

2545 i‡(!
Â
)

2547 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s\n", 
hs
->
loˇl_fûe
, 
	`°ªº‹
 (
î∫o
));

2548 
	`CLOSE_INVALIDATE
 (
sock
);

2549 
	`x‰ì
 (
hód
);

2550  
FOPENERR
;

2554 
Â
 = 
ouçut_°ªam
;

2557 i‡(
›t
.
vîbo£
)

2559 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("SavingÅo: %s\n"),

2560 
	`HYPHENP
 (
hs
->
loˇl_fûe
Ë? 
	`quŸe
 ("STDOUT") : quote (hs->local_file));

2565 i‡(
›t
.
ßve_hódîs
 && 
hs
->
ª°vÆ
 == 0)

2566 
	`fwrôe
 (
hód
, 1, 
	`°æí
 (hód), 
Â
);

2569 
	`x‰ì
 (
hód
);

2572 
Êags
 = 0;

2573 i‡(
c⁄éí
 != -1)

2577 
Êags
 |
rb_ªad_exa˘ly
;

2578 i‡(
hs
->
ª°vÆ
 > 0 && 
c⁄å™ge
 == 0)

2581 
Êags
 |
rb_skù_°¨ços
;

2583 i‡(
chunked_å™s„r_ícodög
)

2584 
Êags
 |
rb_chunked_å™s„r_ícodög
;

2586 
hs
->
Àn
 = hs->
ª°vÆ
;

2587 
hs
->
rd_size
 = 0;

2588 
hs
->
ªs
 = 
	`fd_ªad_body
 (
sock
, 
Â
, 
c⁄éí
 != -1 ? contlen : 0,

2589 
hs
->
ª°vÆ
, &hs->
rd_size
, &hs->
Àn
, &hs->
d…ime
,

2590 
Êags
);

2592 i‡(
hs
->
ªs
 >= 0)

2593 
	`CLOSE_FINISH
 (
sock
);

2596 i‡(
hs
->
ªs
 < 0)

2597 
hs
->
rdîrmsg
 = 
	`x°rdup
 (
	`fd_îr°r
 (
sock
));

2598 
	`CLOSE_INVALIDATE
 (
sock
);

2601 i‡(!
ouçut_°ªam
)

2602 
	`f˛o£
 (
Â
);

2603 i‡(
hs
->
ªs
 == -2)

2604  
FWRITEERR
;

2605  
RETRFINISHED
;

2606 
	}
}

2610 
uîr_t


2611 
	$hâp_lo›
 (
uæ
 *
u
, uæ *
‹igöÆ_uæ
, **
√wloc
,

2612 **
loˇl_fûe
, c⁄° *
ª„ªr
, *
dt
, 
uæ
 *
¥oxy
,

2613 
úi
 *iri)

2615 
cou¡
;

2616 
boﬁ
 
gŸ_hód
 = 
Ál£
;

2617 
boﬁ
 
time_ˇme_‰om_hód
 = 
Ál£
;

2618 
boﬁ
 
gŸ_«me
 = 
Ál£
;

2619 *
tms
;

2620 c⁄° *
tmøã
;

2621 
uîr_t
 
îr
, 
ªt
 = 
TRYLIMEXC
;

2622 
time_t
 
tmr
 = -1;

2623 
hâp_°©
 
h°©
;

2624 
°ru˘_°©
 
°
;

2625 
boﬁ
 
£nd_hód_fú°
 = 
åue
;

2626 *
fûe_«me
;

2627 
boﬁ
 
f‹˚_fuŒ_ªåõve
 = 
Ál£
;

2630 
	`as£π
 (
loˇl_fûe
 =
NULL
 || *local_file == NULL);

2633 i‡(
loˇl_fûe
 && 
›t
.
ouçut_documít
)

2634 *
loˇl_fûe
 = 
	`HYPHENP
 (
›t
.
ouçut_documít
Ë? 
NULL
 : 
	`x°rdup
 (opt.output_document);

2637 *
√wloc
 = 
NULL
;

2642 i‡(
›t
.
cookõs
)

2643 
	`lﬂd_cookõs
 ();

2646 i‡(
›t
.
·p_glob
 && 
	`has_wûdˇrds_p
 (
u
->
∑th
))

2647 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("Warning: wildcardsÇot supported in HTTP.\n"));

2650 
	`xzîo
 (
h°©
);

2651 
h°©
.
ª„ªr
 =Ñeferer;

2653 i‡(
›t
.
ouçut_documít
)

2655 
h°©
.
loˇl_fûe
 = 
	`x°rdup
 (
›t
.
ouçut_documít
);

2656 
gŸ_«me
 = 
åue
;

2658 i‡(!
›t
.
c⁄ã¡_di•osôi⁄
)

2660 
h°©
.
loˇl_fûe
 =

2661 
	`uæ_fûe_«me
 (
›t
.
åu°£rvî«mes
 ? 
u
 : 
‹igöÆ_uæ
, 
NULL
);

2662 
gŸ_«me
 = 
åue
;

2665 i‡(
gŸ_«me
 && 
	`fûe_exi°s_p
 (
h°©
.
loˇl_fûe
Ë&& 
›t
.
no˛obbî
 && !›t.
ouçut_documít
)

2670 
	`gë_fûe_Êags
 (
h°©
.
loˇl_fûe
, 
dt
);

2671 
ªt
 = 
RETROK
;

2672 
exô
;

2676 
cou¡
 = 0;

2679 *
dt
 = 0;

2682 i‡(!
›t
.
•idî
)

2683 
£nd_hód_fú°
 = 
Ál£
;

2687 
fûe_«me
 = 
	`uæ_fûe_«me
 (
›t
.
åu°£rvî«mes
 ? 
u
 : 
‹igöÆ_uæ
, 
NULL
);

2688 i‡(
›t
.
time°ampög
 && (
	`fûe_exi°s_p
 (
fûe_«me
)

2689 || 
›t
.
c⁄ã¡_di•osôi⁄
))

2690 
£nd_hód_fú°
 = 
åue
;

2691 
	`x‰ì
 (
fûe_«me
);

2697 ++
cou¡
;

2698 
	`¶ìp_bëwìn_ªåõvÆs
 (
cou¡
);

2701 
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

2703 i‡(
›t
.
•idî
 && !
gŸ_hód
)

2704 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 modeÉnabled. Check ifÑemote fileÉxists.\n"));

2708 i‡(
›t
.
vîbo£
)

2710 *
huæ
 = 
	`uæ_°rög
 (
u
, 
URL_AUTH_HIDE_PASSWD
);

2712 i‡(
cou¡
 > 1)

2714 
tmp
[256];

2715 
	`•rötf
 (
tmp
, 
	`_
("—ry:%2d)"), 
cou¡
);

2716 
	`log¥ötf
 (
LOG_NOTQUIET
, "--%s-- %s %s\n",

2717 
tms
, 
tmp
, 
huæ
);

2721 
	`log¥ötf
 (
LOG_NOTQUIET
, "--%s-- %s\n",

2722 
tms
, 
huæ
);

2725 #ifde‡
WINDOWS


2726 
	`ws_ch™gëôÀ
 (
huæ
);

2728 
	`x‰ì
 (
huæ
);

2734 i‡(
£nd_hód_fú°
 && !
gŸ_hód
)

2735 *
dt
 |
HEAD_ONLY
;

2737 *
dt
 &~
HEAD_ONLY
;

2740 i‡(
f‹˚_fuŒ_ªåõve
)

2741 
h°©
.
ª°vÆ
 = h°©.
Àn
;

2742 i‡(
›t
.
Æways_ª°


2743 && 
gŸ_«me


2744 && 
	`°©
 (
h°©
.
loˇl_fûe
, &
°
) == 0

2745 && 
	`S_ISREG
 (
°
.
°_mode
))

2749 
h°©
.
ª°vÆ
 = 
°
.
°_size
;

2750 i‡(
cou¡
 > 1)

2752 
h°©
.
ª°vÆ
 = h°©.
Àn
;

2754 
h°©
.
ª°vÆ
 = 0;

2762 i‡((
¥oxy
 && 
cou¡
 > 1)

2763 || !
›t
.
Ælow_ˇche
)

2764 *
dt
 |
SEND_NOCACHE
;

2766 *
dt
 &~
SEND_NOCACHE
;

2769 
îr
 = 
	`gëhâp
 (
u
, &
h°©
, 
dt
, 
¥oxy
, 
úi
, 
cou¡
);

2772 
tms
 = 
	`d©ëime_°r
 (
	`time
 (
NULL
));

2775 i‡(
h°©
.
√wloc
)

2776 *
√wloc
 = 
	`x°rdup
 (
h°©
.newloc);

2778 
îr
)

2780 
HERR
: 
HEOF
: 
CONSOCKERR
: 
CONCLOSED
:

2781 
CONERROR
: 
READERR
: 
WRITEFAILED
:

2782 
RANGEERR
: 
FOPEN_EXCL_ERR
:

2786 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

2788 
FWRITEERR
: 
FOPENERR
:

2790 
	`logputs
 (
LOG_VERBOSE
, "\n");

2791 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot writeÅo %s (%s).\n"),

2792 
	`quŸe
 (
h°©
.
loˇl_fûe
), 
	`°ªº‹
 (
î∫o
));

2793 
HOSTERR
: 
CONIMPOSSIBLE
: 
PROXERR
: 
AUTHFAILED
:

2794 
SSLINITFAILED
: 
CONTNOTSUPPORTED
: 
VERIFCERTERR
:

2796 
ªt
 = 
îr
;

2797 
exô
;

2798 
CONSSLERR
:

2800 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("UnableÅoÉstablish SSL connection.\n"));

2801 
ªt
 = 
îr
;

2802 
exô
;

2803 
UNLINKERR
:

2805 
	`logputs
 (
LOG_VERBOSE
, "\n");

2806 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot unlink %s (%s).\n"),

2807 
	`quŸe
 (
h°©
.
loˇl_fûe
), 
	`°ªº‹
 (
î∫o
));

2808 
ªt
 = 
îr
;

2809 
exô
;

2810 
NEWLOCATION
:

2811 
NEWLOCATION_KEEP_POST
:

2813 i‡(!*
√wloc
)

2815 
	`log¥ötf
 (
LOG_NOTQUIET
,

2816 
	`_
("ERROR: Redirection (%d) withoutÜocation.\n"),

2817 
h°©
.
°©code
);

2818 
ªt
 = 
WRONGCODE
;

2822 
ªt
 = 
îr
;

2824 
exô
;

2825 
RETRUNNEEDED
:

2827 
ªt
 = 
RETROK
;

2828 
exô
;

2829 
RETRFINISHED
:

2834 
	`ab‹t
 ();

2837 i‡(!(*
dt
 & 
RETROKF
))

2839 *
huæ
 = 
NULL
;

2840 i‡(!
›t
.
vîbo£
)

2843 
huæ
 = 
	`uæ_°rög
 (
u
, 
URL_AUTH_HIDE_PASSWD
);

2844 
	`log¥ötf
 (
LOG_NONVERBOSE
, "%s:\n", 
huæ
);

2848 i‡(*
dt
 & 
HEAD_ONLY


2849 && (
h°©
.
°©code
 == 500 || hstat.statcode == 501))

2851 
gŸ_hód
 = 
åue
;

2858 i‡(
›t
.
•idî
 && !
úi
->
utf8_ícode
)

2861 i‡(!
huæ
)

2862 
huæ
 = 
	`uæ_°rög
 (
u
, 
URL_AUTH_HIDE_PASSWD
);

2863 
	`n⁄exi°ög_uæ
 (
huæ
);

2864 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("\
 file doesÇotÉxist -- brokenÜink!!!\n"));

2869 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s ERROR %d: %s.\n"),

2870 
tms
, 
h°©
.
°©code
,

2871 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
h°©
.
îr‹
));

2873 
	`logputs
 (
LOG_VERBOSE
, "\n");

2874 
ªt
 = 
WRONGCODE
;

2875 
	`x‰ì_nuŒ
 (
huæ
);

2876 
exô
;

2880 i‡(!
gŸ_hód
)

2882 
gŸ_hód
 = 
åue
;

2884 i‡(
›t
.
time°ampög
 && !
h°©
.
ªmŸe_time
)

2886 
	`logputs
 (
LOG_NOTQUIET
, 
	`_
("\
-modified header missing --Åime-stampsÅurned off.\n"));

2889 i‡(
h°©
.
ªmŸe_time
)

2892 
tmr
 = 
	`hâp_©Ÿm
 (
h°©
.
ªmŸe_time
);

2893 i‡(
tmr
 =(
time_t
) (-1))

2894 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("\
-modified header invalid --Åime-stamp ignored.\n"));

2896 i‡(*
dt
 & 
HEAD_ONLY
)

2897 
time_ˇme_‰om_hód
 = 
åue
;

2900 i‡(
£nd_hód_fú°
)

2903 i‡(
›t
.
time°ampög
)

2905 i‡(
h°©
.
‹ig_fûe_«me
)

2910 i‡(
h°©
.
ªmŸe_time
 &&

2911 
tmr
 !(
time_t
) (-1))

2919 i‡(
h°©
.
‹ig_fûe_t°amp
 >
tmr
)

2921 i‡(
h°©
.
c⁄éí
 == -1

2922 || 
h°©
.
‹ig_fûe_size
 =h°©.
c⁄éí
)

2924 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 fileÇoÇewerÅhanÜocal file %s --ÇotÑetrieving.\n\n"),

2926 
	`quŸe
 (
h°©
.
‹ig_fûe_«me
));

2927 
ªt
 = 
RETROK
;

2928 
exô
;

2932 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 sizes doÇot match (local %s) --Ñetrieving.\n"),

2934 
	`numbî_to_°©ic_°rög
 (
h°©
.
‹ig_fûe_size
));

2939 
f‹˚_fuŒ_ªåõve
 = 
åue
;

2940 
	`logputs
 (
LOG_VERBOSE
,

2941 
	`_
("Remote file isÇewer,Ñetrieving.\n"));

2944 
	`logputs
 (
LOG_VERBOSE
, "\n");

2949 
h°©
.
time°amp_checked
 = 
åue
;

2952 i‡(
›t
.
•idî
)

2954 
boﬁ
 
föished
 = 
åue
;

2955 i‡(
›t
.
ªcursive
)

2957 i‡(*
dt
 & 
TEXTHTML
)

2959 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("\
 fileÉxistsánd could containÜinksÅo otherÑesources --Ñetrieving.\n\n"));

2961 
föished
 = 
Ál£
;

2965 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 fileÉxists but doesÇot containányÜink --ÇotÑetrieving.\n\n"));

2967 
ªt
 = 
RETROK
;

2972 i‡(*
dt
 & 
TEXTHTML
)

2974 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 fileÉxistsánd could contain furtherÜinks,\n\
Ñecursion is disabled --ÇotÑetrieving.\n\n"));

2980 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\
 fileÉxists.\n\n"));

2983 
ªt
 = 
RETROK
;

2986 i‡(
föished
)

2988 
	`log¥ötf
 (
LOG_NONVERBOSE
,

2989 
	`_
("%s URL: %s %2d %s\n"),

2990 
tms
, 
u
->
uæ
, 
h°©
.
°©code
,

2991 
h°©
.
mesßge
 ? 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, hstat.message) : "");

2992 
exô
;

2996 
gŸ_«me
 = 
åue
;

2997 *
dt
 &~
HEAD_ONLY
;

2998 
cou¡
 = 0;

3003 i‡(
›t
.
u££rvîtime°amps


3004 && (
tmr
 !(
time_t
) (-1))

3005 && ((
h°©
.
Àn
 =h°©.
c⁄éí
) ||

3006 ((
h°©
.
ªs
 =0Ë&& (h°©.
c⁄éí
 == -1))))

3008 c⁄° *
Ê
 = 
NULL
;

3009 
	`£t_loˇl_fûe
 (&
Ê
, 
h°©
.
loˇl_fûe
);

3010 i‡(
Ê
)

3012 
time_t
 
√wtmr
 = -1;

3014 i‡(
time_ˇme_‰om_hód


3015 && 
h°©
.
ªmŸe_time
 && hstat.remote_time[0])

3017 
√wtmr
 = 
	`hâp_©Ÿm
 (
h°©
.
ªmŸe_time
);

3018 i‡(
√wtmr
 !(
time_t
)-1)

3019 
tmr
 = 
√wtmr
;

3021 
	`touch
 (
Ê
, 
tmr
);

3026 
tmøã
 = 
	`ªå_øã
 (
h°©
.
rd_size
, h°©.
d…ime
);

3027 
tŸÆ_dow∆ﬂd_time
 +
h°©
.
d…ime
;

3029 i‡(
h°©
.
Àn
 =h°©.
c⁄éí
)

3031 i‡(*
dt
 & 
RETROKF
)

3033 
boﬁ
 
wrôe_to_°dout
 = (
›t
.
ouçut_documít
 && 
	`HYPHENP
 (opt.output_document));

3035 
	`log¥ötf
 (
LOG_VERBOSE
,

3036 
wrôe_to_°dout


3037 ? 
	`_
("%s (%s) - writtenÅo stdout %s[%s/%s]\n\n")

3038 : 
	`_
("%s (%s) - %s saved [%s/%s]\n\n"),

3039 
tms
, 
tmøã
,

3040 
wrôe_to_°dout
 ? "" : 
	`quŸe
 (
h°©
.
loˇl_fûe
),

3041 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
),

3042 
	`numbî_to_°©ic_°rög
 (
h°©
.
c⁄éí
));

3043 
	`log¥ötf
 (
LOG_NONVERBOSE
,

3045 
tms
, 
u
->
uæ
,

3046 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
),

3047 
	`numbî_to_°©ic_°rög
 (
h°©
.
c⁄éí
),

3048 
h°©
.
loˇl_fûe
, 
cou¡
);

3050 ++
numuæs
;

3051 
tŸÆ_dow∆ﬂded_byãs
 +
h°©
.
rd_size
;

3054 i‡(*
dt
 & 
ADDED_HTML_EXTENSION
)

3055 
	`dow∆ﬂded_fûe
 (
FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
, 
h°©
.
loˇl_fûe
);

3057 
	`dow∆ﬂded_fûe
 (
FILE_DOWNLOADED_NORMALLY
, 
h°©
.
loˇl_fûe
);

3059 
ªt
 = 
RETROK
;

3060 
exô
;

3062 i‡(
h°©
.
ªs
 == 0)

3064 i‡(
h°©
.
c⁄éí
 == -1)

3067 i‡(*
dt
 & 
RETROKF
)

3069 
boﬁ
 
wrôe_to_°dout
 = (
›t
.
ouçut_documít
 && 
	`HYPHENP
 (opt.output_document));

3071 
	`log¥ötf
 (
LOG_VERBOSE
,

3072 
wrôe_to_°dout


3073 ? 
	`_
("%s (%s) - writtenÅo stdout %s[%s]\n\n")

3074 : 
	`_
("%s (%s) - %s saved [%s]\n\n"),

3075 
tms
, 
tmøã
,

3076 
wrôe_to_°dout
 ? "" : 
	`quŸe
 (
h°©
.
loˇl_fûe
),

3077 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
));

3078 
	`log¥ötf
 (
LOG_NONVERBOSE
,

3080 
tms
, 
u
->
uæ
, 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
),

3081 
h°©
.
loˇl_fûe
, 
cou¡
);

3083 ++
numuæs
;

3084 
tŸÆ_dow∆ﬂded_byãs
 +
h°©
.
rd_size
;

3087 i‡(*
dt
 & 
ADDED_HTML_EXTENSION
)

3088 
	`dow∆ﬂded_fûe
 (
FILE_DOWNLOADED_AND_HTML_EXTENSION_ADDED
, 
h°©
.
loˇl_fûe
);

3090 
	`dow∆ﬂded_fûe
 (
FILE_DOWNLOADED_NORMALLY
, 
h°©
.
loˇl_fûe
);

3092 
ªt
 = 
RETROK
;

3093 
exô
;

3095 i‡(
h°©
.
Àn
 < h°©.
c⁄éí
)

3098 
	`log¥ötf
 (
LOG_VERBOSE
,

3099 
	`_
("%s (%s) - Connection closedát byte %s. "),

3100 
tms
, 
tmøã
, 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
));

3101 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

3104 i‡(
h°©
.
Àn
 !h°©.
ª°vÆ
)

3107 
	`ab‹t
 ();

3113 
ªt
 = 
RETROK
;

3114 
exô
;

3119 i‡(
h°©
.
c⁄éí
 == -1)

3121 
	`log¥ötf
 (
LOG_VERBOSE
,

3122 
	`_
("%s (%s) - ReadÉrrorát byte %s (%s)."),

3123 
tms
, 
tmøã
, 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
),

3124 
h°©
.
rdîrmsg
);

3125 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

3130 
	`log¥ötf
 (
LOG_VERBOSE
,

3131 
	`_
("%s (%s) - ReadÉrrorát byte %s/%s (%s). "),

3132 
tms
, 
tmøã
,

3133 
	`numbî_to_°©ic_°rög
 (
h°©
.
Àn
),

3134 
	`numbî_to_°©ic_°rög
 (
h°©
.
c⁄éí
),

3135 
h°©
.
rdîrmsg
);

3136 
	`¥ötwh©
 (
cou¡
, 
›t
.
¡ry
);

3142 !
›t
.
¡ry
 || (
cou¡
 < opt.ntry));

3144 
exô
:

3145 i‡(
ªt
 =
RETROK
 && 
loˇl_fûe
)

3146 *
loˇl_fûe
 = 
	`x°rdup
 (
h°©
.local_file);

3147 
	`‰ì_h°©
 (&
h°©
);

3149  
ªt
;

3150 
	}
}

3160 
boﬁ


3161 
	$check_íd
 (c⁄° *
p
)

3163 i‡(!
p
)

3164  
Ál£
;

3165 
	`c_is•a˚
 (*
p
))

3166 ++
p
;

3167 i‡(!*
p


3168 || (
p
[0] == 'G' &&Ö[1] == 'M' &&Ö[2] == 'T')

3169 || ((
p
[0] ='+' ||Ö[0] ='-'Ë&& 
	`c_isdigô
 (p[1])))

3170  
åue
;

3172  
Ál£
;

3173 
	}
}

3203 
time_t


3204 
	$hâp_©Ÿm
 (c⁄° *
time_°rög
)

3211 c⁄° *
time_f‹m©s
[] = {

3219 c⁄° *
ﬁdloˇÀ
;

3220 
ßvedloˇÀ
[256];

3221 
size_t
 
i
;

3222 
time_t
 
ªt
 = (time_t) -1;

3227 
ﬁdloˇÀ
 = 
	`£éoˇÀ
 (
LC_TIME
, 
NULL
);

3228 i‡(
ﬁdloˇÀ
)

3230 
size_t
 
l
 = 
	`°æí
 (
ﬁdloˇÀ
) + 1;

3231 i‡(
l
 > 
ßvedloˇÀ
)

3232 
ßvedloˇÀ
[0] = '\0';

3234 
	`mem˝y
 (
ßvedloˇÀ
, 
ﬁdloˇÀ
, 
l
);

3236 
ßvedloˇÀ
[0] = '\0';

3238 
	`£éoˇÀ
 (
LC_TIME
, "C");

3240 
i
 = 0; i < 
	`cou¡of
 (
time_f‹m©s
); i++)

3242 
tm
 
t
;

3247 
	`xzîo
 (
t
);

3249 i‡(
	`check_íd
 (
	`°Ωtime
 (
time_°rög
, 
time_f‹m©s
[
i
], &
t
)))

3251 
ªt
 = 
	`timegm
 (&
t
);

3257 i‡(
ßvedloˇÀ
[0])

3258 
	`£éoˇÀ
 (
LC_TIME
, 
ßvedloˇÀ
);

3260  
ªt
;

3261 
	}
}

3282 
	$basic_authítiˇti⁄_ícode
 (c⁄° *
u£r
, c⁄° *
∑sswd
)

3284 *
t1
, *
t2
;

3285 
Àn1
 = 
	`°æí
 (
u£r
Ë+ 1 + såÀ¿(
∑sswd
);

3287 
t1
 = (*)
	`Æloˇ
 (
Àn1
 + 1);

3288 
	`•rötf
 (
t1
, "%s:%s", 
u£r
, 
∑sswd
);

3290 
t2
 = (*)
	`Æloˇ
 (
	`BASE64_LENGTH
 (
Àn1
) + 1);

3291 
	`ba£64_ícode
 (
t1
, 
Àn1
, 
t2
);

3293  
	`c⁄ˇt_°rögs
 ("Basi¯", 
t2
, (*) 0);

3294 
	}
}

3296 
	#SKIP_WS
(
x
) do { \

3297 
	`c_is•a˚
 (*(
x
))) \

3298 ++(
x
); \

3299 } 0)

	)

3301 #ifde‡
ENABLE_DIGEST


3307 
	$dump_hash
 (*
buf
, c⁄° *
hash
)

3309 
i
;

3311 
i
 = 0; i < 
MD5_DIGEST_SIZE
; i++, 
hash
++)

3313 *
buf
++ = 
	`XNUM_TO_digô
 (*
hash
 >> 4);

3314 *
buf
++ = 
	`XNUM_TO_digô
 (*
hash
 & 0xf);

3316 *
buf
 = '\0';

3317 
	}
}

3322 
	$dige°_authítiˇti⁄_ícode
 (c⁄° *
au
, c⁄° *
u£r
,

3323 c⁄° *
∑sswd
, c⁄° *
mëhod
,

3324 c⁄° *
∑th
)

3326 *
ªÆm
, *
›aque
, *
n⁄˚
;

3328 c⁄° *
«me
;

3329 **
v¨übÀ
;

3330 } 
›ti⁄s
[] = {

3331 { "ªÆm", &
ªÆm
 },

3332 { "›aque", &
›aque
 },

3333 { "n⁄˚", &
n⁄˚
 }

3335 *
ªs
;

3336 
∑øm_tokí
 
«me
, 
vÆue
;

3338 
ªÆm
 = 
›aque
 = 
n⁄˚
 = 
NULL
;

3340 
au
 += 6;

3341 
	`exåa˘_∑øm
 (&
au
, &
«me
, &
vÆue
, ','))

3343 
size_t
 
i
;

3344 
size_t
 
«mñí
 = 
«me
.
e
 -Çame.
b
;

3345 
i
 = 0; i < 
	`cou¡of
 (
›ti⁄s
); i++)

3346 i‡(
«mñí
 =
	`°æí
 (
›ti⁄s
[
i
].
«me
)

3347 && 0 =
	`°∫cmp
 (
«me
.
b
, 
›ti⁄s
[
i
].name,

3348 
«mñí
))

3350 *
›ti⁄s
[
i
].
v¨übÀ
 = 
	`°rdupdñim
 (
vÆue
.
b
, vÆue.
e
);

3354 i‡(!
ªÆm
 || !
n⁄˚
 || !
u£r
 || !
∑sswd
 || !
∑th
 || !
mëhod
)

3356 
	`x‰ì_nuŒ
 (
ªÆm
);

3357 
	`x‰ì_nuŒ
 (
›aque
);

3358 
	`x‰ì_nuŒ
 (
n⁄˚
);

3359  
NULL
;

3364 
md5_˘x
 
˘x
;

3365 
hash
[
MD5_DIGEST_SIZE
];

3366 
a1buf
[
MD5_DIGEST_SIZE
 * 2 + 1], 
a2buf
[MD5_DIGEST_SIZE * 2 + 1];

3367 
ª•⁄£_dige°
[
MD5_DIGEST_SIZE
 * 2 + 1];

3370 
	`md5_öô_˘x
 (&
˘x
);

3371 
	`md5_¥o˚ss_byãs
 ((*)
u£r
, 
	`°æí
 (u£r), &
˘x
);

3372 
	`md5_¥o˚ss_byãs
 ((*)":", 1, &
˘x
);

3373 
	`md5_¥o˚ss_byãs
 ((*)
ªÆm
, 
	`°æí
 (ªÆm), &
˘x
);

3374 
	`md5_¥o˚ss_byãs
 ((*)":", 1, &
˘x
);

3375 
	`md5_¥o˚ss_byãs
 ((*)
∑sswd
, 
	`°æí
 (∑sswd), &
˘x
);

3376 
	`md5_föish_˘x
 (&
˘x
, 
hash
);

3377 
	`dump_hash
 (
a1buf
, 
hash
);

3380 
	`md5_öô_˘x
 (&
˘x
);

3381 
	`md5_¥o˚ss_byãs
 ((*)
mëhod
, 
	`°æí
 (mëhod), &
˘x
);

3382 
	`md5_¥o˚ss_byãs
 ((*)":", 1, &
˘x
);

3383 
	`md5_¥o˚ss_byãs
 ((*)
∑th
, 
	`°æí
 (∑th), &
˘x
);

3384 
	`md5_föish_˘x
 (&
˘x
, 
hash
);

3385 
	`dump_hash
 (
a2buf
, 
hash
);

3388 
	`md5_öô_˘x
 (&
˘x
);

3389 
	`md5_¥o˚ss_byãs
 ((*)
a1buf
, 
MD5_DIGEST_SIZE
 * 2, &
˘x
);

3390 
	`md5_¥o˚ss_byãs
 ((*)":", 1, &
˘x
);

3391 
	`md5_¥o˚ss_byãs
 ((*)
n⁄˚
, 
	`°æí
 (n⁄˚), &
˘x
);

3392 
	`md5_¥o˚ss_byãs
 ((*)":", 1, &
˘x
);

3393 
	`md5_¥o˚ss_byãs
 ((*)
a2buf
, 
MD5_DIGEST_SIZE
 * 2, &
˘x
);

3394 
	`md5_föish_˘x
 (&
˘x
, 
hash
);

3395 
	`dump_hash
 (
ª•⁄£_dige°
, 
hash
);

3397 
ªs
 = 
	`xmÆloc
 (
	`°æí
 (
u£r
)

3398 + 
	`°æí
 (
u£r
)

3399 + 
	`°æí
 (
ªÆm
)

3400 + 
	`°æí
 (
n⁄˚
)

3401 + 
	`°æí
 (
∑th
)

3402 + 2 * 
MD5_DIGEST_SIZE


3403 + (
›aque
 ? 
	`°æí
 (opaque) : 0)

3405 
	`•rötf
 (
ªs
, "Digest \
=\"%s\",Ñealm=\"%s\",Çonce=\"%s\", uri=\"%s\",Ñesponse=\"%s\"",

3407 
u£r
, 
ªÆm
, 
n⁄˚
, 
∑th
, 
ª•⁄£_dige°
);

3408 i‡(
›aque
)

3410 *
p
 = 
ªs
 + 
	`°æí
 (res);

3411 
	`°rˇt
 (
p
, ", opaque=\"");

3412 
	`°rˇt
 (
p
, 
›aque
);

3413 
	`°rˇt
 (
p
, "\"");

3416  
ªs
;

3417 
	}
}

3422 
	#STRSIZE
(
lôîÆ
Ë( (lôîÆË- 1)

	)

3427 
	#STARTS
(
lôîÆ
, 
b
, 
e
) \

3428 ((
e
 > 
b
) \

3429 && ((
size_t
Ë((
e
Ë- (
b
))Ë>
	`STRSIZE
 (
lôîÆ
) \

3430 && 0 =
	`°∫ˇ£cmp
 (
b
, 
lôîÆ
, 
	`STRSIZE
 (literal)) \

3431 && ((
size_t
Ë((
e
Ë- (
b
)Ë=
	`STRSIZE
 (
lôîÆ
) \

3432 || 
	`c_is•a˚
 (
b
[
	`STRSIZE
 (
lôîÆ
)])))

	)

3434 
boﬁ


3435 
	$known_authítiˇti⁄_scheme_p
 (c⁄° *
hdrbeg
, c⁄° *
hdªnd
)

3437  
	`STARTS
 ("Basic", 
hdrbeg
, 
hdªnd
)

3438 #ifde‡
ENABLE_DIGEST


3439 || 
	`STARTS
 ("Dige°", 
hdrbeg
, 
hdªnd
)

3441 #ifde‡
ENABLE_NTLM


3442 || 
	`STARTS
 ("NTLM", 
hdrbeg
, 
hdªnd
)

3445 
	}
}

3447 #unde‡
STARTS


3455 
	$¸óã_auth‹iz©i⁄_löe
 (c⁄° *
au
, c⁄° *
u£r
,

3456 c⁄° *
∑sswd
, c⁄° *
mëhod
,

3457 c⁄° *
∑th
, 
boﬁ
 *
föished
)

3461 
	`c_touµî
 (*
au
))

3464 *
föished
 = 
åue
;

3465  
	`basic_authítiˇti⁄_ícode
 (
u£r
, 
∑sswd
);

3466 #ifde‡
ENABLE_DIGEST


3468 *
föished
 = 
åue
;

3469  
	`dige°_authítiˇti⁄_ícode
 (
au
, 
u£r
, 
∑sswd
, 
mëhod
, 
∑th
);

3471 #ifde‡
ENABLE_NTLM


3473 i‡(!
	`¡lm_öput
 (&
pc⁄n
.
¡lm
, 
au
))

3475 *
föished
 = 
åue
;

3476  
NULL
;

3478  
	`¡lm_ouçut
 (&
pc⁄n
.
¡lm
, 
u£r
, 
∑sswd
, 
föished
);

3483 
	`ab‹t
 ();

3485 
	}
}

3488 
	$lﬂd_cookõs
 ()

3490 i‡(!
wgë_cookõ_j¨
)

3491 
wgë_cookõ_j¨
 = 
	`cookõ_j¨_√w
 ();

3492 i‡(
›t
.
cookõs_öput
 && !
cookõs_lﬂded_p
)

3494 
	`cookõ_j¨_lﬂd
 (
wgë_cookõ_j¨
, 
›t
.
cookõs_öput
);

3495 
cookõs_lﬂded_p
 = 
åue
;

3497 
	}
}

3500 
	$ßve_cookõs
 ()

3502 i‡(
wgë_cookõ_j¨
)

3503 
	`cookõ_j¨_ßve
 (
wgë_cookõ_j¨
, 
›t
.
cookõs_ouçut
);

3504 
	}
}

3507 
	$hâp_˛ónup
 ()

3509 
	`x‰ì_nuŒ
 (
pc⁄n
.
ho°
);

3510 i‡(
wgë_cookõ_j¨
)

3511 
	`cookõ_j¨_dñëe
 (
wgë_cookõ_j¨
);

3512 
	}
}

3515 
	$ísuª_exãnsi⁄
 (
hâp_°©
 *
hs
, c⁄° *
ext
, *
dt
)

3517 *
œ°_≥riod_ö_loˇl_fûíame
 = 
	`°ºchr
 (
hs
->
loˇl_fûe
, '.');

3518 
sh‹ãxt
[8];

3519 
Àn
 = 
	`°æí
 (
ext
);

3520 i‡(
Àn
 == 5)

3522 
	`°∫˝y
 (
sh‹ãxt
, 
ext
, 
Àn
 - 1);

3523 
sh‹ãxt
[
Àn
 - 1] = '\0';

3526 i‡(
œ°_≥riod_ö_loˇl_fûíame
 =
NULL


3527 || !(0 =
	`°rˇ£cmp
 (
œ°_≥riod_ö_loˇl_fûíame
, 
sh‹ãxt
)

3528 || 0 =
	`°rˇ£cmp
 (
œ°_≥riod_ö_loˇl_fûíame
, 
ext
)))

3530 
loˇl_fûíame_Àn
 = 
	`°æí
 (
hs
->
loˇl_fûe
);

3533 
hs
->
loˇl_fûe
 = 
	`xªÆloc
 (hs->local_file,

3534 
loˇl_fûíame_Àn
 + 24 + 
Àn
);

3535 
	`°r˝y
 (
hs
->
loˇl_fûe
 + 
loˇl_fûíame_Àn
, 
ext
);

3538 i‡(!
ALLOW_CLOBBER
 && 
	`fûe_exi°s_p
 (
hs
->
loˇl_fûe
))

3540 
ext_num
 = 1;

3542 
	`•rötf
 (
hs
->
loˇl_fûe
 + 
loˇl_fûíame_Àn
,

3543 ".%d%s", 
ext_num
++, 
ext
);

3544 
	`fûe_exi°s_p
 (
hs
->
loˇl_fûe
));

3546 *
dt
 |
ADDED_HTML_EXTENSION
;

3548 
	}
}

3551 #ifde‡
TESTING


3554 
	$ã°_∑r£_c⁄ã¡_di•osôi⁄
()

3556 
i
;

3558 *
hdrvÆ
;

3559 *
fûíame
;

3560 
boﬁ
 
ªsu…
;

3561 } 
ã°_¨øy
[] = {

3562 { "fûíame=\"fûe.ext\"", "fûe.ext", 
åue
 },

3563 { "©èchmít; fûíame=\"fûe.ext\"", "fûe.ext", 
åue
 },

3564 { "©èchmít; fûíame=\"fûe.ext\"; dummy", "fûe.ext", 
åue
 },

3565 { "©èchmít", 
NULL
, 
Ál£
 },

3566 { "©èchemít; fûíame*=UTF-8'í-US'hñlo.txt", "hñlo.txt", 
åue
 },

3567 { "©èchemít; fûíame*0=\"hñlo\"; fûíame*1=\"w‹ld.txt\"", "hñlow‹ld.txt", 
åue
 },

3570 
i
 = 0; i < (
ã°_¨øy
)/(test_array[0]); ++i)

3572 *
fûíame
;

3573 
boﬁ
 
ªs
;

3575 
ªs
 = 
	`∑r£_c⁄ã¡_di•osôi⁄
 (
ã°_¨øy
[
i
].
hdrvÆ
, &
fûíame
);

3577 
	`mu_as£π
 ("test_parse_content_disposition: wrongÑesult",

3578 
ªs
 =
ã°_¨øy
[
i
].
ªsu…


3579 && (
ªs
 =
Ál£


3580 || 0 =
	`°rcmp
 (
ã°_¨øy
[
i
].
fûíame
, filename)));

3583  
NULL
;

3584 
	}
}

	@src/http.h

31 #i‚de‡
HTTP_H


32 
	#HTTP_H


	)

34 
	guæ
;

36 
uîr_t
 
hâp_lo›
 (
uæ
 *, url *, **, **, const *,

37 *, 
uæ
 *, 
úi
 *);

38 
ßve_cookõs
 ();

39 
hâp_˛ónup
 ();

40 
time_t
 
hâp_©Ÿm
 (const *);

44 c⁄° *
	mb
, *
	me
;

45 } 
	t∑øm_tokí
;

46 
boﬁ
 
exåa˘_∑øm
 (c⁄° **, 
∑øm_tokí
 *,Öaram_token *, );

	@src/init.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°dboﬁ.h
>

37 
	~<uni°d.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

40 
	~<limôs.h
>

42 #i‚de‡
PATH_MAX


43 
	~<sys/∑øm.h
>

44 #i‚de‡
PATH_MAX


45 
	#PATH_MAX
 
MAXPATHLEN


	)

50 #ifde‡
HAVE_PWD_H


51 
	~<pwd.h
>

53 
	~<as£π.h
>

55 
	~"utûs.h
"

56 
	~"öô.h
"

57 
	~"ho°.h
"

58 
	~"√åc.h
"

59 
	~"¥ogªss.h
"

60 
	~"ªcur.h
"

61 
	~"c⁄vît.h
"

62 
	~"ªs.h
"

63 
	~"hâp.h
"

64 
	~"ªå.h
"

66 #ifde‡
TESTING


67 
	~"ã°.h
"

72 
	#CMD_DECLARE
(
func
Ë
boﬁ
 
	`func
 (c⁄° *, c⁄° *, *)

	)

74 
CMD_DECLARE
 (
cmd_boﬁón
);

75 
CMD_DECLARE
 (
cmd_byãs
);

76 
CMD_DECLARE
 (
cmd_byãs_sum
);

77 #ifde‡
HAVE_SSL


78 
CMD_DECLARE
 (
cmd_˚π_ty≥
);

80 
CMD_DECLARE
 (
cmd_dúe˘‹y_ve˘‹
);

81 
CMD_DECLARE
 (
cmd_numbî
);

82 
CMD_DECLARE
 (
cmd_numbî_öf
);

83 
CMD_DECLARE
 (
cmd_°rög
);

84 
CMD_DECLARE
 (
cmd_fûe
);

85 
CMD_DECLARE
 (
cmd_dúe˘‹y
);

86 
CMD_DECLARE
 (
cmd_time
);

87 
CMD_DECLARE
 (
cmd_ve˘‹
);

89 
CMD_DECLARE
 (
cmd_•ec_dú°ru˘
);

90 
CMD_DECLARE
 (
cmd_•ec_hódî
);

91 
CMD_DECLARE
 (
cmd_•ec_htmlify
);

92 
CMD_DECLARE
 (
cmd_•ec_múr‹
);

93 
CMD_DECLARE
 (
cmd_•ec_¥e„r_Ámûy
);

94 
CMD_DECLARE
 (
cmd_•ec_¥ogªss
);

95 
CMD_DECLARE
 (
cmd_•ec_ªcursive
);

96 
CMD_DECLARE
 (
cmd_•ec_ª°ri˘_fûe_«mes
);

97 #ifde‡
HAVE_SSL


98 
CMD_DECLARE
 (
cmd_•ec_£cuª_¥Ÿocﬁ
);

100 
CMD_DECLARE
 (
cmd_•ec_timeout
);

101 
CMD_DECLARE
 (
cmd_•ec_u£øgít
);

102 
CMD_DECLARE
 (
cmd_•ec_vîbo£
);

112 c⁄° *
	m«me
;

113 *
	m∂a˚
;

114 
boﬁ
 (*
a˘i⁄
) (const *, const *, *);

115 } 
	gcomm™ds
[] = {

117 { "ac˚±", &
›t
.
ac˚±s
, 
cmd_ve˘‹
 },

118 { "addho°dú", &
›t
.
add_ho°dú
, 
cmd_boﬁón
 },

119 { "adju°exãnsi⁄", &
›t
.
adju°_exãnsi⁄
, 
cmd_boﬁón
 },

120 { "Æway§e°", &
›t
.
Æways_ª°
, 
cmd_boﬁón
 },

121 { "ask∑ssw‹d", &
›t
.
ask_∑sswd
, 
cmd_boﬁón
 },

122 { "authnochÆÀnge", &
›t
.
auth_wôhout_chÆÀnge
,

123 
cmd_boﬁón
 },

124 { "background", &
›t
.
background
, 
cmd_boﬁón
 },

125 { "backupc⁄vîãd", &
›t
.
backup_c⁄vîãd
, 
cmd_boﬁón
 },

126 { "backups", &
›t
.
backups
, 
cmd_numbî
 },

127 { "ba£", &
›t
.
ba£_hªf
, 
cmd_°rög
 },

128 { "bödaddªss", &
›t
.
böd_addªss
, 
cmd_°rög
 },

129 #ifde‡
HAVE_SSL


130 { "ˇ˚πifiˇã", &
›t
.
ˇ_˚π
, 
cmd_fûe
 },

132 { "ˇche", &
›t
.
Ælow_ˇche
, 
cmd_boﬁón
 },

133 #ifde‡
HAVE_SSL


134 { "ˇdúe˘‹y", &
›t
.
ˇ_dúe˘‹y
, 
cmd_dúe˘‹y
 },

135 { "˚πifiˇã", &
›t
.
˚π_fûe
, 
cmd_fûe
 },

136 { "˚πifiˇãty≥", &
›t
.
˚π_ty≥
, 
cmd_˚π_ty≥
 },

137 { "check˚πifiˇã", &
›t
.
check_˚π
, 
cmd_boﬁón
 },

139 { "choo£c⁄fig", &
›t
.
choo£_c⁄fig
, 
cmd_fûe
 },

140 { "c⁄√˘timeout", &
›t
.
c⁄√˘_timeout
, 
cmd_time
 },

141 { "c⁄ã¡di•osôi⁄", &
›t
.
c⁄ã¡_di•osôi⁄
, 
cmd_boﬁón
 },

142 { "c⁄töue", &
›t
.
Æways_ª°
, 
cmd_boﬁón
 },

143 { "c⁄vîéöks", &
›t
.
c⁄vît_löks
, 
cmd_boﬁón
 },

144 { "cookõs", &
›t
.
cookõs
, 
cmd_boﬁón
 },

145 { "cutdús", &
›t
.
cut_dús
, 
cmd_numbî
 },

146 #ifde‡
ENABLE_DEBUG


147 { "debug", &
›t
.
debug
, 
cmd_boﬁón
 },

149 { "deÁu…∑ge", &
›t
.
deÁu…_∑ge
, 
cmd_°rög
},

150 { "dñëó·î", &
›t
.
dñëe_a·î
, 
cmd_boﬁón
 },

151 { "dú¥efix", &
›t
.
dú_¥efix
, 
cmd_dúe˘‹y
 },

152 { "dú°ru˘", 
NULL
, 
cmd_•ec_dú°ru˘
 },

153 { "dnsˇche", &
›t
.
dns_ˇche
, 
cmd_boﬁón
 },

154 { "dn°imeout", &
›t
.
dns_timeout
, 
cmd_time
 },

155 { "domaös", &
›t
.
domaös
, 
cmd_ve˘‹
 },

156 { "dŸbyãs", &
›t
.
dŸ_byãs
, 
cmd_byãs
 },

157 { "dŸsölöe", &
›t
.
dŸs_ö_löe
, 
cmd_numbî
 },

158 { "dŸ•acög", &
›t
.
dŸ_•acög
, 
cmd_numbî
 },

159 { "dŸ°yÀ", &
›t
.
dŸ_°yÀ
, 
cmd_°rög
 },

160 #ifde‡
HAVE_SSL


161 { "egdfûe", &
›t
.
egd_fûe
, 
cmd_fûe
 },

163 { "ex˛udedúe˘‹õs", &
›t
.
ex˛udes
, 
cmd_dúe˘‹y_ve˘‹
 },

164 { "ex˛udedomaös", &
›t
.
ex˛ude_domaös
, 
cmd_ve˘‹
 },

165 { "fﬁlow·p", &
›t
.
fﬁlow_·p
, 
cmd_boﬁón
 },

166 { "fﬁlowègs", &
›t
.
fﬁlow_ègs
, 
cmd_ve˘‹
 },

167 { "f‹˚html", &
›t
.
f‹˚_html
, 
cmd_boﬁón
 },

168 { "·µasswd", &
›t
.
·p_∑sswd
, 
cmd_°rög
 },

169 { "·µassw‹d", &
›t
.
·p_∑sswd
, 
cmd_°rög
 },

170 { "·µroxy", &
›t
.
·p_¥oxy
, 
cmd_°rög
 },

171 #ifde‡
__VMS


172 { "·p°mlf", &
›t
.
·p_°mlf
, 
cmd_boﬁón
 },

174 { "·pu£r", &
›t
.
·p_u£r
, 
cmd_°rög
 },

175 { "glob", &
›t
.
·p_glob
, 
cmd_boﬁón
 },

176 { "hódî", 
NULL
, 
cmd_•ec_hódî
 },

177 { "htmÀxãnsi⁄", &
›t
.
adju°_exãnsi⁄
, 
cmd_boﬁón
 },

178 { "htmlify", 
NULL
, 
cmd_•ec_htmlify
 },

179 { "hâpkì∑live", &
›t
.
hâp_kìp_Æive
, 
cmd_boﬁón
 },

180 { "hâµasswd", &
›t
.
hâp_∑sswd
, 
cmd_°rög
 },

181 { "hâµassw‹d", &
›t
.
hâp_∑sswd
, 
cmd_°rög
 },

182 { "hâµroxy", &
›t
.
hâp_¥oxy
, 
cmd_°rög
 },

183 { "hâp•roxy", &
›t
.
hâps_¥oxy
, 
cmd_°rög
 },

184 { "hâpu£r", &
›t
.
hâp_u£r
, 
cmd_°rög
 },

185 { "ign‹eˇ£", &
›t
.
ign‹e_ˇ£
, 
cmd_boﬁón
 },

186 { "ign‹ñígth", &
›t
.
ign‹e_Àngth
, 
cmd_boﬁón
 },

187 { "ign‹ëags", &
›t
.
ign‹e_ègs
, 
cmd_ve˘‹
 },

188 { "ö˛udedúe˘‹õs", &
›t
.
ö˛udes
, 
cmd_dúe˘‹y_ve˘‹
 },

189 #ifde‡
ENABLE_IPV6


190 { "öë4⁄ly", &
›t
.
ùv4_⁄ly
, 
cmd_boﬁón
 },

191 { "öë6⁄ly", &
›t
.
ùv6_⁄ly
, 
cmd_boﬁón
 },

193 { "öput", &
›t
.
öput_fûíame
, 
cmd_fûe
 },

194 { "úi", &
›t
.
íabÀ_úi
, 
cmd_boﬁón
 },

195 { "kìp£ssi⁄cookõs", &
›t
.
kìp_£ssi⁄_cookõs
, 
cmd_boﬁón
 },

196 { "limôøã", &
›t
.
limô_øã
, 
cmd_byãs
 },

197 { "lﬂdcookõs", &
›t
.
cookõs_öput
, 
cmd_fûe
 },

198 { "loˇÀncodög", &
›t
.
loˇÀ
, 
cmd_°rög
 },

199 { "logfûe", &
›t
.
lfûíame
, 
cmd_fûe
 },

200 { "logö", &
›t
.
·p_u£r
, 
cmd_°rög
 },

201 { "maxªdúe˘", &
›t
.
max_ªdúe˘
, 
cmd_numbî
 },

202 { "múr‹", 
NULL
, 
cmd_•ec_múr‹
 },

203 { "√åc", &
›t
.
√åc
, 
cmd_boﬁón
 },

204 { "no˛obbî", &
›t
.
no˛obbî
, 
cmd_boﬁón
 },

205 { "n›¨ít", &
›t
.
no_∑ª¡
, 
cmd_boﬁón
 },

206 { "n›roxy", &
›t
.
no_¥oxy
, 
cmd_ve˘‹
 },

207 { "numåõs", &
›t
.
¡ry
, 
cmd_numbî_öf
 },

208 { "ouçutdocumít", &
›t
.
ouçut_documít
, 
cmd_fûe
 },

209 { "∑gîequisôes", &
›t
.
∑ge_ªquisôes
, 
cmd_boﬁón
 },

210 { "∑ssive·p", &
›t
.
·p_∑sv
, 
cmd_boﬁón
 },

211 { "∑sswd", &
›t
.
·p_∑sswd
, 
cmd_°rög
 },

212 { "∑ssw‹d", &
›t
.
∑sswd
, 
cmd_°rög
 },

213 { "po°d©a", &
›t
.
po°_d©a
, 
cmd_°rög
 },

214 { "po°fûe", &
›t
.
po°_fûe_«me
, 
cmd_fûe
 },

215 { "¥e„rÁmûy", 
NULL
, 
cmd_•ec_¥e„r_Ámûy
 },

216 { "¥e£rvïîmissi⁄s", &
›t
.
¥e£rve_≥rm
, 
cmd_boﬁón
 },

217 #ifde‡
HAVE_SSL


218 { "¥iv©ekey", &
›t
.
¥iv©e_key
, 
cmd_fûe
 },

219 { "¥iv©ekeyty≥", &
›t
.
¥iv©e_key_ty≥
, 
cmd_˚π_ty≥
 },

221 { "¥ogªss", &
›t
.
¥ogªss_ty≥
, 
cmd_•ec_¥ogªss
 },

222 { "¥Ÿocﬁdúe˘‹õs", &
›t
.
¥Ÿocﬁ_dúe˘‹õs
, 
cmd_boﬁón
 },

223 { "¥oxy∑sswd", &
›t
.
¥oxy_∑sswd
, 
cmd_°rög
 },

224 { "¥oxy∑ssw‹d", &
›t
.
¥oxy_∑sswd
, 
cmd_°rög
 },

225 { "¥oxyu£r", &
›t
.
¥oxy_u£r
, 
cmd_°rög
 },

226 { "quõt", &
›t
.
quõt
, 
cmd_boﬁón
 },

227 { "quŸa", &
›t
.
quŸa
, 
cmd_byãs_sum
 },

228 #ifde‡
HAVE_SSL


229 { "øndomfûe", &
›t
.
øndom_fûe
, 
cmd_fûe
 },

231 { "øndomwaô", &
›t
.
øndom_waô
, 
cmd_boﬁón
 },

232 { "ªadtimeout", &
›t
.
ªad_timeout
, 
cmd_time
 },

233 { "ª˛evñ", &
›t
.
ª˛evñ
, 
cmd_numbî_öf
 },

234 { "ªcursive", 
NULL
, 
cmd_•ec_ªcursive
 },

235 { "ª„ªr", &
›t
.
ª„ªr
, 
cmd_°rög
 },

236 { "ªje˘", &
›t
.
ªje˘s
, 
cmd_ve˘‹
 },

237 { "ªœtive⁄ly", &
›t
.
ªœtive_⁄ly
, 
cmd_boﬁón
 },

238 { "ªmŸìncodög", &
›t
.
ícodög_ªmŸe
, 
cmd_°rög
 },

239 { "ªmovñi°ög", &
›t
.
ªmove_li°ög
, 
cmd_boﬁón
 },

240 { "ª°ri˘fûíames", 
NULL
, 
cmd_•ec_ª°ri˘_fûe_«mes
 },

241 { "ªåsymlöks", &
›t
.
ªå_symlöks
, 
cmd_boﬁón
 },

242 { "ªåyc⁄ƒefu£d", &
›t
.
ªåy_c⁄ƒefu£d
, 
cmd_boﬁón
 },

243 { "robŸs", &
›t
.
u£_robŸs
, 
cmd_boﬁón
 },

244 { "ßvecookõs", &
›t
.
cookõs_ouçut
, 
cmd_fûe
 },

245 { "ßvehódîs", &
›t
.
ßve_hódîs
, 
cmd_boﬁón
 },

246 #ifde‡
HAVE_SSL


247 { "£cuª¥Ÿocﬁ", &
›t
.
£cuª_¥Ÿocﬁ
, 
cmd_•ec_£cuª_¥Ÿocﬁ
 },

249 { "£rvîª•⁄£", &
›t
.
£rvî_ª•⁄£
, 
cmd_boﬁón
 },

250 { "showÆldn£¡rõs", &
›t
.
show_Æl_dns_íåõs
, 
cmd_boﬁón
 },

251 { "•™ho°s", &
›t
.
•™ho°
, 
cmd_boﬁón
 },

252 { "•idî", &
›t
.
•idî
, 
cmd_boﬁón
 },

253 { "°ri˘commíts", &
›t
.
°ri˘_commíts
, 
cmd_boﬁón
 },

254 { "timeout", 
NULL
, 
cmd_•ec_timeout
 },

255 { "time°ampög", &
›t
.
time°ampög
, 
cmd_boﬁón
 },

256 { "åõs", &
›t
.
¡ry
, 
cmd_numbî_öf
 },

257 { "åu°£rvî«mes", &
›t
.
åu°£rvî«mes
, 
cmd_boﬁón
 },

258 { "u∆ök", &
›t
.
u∆ök
, 
cmd_boﬁón
 },

259 { "u£¥oxy", &
›t
.
u£_¥oxy
, 
cmd_boﬁón
 },

260 { "u£r", &
›t
.
u£r
, 
cmd_°rög
 },

261 { "u£øgít", 
NULL
, 
cmd_•ec_u£øgít
 },

262 { "u££rvîtime°amps", &
›t
.
u££rvîtime°amps
, 
cmd_boﬁón
 },

263 { "vîbo£", 
NULL
, 
cmd_•ec_vîbo£
 },

264 { "waô", &
›t
.
waô
, 
cmd_time
 },

265 { "waôªåy", &
›t
.
waôªåy
, 
cmd_time
 },

266 #ifde‡
USE_WATT32


267 { "wdebug", &
›t
.
wdebug
, 
cmd_boﬁón
 },

275 
	$comm™d_by_«me
 (c⁄° *
cmd«me
)

279 
lo
 = 0, 
hi
 = 
	`cou¡of
 (
comm™ds
) - 1;

281 
lo
 <
hi
)

283 
mid
 = (
lo
 + 
hi
) >> 1;

284 
cmp
 = 
	`°rˇ£cmp
 (
cmd«me
, 
comm™ds
[
mid
].
«me
);

285 i‡(
cmp
 < 0)

286 
hi
 = 
mid
 - 1;

287 i‡(
cmp
 > 0)

288 
lo
 = 
mid
 + 1;

290  
mid
;

293 
	}
}

297 
	$deÁu…s
 ()

299 *
tmp
;

306 
	`xzîo
 (
›t
);

308 
›t
.
cookõs
 = 
åue
;

309 
›t
.
vîbo£
 = -1;

310 
›t
.
¡ry
 = 20;

311 
›t
.
ª˛evñ
 = 5;

312 
›t
.
add_ho°dú
 = 
åue
;

313 
›t
.
√åc
 = 
åue
;

314 
›t
.
·p_glob
 = 
åue
;

315 
›t
.
htmlify
 = 
åue
;

316 
›t
.
hâp_kìp_Æive
 = 
åue
;

317 
›t
.
u£_¥oxy
 = 
åue
;

318 
tmp
 = 
	`gëív
 ("no_proxy");

319 i‡(
tmp
)

320 
›t
.
no_¥oxy
 = 
	`£p°rög
 (
tmp
);

321 
›t
.
¥e„r_Ámûy
 = 
¥e„r_n⁄e
;

322 
›t
.
Ælow_ˇche
 = 
åue
;

324 
›t
.
ªad_timeout
 = 900;

325 
›t
.
u£_robŸs
 = 
åue
;

327 
›t
.
ªmove_li°ög
 = 
åue
;

329 
›t
.
dŸ_byãs
 = 1024;

330 
›t
.
dŸ_•acög
 = 10;

331 
›t
.
dŸs_ö_löe
 = 50;

333 
›t
.
dns_ˇche
 = 
åue
;

334 
›t
.
·p_∑sv
 = 
åue
;

336 #ifde‡
HAVE_SSL


337 
›t
.
check_˚π
 = 
åue
;

341 #i‡
	`deföed
(
WINDOWS
Ë|| deföed(
MSDOS
Ë|| deföed(
__CYGWIN__
)

342 
›t
.
ª°ri˘_fûes_os
 = 
ª°ri˘_wödows
;

344 
›t
.
ª°ri˘_fûes_os
 = 
ª°ri˘_unix
;

346 
›t
.
ª°ri˘_fûes_˘æ
 = 
åue
;

347 
›t
.
ª°ri˘_fûes_n⁄ascii
 = 
Ál£
;

348 
›t
.
ª°ri˘_fûes_ˇ£
 = 
ª°ri˘_no_ˇ£_ª°ri˘i⁄
;

350 
›t
.
max_ªdúe˘
 = 20;

352 
›t
.
waôªåy
 = 10;

354 #ifde‡
ENABLE_IRI


355 
›t
.
íabÀ_úi
 = 
åue
;

357 
›t
.
íabÀ_úi
 = 
Ál£
;

359 
›t
.
loˇÀ
 = 
NULL
;

360 
›t
.
ícodög_ªmŸe
 = 
NULL
;

362 
›t
.
u££rvîtime°amps
 = 
åue
;

363 
›t
.
show_Æl_dns_íåõs
 = 
Ál£
;

364 
	}
}

369 
	$home_dú
 ()

371 *
buf
 = 
NULL
;

372 *
home
, *
ªt
;

374 i‡(!
home
)

376 
home
 = 
	`gëív
 ("HOME");

377 i‡(!
home
)

379 #i‡
	`deföed
(
MSDOS
)

380 
Àn
;

384 c⁄° *
	`_w32_gë_¨gv0
 ();

385 *
p
;

387 
buff
 = 
	`_w32_gë_¨gv0
 ();

389 
p
 = 
	`°ºchr
 (
buf
, '/');

390 i‡(!
p
)

391 
p
 = 
	`°ºchr
 (
buf
, '\\');

392 
	`as£π
 (
p
);

394 
Àn
 = 
p
 - 
buff
 + 1;

395 
buff
 = 
	`mÆloc
 (
Àn
 + 1);

396 i‡(
buff
 =
NULL
)

397  
NULL
;

399 
	`°∫˝y
 (
buff
, 
	`_w32_gë_¨gv0
 (), 
Àn
);

400 
buff
[
Àn
] = '\0';

402 
home
 = 
buf
;

403 #ñi‡!
	`deföed
(
WINDOWS
)

406 
∑sswd
 *
pwd
 = 
	`gëpwuid
 (
	`gëuid
 ());

407 i‡(!
pwd
 || !pwd->
pw_dú
)

408  
NULL
;

409 
home
 = 
pwd
->
pw_dú
;

413 
home
 = 
	`ws_my∑th
 ();

418 
ªt
 = 
home
 ? 
	`x°rdup
 (homeË: 
NULL
;

419 i‡(
buf
)

420 
	`‰ì
 (
buf
);

422  
ªt
;

423 
	}
}

430 
	$wgërc_ív_fûe_«me
 ()

432 *
ív
 = 
	`gëív
 ("WGETRC");

433 i‡(
ív
 && *env)

435 i‡(!
	`fûe_exi°s_p
 (
ív
))

437 
	`Ârötf
 (
°dîr
, 
	`_
("%s: WGETRCÖointsÅo %s, which doesn'tÉxist.\n"),

438 
exec_«me
, 
ív
);

439 
	`exô
 (1);

441  
	`x°rdup
 (
ív
);

443  
NULL
;

444 
	}
}

449 
	$wgërc_u£r_fûe_«me
 ()

451 *
home
;

452 *
fûe
 = 
NULL
;

455 #ifde‡
__VMS


456 
fûe
 = "SYS$LOGIN:.wgetrc";

458 
home
 = 
	`home_dú
 ();

459 i‡(
home
)

460 
fûe
 = 
	`≠rötf
 ("%s/.wgërc", 
home
);

461 
	`x‰ì_nuŒ
 (
home
);

464 i‡(!
fûe
)

465  
NULL
;

466 i‡(!
	`fûe_exi°s_p
 (
fûe
))

468 
	`x‰ì
 (
fûe
);

469  
NULL
;

471  
fûe
;

472 
	}
}

480 
	$wgërc_fûe_«me
 ()

482 *
fûe
 = 
	`wgërc_ív_fûe_«me
 ();

483 i‡(
fûe
 && *file)

484  
fûe
;

486 
fûe
 = 
	`wgërc_u£r_fûe_«me
 ();

488 #ifde‡
WINDOWS


493 i‡(!
fûe
)

495 *
home
 = 
	`home_dú
 ();

496 
	`x‰ì_nuŒ
 (
fûe
);

497 
fûe
 = 
NULL
;

498 
home
 = 
	`ws_my∑th
 ();

499 i‡(
home
)

501 
fûe
 = 
	`≠rötf
 ("%s/wgë.öi", 
home
);

502 i‡(!
	`fûe_exi°s_p
 (
fûe
))

504 
	`x‰ì
 (
fûe
);

505 
fûe
 = 
NULL
;

507 
	`x‰ì
 (
home
);

512  
fûe
;

513 
	}
}

516 
	e∑r£_löe
 {

517 
	mlöe_ok
,

518 
	mlöe_em±y
,

519 
	mlöe_sy¡ax_îr‹
,

520 
	mlöe_unknown_comm™d


523 
∑r£_löe
Öarse_line (const *, **, **, *);

524 
boﬁ
 
£tvÆ_öã∫Æ
 (, const *, const *);

525 
boﬁ
 
£tvÆ_öã∫Æ_tûde
 (, const *, const *);

530 
boﬁ


531 
	$run_wgërc
 (c⁄° *
fûe
)

533 
FILE
 *
Â
;

534 *
löe
;

535 
 
;

536 
îr˙t
 = 0;

538 
Â
 = 
	`f›í
 (
fûe
, "r");

539 i‡(!
Â
)

541 
	`Ârötf
 (
°dîr
, 
	`_
("%s: C™nŸÑód %†(%s).\n"), 
exec_«me
,

542 
fûe
, 
	`°ªº‹
 (
î∫o
));

543  
åue
;

545 
 
 = 1;

546 (
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
)

548 *
com
 = 
NULL
, *
vÆ
 = NULL;

549 
comöd
;

552 
	`∑r£_löe
 (
löe
, &
com
, &
vÆ
, &
comöd
))

554 
löe_ok
:

556 i‡(!
	`£tvÆ_öã∫Æ_tûde
 (
comöd
, 
com
, 
vÆ
))

558 
	`Ârötf
 (
°dîr
, 
	`_
("%s: Error in %sátÜine %d.\n"),

559 
exec_«me
, 
fûe
, 
 
);

560 ++
îr˙t
;

563 
löe_sy¡ax_îr‹
:

564 
	`Ârötf
 (
°dîr
, 
	`_
("%s: SyntaxÉrror in %sátÜine %d.\n"),

565 
exec_«me
, 
fûe
, 
 
);

566 ++
îr˙t
;

568 
löe_unknown_comm™d
:

569 
	`Ârötf
 (
°dîr
, 
	`_
("%s: Unknown command %s in %sátÜine %d.\n"),

570 
exec_«me
, 
	`quŸe
 (
com
), 
fûe
, 
 
);

571 ++
îr˙t
;

573 
löe_em±y
:

576 
	`ab‹t
 ();

578 
	`x‰ì_nuŒ
 (
com
);

579 
	`x‰ì_nuŒ
 (
vÆ
);

580 
	`x‰ì
 (
löe
);

581 ++
 
;

583 
	`f˛o£
 (
Â
);

585  
îr˙t
 == 0;

586 
	}
}

591 
	$öôülize
 ()

593 *
fûe
, *
ív_sy§c
;

594 
boﬁ
 
ok
 = 
åue
;

598 
ív_sy§c
 = 
	`gëív
 ("SYSTEM_WGETRC");

599 i‡(
ív_sy§c
 && 
	`fûe_exi°s_p
 (env_sysrc))

600 
ok
 &
	`run_wgërc
 (
ív_sy§c
);

602 #ifde‡
SYSTEM_WGETRC


603 i‡(
	`fûe_exi°s_p
 (
SYSTEM_WGETRC
))

604 
ok
 &
	`run_wgërc
 (
SYSTEM_WGETRC
);

608 i‡(! 
ok
)

610 
	`Ârötf
 (
°dîr
, 
	`_
("\
 sy°em wgër¯fûêÁûed,ÖÀa£ check '%s'. \
 s≥cifyá dif„ª¡ fûêusög --c⁄fig\n"), 
SYSTEM_WGETRC
);

613 
	`exô
 (2);

616 
fûe
 = 
	`wgërc_fûe_«me
 ();

617 i‡(!
fûe
)

621 #ifde‡
SYSTEM_WGETRC


622 i‡(!
	`°rcmp
 (
fûe
, 
SYSTEM_WGETRC
))

624 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: Warning: Both systemánd user wgetrcÖointÅo %s.\n"),

626 
exec_«me
, 
	`quŸe
 (
fûe
));

630 
ok
 &
	`run_wgërc
 (
fûe
);

633 i‡(!
ok
)

634 
	`exô
 (2);

636 
	`x‰ì
 (
fûe
);

638 
	}
}

644 
	$dehyphí
 (*
s
)

646 *
t
 = 
s
;

647 *
h
 = 
s
;

648 *
h
)

649 i‡(*
h
 == '_' || *h == '-')

650 ++
h
;

652 *
t
++ = *
h
++;

653 *
t
 = '\0';

654 
	}
}

667 
∑r£_löe


668 
	$∑r£_löe
 (c⁄° *
löe
, **
com
, **
vÆ
, *
comöd
)

670 c⁄° *
p
;

671 c⁄° *
íd
 = 
löe
 + 
	`°æí
 (line);

672 c⁄° *
cmd°¨t
, *
cmdíd
;

673 c⁄° *
vÆ°¨t
, *
vÆíd
;

675 *
cmdc›y
;

676 
öd
;

679 *
löe
 && 
	`c_is•a˚
 (*line))

680 ++
löe
;

681 
íd
 > 
löe
 && 
	`c_is•a˚
 (end[-1]))

682 --
íd
;

685 i‡(!*
löe
 || *line == '#')

686  
löe_em±y
;

688 
p
 = 
löe
;

690 
cmd°¨t
 = 
p
;

691 
p
 < 
íd
 && (
	`c_iß um
 (*p) || *p == '_' || *p == '-'))

692 ++
p
;

693 
cmdíd
 = 
p
;

696 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

697 ++
p
;

698 i‡(
p
 =
íd
 || *p != '=')

699  
löe_sy¡ax_îr‹
;

700 ++
p
;

701 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

702 ++
p
;

704 
vÆ°¨t
 = 
p
;

705 
vÆíd
 = 
íd
;

709 *
com
 = 
	`°rdupdñim
 (
cmd°¨t
, 
cmdíd
);

710 *
vÆ
 = 
	`°rdupdñim
 (
vÆ°¨t
, 
vÆíd
);

714 
	`BOUNDED_TO_ALLOCA
 (
cmd°¨t
, 
cmdíd
, 
cmdc›y
);

715 
	`dehyphí
 (
cmdc›y
);

716 
öd
 = 
	`comm™d_by_«me
 (
cmdc›y
);

717 i‡(
öd
 == -1)

718  
löe_unknown_comm™d
;

721 *
comöd
 = 
öd
;

722  
löe_ok
;

723 
	}
}

725 #i‡
deföed
(
WINDOWS
Ë|| deföed(
MSDOS
)

726 
	#ISSEP
(
c
Ë((cË='/' || (cË='\\')

	)

728 
	#ISSEP
(
c
Ë((cË='/')

	)

733 
boﬁ


734 
	$£tvÆ_öã∫Æ
 (
comöd
, c⁄° *
com
, c⁄° *
vÆ
)

736 
	`as£π
 (0 <
comöd
 && ((
size_t
ËcomödË< 
	`cou¡of
 (
comm™ds
));

737 
	`DEBUGP
 (("Sëtög %†(%sËtÿ%s\n", 
com
, 
comm™ds
[
comöd
].
«me
, 
vÆ
));

738  
comm™ds
[
comöd
].
	`a˘i⁄
 (
com
, 
vÆ
, comm™ds[comöd].
∂a˚
);

739 
	}
}

741 
boﬁ


742 
	$£tvÆ_öã∫Æ_tûde
 (
comöd
, c⁄° *
com
, c⁄° *
vÆ
)

744 
boﬁ
 
ªt
;

745 
homñí
;

746 *
home
;

747 **
p°rög
;

748 
ªt
 = 
	`£tvÆ_öã∫Æ
 (
comöd
, 
com
, 
vÆ
);

751 i‡(((
comm™ds
[
comöd
].
a˘i⁄
 =
cmd_fûe
) ||

752 (
comm™ds
[
comöd
].
a˘i⁄
 =
cmd_dúe˘‹y
))

753 && 
ªt
 && (*
vÆ
 ='~' && 
	`ISSEP
 (val[1])))

755 
p°rög
 = 
comm™ds
[
comöd
].
∂a˚
;

756 
home
 = 
	`home_dú
 ();

757 i‡(
home
)

759 
homñí
 = 
	`°æí
 (
home
);

760 
homñí
 && 
	`ISSEP
 (
home
[homelen - 1]))

761 
home
[--
homñí
] = '\0';

764 ++
vÆ
; 
	`ISSEP
 (*val); val++)

766 *
p°rög
 = 
	`c⁄ˇt_°rögs
 (
home
, "/", 
vÆ
, (*)0);

769  
ªt
;

770 
	}
}

783 
	$£t›tvÆ
 (c⁄° *
com
, c⁄° *
vÆ
, c⁄° *
›äame
)

786 *
dd_›äame
 = (*Ë
	`Æloˇ
 (2 + 
	`°æí
 (
›äame
) + 1);

787 
dd_›äame
[0] = '-';

788 
dd_›äame
[1] = '-';

789 
	`°r˝y
 (
dd_›äame
 + 2, 
›äame
);

791 
	`as£π
 (
vÆ
 !
NULL
);

792 i‡(!
	`£tvÆ_öã∫Æ
 (
	`comm™d_by_«me
 (
com
), 
dd_›äame
, 
vÆ
))

793 
	`exô
 (2);

794 
	}
}

801 
	$run_comm™d
 (c⁄° *
›t
)

803 *
com
, *
vÆ
;

804 
comöd
;

805 
	`∑r£_löe
 (
›t
, &
com
, &
vÆ
, &
comöd
))

807 
löe_ok
:

808 i‡(!
	`£tvÆ_öã∫Æ
 (
comöd
, 
com
, 
vÆ
))

809 
	`exô
 (2);

810 
	`x‰ì
 (
com
);

811 
	`x‰ì
 (
vÆ
);

814 
	`Ârötf
 (
°dîr
, 
	`_
("%s: Invalid --execute command %s\n"),

815 
exec_«me
, 
	`quŸe
 (
›t
));

816 
	`exô
 (2);

818 
	}
}

823 
	sdecode_ôem
 {

824 c⁄° *
	m«me
;

825 
	mcode
;

827 
boﬁ
 
decode_°rög
 (c⁄° *, c⁄° 
decode_ôem
 *, , *);

828 
boﬁ
 
sim∂e_©oi
 (const *, const *, *);

829 
boﬁ
 
sim∂e_©of
 (const *, const *, *);

831 
	#CMP1
(
p
, 
c0
Ë(
	`c_tﬁowî
(’)[0]Ë=(c0Ë&& (p)[1] ='\0')

	)

833 
	#CMP2
(
p
, 
c0
, 
c1
Ë(
	`c_tﬁowî
((p)[0]) == (c0) \

834 && 
	`c_tﬁowî
((
p
)[1]Ë=(
c1
) \

835 && (
p
)[2] ='\0')

	)

837 
	#CMP3
(
p
, 
c0
, 
c1
, 
c2
Ë(
	`c_tﬁowî
((p)[0]) == (c0) \

838 && 
	`c_tﬁowî
((
p
)[1]Ë=(
c1
) \

839 && 
	`c_tﬁowî
((
p
)[2]Ë=(
c2
) \

840 && (
p
)[3] ='\0')

	)

845 
boﬁ


846 
	$cmd_boﬁón
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

848 
boﬁ
 
vÆue
;

850 i‡(
	`CMP2
 (
vÆ
, 'o', 'n'Ë|| 
	`CMP3
 (vÆ, 'y', 'e', 's'Ë|| 
	`CMP1
 (val, '1'))

852 
vÆue
 = 
åue
;

853 i‡(
	`CMP3
 (
vÆ
, 'o', 'f', 'f'Ë|| 
	`CMP2
 (vÆ, 'n', 'o'Ë|| 
	`CMP1
 (val, '0'))

855 
vÆue
 = 
Ál£
;

858 
	`Ârötf
 (
°dîr
,

859 
	`_
("%s: %s: Invalid boolean %s; use `on' or `off'.\n"),

860 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

861  
Ál£
;

864 *(
boﬁ
 *Ë
∂a˚
 = 
vÆue
;

865  
åue
;

866 
	}
}

870 
boﬁ


871 
	$cmd_numbî
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

873 i‡(!
	`sim∂e_©oi
 (
vÆ
, vÆ + 
	`°æí
 (vÆ), 
∂a˚
)

874 || *(*Ë
∂a˚
 < 0)

876 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvalidÇumber %s.\n"),

877 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

878  
Ál£
;

880  
åue
;

881 
	}
}

884 
boﬁ


885 
	$cmd_numbî_öf
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

887 i‡(!
	`°rˇ£cmp
 (
vÆ
, "inf"))

889 *(*Ë
∂a˚
 = 0;

890  
åue
;

892  
	`cmd_numbî
 (
com
, 
vÆ
, 
∂a˚
);

893 
	}
}

897 
boﬁ


898 
	$cmd_°rög
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

900 **
p°rög
 = (**)
∂a˚
;

902 
	`x‰ì_nuŒ
 (*
p°rög
);

903 *
p°rög
 = 
	`x°rdup
 (
vÆ
);

904  
åue
;

905 
	}
}

911 
boﬁ


912 
	$cmd_fûe
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

914 **
p°rög
 = (**)
∂a˚
;

916 
	`x‰ì_nuŒ
 (*
p°rög
);

920 *
p°rög
 = 
	`x°rdup
 (
vÆ
);

922 #i‡
	`deföed
(
WINDOWS
Ë|| deföed(
MSDOS
)

925 *
s
;

926 
s
 = *
p°rög
; *s; s++)

927 i‡(*
s
 == '\\')

928 *
s
 = '/';

931  
åue
;

932 
	}
}

935 
boﬁ


936 
	$cmd_dúe˘‹y
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

938 *
s
, *
t
;

943 i‡(!
	`cmd_fûe
 (
com
, 
vÆ
, 
∂a˚
))

944  
Ál£
;

946 
s
 = *(**)
∂a˚
;

947 
t
 = 
s
 + 
	`°æí
 (s);

948 
t
 > 
s
 && *--t == '/')

949 *
t
 = '\0';

951  
åue
;

952 
	}
}

958 
boﬁ


959 
	$cmd_ve˘‹
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

961 ***
pvec
 = (***)
∂a˚
;

963 i‡(*
vÆ
)

964 *
pvec
 = 
	`mîge_vecs
 (*pvec, 
	`£p°rög
 (
vÆ
));

967 
	`‰ì_vec
 (*
pvec
);

968 *
pvec
 = 
NULL
;

970  
åue
;

971 
	}
}

973 
boﬁ


974 
	$cmd_dúe˘‹y_ve˘‹
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

976 ***
pvec
 = (***)
∂a˚
;

978 i‡(*
vÆ
)

981 **
t
, **
£ps
;

983 
£ps
 = 
	`£p°rög
 (
vÆ
);

984 
t
 = 
£ps
;Å && *t;Å++)

986 
Àn
 = 
	`°æí
 (*
t
);

988 i‡(
Àn
 > 1)

990 i‡((*
t
)[
Àn
 - 1] == '/')

991 (*
t
)[
Àn
 - 1] = '\0';

994 *
pvec
 = 
	`mîge_vecs
 (*pvec, 
£ps
);

998 
	`‰ì_vec
 (*
pvec
);

999 *
pvec
 = 
NULL
;

1001  
åue
;

1002 
	}
}

1007 
boﬁ


1008 
	$∑r£_byãs_hñ≥r
 (c⁄° *
vÆ
, *
ªsu…
)

1010 
numbî
, 
mu…
;

1011 c⁄° *
íd
 = 
vÆ
 + 
	`°æí
 (val);

1014 i‡(0 =
	`°rcmp
 (
vÆ
, "inf"))

1016 *
ªsu…
 = 0;

1017  
åue
;

1021 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (end[-1]))

1022 --
íd
;

1023 i‡(
vÆ
 =
íd
)

1024  
Ál£
;

1026 
	`c_tﬁowî
 (
íd
[-1]))

1029 --
íd
, 
mu…
 = 1024.0;

1032 --
íd
, 
mu…
 = 1048576.0;

1035 --
íd
, 
mu…
 = 1073741824.0;

1038 --
íd
, 
mu…
 = 1099511627776.0;

1043 
mu…
 = 1;

1047 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (*val))

1048 ++
vÆ
;

1049 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (end[-1]))

1050 --
íd
;

1051 i‡(
vÆ
 =
íd
)

1052  
Ál£
;

1054 i‡(!
	`sim∂e_©of
 (
vÆ
, 
íd
, &
numbî
) ||Çumber < 0)

1055  
Ál£
;

1057 *
ªsu…
 = 
numbî
 * 
mu…
;

1058  
åue
;

1059 
	}
}

1075 
boﬁ


1076 
	$cmd_byãs
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

1078 
byã_vÆue
;

1079 i‡(!
	`∑r£_byãs_hñ≥r
 (
vÆ
, &
byã_vÆue
))

1081 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: Invalid byte value %s\n"),

1082 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1083  
Ál£
;

1085 *(
wgöt
 *)
∂a˚
 = (wgöt)
byã_vÆue
;

1086  
åue
;

1087 
	}
}

1094 
boﬁ


1095 
	$cmd_byãs_sum
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

1097 
byã_vÆue
;

1098 i‡(!
	`∑r£_byãs_hñ≥r
 (
vÆ
, &
byã_vÆue
))

1100 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: Invalid byte value %s\n"),

1101 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1102  
Ál£
;

1104 *(
SUM_SIZE_INT
 *Ë
∂a˚
 = (SUM_SIZE_INTË
byã_vÆue
;

1105  
åue
;

1106 
	}
}

1112 
boﬁ


1113 
	$cmd_time
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

1115 
numbî
, 
mu…
;

1116 c⁄° *
íd
 = 
vÆ
 + 
	`°æí
 (val);

1119 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (end[-1]))

1120 --
íd
;

1122 i‡(
vÆ
 =
íd
)

1124 
îr
:

1125 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvalidÅimeÖeriod %s\n"),

1126 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1127  
Ál£
;

1130 
	`c_tﬁowî
 (
íd
[-1]))

1133 --
íd
, 
mu…
 = 1;

1136 --
íd
, 
mu…
 = 60;

1139 --
íd
, 
mu…
 = 3600;

1142 --
íd
, 
mu…
 = 86400.0;

1145 --
íd
, 
mu…
 = 604800.0;

1150 
mu…
 = 1;

1154 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (*val))

1155 ++
vÆ
;

1156 
vÆ
 < 
íd
 && 
	`c_is•a˚
 (end[-1]))

1157 --
íd
;

1158 i‡(
vÆ
 =
íd
)

1159 
îr
;

1161 i‡(!
	`sim∂e_©of
 (
vÆ
, 
íd
, &
numbî
))

1162 
îr
;

1164 *(*)
∂a˚
 = 
numbî
 * 
mu…
;

1165  
åue
;

1166 
	}
}

1168 #ifde‡
HAVE_SSL


1169 
boﬁ


1170 
	$cmd_˚π_ty≥
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

1172 c⁄° 
decode_ôem
 
choi˚s
[] = {

1173 { "≥m", 
keyfûe_≥m
 },

1174 { "dî", 
keyfûe_a¢1
 },

1175 { "a¢1", 
keyfûe_a¢1
 },

1177 
ok
 = 
	`decode_°rög
 (
vÆ
, 
choi˚s
, 
	`cou¡of
 (choi˚s), 
∂a˚
);

1178 i‡(!
ok
)

1179 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvÆid vÆuê%s.\n"), 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1180  
ok
;

1181 
	}
}

1187 
boﬁ
 
check_u£r_•ecifõd_hódî
 (const *);

1189 
boﬁ


1190 
	$cmd_•ec_dú°ru˘
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1192 i‡(!
	`cmd_boﬁón
 (
com
, 
vÆ
, &
›t
.
dú°ru˘
))

1193  
Ál£
;

1196 i‡(
›t
.
dú°ru˘
)

1197 
›t
.
no_dú°ru˘
 = 
Ál£
;

1199 
›t
.
no_dú°ru˘
 = 
åue
;

1200  
åue
;

1201 
	}
}

1203 
boﬁ


1204 
	$cmd_•ec_hódî
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1207 i‡(*
vÆ
 == '\0')

1209 
	`‰ì_vec
 (
›t
.
u£r_hódîs
);

1210 
›t
.
u£r_hódîs
 = 
NULL
;

1211  
åue
;

1214 i‡(!
	`check_u£r_•ecifõd_hódî
 (
vÆ
))

1216 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: Invalid header %s.\n"),

1217 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1218  
Ál£
;

1220 
›t
.
u£r_hódîs
 = 
	`vec_≠≥nd
 (›t.u£r_hódîs, 
vÆ
);

1221  
åue
;

1222 
	}
}

1224 
boﬁ


1225 
	$cmd_•ec_htmlify
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1227 
Êag
 = 
	`cmd_boﬁón
 (
com
, 
vÆ
, &
›t
.
htmlify
);

1228 i‡(
Êag
 && !
›t
.
htmlify
)

1229 
›t
.
ªmove_li°ög
 = 
Ál£
;

1230  
Êag
;

1231 
	}
}

1236 
boﬁ


1237 
	$cmd_•ec_múr‹
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1239 
múr‹
;

1241 i‡(!
	`cmd_boﬁón
 (
com
, 
vÆ
, &
múr‹
))

1242  
Ál£
;

1243 i‡(
múr‹
)

1245 
›t
.
ªcursive
 = 
åue
;

1246 i‡(!
›t
.
no_dú°ru˘
)

1247 
›t
.
dú°ru˘
 = 
åue
;

1248 
›t
.
time°ampög
 = 
åue
;

1249 
›t
.
ª˛evñ
 = 
INFINITE_RECURSION
;

1250 
›t
.
ªmove_li°ög
 = 
Ál£
;

1252  
åue
;

1253 
	}
}

1258 
boﬁ


1259 
	$cmd_•ec_¥e„r_Ámûy
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1261 c⁄° 
decode_ôem
 
choi˚s
[] = {

1262 { "IPv4", 
¥e„r_ùv4
 },

1263 { "IPv6", 
¥e„r_ùv6
 },

1264 { "n⁄e", 
¥e„r_n⁄e
 },

1266 
¥e„r_Ámûy
 = 
¥e„r_n⁄e
;

1267 
ok
 = 
	`decode_°rög
 (
vÆ
, 
choi˚s
, 
	`cou¡of
 (choi˚s), &
¥e„r_Ámûy
);

1268 i‡(!
ok
)

1269 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvÆid vÆuê%s.\n"), 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1270 
›t
.
¥e„r_Ámûy
 =Örefer_family;

1271  
ok
;

1272 
	}
}

1277 
boﬁ


1278 
	$cmd_•ec_¥ogªss
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1280 i‡(!
	`vÆid_¥ogªss_im∂emíèti⁄_p
 (
vÆ
))

1282 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvalidÖrogressÅype %s.\n"),

1283 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1284  
Ál£
;

1286 
	`x‰ì_nuŒ
 (
›t
.
¥ogªss_ty≥
);

1290 
›t
.
¥ogªss_ty≥
 = 
	`x°rdup
 (
vÆ
);

1291  
åue
;

1292 
	}
}

1298 
boﬁ


1299 
	$cmd_•ec_ªcursive
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1301 i‡(!
	`cmd_boﬁón
 (
com
, 
vÆ
, &
›t
.
ªcursive
))

1302  
Ál£
;

1305 i‡(
›t
.
ªcursive
 && !›t.
no_dú°ru˘
)

1306 
›t
.
dú°ru˘
 = 
åue
;

1308  
åue
;

1309 
	}
}

1311 
boﬁ


1312 
	$cmd_•ec_ª°ri˘_fûe_«mes
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1314 
ª°ri˘_os
 = 
›t
.
ª°ri˘_fûes_os
;

1315 
ª°ri˘_˘æ
 = 
›t
.
ª°ri˘_fûes_˘æ
;

1316 
ª°ri˘_ˇ£
 = 
›t
.
ª°ri˘_fûes_ˇ£
;

1317 
ª°ri˘_n⁄ascii
 = 
›t
.
ª°ri˘_fûes_n⁄ascii
;

1319 c⁄° *
íd
;

1321 
	#VAL_IS
(
°rög_lôîÆ
Ë
	`BOUNDED_EQUAL
 (
vÆ
, 
íd
, såög_lôîÆ)

	)

1325 
íd
 = 
	`°rchr
 (
vÆ
, ',');

1326 i‡(!
íd
)

1327 
íd
 = 
vÆ
 + 
	`°æí
 (val);

1329 i‡(
	`VAL_IS
 ("unix"))

1330 
ª°ri˘_os
 = 
ª°ri˘_unix
;

1331 i‡(
	`VAL_IS
 ("windows"))

1332 
ª°ri˘_os
 = 
ª°ri˘_wödows
;

1333 i‡(
	`VAL_IS
 ("lowercase"))

1334 
ª°ri˘_ˇ£
 = 
ª°ri˘_lowîˇ£
;

1335 i‡(
	`VAL_IS
 ("uppercase"))

1336 
ª°ri˘_ˇ£
 = 
ª°ri˘_uµîˇ£
;

1337 i‡(
	`VAL_IS
 ("nocontrol"))

1338 
ª°ri˘_˘æ
 = 
Ál£
;

1339 i‡(
	`VAL_IS
 ("ascii"))

1340 
ª°ri˘_n⁄ascii
 = 
åue
;

1343 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: %s: InvalidÑestriction %s,\n\
 [unix|windows],[lowercase|uppercase],[nocontrol],[ascii].\n"),

1346 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1347  
Ál£
;

1350 i‡(*
íd
)

1351 
vÆ
 = 
íd
 + 1;

1353 *
vÆ
 && *
íd
);

1355 #unde‡
VAL_IS


1357 
›t
.
ª°ri˘_fûes_os
 = 
ª°ri˘_os
;

1358 
›t
.
ª°ri˘_fûes_˘æ
 = 
ª°ri˘_˘æ
;

1359 
›t
.
ª°ri˘_fûes_ˇ£
 = 
ª°ri˘_ˇ£
;

1360 
›t
.
ª°ri˘_fûes_n⁄ascii
 = 
ª°ri˘_n⁄ascii
;

1362  
åue
;

1363 
	}
}

1365 #ifde‡
HAVE_SSL


1366 
boﬁ


1367 
	$cmd_•ec_£cuª_¥Ÿocﬁ
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚
)

1369 c⁄° 
decode_ôem
 
choi˚s
[] = {

1370 { "auto", 
£cuª_¥Ÿocﬁ_auto
 },

1371 { "s¶v2", 
£cuª_¥Ÿocﬁ_s¶v2
 },

1372 { "s¶v3", 
£cuª_¥Ÿocﬁ_s¶v3
 },

1373 { "ésv1", 
£cuª_¥Ÿocﬁ_ésv1
 },

1375 
ok
 = 
	`decode_°rög
 (
vÆ
, 
choi˚s
, 
	`cou¡of
 (choi˚s), 
∂a˚
);

1376 i‡(!
ok
)

1377 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: InvÆid vÆuê%s.\n"), 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1378  
ok
;

1379 
	}
}

1384 
boﬁ


1385 
	$cmd_•ec_timeout
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1387 
vÆue
;

1388 i‡(!
	`cmd_time
 (
com
, 
vÆ
, &
vÆue
))

1389  
Ál£
;

1390 
›t
.
ªad_timeout
 = 
vÆue
;

1391 
›t
.
c⁄√˘_timeout
 = 
vÆue
;

1392 
›t
.
dns_timeout
 = 
vÆue
;

1393  
åue
;

1394 
	}
}

1396 
boﬁ


1397 
	$cmd_•ec_u£øgít
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1400 i‡(
	`°rchr
 (
vÆ
, '\n'))

1402 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s: Invalid value %s.\n"),

1403 
exec_«me
, 
com
, 
	`quŸe
 (
vÆ
));

1404  
Ál£
;

1406 
	`x‰ì_nuŒ
 (
›t
.
u£øgít
);

1407 
›t
.
u£øgít
 = 
	`x°rdup
 (
vÆ
);

1408  
åue
;

1409 
	}
}

1415 
boﬁ


1416 
	$cmd_•ec_vîbo£
 (c⁄° *
com
, c⁄° *
vÆ
, *
∂a˚_ign‹ed
)

1418 
boﬁ
 
Êag
;

1419 i‡(
	`cmd_boﬁón
 (
com
, 
vÆ
, &
Êag
))

1421 
›t
.
vîbo£
 = 
Êag
;

1422  
åue
;

1424  
Ál£
;

1425 
	}
}

1433 
boﬁ


1434 
	$sim∂e_©oi
 (c⁄° *
beg
, c⁄° *
íd
, *
de°
)

1436 
ªsu…
 = 0;

1437 
boﬁ
 
√g©ive
 = 
Ál£
;

1438 c⁄° *
p
 = 
beg
;

1440 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

1441 ++
p
;

1442 i‡(
p
 < 
íd
 && (*p == '-' || *p == '+'))

1444 
√g©ive
 = (*
p
 == '-');

1445 ++
p
;

1447 i‡(
p
 =
íd
)

1448  
Ál£
;

1453 i‡(!
√g©ive
)

1454 ; 
p
 < 
íd
 && 
	`c_isdigô
 (*p);Ö++)

1456 
√xt
 = (10 * 
ªsu…
Ë+ (*
p
 - '0');

1457 i‡(
√xt
 < 
ªsu…
)

1458  
Ál£
;

1459 
ªsu…
 = 
√xt
;

1462 ; 
p
 < 
íd
 && 
	`c_isdigô
 (*p);Ö++)

1464 
√xt
 = (10 * 
ªsu…
Ë- (*
p
 - '0');

1465 i‡(
√xt
 > 
ªsu…
)

1466  
Ál£
;

1467 
ªsu…
 = 
√xt
;

1470 i‡(
p
 !
íd
)

1471  
Ál£
;

1473 *
de°
 = 
ªsu…
;

1474  
åue
;

1475 
	}
}

1482 
boﬁ


1483 
	$sim∂e_©of
 (c⁄° *
beg
, c⁄° *
íd
, *
de°
)

1485 
ªsu…
 = 0;

1487 
boﬁ
 
√g©ive
 = 
Ál£
;

1488 
boﬁ
 
£í_dŸ
 = 
Ál£
;

1489 
boﬁ
 
£í_digô
 = 
Ál£
;

1490 
dividî
 = 1;

1492 c⁄° *
p
 = 
beg
;

1494 
p
 < 
íd
 && 
	`c_is•a˚
 (*p))

1495 ++
p
;

1496 i‡(
p
 < 
íd
 && (*p == '-' || *p == '+'))

1498 
√g©ive
 = (*
p
 == '-');

1499 ++
p
;

1502 ; 
p
 < 
íd
;Ö++)

1504 
ch
 = *
p
;

1505 i‡(
	`c_isdigô
 (
ch
))

1507 i‡(!
£í_dŸ
)

1508 
ªsu…
 = (10 *Ñesu…Ë+ (
ch
 - '0');

1510 
ªsu…
 +(
ch
 - '0'Ë/ (
dividî
 *= 10);

1511 
£í_digô
 = 
åue
;

1513 i‡(
ch
 == '.')

1515 i‡(!
£í_dŸ
)

1516 
£í_dŸ
 = 
åue
;

1518  
Ál£
;

1521  
Ál£
;

1523 i‡(!
£í_digô
)

1524  
Ál£
;

1525 i‡(
√g©ive
)

1526 
ªsu…
 = -result;

1528 *
de°
 = 
ªsu…
;

1529  
åue
;

1530 
	}
}

1536 
boﬁ


1537 
	$check_u£r_•ecifõd_hódî
 (c⁄° *
s
)

1539 c⁄° *
p
;

1541 
p
 = 
s
; *∞&& *∞!':' && !
	`c_is•a˚
 (*p);Ö++)

1545 i‡(*
p
 !':' ||Ö =
s
)

1546  
Ál£
;

1548 i‡(
	`°rchr
 (
s
, '\n'))

1549  
Ál£
;

1550  
åue
;

1551 
	}
}

1555 
boﬁ


1556 
	$decode_°rög
 (c⁄° *
vÆ
, c⁄° 
decode_ôem
 *
ôems
, 
ôemcou¡
,

1557 *
∂a˚
)

1559 
i
;

1560 
i
 = 0; i < 
ôemcou¡
; i++)

1561 i‡(0 =
	`°rˇ£cmp
 (
vÆ
, 
ôems
[
i
].
«me
))

1563 *
∂a˚
 = 
ôems
[
i
].
code
;

1564  
åue
;

1566  
Ál£
;

1567 
	}
}

1570 
˛ónup_html_uæ
 ();

1575 
	$˛ónup
 ()

1579 i‡(
ouçut_°ªam
)

1580 
	`f˛o£
 (
ouçut_°ªam
);

1592 #ifde‡
DEBUG_MALLOC


1593 
	`c⁄vît_˛ónup
 ();

1594 
	`ªs_˛ónup
 ();

1595 
	`hâp_˛ónup
 ();

1596 
	`˛ónup_html_uæ
 ();

1597 
	`ho°_˛ónup
 ();

1598 
	`log_˛ónup
 ();

1601 
acc_t
 *
√åc_li°
;

1602 
	`‰ì_√åc
 (
√åc_li°
);

1604 
	`x‰ì_nuŒ
 (
›t
.
choo£_c⁄fig
);

1605 
	`x‰ì_nuŒ
 (
›t
.
lfûíame
);

1606 
	`x‰ì_nuŒ
 (
›t
.
dú_¥efix
);

1607 
	`x‰ì_nuŒ
 (
›t
.
öput_fûíame
);

1608 
	`x‰ì_nuŒ
 (
›t
.
ouçut_documít
);

1609 
	`‰ì_vec
 (
›t
.
ac˚±s
);

1610 
	`‰ì_vec
 (
›t
.
ªje˘s
);

1611 
	`‰ì_vec
 (
›t
.
ex˛udes
);

1612 
	`‰ì_vec
 (
›t
.
ö˛udes
);

1613 
	`‰ì_vec
 (
›t
.
domaös
);

1614 
	`‰ì_vec
 (
›t
.
fﬁlow_ègs
);

1615 
	`‰ì_vec
 (
›t
.
ign‹e_ègs
);

1616 
	`x‰ì_nuŒ
 (
›t
.
¥ogªss_ty≥
);

1617 
	`x‰ì_nuŒ
 (
›t
.
·p_u£r
);

1618 
	`x‰ì_nuŒ
 (
›t
.
·p_∑sswd
);

1619 
	`x‰ì_nuŒ
 (
›t
.
·p_¥oxy
);

1620 
	`x‰ì_nuŒ
 (
›t
.
hâps_¥oxy
);

1621 
	`x‰ì_nuŒ
 (
›t
.
hâp_¥oxy
);

1622 
	`‰ì_vec
 (
›t
.
no_¥oxy
);

1623 
	`x‰ì_nuŒ
 (
›t
.
u£øgít
);

1624 
	`x‰ì_nuŒ
 (
›t
.
ª„ªr
);

1625 
	`x‰ì_nuŒ
 (
›t
.
hâp_u£r
);

1626 
	`x‰ì_nuŒ
 (
›t
.
hâp_∑sswd
);

1627 
	`‰ì_vec
 (
›t
.
u£r_hódîs
);

1628 #ifde‡
HAVE_SSL


1629 
	`x‰ì_nuŒ
 (
›t
.
˚π_fûe
);

1630 
	`x‰ì_nuŒ
 (
›t
.
¥iv©e_key
);

1631 
	`x‰ì_nuŒ
 (
›t
.
ˇ_dúe˘‹y
);

1632 
	`x‰ì_nuŒ
 (
›t
.
ˇ_˚π
);

1633 
	`x‰ì_nuŒ
 (
›t
.
øndom_fûe
);

1634 
	`x‰ì_nuŒ
 (
›t
.
egd_fûe
);

1636 
	`x‰ì_nuŒ
 (
›t
.
böd_addªss
);

1637 
	`x‰ì_nuŒ
 (
›t
.
cookõs_öput
);

1638 
	`x‰ì_nuŒ
 (
›t
.
cookõs_ouçut
);

1639 
	`x‰ì_nuŒ
 (
›t
.
u£r
);

1640 
	`x‰ì_nuŒ
 (
›t
.
∑sswd
);

1641 
	`x‰ì_nuŒ
 (
›t
.
ba£_hªf
);

1644 
	}
}

1648 #ifde‡
TESTING


1651 
	$ã°_comm™ds_s‹ãd
()

1653 
¥ev_idx
 = 0, 
√xt_idx
 = 1;

1654 
comm™d_cou¡
 = 
	`cou¡of
 (
comm™ds
) - 1;

1655 
cmp
 = 0;

1656 
√xt_idx
 <
comm™d_cou¡
)

1658 
cmp
 = 
	`°rˇ£cmp
 (
comm™ds
[
¥ev_idx
].
«me
, comm™ds[
√xt_idx
].name);

1659 i‡(
cmp
 > 0)

1661 
	`mu_as£π
 ("FAILED", 
Ál£
);

1666 
¥ev_idx
 ++;

1667 
√xt_idx
 ++;

1670  
NULL
;

1671 
	}
}

1674 
	$ã°_cmd_•ec_ª°ri˘_fûe_«mes
()

1676 
i
;

1678 *
vÆ
;

1679 
ex≥˘ed_ª°ri˘_fûes_os
;

1680 
ex≥˘ed_ª°ri˘_fûes_˘æ
;

1681 
ex≥˘ed_ª°ri˘_fûes_ˇ£
;

1682 
boﬁ
 
ªsu…
;

1683 } 
ã°_¨øy
[] = {

1684 { "wödows", 
ª°ri˘_wödows
, 
åue
, 
ª°ri˘_no_ˇ£_ª°ri˘i⁄
,Årue },

1685 { "wödows,", 
ª°ri˘_wödows
, 
åue
, 
ª°ri˘_no_ˇ£_ª°ri˘i⁄
,Årue },

1686 { "wödows,lowîˇ£", 
ª°ri˘_wödows
, 
åue
, 
ª°ri˘_lowîˇ£
,Årue },

1687 { "unix,noc⁄åﬁ,lowîˇ£,", 
ª°ri˘_unix
, 
Ál£
, 
ª°ri˘_lowîˇ£
, 
åue
 },

1690 
i
 = 0; i < (
ã°_¨øy
)/(test_array[0]); ++i)

1692 
boﬁ
 
ªs
;

1694 
	`deÁu…s
();

1695 
ªs
 = 
	`cmd_•ec_ª°ri˘_fûe_«mes
 ("dummy", 
ã°_¨øy
[
i
].
vÆ
, 
NULL
);

1703 
	`mu_as£π
 ("test_cmd_spec_restrict_file_names: wrongÑesult",

1704 
ªs
 =
ã°_¨øy
[
i
].
ªsu…


1705 && 
›t
.
ª°ri˘_fûes_os
 =
ã°_¨øy
[
i
].
ex≥˘ed_ª°ri˘_fûes_os


1706 && 
›t
.
ª°ri˘_fûes_˘æ
 =
ã°_¨øy
[
i
].
ex≥˘ed_ª°ri˘_fûes_˘æ


1707 && 
›t
.
ª°ri˘_fûes_ˇ£
 =
ã°_¨øy
[
i
].
ex≥˘ed_ª°ri˘_fûes_ˇ£
);

1710  
NULL
;

1711 
	}
}

	@src/init.h

32 #i‚de‡
INIT_H


33 
	#INIT_H


	)

35 *
wgërc_ív_fûe_«me
 ();

36 *
wgërc_u£r_fûe_«me
 ();

37 *
wgërc_fûe_«me
 ();

38 
öôülize
 ();

39 
run_comm™d
 (const *);

40 
£t›tvÆ
 (const *, const *, const *);

41 *
home_dú
 ();

42 
˛ónup
 ();

43 
deÁu…s
 ();

44 
boﬁ
 
run_wgërc
 (c⁄° *
fûe
);

	@src/iri.c

30 
	~"wgë.h
"

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<ic⁄v.h
>

36 
	~<°rög¥ï.h
>

37 
	~<id«.h
>

38 
	~<î∫o.h
>

40 
	~"utûs.h
"

43 
	#IDNA_FLAGS
 
IDNA_USE_STD3_ASCII_RULES


	)

47 
boﬁ
 
do_c⁄vîsi⁄
 (
ic⁄v_t
 
cd
, *
ö
, 
size_t
 
öÀn
, **
out
);

53 
	$∑r£_ch¨£t
 (*
°r
)

55 *
ch¨£t
;

57 i‡(!
°r
 || !*str)

58  
NULL
;

60 
°r
 = 
	`°rˇ£°r
 (str, "charset=");

61 i‡(!
°r
)

62  
NULL
;

64 
°r
 += 8;

65 
ch¨£t
 = 
°r
;

68 *
ch¨£t
 && !
	`c_is•a˚
 (*charset))

69 
ch¨£t
++;

72 
ch¨£t
 = 
	`°rdupdñim
 (
°r
, charset);

75 i‡(!
	`check_ícodög_«me
 (
ch¨£t
))

77 
	`x‰ì
 (
ch¨£t
);

78  
NULL
;

83  
ch¨£t
;

84 
	}
}

88 
	$föd_loˇÀ
 ()

90  (*Ë
	`°rög¥ï_loˇÀ_ch¨£t
 ();

91 
	}
}

94 
boﬁ


95 
	$check_ícodög_«me
 (*
ícodög
)

97 *
s
 = 
ícodög
;

99 *
s
)

101 i‡(!
	`c_ißscii
 (*
s
Ë|| 
	`c_is•a˚
 (*s))

103 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Encodög %†i¢'àvÆid\n"), 
	`quŸe
 (
ícodög
));

104  
Ál£
;

107 
s
++;

110  
åue
;

111 
	}
}

116 
	$loˇÀ_to_utf8
 (c⁄° *
°r
)

118 
ic⁄v_t
 
l2u
;

119 *
√w
;

122 i‡(!
›t
.
loˇÀ
)

124 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("locale_to_utf8:Üocale is unset\n"));

125 
›t
.
loˇÀ
 = 
	`föd_loˇÀ
 ();

128 i‡(!
›t
.
loˇÀ
 || !
	`°rˇ£cmp
 (opt.locale, "utf-8"))

129  
°r
;

131 
l2u
 = 
	`ic⁄v_›í
 ("UTF-8", 
›t
.
loˇÀ
);

132 i‡(
l2u
 !(
ic⁄v_t
)(-1))

134 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Conversion from %sÅo %s isn't supported\n"),

135 
	`quŸe
 (
›t
.
loˇÀ
), quote ("UTF-8"));

136  
°r
;

139 i‡(
	`do_c⁄vîsi⁄
 (
l2u
, (*Ë
°r
, 
	`°æí
 ((*Ë°r), &
√w
))

140  (c⁄° *Ë
√w
;

142  
°r
;

143 
	}
}

148 
boﬁ


149 
	$do_c⁄vîsi⁄
 (
ic⁄v_t
 
cd
, *
ö
, 
size_t
 
öÀn
, **
out
)

152 
size_t
 
Àn
, 
d⁄e
, 
ouéí
 = 
öÀn
 * 2;

153 
övÆid
 = 0, 
toosh‹t
 = 0;

154 *
s
;

156 
s
 = 
	`xmÆloc
 (
ouéí
 + 1);

157 *
out
 = 
s
;

158 
Àn
 = 
ouéí
;

159 
d⁄e
 = 0;

163 i‡(
	`ic⁄v
 (
cd
, &
ö
, &
öÀn
, 
out
, &
ouéí
Ë!(
size_t
)(-1))

165 *
out
 = 
s
;

166 *(
s
 + 
Àn
 - 
ouéí
 - 
d⁄e
) = '\0';

167  
åue
;

171 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
EILSEQ
)

173 i‡(!
övÆid
)

174 
	`log¥ötf
 (
LOG_VERBOSE
,

175 
	`_
("Incomplete or invalid multibyte sequenceÉncountered\n"));

177 
övÆid
++;

178 **
out
 = *
ö
;

179 
ö
++;

180 
öÀn
--;

181 (*
out
)++;

182 
ouéí
--;

184 i‡(
î∫o
 =
E2BIG
)

186 *
√w
;

188 
toosh‹t
++;

189 
d⁄e
 = 
Àn
;

190 
ouéí
 = 
d⁄e
 + 
öÀn
 * 2;

191 
√w
 = 
	`xmÆloc
 (
ouéí
 + 1);

192 
	`mem˝y
 (
√w
, 
s
, 
d⁄e
);

193 
	`x‰ì
 (
s
);

194 
s
 = 
√w
;

195 
Àn
 = 
ouéí
;

196 *
out
 = 
s
 + 
d⁄e
;

200 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Unh™dÀdÉºnÿ%d\n"), 
î∫o
);

205  
Ál£
;

206 
	}
}

211 
	$idn_ícode
 (
úi
 *
i
, *
ho°
)

213 *
√w
;

214 
ªt
;

217 i‡(!
i
->
utf8_ícode
)

219 i‡(!
	`ªmŸe_to_utf8
 (
i
, (c⁄° *Ë
ho°
, (c⁄° **Ë&
√w
))

220  
NULL
;

221 
ho°
 = 
√w
;

225 
ªt
 = 
	`id«_to_ascii_8z
 (
ho°
, &
√w
, 
IDNA_FLAGS
);

226 i‡(
ªt
 !
IDNA_SUCCESS
)

229 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("idn_ícodêÁûed (%d): %s\n"), 
ªt
,

230 
	`quŸe
 (
	`id«_°ªº‹
 (
ªt
)));

231  
NULL
;

234  
√w
;

235 
	}
}

240 
	$idn_decode
 (*
ho°
)

242 *
√w
;

243 
ªt
;

245 
ªt
 = 
	`id«_to_unicode_8zlz
 (
ho°
, &
√w
, 
IDNA_FLAGS
);

246 i‡(
ªt
 !
IDNA_SUCCESS
)

248 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("idn_decodêÁûed (%d): %s\n"), 
ªt
,

249 
	`quŸe
 (
	`id«_°ªº‹
 (
ªt
)));

250  
NULL
;

253  
√w
;

254 
	}
}

258 
boﬁ


259 
	$ªmŸe_to_utf8
 (
úi
 *
i
, c⁄° *
°r
, c⁄° **
√w
)

261 
ic⁄v_t
 
cd
;

262 
boﬁ
 
ªt
 = 
Ál£
;

264 i‡(!
i
->
uri_ícodög
)

265  
Ál£
;

270 i‡(!
	`°rcmp
 (
i
->
uri_ícodög
, "UTF-8"))

272 
i
, 
Àn
 = 
	`°æí
 (
°r
);

273 
i
 = 0; i < 
Àn
; i++)

274 i‡((Ë
°r
[
i
] >= () '\200')

276 *
√w
 = 
	`°rdup
 (
°r
);

277  
åue
;

279  
Ál£
;

282 
cd
 = 
	`ic⁄v_›í
 ("UTF-8", 
i
->
uri_ícodög
);

283 i‡(
cd
 =(
ic⁄v_t
)(-1))

284  
Ál£
;

286 i‡(
	`do_c⁄vîsi⁄
 (
cd
, (*Ë
°r
, 
	`°æí
 ((*Ë°r), (**Ë
√w
))

287 
ªt
 = 
åue
;

289 
	`ic⁄v_˛o£
 (
cd
);

292 i‡(!
	`°rcmp
 (
°r
, *
√w
))

294 
	`x‰ì
 ((*Ë*
√w
);

295  
Ál£
;

298  
ªt
;

299 
	}
}

302 
úi
 *

303 
	$úi_√w
 ()

305 
úi
 *
i
 = 
	`xmÆloc
 ( *i);

306 
i
->
uri_ícodög
 = 
›t
.
ícodög_ªmŸe
 ? 
	`x°rdup
 (›t.ícodög_ªmŸeË: 
NULL
;

307 
i
->
c⁄ã¡_ícodög
 = 
NULL
;

308 
i
->
‹ig_uæ
 = 
NULL
;

309 
i
->
utf8_ícode
 = 
›t
.
íabÀ_úi
;

310  
i
;

311 
	}
}

313 
úi
 *
	$úi_dup
 (c⁄° 
úi
 *
§c
)

315 
úi
 *
i
 = 
	`xmÆloc
 ( *i);

316 
i
->
uri_ícodög
 = 
§c
->uri_ícodög ? 
	`x°rdup
 (§c->uri_ícodögË: 
NULL
;

317 
i
->
c⁄ã¡_ícodög
 = (
§c
->content_encoding ?

318 
	`x°rdup
 (
§c
->
c⁄ã¡_ícodög
Ë: 
NULL
);

319 
i
->
‹ig_uæ
 = 
§c
->‹ig_uæ ? 
	`x°rdup
 (§c->‹ig_uæË: 
NULL
;

320 
i
->
utf8_ícode
 = 
§c
->utf8_encode;

321  
i
;

322 
	}
}

326 
	$úi_‰ì
 (
úi
 *
i
)

328 
	`x‰ì_nuŒ
 (
i
->
uri_ícodög
);

329 
	`x‰ì_nuŒ
 (
i
->
c⁄ã¡_ícodög
);

330 
	`x‰ì_nuŒ
 (
i
->
‹ig_uæ
);

331 
	`x‰ì
 (
i
);

332 
	}
}

337 
	$£t_uri_ícodög
 (
úi
 *
i
, *
ch¨£t
, 
boﬁ
 
f‹˚
)

339 
	`DEBUGP
 (("URIÉncodög = %s\n", 
ch¨£t
 ? 
	`quŸe
 (charset) : "None"));

340 i‡(!
f‹˚
 && 
›t
.
ícodög_ªmŸe
)

342 i‡(
i
->
uri_ícodög
)

344 i‡(
ch¨£t
 && !
	`°rˇ£cmp
 (
i
->
uri_ícodög
, charset))

346 
	`x‰ì
 (
i
->
uri_ícodög
);

349 
i
->
uri_ícodög
 = 
ch¨£t
 ? 
	`x°rdup
 (ch¨£tË: 
NULL
;

350 
	}
}

354 
	$£t_c⁄ã¡_ícodög
 (
úi
 *
i
, *
ch¨£t
)

356 
	`DEBUGP
 (("URI c⁄ã¡Éncodög = %s\n", 
ch¨£t
 ? 
	`quŸe
 (charset) : "None"));

357 i‡(
›t
.
ícodög_ªmŸe
)

359 i‡(
i
->
c⁄ã¡_ícodög
)

361 i‡(
ch¨£t
 && !
	`°rˇ£cmp
 (
i
->
c⁄ã¡_ícodög
, charset))

363 
	`x‰ì
 (
i
->
c⁄ã¡_ícodög
);

366 
i
->
c⁄ã¡_ícodög
 = 
ch¨£t
 ? 
	`x°rdup
 (ch¨£tË: 
NULL
;

367 
	}
}

	@src/iri.h

30 #i‚de‡
IRI_H


31 
	#IRI_H


	)

33 
	súi
 {

34 *
	muri_ícodög
;

35 *
	mc⁄ã¡_ícodög
;

36 *
	m‹ig_uæ
;

37 
boﬁ
 
	mutf8_ícode
;

40 #ifde‡
ENABLE_IRI


42 *
∑r£_ch¨£t
 (*
°r
);

43 *
föd_loˇÀ
 ();

44 
boﬁ
 
check_ícodög_«me
 (*
ícodög
);

45 c⁄° *
loˇÀ_to_utf8
 (c⁄° *
°r
);

46 *
idn_ícode
 (
úi
 *
i
, *
ho°
);

47 *
idn_decode
 (*
ho°
);

48 
boﬁ
 
ªmŸe_to_utf8
 (
úi
 *
i
, c⁄° *
°r
, c⁄° **
√w
);

49 
úi
 *
úi_√w
 ();

50 
úi
 *
úi_dup
 (const iri *);

51 
úi_‰ì
 (
úi
 *
i
);

52 
£t_uri_ícodög
 (
úi
 *
i
, *
ch¨£t
, 
boﬁ
 
f‹˚
);

53 
£t_c⁄ã¡_ícodög
 (
úi
 *
i
, *
ch¨£t
);

57 
úi
 
dummy_úi
;

59 
	#∑r£_ch¨£t
(
°r
Ë(°r, 
NULL
)

	)

60 
	#föd_loˇÀ
(Ë
NULL


	)

61 
	#check_ícodög_«me
(
°r
Ë
Ál£


	)

62 
	#loˇÀ_to_utf8
(
°r
Ë(°r)

	)

63 
	#idn_ícode
(
a
,
b
Ë
NULL


	)

64 
	#idn_decode
(
°r
Ë
NULL


	)

65 
	#ªmŸe_to_utf8
(
a
,
b
,
c
Ë
Ál£


	)

66 
	#úi_√w
(Ë(&
dummy_úi
)

	)

67 
	#úi_dup
(
a
Ë(&
dummy_úi
)

	)

68 
	#úi_‰ì
(
a
)

	)

69 
	#£t_uri_ícodög
(
a
,
b
,
c
)

	)

70 
	#£t_c⁄ã¡_ícodög
(
a
,
b
)

	)

	@src/log.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

36 
	~<°d¨g.h
>

37 
	~<uni°d.h
>

38 
	~<as£π.h
>

39 
	~<î∫o.h
>

41 
	~"utûs.h
"

42 
	~"log.h
"

51 #ifde‡
__VMS


52 
	#FPUTS
–
s
, 
f
Ë
	`Ârötf
–(f), "%s", (s))

	)

54 
	#FPUTS
–
s
, 
f
Ë
	`Âuts
–(s), (f))

	)

80 
FILE
 *
	glogÂ
;

84 
boﬁ
 
	göhibô_loggög
;

87 
boﬁ
 
	gßve_c⁄ãxt_p
;

90 
boﬁ
 
	gÊush_log_p
 = 
åue
;

93 
boﬁ
 
	g√eds_Êushög
;

101 
	#SAVED_LOG_LINES
 24

	)

117 
	#STATIC_LENGTH
 128

	)

119 
	slog_ 
 {

120 
	m°©ic_löe
[
STATIC_LENGTH
 + 1];

122 *
	mmÆlo˚d_löe
;

124 *
	mc⁄ã¡
;

128 } 
	glog_löes
[
SAVED_LOG_LINES
];

131 
	glog_löe_cuºít
 = -1;

137 
boﬁ
 
	gåaûög_löe
;

139 
check_ªdúe˘_ouçut
 ();

141 
	#ROT_ADVANCE
(
num
) do { \

142 i‡(++
num
 >
SAVED_LOG_LINES
) \

143 
num
 = 0; \

144 } 0)

	)

151 
	$‰ì_log_löe
 (
num
)

153 
log_ 
 *
 
 = 
log_löes
 + 
num
;

154 i‡(
 
->
mÆlo˚d_löe
)

156 
	`x‰ì
 (
 
->
mÆlo˚d_löe
);

157 
 
->
mÆlo˚d_löe
 = 
NULL
;

159 
 
->
c⁄ã¡
 = 
NULL
;

160 
	}
}

167 
	$ßved_≠≥nd_1
 (c⁄° *
°¨t
, c⁄° *
íd
)

169 
Àn
 = 
íd
 - 
°¨t
;

170 i‡(!
Àn
)

175 i‡(!
åaûög_löe
)

178 
log_ 
 *
 
;

180 i‡(
log_löe_cuºít
 == -1)

181 
log_löe_cuºít
 = 0;

183 
	`‰ì_log_löe
 (
log_löe_cuºít
);

184 
 
 = 
log_löes
 + 
log_löe_cuºít
;

185 i‡(
Àn
 > 
STATIC_LENGTH
)

187 
 
->
mÆlo˚d_löe
 = 
	`°rdupdñim
 (
°¨t
, 
íd
);

188 
 
->
c⁄ã¡
 =Ün->
mÆlo˚d_löe
;

192 
	`mem˝y
 (
 
->
°©ic_löe
, 
°¨t
, 
Àn
);

193 
 
->
°©ic_löe
[
Àn
] = '\0';

194 
 
->
c⁄ã¡
 =Ün->
°©ic_löe
;

204 
log_ 
 *
 
 = 
log_löes
 + 
log_löe_cuºít
;

205 i‡(
 
->
mÆlo˚d_löe
)

208 
ﬁd_Àn
 = 
	`°æí
 (
 
->
mÆlo˚d_löe
);

209 
 
->
mÆlo˚d_löe
 = 
	`xªÆloc
 ( ->mÆlo˚d_löe, 
ﬁd_Àn
 + 
Àn
 + 1);

210 
	`mem˝y
 (
 
->
mÆlo˚d_löe
 + 
ﬁd_Àn
, 
°¨t
, 
Àn
);

211 
 
->
mÆlo˚d_löe
[
ﬁd_Àn
 + 
Àn
] = '\0';

213 
 
->
c⁄ã¡
 =Ün->
mÆlo˚d_löe
;

217 
ﬁd_Àn
 = 
	`°æí
 (
 
->
°©ic_löe
);

218 i‡(
ﬁd_Àn
 + 
Àn
 > 
STATIC_LENGTH
)

222 
 
->
mÆlo˚d_löe
 = 
	`xmÆloc
 (
ﬁd_Àn
 + 
Àn
 + 1);

223 
	`mem˝y
 (
 
->
mÆlo˚d_löe
,Ün->
°©ic_löe
,

224 
ﬁd_Àn
);

225 
	`mem˝y
 (
 
->
mÆlo˚d_löe
 + 
ﬁd_Àn
, 
°¨t
, 
Àn
);

226 
 
->
mÆlo˚d_löe
[
ﬁd_Àn
 + 
Àn
] = '\0';

227 
 
->
c⁄ã¡
 =Ün->
mÆlo˚d_löe
;

233 
	`mem˝y
 (
 
->
°©ic_löe
 + 
ﬁd_Àn
, 
°¨t
, 
Àn
);

234 
 
->
°©ic_löe
[
ﬁd_Àn
 + 
Àn
] = '\0';

235 
 
->
c⁄ã¡
 =Ün->
°©ic_löe
;

239 
åaûög_löe
 = !(
íd
[-1] == '\n');

240 i‡(!
åaûög_löe
)

241 
	`ROT_ADVANCE
 (
log_löe_cuºít
);

242 
	}
}

250 
	$ßved_≠≥nd
 (c⁄° *
s
)

252 *
s
)

254 c⁄° *
íd
 = 
	`°rchr
 (
s
, '\n');

255 i‡(!
íd
)

256 
íd
 = 
s
 + 
	`°æí
 (s);

258 ++
íd
;

259 
	`ßved_≠≥nd_1
 (
s
, 
íd
);

260 
s
 = 
íd
;

262 
	}
}

274 
	#CHECK_VERBOSE
(
x
) \

275 
x
) \

277 
LOG_ALWAYS
: \

279 
LOG_NOTQUIET
: \

280 i‡(
›t
.
quõt
) \

283 
LOG_NONVERBOSE
: \

284 i‡(
›t
.
vîbo£
 || o±.
quõt
) \

287 
LOG_VERBOSE
: \

288 i‡(!
›t
.
vîbo£
) \

290 }

	)

298 
FILE
 *

299 
	$gë_log_Â
 ()

301 i‡(
öhibô_loggög
)

302  
NULL
;

303 i‡(
logÂ
)

304  
logÂ
;

305  
°dîr
;

306 
	}
}

312 
	$logputs
 (
log_›ti⁄s
 
o
, c⁄° *
s
)

314 
FILE
 *
Â
;

316 
	`check_ªdúe˘_ouçut
 ();

317 i‡((
Â
 = 
	`gë_log_Â
 ()Ë=
NULL
)

319 
	`CHECK_VERBOSE
 (
o
);

321 
	`FPUTS
 (
s
, 
Â
);

322 i‡(
ßve_c⁄ãxt_p
)

323 
	`ßved_≠≥nd
 (
s
);

324 i‡(
Êush_log_p
)

325 
	`logÊush
 ();

327 
√eds_Êushög
 = 
åue
;

328 
	}
}

330 
	slogv¥ötf_°©e
 {

331 *
	mbigmsg
;

332 
	mex≥˘ed_size
;

333 
	mÆloˇãd
;

350 
boﬁ


351 
	$log_v¥ötf_öã∫Æ
 (
logv¥ötf_°©e
 *
°©e
, c⁄° *
fmt
,

352 
va_li°
 
¨gs
)

354 
smÆlmsg
[128];

355 *
wrôe_±r
 = 
smÆlmsg
;

356 
avaûabÀ_size
 =  (
smÆlmsg
);

357 
numwrôãn
;

358 
FILE
 *
Â
 = 
	`gë_log_Â
 ();

360 i‡(!
ßve_c⁄ãxt_p
)

364 
	`vÂrötf
 (
Â
, 
fmt
, 
¨gs
);

365 
Êush
;

368 i‡(
°©e
->
Æloˇãd
 != 0)

370 
wrôe_±r
 = 
°©e
->
bigmsg
;

371 
avaûabÀ_size
 = 
°©e
->
Æloˇãd
;

380 
numwrôãn
 = 
	`v¢¥ötf
 (
wrôe_±r
, 
avaûabÀ_size
, 
fmt
, 
¨gs
);

390 i‡(
numwrôãn
 == -1)

394 
√wsize
 = 
avaûabÀ_size
 << 1;

395 
°©e
->
bigmsg
 = 
	`xªÆloc
 (°©e->bigmsg, 
√wsize
);

396 
°©e
->
Æloˇãd
 = 
√wsize
;

397  
Ál£
;

399 i‡(
numwrôãn
 >
avaûabÀ_size
)

403 
√wsize
 = 
numwrôãn
 + 1;

404 
°©e
->
bigmsg
 = 
	`xªÆloc
 (°©e->bigmsg, 
√wsize
);

405 
°©e
->
Æloˇãd
 = 
√wsize
;

406  
Ál£
;

410 
	`ßved_≠≥nd
 (
wrôe_±r
);

411 
	`FPUTS
 (
wrôe_±r
, 
Â
);

412 i‡(
°©e
->
bigmsg
)

413 
	`x‰ì
 (
°©e
->
bigmsg
);

415 
Êush
:

416 i‡(
Êush_log_p
)

417 
	`logÊush
 ();

419 
√eds_Êushög
 = 
åue
;

421  
åue
;

422 
	}
}

426 
	$logÊush
 ()

428 
FILE
 *
Â
 = 
	`gë_log_Â
 ();

429 i‡(
Â
)

434 #ifde‡
__VMS


435 i‡(
	`ißây
–
	`fûío
–
Â
)))

437 
	`fÊush
 (
Â
);

440 
	`fÊush
 (
Â
);

443 
√eds_Êushög
 = 
Ál£
;

444 
	}
}

448 
	$log_£t_Êush
 (
boﬁ
 
Êush
)

450 i‡(
Êush
 =
Êush_log_p
)

453 i‡(
Êush
 =
Ál£
)

456 
Êush_log_p
 = 
Ál£
;

462 i‡(
√eds_Êushög
)

463 
	`logÊush
 ();

464 
Êush_log_p
 = 
åue
;

466 
	}
}

472 
boﬁ


473 
	$log_£t_ßve_c⁄ãxt
 (
boﬁ
 
ßvï
)

475 
boﬁ
 
ﬁd
 = 
ßve_c⁄ãxt_p
;

476 
ßve_c⁄ãxt_p
 = 
ßvï
;

477  
ﬁd
;

478 
	}
}

485 
	$log¥ötf
 (
log_›ti⁄s
 
o
, c⁄° *
fmt
, ...)

487 
va_li°
 
¨gs
;

488 
logv¥ötf_°©e
 
Õ°©e
;

489 
boﬁ
 
d⁄e
;

491 
	`check_ªdúe˘_ouçut
 ();

492 i‡(
öhibô_loggög
)

494 
	`CHECK_VERBOSE
 (
o
);

496 
	`xzîo
 (
Õ°©e
);

499 
	`va_°¨t
 (
¨gs
, 
fmt
);

500 
d⁄e
 = 
	`log_v¥ötf_öã∫Æ
 (&
Õ°©e
, 
fmt
, 
¨gs
);

501 
	`va_íd
 (
¨gs
);

503 i‡(
d⁄e
 && 
î∫o
 =
EPIPE
)

504 
	`exô
 (1);

506 !
d⁄e
);

507 
	}
}

509 #ifde‡
ENABLE_DEBUG


513 
	$debug_log¥ötf
 (c⁄° *
fmt
, ...)

515 i‡(
›t
.
debug
)

517 
va_li°
 
¨gs
;

518 
logv¥ötf_°©e
 
Õ°©e
;

519 
boﬁ
 
d⁄e
;

521 
	`check_ªdúe˘_ouçut
 ();

522 i‡(
öhibô_loggög
)

525 
	`xzîo
 (
Õ°©e
);

528 
	`va_°¨t
 (
¨gs
, 
fmt
);

529 
d⁄e
 = 
	`log_v¥ötf_öã∫Æ
 (&
Õ°©e
, 
fmt
, 
¨gs
);

530 
	`va_íd
 (
¨gs
);

532 !
d⁄e
);

534 
	}
}

540 
	$log_öô
 (c⁄° *
fûe
, 
boﬁ
 
≠≥ndp
)

542 i‡(
fûe
)

544 
logÂ
 = 
	`f›í
 (
fûe
, 
≠≥ndp
 ? "a" : "w");

545 i‡(!
logÂ
)

547 
	`Ârötf
 (
°dîr
, "%s: %s: %s\n", 
exec_«me
, 
fûe
, 
	`°ªº‹
 (
î∫o
));

548 
	`exô
 (1);

559 
logÂ
 = 
°dîr
;

562 #ifde‡
HAVE_ISATTY


563 && 
	`ißây
 (
	`fûío
 (
logÂ
))

571 
ßve_c⁄ãxt_p
 = 
åue
;

574 
	}
}

579 
	$log_˛o£
 ()

581 
i
;

583 i‡(
logÂ
)

584 
	`f˛o£
 (
logÂ
);

585 
logÂ
 = 
NULL
;

586 
öhibô_loggög
 = 
åue
;

587 
ßve_c⁄ãxt_p
 = 
Ál£
;

589 
i
 = 0; i < 
SAVED_LOG_LINES
; i++)

590 
	`‰ì_log_löe
 (
i
);

591 
log_löe_cuºít
 = -1;

592 
åaûög_löe
 = 
Ál£
;

593 
	}
}

597 
	$log_dump_c⁄ãxt
 ()

599 
num
 = 
log_löe_cuºít
;

600 
FILE
 *
Â
 = 
	`gë_log_Â
 ();

601 i‡(!
Â
)

604 i‡(
num
 == -1)

606 i‡(
åaûög_löe
)

607 
	`ROT_ADVANCE
 (
num
);

610 
log_ 
 *
 
 = 
log_löes
 + 
num
;

611 i‡(
 
->
c⁄ã¡
)

612 
	`FPUTS
 (
 
->
c⁄ã¡
, 
Â
);

613 
	`ROT_ADVANCE
 (
num
);

615 
num
 !
log_löe_cuºít
);

616 i‡(
åaûög_löe
)

617 i‡(
log_löes
[
log_löe_cuºít
].
c⁄ã¡
)

618 
	`FPUTS
 (
log_löes
[
log_löe_cuºít
].
c⁄ã¡
, 
Â
);

619 
	`fÊush
 (
Â
);

620 
	}
}

628 
	$cou¡_n⁄¥öt
 (c⁄° *
sour˚
)

630 c⁄° *
p
;

631 
˙t
;

632 
p
 = 
sour˚
, 
˙t
 = 0; *p;Ö++)

633 i‡(!
	`c_i•röt
 (*
p
))

634 ++
˙t
;

635  
˙t
;

636 
	}
}

662 
	$c›y_™d_esˇ≥
 (c⁄° *
sour˚
, *
de°
, 
esˇ≥
, 
ba£
)

664 c⁄° *
‰om
 = 
sour˚
;

665 *
to
 = 
de°
;

666 
c
;

669 
ba£
)

672 (
c
 = *
‰om
++) != '\0')

673 i‡(
	`c_i•röt
 (
c
))

674 *
to
++ = 
c
;

677 *
to
++ = 
esˇ≥
;

678 *
to
++ = '0' + (
c
 >> 6);

679 *
to
++ = '0' + ((
c
 >> 3) & 7);

680 *
to
++ = '0' + (
c
 & 7);

684 (
c
 = *
‰om
++) != '\0')

685 i‡(
	`c_i•röt
 (
c
))

686 *
to
++ = 
c
;

689 *
to
++ = 
esˇ≥
;

690 *
to
++ = 
	`XNUM_TO_DIGIT
 (
c
 >> 4);

691 *
to
++ = 
	`XNUM_TO_DIGIT
 (
c
 & 0xf);

695 
	`ab‹t
 ();

697 *
to
 = '\0';

698 
	}
}

700 
	#RING_SIZE
 3

	)

701 
	srögñ
 {

702 *
	mbuf„r
;

703 
	msize
;

705 
rögñ
 
	grög
[
RING_SIZE
];

708 
	$es˙⁄¥öt_öã∫Æ
 (c⁄° *
°r
, 
esˇ≥
, 
ba£
)

710 
rögpos
;

711 
≈r˙t
;

713 
	`as£π
 (
ba£
 == 8 || base == 16);

715 
≈r˙t
 = 
	`cou¡_n⁄¥öt
 (
°r
);

716 i‡(
≈r˙t
 == 0)

719  
°r
;

724 
rögñ
 *
r
 = 
rög
 + 
rögpos
;

730 
√eded_size
 = 
	`°æí
 (
°r
Ë+ 1 + (
ba£
 =8 ? 3 * 
≈r˙t
 : 2 *Çprcnt);

734 i‡(
r
->
buf„r
 =
NULL
 ||Ñ->
size
 < 
√eded_size
)

736 
r
->
buf„r
 = 
	`xªÆloc
 (r->buf„r, 
√eded_size
);

737 
r
->
size
 = 
√eded_size
;

740 
	`c›y_™d_esˇ≥
 (
°r
, 
r
->
buf„r
, 
esˇ≥
, 
ba£
);

741 
rögpos
 = (rögpo†+ 1Ë% 
RING_SIZE
;

742  
r
->
buf„r
;

744 
	}
}

771 
	$es˙⁄¥öt
 (c⁄° *
°r
)

773  
	`es˙⁄¥öt_öã∫Æ
 (
°r
, '\\', 8);

774 
	}
}

783 
	$es˙⁄¥öt_uri
 (c⁄° *
°r
)

785  
	`es˙⁄¥öt_öã∫Æ
 (
°r
, '%', 16);

786 
	}
}

789 
	$log_˛ónup
 ()

791 
size_t
 
i
;

792 
i
 = 0; i < 
	`cou¡of
 (
rög
); i++)

793 
	`x‰ì_nuŒ
 (
rög
[
i
].
buf„r
);

794 
	}
}

798 íum { 
	mRR_NONE
, 
	mRR_REQUESTED
, 
	mRR_DONE
 } 
	gªdúe˘_ªque°
 = 
RR_NONE
;

799 c⁄° *
	gªdúe˘_ªque°_sig«l_«me
;

804 
	$ªdúe˘_ouçut
 ()

806 *
logfûe
;

807 
logÂ
 = 
	`unique_¸óã
 (
DEFAULT_LOGFILE
, 
Ál£
, &
logfûe
);

808 i‡(
logÂ
)

810 
	`Ârötf
 (
°dîr
, 
	`_
("\n%sÑeceived,Ñedirecting outputÅo %s.\n"),

811 
ªdúe˘_ªque°_sig«l_«me
, 
	`quŸe
 (
logfûe
));

812 
	`x‰ì
 (
logfûe
);

814 
	`log_dump_c⁄ãxt
 ();

820 
	`Ârötf
 (
°dîr
, 
	`_
("\n%†ª˚ived.\n"), 
ªdúe˘_ªque°_sig«l_«me
);

821 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s; disablingÜogging.\n"),

822 
logfûe
, 
	`°ªº‹
 (
î∫o
));

823 
öhibô_loggög
 = 
åue
;

825 
ßve_c⁄ãxt_p
 = 
Ál£
;

826 
	}
}

832 
	$check_ªdúe˘_ouçut
 ()

834 i‡(
ªdúe˘_ªque°
 =
RR_REQUESTED
)

836 
ªdúe˘_ªque°
 = 
RR_DONE
;

837 
	`ªdúe˘_ouçut
 ();

839 
	}
}

845 
	$log_ªque°_ªdúe˘_ouçut
 (c⁄° *
sig«l_«me
)

847 i‡(
ªdúe˘_ªque°
 =
RR_NONE
 && 
ßve_c⁄ãxt_p
)

851 
ªdúe˘_ªque°
 = 
RR_REQUESTED
;

852 
ªdúe˘_ªque°_sig«l_«me
 = 
sig«l_«me
;

853 
	}
}

	@src/log.h

31 #i‚de‡
LOG_H


32 
	#LOG_H


	)

35 
	#DEFAULT_LOGFILE
 "wgë-log"

	)

37 
	elog_›ti⁄s
 { 
	mLOG_VERBOSE
, 
	mLOG_NOTQUIET
, 
	mLOG_NONVERBOSE
, 
	mLOG_ALWAYS
 };

39 
	$log¥ötf
 (
log_›ti⁄s
, const *, ...)

40 
	`GCC_FORMAT_ATTR
 (2, 3);

41 
	$debug_log¥ötf
 (c⁄° *, ...Ë
	`GCC_FORMAT_ATTR
 (1, 2);

42 
	`logputs
 (
log_›ti⁄s
, const *);

43 
	`logÊush
 ();

44 
	`log_£t_Êush
 (
boﬁ
);

45 
boﬁ
 
	`log_£t_ßve_c⁄ãxt
 (bool);

47 
	`log_öô
 (c⁄° *, 
boﬁ
);

48 
	`log_˛o£
 ();

49 
	`log_˛ónup
 ();

50 
	`log_ªque°_ªdúe˘_ouçut
 (const *);

52 c⁄° *
	`es˙⁄¥öt
 (const *);

53 c⁄° *
	`es˙⁄¥öt_uri
 (const *);

	@src/main.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~<sig«l.h
>

39 #ifde‡
ENABLE_NLS


40 
	~<loˇÀ.h
>

42 
	~<as£π.h
>

43 
	~<î∫o.h
>

44 
	~<time.h
>

46 
	~"exôs.h
"

47 
	~"utûs.h
"

48 
	~"öô.h
"

49 
	~"ªå.h
"

50 
	~"ªcur.h
"

51 
	~"ho°.h
"

52 
	~"uæ.h
"

53 
	~"¥ogªss.h
"

54 
	~"c⁄vît.h
"

55 
	~"•idî.h
"

56 
	~"hâp.h
"

57 
	~"±imî.h
"

59 
	~<gë›t.h
>

60 
	~<gë∑ss.h
>

61 
	~<quŸe.h
>

63 #ifde‡
WINDOWS


64 
	~<io.h
>

65 
	~<f˙é.h
>

68 #ifde‡
__VMS


69 
	~"vms.h
"

72 #i‚de‡
PATH_SEPARATOR


73 
	#PATH_SEPARATOR
 '/'

	)

76 #i‚de‡
ENABLE_IRI


77 
úi
 
	gdummy_úi
;

80 
›ti⁄s
 
	g›t
;

83 *
vîsi⁄_°rög
;

84 *
compû©i⁄_°rög
;

85 *
sy°em_gërc
;

86 *
lök_°rög
;

88 c⁄° *
compûed_„©uªs
[];

90 
	#MAX_CHARS_PER_LINE
 72

	)

91 
	#TABULATION
 4

	)

93 #i‡
deföed
(
SIGHUP
Ë|| deföed(
SIGUSR1
)

94 
ªdúe˘_ouçut_sig«l
 ();

97 c⁄° *
	gexec_«me
;

100 
	gnumuæs
 = 0;

102 #i‚de‡
TESTING


108 
	$i18n_öôülize
 ()

111 #ifde‡
ENABLE_NLS


113 
	`£éoˇÀ
 (
LC_ALL
, "");

115 
	`bödãxtdomaö
 ("wgë", 
LOCALEDIR
);

116 
	`ãxtdomaö
 ("wget");

118 
	}
}

122 
¥öt_hñp
 ();

123 
¥öt_vîsi⁄
 ();

125 #ifde‡
HAVE_SSL


126 
	#IF_SSL
(
x
Ë
	)
x

128 
	#IF_SSL
(
x
Ë
NULL


	)

131 #ifde‡
ENABLE_DEBUG


132 
	#WHEN_DEBUG
(
x
Ë
	)
x

134 
	#WHEN_DEBUG
(
x
Ë
NULL


	)

137 
	scmdlöe_›ti⁄
 {

138 c⁄° *
	ml⁄g_«me
;

139 
	msh‹t_«me
;

141 
	mOPT_VALUE
,

142 
	mOPT_BOOLEAN
,

143 
	mOPT_FUNCALL
,

146 
	mOPT__APPEND_OUTPUT
,

147 
	mOPT__CLOBBER
,

148 
	mOPT__DONT_REMOVE_LISTING
,

149 
	mOPT__EXECUTE
,

150 
	mOPT__NO
,

151 
	mOPT__PARENT


152 } 
	mty≥
;

153 c⁄° *
	md©a
;

154 
	m¨gty≥
;

157 
cmdlöe_›ti⁄
 
	g›ti⁄_d©a
[] =

159 { "ac˚±", 'A', 
OPT_VALUE
, "accept", -1 },

160 { "adju°-exãnsi⁄", 'E', 
OPT_BOOLEAN
, "adjustextension", -1 },

161 { "≠≥nd-ouçut", 'a', 
OPT__APPEND_OUTPUT
, 
NULL
, 
ªquúed_¨gumít
 },

162 { "ask-∑ssw‹d", 0, 
OPT_BOOLEAN
, "askpassword", -1 },

163 { "auth-no-chÆÀnge", 0, 
OPT_BOOLEAN
, "authnochallenge", -1 },

164 { "background", 'b', 
OPT_BOOLEAN
, "background", -1 },

165 { "backup-c⁄vîãd", 'K', 
OPT_BOOLEAN
, "backupconverted", -1 },

166 { "backups", 0, 
OPT_BOOLEAN
, "backups", -1 },

167 { "ba£", 'B', 
OPT_VALUE
, "base", -1 },

168 { "böd-addªss", 0, 
OPT_VALUE
, "bindaddress", -1 },

169 { 
IF_SSL
 ("ˇ-˚πifiˇã"), 0, 
OPT_VALUE
, "cacertificate", -1 },

170 { 
IF_SSL
 ("ˇ-dúe˘‹y"), 0, 
OPT_VALUE
, "cadirectory", -1 },

171 { "ˇche", 0, 
OPT_BOOLEAN
, "cache", -1 },

172 { 
IF_SSL
 ("˚πifiˇã"), 0, 
OPT_VALUE
, "certificate", -1 },

173 { 
IF_SSL
 ("˚πifiˇã-ty≥"), 0, 
OPT_VALUE
, "certificatetype", -1 },

174 { 
IF_SSL
 ("check-˚πifiˇã"), 0, 
OPT_BOOLEAN
, "checkcertificate", -1 },

175 { "˛obbî", 0, 
OPT__CLOBBER
, 
NULL
, 
›ti⁄Æ_¨gumít
 },

176 { "c⁄fig", 0, 
OPT_VALUE
, "chooseconfig", -1 },

177 { "c⁄√˘-timeout", 0, 
OPT_VALUE
, "connecttimeout", -1 },

178 { "c⁄töue", 'c', 
OPT_BOOLEAN
, "continue", -1 },

179 { "c⁄vît-löks", 'k', 
OPT_BOOLEAN
, "convertlinks", -1 },

180 { "c⁄ã¡-di•osôi⁄", 0, 
OPT_BOOLEAN
, "contentdisposition", -1 },

181 { "cookõs", 0, 
OPT_BOOLEAN
, "cookies", -1 },

182 { "cut-dús", 0, 
OPT_VALUE
, "cutdirs", -1 },

183 { 
WHEN_DEBUG
 ("debug"), 'd', 
OPT_BOOLEAN
, "debug", -1 },

184 { "deÁu…-∑ge", 0, 
OPT_VALUE
, "defaultpage", -1 },

185 { "dñëe-a·î", 0, 
OPT_BOOLEAN
, "deleteafter", -1 },

186 { "dúe˘‹õs", 0, 
OPT_BOOLEAN
, "dirstruct", -1 },

187 { "dúe˘‹y-¥efix", 'P', 
OPT_VALUE
, "dirprefix", -1 },

188 { "dns-ˇche", 0, 
OPT_BOOLEAN
, "dnscache", -1 },

189 { "dns-timeout", 0, 
OPT_VALUE
, "dnstimeout", -1 },

190 { "domaös", 'D', 
OPT_VALUE
, "domains", -1 },

191 { "d⁄t-ªmove-li°ög", 0, 
OPT__DONT_REMOVE_LISTING
, 
NULL
, 
no_¨gumít
 },

192 { "dŸ-°yÀ", 0, 
OPT_VALUE
, "dotstyle", -1 },

193 { "egd-fûe", 0, 
OPT_VALUE
, "egdfile", -1 },

194 { "ex˛ude-dúe˘‹õs", 'X', 
OPT_VALUE
, "excludedirectories", -1 },

195 { "ex˛ude-domaös", 0, 
OPT_VALUE
, "excludedomains", -1 },

196 { "execuã", 'e', 
OPT__EXECUTE
, 
NULL
, 
ªquúed_¨gumít
 },

197 { "fﬁlow-·p", 0, 
OPT_BOOLEAN
, "followftp", -1 },

198 { "fﬁlow-ègs", 0, 
OPT_VALUE
, "followtags", -1 },

199 { "f‹˚-dúe˘‹õs", 'x', 
OPT_BOOLEAN
, "dirstruct", -1 },

200 { "f‹˚-html", 'F', 
OPT_BOOLEAN
, "forcehtml", -1 },

201 { "·p-∑ssw‹d", 0, 
OPT_VALUE
, "ftppassword", -1 },

202 #ifde‡
__VMS


203 { "·p-°mlf", 0, 
OPT_BOOLEAN
, "ftpstmlf", -1 },

205 { "·p-u£r", 0, 
OPT_VALUE
, "ftpuser", -1 },

206 { "glob", 0, 
OPT_BOOLEAN
, "glob", -1 },

207 { "hódî", 0, 
OPT_VALUE
, "header", -1 },

208 { "hñp", 'h', 
OPT_FUNCALL
, (*)
¥öt_hñp
, 
no_¨gumít
 },

209 { "ho°-dúe˘‹õs", 0, 
OPT_BOOLEAN
, "addhostdir", -1 },

210 { "html-exãnsi⁄", 'E', 
OPT_BOOLEAN
, "adjustextension", -1 },

211 { "htmlify", 0, 
OPT_BOOLEAN
, "htmlify", -1 },

212 { "hâp-kìp-Æive", 0, 
OPT_BOOLEAN
, "httpkeepalive", -1 },

213 { "hâp-∑sswd", 0, 
OPT_VALUE
, "httppassword", -1 },

214 { "hâp-∑ssw‹d", 0, 
OPT_VALUE
, "httppassword", -1 },

215 { "hâp-u£r", 0, 
OPT_VALUE
, "httpuser", -1 },

216 { "ign‹e-ˇ£", 0, 
OPT_BOOLEAN
, "ignorecase", -1 },

217 { "ign‹e-Àngth", 0, 
OPT_BOOLEAN
, "ignorelength", -1 },

218 { "ign‹e-ègs", 0, 
OPT_VALUE
, "ignoretags", -1 },

219 { "ö˛ude-dúe˘‹õs", 'I', 
OPT_VALUE
, "includedirectories", -1 },

220 #ifde‡
ENABLE_IPV6


221 { "öë4-⁄ly", '4', 
OPT_BOOLEAN
, "inet4only", -1 },

222 { "öë6-⁄ly", '6', 
OPT_BOOLEAN
, "inet6only", -1 },

224 { "öput-fûe", 'i', 
OPT_VALUE
, "input", -1 },

225 { "úi", 0, 
OPT_BOOLEAN
, "iri", -1 },

226 { "kìp-£ssi⁄-cookõs", 0, 
OPT_BOOLEAN
, "keepsessioncookies", -1 },

227 { "Àvñ", 'l', 
OPT_VALUE
, "reclevel", -1 },

228 { "limô-øã", 0, 
OPT_VALUE
, "limitrate", -1 },

229 { "lﬂd-cookõs", 0, 
OPT_VALUE
, "loadcookies", -1 },

230 { "loˇl-ícodög", 0, 
OPT_VALUE
, "localencoding", -1 },

231 { "max-ªdúe˘", 0, 
OPT_VALUE
, "maxredirect", -1 },

232 { "múr‹", 'm', 
OPT_BOOLEAN
, "mirror", -1 },

233 { "no", 'n', 
OPT__NO
, 
NULL
, 
ªquúed_¨gumít
 },

234 { "no-˛obbî", 0, 
OPT_BOOLEAN
, "noclobber", -1 },

235 { "no-∑ª¡", 0, 
OPT_BOOLEAN
, "noparent", -1 },

236 { "ouçut-documít", 'O', 
OPT_VALUE
, "outputdocument", -1 },

237 { "ouçut-fûe", 'o', 
OPT_VALUE
, "logfile", -1 },

238 { "∑ge-ªquisôes", 'p', 
OPT_BOOLEAN
, "pagerequisites", -1 },

239 { "∑ª¡", 0, 
OPT__PARENT
, 
NULL
, 
›ti⁄Æ_¨gumít
 },

240 { "∑ssive-·p", 0, 
OPT_BOOLEAN
, "passiveftp", -1 },

241 { "∑ssw‹d", 0, 
OPT_VALUE
, "password", -1 },

242 { "po°-d©a", 0, 
OPT_VALUE
, "postdata", -1 },

243 { "po°-fûe", 0, 
OPT_VALUE
, "postfile", -1 },

244 { "¥e„r-Ámûy", 0, 
OPT_VALUE
, "preferfamily", -1 },

245 { "¥e£rve-≥rmissi⁄s", 0, 
OPT_BOOLEAN
, "preservepermissions", -1 },

246 { 
IF_SSL
 ("¥iv©e-key"), 0, 
OPT_VALUE
, "privatekey", -1 },

247 { 
IF_SSL
 ("¥iv©e-key-ty≥"), 0, 
OPT_VALUE
, "privatekeytype", -1 },

248 { "¥ogªss", 0, 
OPT_VALUE
, "progress", -1 },

249 { "¥Ÿocﬁ-dúe˘‹õs", 0, 
OPT_BOOLEAN
, "protocoldirectories", -1 },

250 { "¥oxy", 0, 
OPT_BOOLEAN
, "useproxy", -1 },

251 { "¥oxy__com∑t", 'Y', 
OPT_VALUE
, "useproxy", -1 },

252 { "¥oxy-∑sswd", 0, 
OPT_VALUE
, "proxypassword", -1 },

253 { "¥oxy-∑ssw‹d", 0, 
OPT_VALUE
, "proxypassword", -1 },

254 { "¥oxy-u£r", 0, 
OPT_VALUE
, "proxyuser", -1 },

255 { "quõt", 'q', 
OPT_BOOLEAN
, "quiet", -1 },

256 { "quŸa", 'Q', 
OPT_VALUE
, "quota", -1 },

257 { "øndom-fûe", 0, 
OPT_VALUE
, "randomfile", -1 },

258 { "øndom-waô", 0, 
OPT_BOOLEAN
, "randomwait", -1 },

259 { "ªad-timeout", 0, 
OPT_VALUE
, "readtimeout", -1 },

260 { "ªcursive", 'r', 
OPT_BOOLEAN
, "recursive", -1 },

261 { "ª„ªr", 0, 
OPT_VALUE
, "referer", -1 },

262 { "ªje˘", 'R', 
OPT_VALUE
, "reject", -1 },

263 { "ªœtive", 'L', 
OPT_BOOLEAN
, "relativeonly", -1 },

264 { "ªmŸe-ícodög", 0, 
OPT_VALUE
, "remoteencoding", -1 },

265 { "ªmove-li°ög", 0, 
OPT_BOOLEAN
, "removelisting", -1 },

266 { "ª°ri˘-fûe-«mes", 0, 
OPT_BOOLEAN
, "restrictfilenames", -1 },

267 { "ªå-symlöks", 0, 
OPT_BOOLEAN
, "retrsymlinks", -1 },

268 { "ªåy-c⁄ƒefu£d", 0, 
OPT_BOOLEAN
, "retryconnrefused", -1 },

269 { "ßve-cookõs", 0, 
OPT_VALUE
, "savecookies", -1 },

270 { "ßve-hódîs", 0, 
OPT_BOOLEAN
, "saveheaders", -1 },

271 { 
IF_SSL
 ("£cuª-¥Ÿocﬁ"), 0, 
OPT_VALUE
, "secureprotocol", -1 },

272 { "£rvî-ª•⁄£", 'S', 
OPT_BOOLEAN
, "serverresponse", -1 },

273 { "•™-ho°s", 'H', 
OPT_BOOLEAN
, "spanhosts", -1 },

274 { "•idî", 0, 
OPT_BOOLEAN
, "spider", -1 },

275 { "°ri˘-commíts", 0, 
OPT_BOOLEAN
, "strictcomments", -1 },

276 { "timeout", 'T', 
OPT_VALUE
, "timeout", -1 },

277 { "time°ampög", 'N', 
OPT_BOOLEAN
, "timestamping", -1 },

278 { "åõs", 't', 
OPT_VALUE
, "tries", -1 },

279 { "u∆ök", 0, 
OPT_BOOLEAN
, "unlink", -1 },

280 { "åu°-£rvî-«mes", 0, 
OPT_BOOLEAN
, "trustservernames", -1 },

281 { "u£-£rvî-time°amps", 0, 
OPT_BOOLEAN
, "useservertimestamps", -1 },

282 { "u£r", 0, 
OPT_VALUE
, "user", -1 },

283 { "u£r-agít", 'U', 
OPT_VALUE
, "useragent", -1 },

284 { "vîbo£", 'v', 
OPT_BOOLEAN
, "verbose", -1 },

285 { "vîbo£", 0, 
OPT_BOOLEAN
, "verbose", -1 },

286 { "vîsi⁄", 'V', 
OPT_FUNCALL
, (*Ë
¥öt_vîsi⁄
, 
no_¨gumít
 },

287 { "waô", 'w', 
OPT_VALUE
, "wait", -1 },

288 { "waôªåy", 0, 
OPT_VALUE
, "waitretry", -1 },

289 #ifde‡
USE_WATT32


290 { "wdebug", 0, 
OPT_BOOLEAN
, "wdebug", -1 },

294 #unde‡
WHEN_DEBUG


295 #unde‡
IF_SSL


302 
	$no_¥efix
 (c⁄° *
s
)

304 
buf„r
[1024];

305 *
p
 = 
buf„r
;

307 *
˝
 = 
p
;

308 
size
 = 3 + 
	`°æí
 (
s
) + 1;

309 i‡(
p
 + 
size
 >
buf„r
 +  (buffer))

310 
	`ab‹t
 ();

312 
˝
[0] = 'n', cp[1] = 'o', cp[2] = '-';

313 
	`°r˝y
 (
˝
 + 3, 
s
);

314 
p
 +
size
;

315  
˝
;

316 
	}
}

319 
›ti⁄
 
	gl⁄g_›ti⁄s
[2 * 
cou¡of
 (
›ti⁄_d©a
) + 1];

320 
	gsh‹t_›ti⁄s
[128];

323 
	g›tm≠
[96];

326 
	#BOOLEAN_NEG_MARKER
 1024

	)

332 
	$öô_swôches
 ()

334 *
p
 = 
sh‹t_›ti⁄s
;

335 
size_t
 
i
, 
o
 = 0;

336 
i
 = 0; i < 
	`cou¡of
 (
›ti⁄_d©a
); i++)

338 
cmdlöe_›ti⁄
 *
›t
 = &
›ti⁄_d©a
[
i
];

339 
›ti⁄
 *
l⁄g›t
;

341 i‡(!
›t
->
l⁄g_«me
)

345 
l⁄g›t
 = &
l⁄g_›ti⁄s
[
o
++];

346 
l⁄g›t
->
«me
 = 
›t
->
l⁄g_«me
;

347 
l⁄g›t
->
vÆ
 = 
i
;

348 i‡(
›t
->
sh‹t_«me
)

350 *
p
++ = 
›t
->
sh‹t_«me
;

351 
›tm≠
[
›t
->
sh‹t_«me
 - 32] = 
l⁄g›t
 - 
l⁄g_›ti⁄s
;

353 
›t
->
ty≥
)

355 
OPT_VALUE
:

356 
l⁄g›t
->
has_¨g
 = 
ªquúed_¨gumít
;

357 i‡(
›t
->
sh‹t_«me
)

358 *
p
++ = ':';

360 
OPT_BOOLEAN
:

366 
l⁄g›t
->
has_¨g
 = 
›ti⁄Æ_¨gumít
;

370 
l⁄g›t
 = &
l⁄g_›ti⁄s
[
o
++];

371 
l⁄g›t
->
«me
 = 
	`no_¥efix
 (
›t
->
l⁄g_«me
);

372 
l⁄g›t
->
has_¨g
 = 
no_¨gumít
;

375 
l⁄g›t
->
vÆ
 = 
i
 | 
BOOLEAN_NEG_MARKER
;

378 
	`as£π
 (
›t
->
¨gty≥
 != -1);

379 
l⁄g›t
->
has_¨g
 = 
›t
->
¨gty≥
;

380 i‡(
›t
->
sh‹t_«me
)

382 i‡(
l⁄g›t
->
has_¨g
 =
ªquúed_¨gumít
)

383 *
p
++ = ':';

389 *
p
 = '\0';

392 
	`as£π
 (
o
 <
	`cou¡of
 (
l⁄g_›ti⁄s
));

393 
	}
}

397 
	$¥öt_ußge
 (
îr‹
)

399  
	`Ârötf
 (
îr‹
 ? 
°dîr
 : 
°dout
,

400 
	`_
("Ußge: %†[OPTION]... [URL]...\n"), 
exec_«me
);

401 
	}
}

406 
	$¥öt_hñp
 ()

410 c⁄° *
hñp
[] = {

412 
	`N_
("\
árgumentsÅoÜong optionsáre mandatory for short optionsÅoo.\n\n"),

414 
	`N_
("\
:\n"),

416 
	`N_
("\
-V, --version displayÅhe version of WgetándÉxit.\n"),

418 
	`N_
("\
-h, --helpÖrintÅhis help.\n"),

420 
	`N_
("\
-b, --background goÅo backgroundáfter startup.\n"),

422 
	`N_
("\
-e, --execute=COMMANDÉxecuteá `.wgetrc'-style command.\n"),

426 
	`N_
("\
ánd input file:\n"),

428 
	`N_
("\
-o, --output-file=FILEÜog messagesÅo FILE.\n"),

430 
	`N_
("\
-a, --append-output=FILEáppend messagesÅo FILE.\n"),

432 #ifde‡
ENABLE_DEBUG


433 
	`N_
("\
-d, --debugÖrintÜots of debugging information.\n"),

436 #ifde‡
USE_WATT32


437 
	`N_
("\
--wdebugÖrint Watt-32 debug output.\n"),

440 
	`N_
("\
-q, --quiet quiet (no output).\n"),

442 
	`N_
("\
-v, --verbose be verbose (this isÅhe default).\n"),

444 
	`N_
("\
-nv, --no-verboseÅurn off verboseness, without being quiet.\n"),

446 
	`N_
("\
-i, --input-file=FILE download URLs found inÜocal orÉxternal FILE.\n"),

448 
	`N_
("\
-F, --force-htmlÅreat input fileás HTML.\n"),

450 
	`N_
("\
-B, --base=URLÑesolves HTML input-fileÜinks (-i -F)\n\
Åo URL.\n"),

453 
	`N_
("\
--config=FILE Specify config fileÅo use.\n"),

457 
	`N_
("\
:\n"),

459 
	`N_
("\
-t, --tries=NUMBER setÇumber ofÑetriesÅo NUMBER (0 unlimits).\n"),

461 
	`N_
("\
--retry-connrefusedÑetryÉven if connection isÑefused.\n"),

463 
	`N_
("\
-O, --output-document=FILE write documentsÅo FILE.\n"),

465 
	`N_
("\
-nc, --no-clobber skip downloadsÅhat would downloadÅo\n\
 files (overwritingÅhem).\n"),

468 
	`N_
("\
-c, --continueÑesume gettingáÖartially-downloaded file.\n"),

470 
	`N_
("\
--progress=TYPE selectÖrogress gaugeÅype.\n"),

472 
	`N_
("\
-N, --timestamping don'tÑe-retrieve files unlessÇewerÅhan\n\
.\n"),

475 
	`N_
("\
--no-use-server-timestamps don't setÅheÜocal file'sÅimestamp by\n\
 one onÅhe server.\n"),

478 
	`N_
("\
-S, --server-responseÖrint serverÑesponse.\n"),

480 
	`N_
("\
--spider don't downloadánything.\n"),

482 
	`N_
("\
-T, --timeout=SECONDS setállÅimeout valuesÅo SECONDS.\n"),

484 
	`N_
("\
--dns-timeout=SECS setÅhe DNSÜookupÅimeoutÅo SECS.\n"),

486 
	`N_
("\
--connect-timeout=SECS setÅhe connectÅimeoutÅo SECS.\n"),

488 
	`N_
("\
--read-timeout=SECS setÅheÑeadÅimeoutÅo SECS.\n"),

490 
	`N_
("\
-w, --wait=SECONDS wait SECONDS betweenÑetrievals.\n"),

492 
	`N_
("\
--waitretry=SECONDS wait 1..SECONDS betweenÑetries ofáÑetrieval.\n"),

494 
	`N_
("\
--random-wait wait from 0.5*WAIT...1.5*WAIT secs betweenÑetrievals.\n"),

496 
	`N_
("\
--no-proxyÉxplicitlyÅurn offÖroxy.\n"),

498 
	`N_
("\
-Q, --quota=NUMBER setÑetrieval quotaÅo NUMBER.\n"),

500 
	`N_
("\
--bind-address=ADDRESS bindÅo ADDRESS (hostname or IP) onÜocal host.\n"),

502 
	`N_
("\
--limit-rate=RATEÜimit downloadÑateÅo RATE.\n"),

504 
	`N_
("\
--no-dns-cache disable caching DNSÜookups.\n"),

506 
	`N_
("\
--restrict-file-names=OSÑestrict chars in fileÇamesÅo ones OSállows.\n"),

508 
	`N_
("\
--ignore-case ignore case when matching files/directories.\n"),

510 #ifde‡
ENABLE_IPV6


511 
	`N_
("\
-4, --inet4-only connect onlyÅo IPv4áddresses.\n"),

513 
	`N_
("\
-6, --inet6-only connect onlyÅo IPv6áddresses.\n"),

515 
	`N_
("\
--prefer-family=FAMILY connect firstÅoáddresses of specified family,\n\
 of IPv6, IPv4, orÇone.\n"),

519 
	`N_
("\
--user=USER set both ftpánd http userÅo USER.\n"),

521 
	`N_
("\
--password=PASS set both ftpánd httpÖasswordÅo PASS.\n"),

523 
	`N_
("\
--ask-passwordÖrompt forÖasswords.\n"),

525 
	`N_
("\
--no-iriÅurn off IRI support.\n"),

527 
	`N_
("\
--local-encoding=ENC use ENCásÅheÜocalÉncoding for IRIs.\n"),

529 
	`N_
("\
--remote-encoding=ENC use ENCásÅhe defaultÑemoteÉncoding.\n"),

531 
	`N_
("\
--unlinkÑemove file before clobber.\n"),

535 
	`N_
("\
:\n"),

537 
	`N_
("\
-nd, --no-directories don't create directories.\n"),

539 
	`N_
("\
-x, --force-directories force creation of directories.\n"),

541 
	`N_
("\
-nH, --no-host-directories don't create host directories.\n"),

543 
	`N_
("\
--protocol-directories useÖrotocolÇame in directories.\n"),

545 
	`N_
("\
-P, --directory-prefix=PREFIX save filesÅo PREFIX/...\n"),

547 
	`N_
("\
--cut-dirs=NUMBER ignore NUMBERÑemote directory components.\n"),

551 
	`N_
("\
 options:\n"),

553 
	`N_
("\
--http-user=USER set http userÅo USER.\n"),

555 
	`N_
("\
--http-password=PASS set httpÖasswordÅo PASS.\n"),

557 
	`N_
("\
--no-cache disallow server-cached data.\n"),

559 
	`N_
 ("\
--default-page=NAME ChangeÅhe defaultÖageÇame (normally\n\
 is `index.html'.).\n"),

562 
	`N_
("\
-E, --adjust-extension save HTML/CSS documents withÖroperÉxtensions.\n"),

564 
	`N_
("\
--ignore-length ignore `Content-Length' header field.\n"),

566 
	`N_
("\
--header=STRING insert STRINGámongÅhe headers.\n"),

568 
	`N_
("\
--max-redirect maximumÑedirectionsállowedÖerÖage.\n"),

570 
	`N_
("\
--proxy-user=USER set USERásÖroxy username.\n"),

572 
	`N_
("\
--proxy-password=PASS set PASSásÖroxyÖassword.\n"),

574 
	`N_
("\
--referer=URL include `Referer: URL' header in HTTPÑequest.\n"),

576 
	`N_
("\
--save-headers saveÅhe HTTP headersÅo file.\n"),

578 
	`N_
("\
-U, --user-agent=AGENT identifyás AGENT instead of Wget/VERSION.\n"),

580 
	`N_
("\
--no-http-keep-alive disable HTTP keep-alive (persistent connections).\n"),

582 
	`N_
("\
--no-cookies don't use cookies.\n"),

584 
	`N_
("\
--load-cookies=FILEÜoad cookies from FILE before session.\n"),

586 
	`N_
("\
--save-cookies=FILE save cookiesÅo FILEáfter session.\n"),

588 
	`N_
("\
--keep-session-cookiesÜoadánd save session (non-permanent) cookies.\n"),

590 
	`N_
("\
--post-data=STRING useÅhe POST method; send STRINGásÅhe data.\n"),

592 
	`N_
("\
--post-file=FILE useÅhe POST method; send contents of FILE.\n"),

594 
	`N_
("\
--content-disposition honorÅhe Content-Disposition header when\n\
Üocal fileÇames (EXPERIMENTAL).\n"),

597 
	`N_
("\
--auth-no-challenge send Basic HTTPáuthentication information\n\
 first waiting forÅhe server's\n\
.\n"),

603 #ifde‡
HAVE_SSL


604 
	`N_
("\
 (SSL/TLS) options:\n"),

606 
	`N_
("\
--secure-protocol=PR choose secureÖrotocol, one ofáuto, SSLv2,\n\
3,ánd TLSv1.\n"),

609 
	`N_
("\
--no-check-certificate don't validateÅhe server's certificate.\n"),

611 
	`N_
("\
--certificate=FILE client certificate file.\n"),

613 
	`N_
("\
--certificate-type=TYPE client certificateÅype, PEM or DER.\n"),

615 
	`N_
("\
--private-key=FILEÖrivate key file.\n"),

617 
	`N_
("\
--private-key-type=TYPEÖrivate keyÅype, PEM or DER.\n"),

619 
	`N_
("\
--ca-certificate=FILE file withÅhe bundle of CA's.\n"),

621 
	`N_
("\
--ca-directory=DIR directory where hashÜist of CA's is stored.\n"),

623 
	`N_
("\
--random-file=FILE file withÑandom data for seedingÅhe SSL PRNG.\n"),

625 
	`N_
("\
--egd-file=FILE fileÇamingÅhe EGD socket withÑandom data.\n"),

630 
	`N_
("\
 options:\n"),

632 #ifde‡
__VMS


633 
	`N_
("\
--ftp-stmlf Use Stream_LF format foráll binary FTP files.\n"),

636 
	`N_
("\
--ftp-user=USER set ftp userÅo USER.\n"),

638 
	`N_
("\
--ftp-password=PASS set ftpÖasswordÅo PASS.\n"),

640 
	`N_
("\
--no-remove-listing don'tÑemove `.listing' files.\n"),

642 
	`N_
("\
--no-globÅurn off FTP fileÇame globbing.\n"),

644 
	`N_
("\
--no-passive-ftp disableÅhe \"passive\"Åransfer mode.\n"),

646 
	`N_
("\
--retr-symlinks whenÑecursing, getÜinked-to files (not dir).\n"),

650 
	`N_
("\
 download:\n"),

652 
	`N_
("\
-r, --recursive specifyÑecursive download.\n"),

654 
	`N_
("\
-l, --level=NUMBER maximumÑecursion depth (inf or 0 for infinite).\n"),

656 
	`N_
("\
--delete-after delete filesÜocallyáfter downloadingÅhem.\n"),

658 
	`N_
("\
-k, --convert-links makeÜinks in downloaded HTML or CSSÖointÅo\n\
 files.\n"),

661 #ifde‡
__VMS


662 
	`N_
("\
-K, --backup-converted before converting file X, back upás X_orig.\n"),

665 
	`N_
("\
-K, --backup-converted before converting file X, back upás X.orig.\n"),

668 
	`N_
("\
-m, --mirror shortcut for -N -r -l inf --no-remove-listing.\n"),

670 
	`N_
("\
-p, --page-requisites getáll images,Étc.ÇeededÅo display HTMLÖage.\n"),

672 
	`N_
("\
--strict-commentsÅurn on strict (SGML) handling of HTML comments.\n"),

676 
	`N_
("\
áccept/reject:\n"),

678 
	`N_
("\
-A, --accept=LIST comma-separatedÜist ofácceptedÉxtensions.\n"),

680 
	`N_
("\
-R, --reject=LIST comma-separatedÜist ofÑejectedÉxtensions.\n"),

682 
	`N_
("\
-D, --domains=LIST comma-separatedÜist ofáccepted domains.\n"),

684 
	`N_
("\
--exclude-domains=LIST comma-separatedÜist ofÑejected domains.\n"),

686 
	`N_
("\
--follow-ftp follow FTPÜinks from HTML documents.\n"),

688 
	`N_
("\
--follow-tags=LIST comma-separatedÜist of followed HTMLÅags.\n"),

690 
	`N_
("\
--ignore-tags=LIST comma-separatedÜist of ignored HTMLÅags.\n"),

692 
	`N_
("\
-H, --span-hosts goÅo foreign hosts whenÑecursive.\n"),

694 
	`N_
("\
-L, --relative followÑelativeÜinks only.\n"),

696 
	`N_
("\
-I, --include-directories=LISTÜist ofállowed directories.\n"),

698 
	`N_
("\
--trust-server-names useÅheÇame specified byÅheÑedirection\n\
Üast component.\n"),

701 
	`N_
("\
-X, --exclude-directories=LISTÜist ofÉxcluded directories.\n"),

703 
	`N_
("\
-np, --no-parent don'táscendÅoÅheÖarent directory.\n"),

707 
	`N_
("Mail bugÑeportsánd suggestionsÅo <bug-wget@gnu.org>.\n")

710 
size_t
 
i
;

712 i‡(
	`¥ötf
 (
	`_
("GNU Wget %s,áÇon-interactiveÇetworkÑetriever.\n"),

713 
vîsi⁄_°rög
) < 0)

714 
	`exô
 (3);

715 i‡(
	`¥öt_ußge
 (0) < 0)

716 
	`exô
 (3);

718 
i
 = 0; i < 
	`cou¡of
 (
hñp
); i++)

719 i‡(
	`Âuts
 (
	`_
(
hñp
[
i
]), 
°dout
) < 0)

720 
	`exô
 (3);

722 
	`exô
 (0);

723 
	}
}

729 
	$£cs_to_hum™_time
 (
öãrvÆ
)

731 
buf
[32];

732 
£cs
 = (Ë(
öãrvÆ
 + 0.5);

733 
hours
, 
mös
, 
days
;

735 
days
 = 
£cs
 / 86400, secs %= 86400;

736 
hours
 = 
£cs
 / 3600, secs %= 3600;

737 
mös
 = 
£cs
 / 60, secs %= 60;

739 i‡(
days
)

740 
	`•rötf
 (
buf
, "%dd %dh %dm %ds", 
days
, 
hours
, 
mös
, 
£cs
);

741 i‡(
hours
)

742 
	`•rötf
 (
buf
, "%dh %dm %ds", 
hours
, 
mös
, 
£cs
);

743 i‡(
mös
)

744 
	`•rötf
 (
buf
, "%dm %ds", 
mös
, 
£cs
);

746 
	`•rötf
 (
buf
, "%ss", 
	`¥öt_decimÆ
 (
öãrvÆ
));

748  
buf
;

749 
	}
}

752 
	$¥om±_f‹_∑ssw‹d
 ()

754 i‡(
›t
.
u£r
)

755 
	`Ârötf
 (
°dîr
, 
	`_
("Passw‹d f‹ u£∏%s: "), 
	`quŸe
 (
›t
.
u£r
));

757 
	`Ârötf
 (
°dîr
, 
	`_
("Password: "));

758  
	`gë∑ss
("");

759 
	}
}

766 
	$f‹m©_™d_¥öt_löe
 (c⁄° *
¥efix
, c⁄° *
löe
,

767 
löe_Àngth
)

769 
ªmaöög_ch¨s
;

770 *
löe_dup
, *
tokí
;

772 
	`as£π
 (
¥efix
 !
NULL
);

773 
	`as£π
 (
löe
 !
NULL
);

775 
löe_dup
 = 
	`x°rdup
 (
löe
);

777 i‡(
löe_Àngth
 <= 0)

778 
löe_Àngth
 = 
MAX_CHARS_PER_LINE
 - 
TABULATION
;

780 i‡(
	`¥ötf
 ("%s", 
¥efix
) < 0)

782 
ªmaöög_ch¨s
 = 
löe_Àngth
;

784 
tokí
 = 
	`°πok
 (
löe_dup
, " ");

785 
tokí
 !
NULL
)

790 i‡(
ªmaöög_ch¨s
 <
	`°æí
 (
tokí
))

792 i‡(
	`¥ötf
 ("\n%*c", 
TABULATION
, ' ') < 0)

794 
ªmaöög_ch¨s
 = 
löe_Àngth
 - 
TABULATION
;

796 i‡(
	`¥ötf
 ("%†", 
tokí
) < 0)

798 
ªmaöög_ch¨s
 -
	`°æí
 (
tokí
) + 1;

799 
tokí
 = 
	`°πok
 (
NULL
, " ");

802 i‡(
	`¥ötf
 ("\n") < 0)

805 
	`x‰ì
 (
löe_dup
);

807 
	}
}

810 
	$¥öt_vîsi⁄
 ()

812 c⁄° *
wgërc_tôÀ
 = 
	`_
("Wgetrc: ");

813 c⁄° *
loˇÀ_tôÀ
 = 
	`_
("Locale: ");

814 c⁄° *
compûe_tôÀ
 = 
	`_
("Compile: ");

815 c⁄° *
lök_tôÀ
 = 
	`_
("Link: ");

816 *
ív_wgërc
, *
u£r_wgërc
;

817 
i
;

819 i‡(
	`¥ötf
 (
	`_
("GNU Wgë %†buûà⁄ %s.\n\n"), 
vîsi⁄_°rög
, 
OS_TYPE
) < 0)

820 
	`exô
 (3);

822 
i
 = 0; 
compûed_„©uªs
[i] !
NULL
; )

824 
löe_Àngth
 = 
MAX_CHARS_PER_LINE
;

825 (
löe_Àngth
 > 0Ë&& (
compûed_„©uªs
[
i
] !
NULL
))

827 i‡(
	`¥ötf
 ("%†", 
compûed_„©uªs
[
i
]) < 0)

828 
	`exô
 (3);

829 
löe_Àngth
 -
	`°æí
 (
compûed_„©uªs
[
i
]) + 2;

830 
i
++;

832 i‡(
	`¥ötf
 ("\n") < 0)

833 
	`exô
 (3);

835 i‡(
	`¥ötf
 ("\n") < 0)

836 
	`exô
 (3);

840 i‡(
	`¥ötf
 ("%s\n", 
wgërc_tôÀ
) < 0)

841 
	`exô
 (3);

843 
ív_wgërc
 = 
	`wgërc_ív_fûe_«me
 ();

844 i‡(
ív_wgërc
 && *env_wgetrc)

846 i‡(
	`¥ötf
 (
	`_
(" %†”nv)\n"), 
ív_wgërc
) < 0)

847 
	`exô
 (3);

848 
	`x‰ì
 (
ív_wgërc
);

850 
u£r_wgërc
 = 
	`wgërc_u£r_fûe_«me
 ();

851 i‡(
u£r_wgërc
)

853 i‡(
	`¥ötf
 (
	`_
(" %†(u£r)\n"), 
u£r_wgërc
) < 0)

854 
	`exô
 (3);

855 
	`x‰ì
 (
u£r_wgërc
);

857 #ifde‡
SYSTEM_WGETRC


858 i‡(
	`¥ötf
 (
	`_
(" %†(sy°em)\n"), 
SYSTEM_WGETRC
) < 0)

859 
	`exô
 (3);

862 #ifde‡
ENABLE_NLS


863 i‡(
	`f‹m©_™d_¥öt_löe
 (
loˇÀ_tôÀ
,

864 
LOCALEDIR
,

865 
MAX_CHARS_PER_LINE
) < 0)

866 
	`exô
 (3);

869 i‡(
compû©i⁄_°rög
 !
NULL
)

870 i‡(
	`f‹m©_™d_¥öt_löe
 (
compûe_tôÀ
,

871 
compû©i⁄_°rög
,

872 
MAX_CHARS_PER_LINE
) < 0)

873 
	`exô
 (3);

875 i‡(
lök_°rög
 !
NULL
)

876 i‡(
	`f‹m©_™d_¥öt_löe
 (
lök_tôÀ
,

877 
lök_°rög
,

878 
MAX_CHARS_PER_LINE
) < 0)

879 
	`exô
 (3);

881 i‡(
	`¥ötf
 ("\n") < 0)

882 
	`exô
 (3);

886 i‡(
	`Âuts
 (
	`_
("\
 (CË2009 FªêSo·w¨êFound©i⁄, Inc.\n"), 
°dout
) < 0)

888 
	`exô
 (3);

889 i‡(
	`Âuts
 (
	`_
("\
 GPLv3+: GNU GPL vîsi⁄ 3 o∏œãr\n\
<hâp://www.gnu.‹g/li˚n£s/g∂.html>.\n\
 i†‰ì so·w¨e: youáª fªêtÿch™gê™dÑedi°ribuã it.\n\
 i†NO WARRANTY,Åÿthêexã¡Öîmôãd byÜaw.\n"), 
°dout
) < 0)

894 
	`exô
 (3);

897 i‡(
	`Âuts
 (
	`_
("\nOriginally written by Hrvoje Niksic <hniksic@xemacs.org>.\n"),

898 
°dout
) < 0)

899 
	`exô
 (3);

900 i‡(
	`Âuts
 (
	`_
("Please send bugÑeportsánd questionsÅo <bug-wget@gnu.org>.\n"),

901 
°dout
) < 0)

902 
	`exô
 (3);

904 
	`exô
 (0);

905 
	}
}

907 *
	g¥ogøm_«me
;

910 
	$maö
 (
¨gc
, **
¨gv
)

912 **
uæ
, **
t
;

913 
i
, 
ªt
, 
l⁄gödex
;

914 
nuæ
;

915 
boﬁ
 
≠≥nd_to_log
 = 
Ál£
;

917 
tŸÆ_dow∆ﬂded_byãs
 = 0;

919 
¥ogøm_«me
 = 
¨gv
[0];

921 
±imî
 *
timî
 = 
	`±imî_√w
 ();

922 
°¨t_time
 = 
	`±imî_mósuª
 (
timî
);

924 
	`i18n_öôülize
 ();

927 #ifde‡
__VMS


929 
exec_«me
 = 
	`vms_ba£«me
 (
¨gv
[0]);

931 
exec_«me
 = 
	`°ºchr
 (
¨gv
[0], 
PATH_SEPARATOR
);

932 i‡(!
exec_«me
)

933 
exec_«me
 = 
¨gv
[0];

935 ++
exec_«me
;

938 #ifde‡
WINDOWS


940 
	`wödows_maö
 ((**Ë&
exec_«me
);

944 
	`deÁu…s
 ();

946 
	`öô_swôches
 ();

950 
l⁄gödex
 = -1;

951 
ªtc⁄f
;

952 
boﬁ
 
u£_u£rc⁄fig
 = 
Ál£
;

954 (
ªtc⁄f
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
,

955 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
l⁄gödex
)) != -1)

957 
c⁄fvÆ
;

958 
boﬁ
 
u£ºc_ªt
 = 
åue
;

959 
cmdlöe_›ti⁄
 *
c⁄fig_›t
;

960 
c⁄fvÆ
 = 
l⁄g_›ti⁄s
[
l⁄gödex
].
vÆ
;

961 
c⁄fig_›t
 = &
›ti⁄_d©a
[
c⁄fvÆ
 & ~
BOOLEAN_NEG_MARKER
];

962 i‡(
	`°rcmp
 (
c⁄fig_›t
->
l⁄g_«me
, "config") == 0)

964 
u£ºc_ªt
 &
	`run_wgërc
 (
›èrg
);

965 
u£_u£rc⁄fig
 = 
åue
;

967 i‡(!
u£ºc_ªt
)

969 
	`¥ötf
 ("Exôög duêtÿîr‹ i¿%s\n", 
›èrg
);

970 
	`exô
 (2);

977 i‡(
u£_u£rc⁄fig
 =
Ál£
)

978 
	`öôülize
 ();

980 
›ãº
 = 0;

981 
›töd
 = 0;

983 
l⁄gödex
 = -1;

984 (
ªt
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
,

985 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
l⁄gödex
)) != -1)

987 
vÆ
;

988 
cmdlöe_›ti⁄
 *
›t
;

992 i‡(
l⁄gödex
 == -1)

994 i‡(
ªt
 == '?')

996 
	`¥öt_ußge
 (0);

997 
	`¥ötf
 ("\n");

998 
	`¥ötf
 (
	`_
("Try `%†--hñp' f‹ m‹ê›ti⁄s.\n"), 
exec_«me
);

999 
	`exô
 (2);

1002 
l⁄gödex
 = 
›tm≠
[
ªt
 - 32];

1004 
vÆ
 = 
l⁄g_›ti⁄s
[
l⁄gödex
].val;

1009 
›t
 = &
›ti⁄_d©a
[
vÆ
 & ~
BOOLEAN_NEG_MARKER
];

1010 
›t
->
ty≥
)

1012 
OPT_VALUE
:

1013 
	`£t›tvÆ
 (
›t
->
d©a
, 
›èrg
, o±->
l⁄g_«me
);

1015 
OPT_BOOLEAN
:

1016 i‡(
›èrg
)

1018 
	`£t›tvÆ
 (
›t
->
d©a
, 
›èrg
, o±->
l⁄g_«me
);

1022 
boﬁ
 
√g
 = !!(
vÆ
 & 
BOOLEAN_NEG_MARKER
);

1023 
	`£t›tvÆ
 (
›t
->
d©a
, 
√g
 ? "0" : "1", o±->
l⁄g_«me
);

1026 
OPT_FUNCALL
:

1028 (*
func
Ë(Ë((*Ë()Ë
›t
->
d©a
;

1029 
	`func
 ();

1032 
OPT__APPEND_OUTPUT
:

1033 
	`£t›tvÆ
 ("logfûe", 
›èrg
, 
›t
->
l⁄g_«me
);

1034 
≠≥nd_to_log
 = 
åue
;

1036 
OPT__EXECUTE
:

1037 
	`run_comm™d
 (
›èrg
);

1039 
OPT__NO
:

1044 *
p
;

1045 
p
 = 
›èrg
;Ö && *p;Ö++)

1046 *
p
)

1049 
	`£t›tvÆ
 ("vîbo£", "0", 
›t
->
l⁄g_«me
);

1052 
	`£t›tvÆ
 ("addho°dú", "0", 
›t
->
l⁄g_«me
);

1055 
	`£t›tvÆ
 ("dú°ru˘", "0", 
›t
->
l⁄g_«me
);

1058 
	`£t›tvÆ
 ("no˛obbî", "1", 
›t
->
l⁄g_«me
);

1061 
	`£t›tvÆ
 ("n›¨ít", "1", 
›t
->
l⁄g_«me
);

1064 
	`Ârötf
 (
°dîr
, 
	`_
("%s: illegal option -- `-n%c'\n"),

1065 
exec_«me
, *
p
);

1066 
	`¥öt_ußge
 (1);

1067 
	`Ârötf
 (
°dîr
, "\n");

1068 
	`Ârötf
 (
°dîr
, 
	`_
("Try `%s --help' for more options.\n"),

1069 
exec_«me
);

1070 
	`exô
 (1);

1074 
OPT__PARENT
:

1075 
OPT__CLOBBER
:

1080 
boﬁ
 
Êag
 = 
åue
;

1081 i‡(
›èrg
)

1082 
Êag
 = (*
›èrg
 ='1' || 
	`c_tﬁowî
 (*optarg) == 'y'

1083 || (
	`c_tﬁowî
 (
›èrg
[0]) == 'o'

1084 && 
	`c_tﬁowî
 (
›èrg
[1]) == 'n'));

1085 
	`£t›tvÆ
 (
›t
->
ty≥
 =
OPT__PARENT
 ? "noparent" : "noclobber",

1086 
Êag
 ? "0" : "1", 
›t
->
l⁄g_«me
);

1089 
OPT__DONT_REMOVE_LISTING
:

1090 
	`£t›tvÆ
 ("ªmovñi°ög", "0", 
›t
->
l⁄g_«me
);

1094 
l⁄gödex
 = -1;

1097 
nuæ
 = 
¨gc
 - 
›töd
;

1102 i‡(
›t
.
no˛obbî
 && o±.
c⁄vît_löks
)

1104 
	`Ârötf
 (
°dîr
,

1105 
	`_
("Both --no-clobberánd --convert-links were specified,"

1107 
›t
.
no˛obbî
 = 
Ál£
;

1110 i‡(
›t
.
ª˛evñ
 == 0)

1111 
›t
.
ª˛evñ
 = 
INFINITE_RECURSION
;

1113 i‡(
›t
.
•idî
 || o±.
dñëe_a·î
)

1114 
›t
.
no_dú°ru˘
 = 
åue
;

1116 i‡(
›t
.
∑ge_ªquisôes
 && !›t.
ªcursive
)

1121 
›t
.
ª˛evñ
 = 0;

1122 i‡(!
›t
.
no_dú°ru˘
)

1123 
›t
.
dú°ru˘
 = 1;

1126 i‡(
›t
.
vîbo£
 == -1)

1127 
›t
.
vîbo£
 = !›t.
quõt
;

1130 i‡(
›t
.
vîbo£
 && o±.
quõt
)

1132 
	`Ârötf
 (
°dîr
, 
	`_
("Can't be verboseánd quietátÅhe sameÅime.\n"));

1133 
	`¥öt_ußge
 (1);

1134 
	`exô
 (1);

1136 i‡(
›t
.
time°ampög
 && o±.
no˛obbî
)

1138 
	`Ârötf
 (
°dîr
, 
	`_
("\
'tÅimestampándÇot clobber old filesátÅhe sameÅime.\n"));

1140 
	`¥öt_ußge
 (1);

1141 
	`exô
 (1);

1143 #ifde‡
ENABLE_IPV6


1144 i‡(
›t
.
ùv4_⁄ly
 && o±.
ùv6_⁄ly
)

1146 
	`Ârötf
 (
°dîr
,

1147 
	`_
("Cannot specify both --inet4-onlyánd --inet6-only.\n"));

1148 
	`¥öt_ußge
 (1);

1149 
	`exô
 (1);

1152 i‡(
›t
.
ouçut_documít
)

1154 i‡(
›t
.
c⁄vît_löks


1155 && (
nuæ
 > 1 || 
›t
.
∑ge_ªquisôes
 || o±.
ªcursive
))

1157 
	`Âuts
 (
	`_
("\
 s≥cify bŸh -kánd -O i‡mu…ùÀ URL†¨êgiví, o∏ö combö©i⁄\n\
 -∞‹ -r. SìÅhêm™uÆ f‹ dëaûs.\n\n"), 
°dîr
);

1160 
	`¥öt_ußge
 (1);

1161 
	`exô
 (1);

1163 i‡(
›t
.
∑ge_ªquisôes


1164 || 
›t
.
ªcursive
)

1166 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s", 
	`_
("\
: combining -O with -r or -p will meanÅhatáll downloaded content\n\
 beÖlaced inÅhe single file you specified.\n\n"));

1170 i‡(
›t
.
time°ampög
)

1172 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s", 
	`_
("\
:Åimestamping doesÇothing in combination with -O. SeeÅhe manual\n\
 details.\n\n"));

1175 
›t
.
time°ampög
 = 
Ál£
;

1177 i‡(
›t
.
no˛obbî
 && 
	`fûe_exi°s_p
(›t.
ouçut_documít
))

1180 
	`log¥ötf
 (
LOG_VERBOSE
,

1181 
	`_
("File `%s'álreadyÅhere;ÇotÑetrieving.\n"),

1182 
›t
.
ouçut_documít
);

1183 
	`exô
(1);

1187 i‡(
›t
.
ask_∑sswd
 && o±.
∑sswd
)

1189 
	`Ârötf
 (
°dîr
,

1190 
	`_
("Cannot specify both --ask-passwordánd --password.\n"));

1191 
	`¥öt_ußge
 (1);

1192 
	`exô
 (1);

1195 i‡(!
nuæ
 && !
›t
.
öput_fûíame
)

1198 
	`Ârötf
 (
°dîr
, 
	`_
("%s: missög URL\n"), 
exec_«me
);

1199 
	`¥öt_ußge
 (1);

1200 
	`¥ötf
 ("\n");

1203 
	`Ârötf
 (
°dîr
, 
	`_
("Try `%†--hñp' f‹ m‹ê›ti⁄s.\n"), 
exec_«me
);

1204 
	`exô
 (1);

1207 #ifde‡
ENABLE_IRI


1208 i‡(
›t
.
íabÀ_úi
)

1210 i‡(
›t
.
loˇÀ
 && !
	`check_ícodög_«me
 (opt.locale))

1211 
›t
.
loˇÀ
 = 
NULL
;

1213 i‡(!
›t
.
loˇÀ
)

1214 
›t
.
loˇÀ
 = 
	`föd_loˇÀ
 ();

1216 i‡(
›t
.
ícodög_ªmŸe
 && !
	`check_ícodög_«me
 (opt.encoding_remote))

1217 
›t
.
ícodög_ªmŸe
 = 
NULL
;

1220 
	`mem£t
 (&
dummy_úi
, 0,  (dummy_iri));

1221 i‡(
›t
.
íabÀ_úi
 || o±.
loˇÀ
 || o±.
ícodög_ªmŸe
)

1224 
	`Ârötf
 (
°dîr
, 
	`_
("This version doesÇot have support for IRIs\n"));

1225 
	`exô
(1);

1229 i‡(
›t
.
ask_∑sswd
)

1231 
›t
.
∑sswd
 = 
	`¥om±_f‹_∑ssw‹d
 ();

1233 i‡(
›t
.
∑sswd
 =
NULL
 || opt.passwd[0] == '\0')

1234 
	`exô
 (1);

1237 #ifde‡
USE_WATT32


1238 i‡(
›t
.
wdebug
)

1239 
	`dbug_öô
();

1240 
	`sock_öô
();

1242 i‡(
›t
.
background
)

1243 
	`f‹k_to_background
 ();

1248 i‡(
›t
.
vîbo£
)

1249 
	`£t_¥ogªss_im∂emíèti⁄
 (
›t
.
¥ogªss_ty≥
);

1252 
uæ
 = 
	`Æloˇ_¨øy
 (*, 
nuæ
 + 1);

1253 
i
 = 0; i < 
nuæ
; i++, 
›töd
++)

1255 *
ªwrôãn
 = 
	`ªwrôe_sh‹th™d_uæ
 (
¨gv
[
›töd
]);

1256 i‡(
ªwrôãn
)

1257 
uæ
[
i
] = 
ªwrôãn
;

1259 
uæ
[
i
] = 
	`x°rdup
 (
¨gv
[
›töd
]);

1261 
uæ
[
i
] = 
NULL
;

1264 
	`log_öô
 (
›t
.
lfûíame
, 
≠≥nd_to_log
);

1266 
	`DEBUGP
 (("DEBUG output created by Wget %s on %s.\n\n",

1267 
vîsi⁄_°rög
, 
OS_TYPE
));

1279 i‡(
›t
.
ouçut_documít
)

1281 i‡(
	`HYPHENP
 (
›t
.
ouçut_documít
))

1283 #ifde‡
WINDOWS


1284 
	`_£tmode
 (
	`_fûío
 (
°dout
), 
_O_BINARY
);

1286 
ouçut_°ªam
 = 
°dout
;

1290 
°ru˘_f°©
 
°
;

1292 #ifde‡
__VMS


1296 
	#FOPEN_OPT_ARGS
 , "f›=sqo", "acc", 
acc_cb
, &
›í_id


	)

1297 
›í_id
 = 7;

1299 
	#FOPEN_OPT_ARGS


	)

1302 
ouçut_°ªam
 = 
	`f›í
 (
›t
.
ouçut_documít
,

1303 
›t
.
Æways_ª°
 ? "ab" : "wb"

1304 
FOPEN_OPT_ARGS
);

1305 i‡(
ouçut_°ªam
 =
NULL
)

1307 
	`≥º‹
 (
›t
.
ouçut_documít
);

1308 
	`exô
 (1);

1310 i‡(
	`f°©
 (
	`fûío
 (
ouçut_°ªam
), &
°
Ë=0 && 
	`S_ISREG
 (°.
°_mode
))

1311 
ouçut_°ªam_ªguœr
 = 
åue
;

1313 i‡(!
ouçut_°ªam_ªguœr
 && 
›t
.
c⁄vît_löks
)

1315 
	`Ârötf
 (
°dîr
, 
	`_
("-k can be usedÅogether with -O only if \
ÅoáÑegular file.\n"));

1317 
	`¥öt_ußge
 (1);

1318 
	`exô
(1);

1322 #ifde‡
__VMS


1326 i‡(
ouçut_°ªam
 =
NULL
)

1327 
	`£t_ods5_de°
( "SYS$DISK");

1328 i‡(
ouçut_°ªam
 !
°dout
)

1329 
	`£t_ods5_de°
–
›t
.
ouçut_documít
);

1332 #ifde‡
WINDOWS


1333 
	`ws_°¨tup
 ();

1336 #ifde‡
SIGHUP


1339 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
) != SIG_IGN)

1340 
	`sig«l
(
SIGHUP
, 
ªdúe˘_ouçut_sig«l
);

1343 #ifde‡
SIGUSR1


1344 
	`sig«l
 (
SIGUSR1
, 
ªdúe˘_ouçut_sig«l
);

1346 #ifde‡
SIGPIPE


1350 
	`sig«l
 (
SIGPIPE
, 
SIG_IGN
);

1352 #ifde‡
SIGWINCH


1353 
	`sig«l
 (
SIGWINCH
, 
¥ogªss_h™dÀ_sigwöch
);

1357 
t
 = 
uæ
; *t;Å++)

1359 *
fûíame
 = 
NULL
, *
ªdúe˘ed_URL
 = NULL;

1360 
dt
, 
uæ_îr
;

1364 
úi
 *úò
	`úi_√w
 ();

1365 
uæ
 *
uæ_∑r£d
;

1367 
	`£t_uri_ícodög
 (
úi
, 
›t
.
loˇÀ
, 
åue
);

1368 
uæ_∑r£d
 = 
	`uæ_∑r£
 (*
t
, &
uæ_îr
, 
úi
, 
åue
);

1370 i‡(!
uæ_∑r£d
)

1372 *
îr‹
 = 
	`uæ_îr‹
 (*
t
, 
uæ_îr
);

1373 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s.\n",*
t
, 
îr‹
);

1374 
	`x‰ì
 (
îr‹
);

1375 
	`öf‹m_exô_°©us
 (
URLERROR
);

1379 i‡((
›t
.
ªcursive
 || o±.
∑ge_ªquisôes
)

1380 && (
	`uæ_scheme
 (*
t
Ë!
SCHEME_FTP
 || 
	`uæ_u£s_¥oxy
 (
uæ_∑r£d
)))

1382 
ﬁd_fﬁlow_·p
 = 
›t
.
fﬁlow_·p
;

1385 i‡(
	`uæ_scheme
 (*
t
Ë=
SCHEME_FTP
)

1386 
›t
.
fﬁlow_·p
 = 1;

1388 
	`ªåõve_åì
 (
uæ_∑r£d
, 
NULL
);

1390 
›t
.
fﬁlow_·p
 = 
ﬁd_fﬁlow_·p
;

1394 
	`ªåõve_uæ
 (
uæ_∑r£d
, *
t
, &
fûíame
, &
ªdúe˘ed_URL
, 
NULL
,

1395 &
dt
, 
›t
.
ªcursive
, 
úi
, 
åue
);

1398 i‡(
›t
.
dñëe_a·î
 && 
	`fûe_exi°s_p
(
fûíame
))

1400 
	`DEBUGP
 (("Removing file dueÅo --delete-after in main():\n"));

1401 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Removög %s.\n"), 
fûíame
);

1402 i‡(
	`u∆ök
 (
fûíame
))

1403 
	`log¥ötf
 (
LOG_NOTQUIET
, "u∆ök: %s\n", 
	`°ªº‹
 (
î∫o
));

1405 
	`x‰ì_nuŒ
 (
ªdúe˘ed_URL
);

1406 
	`x‰ì_nuŒ
 (
fûíame
);

1407 
	`uæ_‰ì
 (
uæ_∑r£d
);

1409 
	`úi_‰ì
 (
úi
);

1413 i‡(
›t
.
öput_fûíame
)

1415 
cou¡
;

1416 
°©us
;

1417 
°©us
 = 
	`ªåõve_‰om_fûe
 (
›t
.
öput_fûíame
, o±.
f‹˚_html
, &
cou¡
);

1418 
	`öf‹m_exô_°©us
 (
°©us
);

1419 i‡(!
cou¡
)

1420 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("No URLs found in %s.\n"),

1421 
›t
.
öput_fûíame
);

1425 i‡(
›t
.
ªcursive
 && o±.
•idî
)

1426 
	`¥öt_brokí_löks
 ();

1429 i‡((
›t
.
ªcursive
 || o±.
∑ge_ªquisôes


1430 || 
nuæ
 > 1

1431 || (
›t
.
öput_fûíame
 && 
tŸÆ_dow∆ﬂded_byãs
 != 0))

1433 
tŸÆ_dow∆ﬂded_byãs
 != 0)

1435 
íd_time
 = 
	`±imî_mósuª
 (
timî
);

1436 
	`±imî_de°roy
 (
timî
);

1438 *
wÆl_time
 = 
	`x°rdup
 (
	`£cs_to_hum™_time
 (
íd_time
 - 
°¨t_time
));

1439 *
dow∆ﬂd_time
 = 
	`x°rdup
 (
	`£cs_to_hum™_time
 (
tŸÆ_dow∆ﬂd_time
));

1440 
	`log¥ötf
 (
LOG_NOTQUIET
,

1441 
	`_
("FINISHED --%s--\nTotal wall clockÅime: %s\n"

1443 
	`d©ëime_°r
 (
	`time
 (
NULL
)),

1444 
wÆl_time
,

1445 
numuæs
,

1446 
	`hum™_ªadabÀ
 (
tŸÆ_dow∆ﬂded_byãs
),

1447 
dow∆ﬂd_time
,

1448 
	`ªå_øã
 (
tŸÆ_dow∆ﬂded_byãs
, 
tŸÆ_dow∆ﬂd_time
));

1449 
	`x‰ì
 (
wÆl_time
);

1450 
	`x‰ì
 (
dow∆ﬂd_time
);

1453 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

1454 
	`log¥ötf
 (
LOG_NOTQUIET
,

1455 
	`_
("Download quota of %s EXCEEDED!\n"),

1456 
	`hum™_ªadabÀ
 (
›t
.
quŸa
));

1459 i‡(
›t
.
cookõs_ouçut
)

1460 
	`ßve_cookõs
 ();

1462 i‡(
›t
.
c⁄vît_löks
 && !›t.
dñëe_a·î
)

1463 
	`c⁄vît_Æl_löks
 ();

1465 
	`log_˛o£
 ();

1466 
i
 = 0; i < 
nuæ
; i++)

1467 
	`x‰ì
 (
uæ
[
i
]);

1468 
	`˛ónup
 ();

1470  
	`gë_exô_°©us
 ();

1471 
	}
}

1474 #i‡
deföed
(
SIGHUP
Ë|| deföed(
SIGUSR1
)

1477 #i‚de‡
SIGHUP


1478 
	#SIGHUP
 -1

	)

1480 #i‚de‡
SIGUSR1


1481 
	#SIGUSR1
 -1

	)

1489 
	$ªdúe˘_ouçut_sig«l
 (
sig
)

1491 c⁄° *
sig«l_«me
 = (
sig
 =
SIGHUP
 ? "SIGHUP" :

1492 (
sig
 =
SIGUSR1
 ? "SIGUSR1" :

1494 
	`log_ªque°_ªdúe˘_ouçut
 (
sig«l_«me
);

1495 
	`¥ogªss_scheduÀ_ªdúe˘
 ();

1496 
	`sig«l
 (
sig
, 
ªdúe˘_ouçut_sig«l
);

1497 
	}
}

	@src/mswindows.c

32 
	#INHIBIT_WRAP


	)

34 
	~"wgë.h
"

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

40 
	~<m©h.h
>

43 
	~"utûs.h
"

44 
	~"uæ.h
"

46 #i‚de‡
ES_SYSTEM_REQUIRED


47 
	#ES_SYSTEM_REQUIRED
 0x00000001

	)

50 #i‚de‡
ES_CONTINUOUS


51 
	#ES_CONTINUOUS
 0x80000000

	)

56 
log_ªque°_ªdúe˘_ouçut
 (const *);

61 
	$x¶ìp
 (
£c⁄ds
)

63 #i‡
	`deföed
(
HAVE_USLEEP
Ë&& deföed(
HAVE_SLEEP
)

64 i‡(
£c⁄ds
 > 1000)

67 
	`¶ìp
 (
£c⁄ds
);

68 
£c⁄ds
 -= () seconds;

70 
	`u¶ìp
 (
£c⁄ds
 * 1000000);

72 
	`SÀïEx
 ((
DWORD
Ë(
£c⁄ds
 * 1000 + .5), 
FALSE
);

74 
	}
}

77 
	$wödows_maö
 (**
exec_«me
)

79 *
p
;

82 *
exec_«me
 = 
	`x°rdup
 (*exec_name);

83 
p
 = 
	`°ºchr
 (*
exec_«me
, '.');

84 i‡(
p
)

85 *
p
 = '\0';

86 
	}
}

89 
	$ws_˛ónup
 ()

91 
	`x‰ì
 ((*)
exec_«me
);

92 
	`WSACÀ™up
 ();

93 
	}
}

95 #i‡
deföed
(
CTRLBREAK_BACKGND
Ë|| deföed(
CTRLC_BACKGND
)

97 
	$ws_h™gup
 (c⁄° *
ªas⁄
)

99 
	`Ârötf
 (
°dîr
, 
	`_
("Continuing in background.\n"));

100 
	`log_ªque°_ªdúe˘_ouçut
 (
ªas⁄
);

107 
	`FªeC⁄sﬁe
 ();

108 
	}
}

114 
	$make_£˘i⁄_«me
 (
DWORD
 
pid
)

116  
	`≠rötf
 ("gnu_wgë_Áke_f‹k_%lu", 
pid
);

117 
	}
}

121 
	sÁke_f‹k_öfo


123 
HANDLE
 
	mevít
;

124 
boﬁ
 
	mlogfûe_ch™ged
;

125 
	mlfûíame
[
MAX_PATH
 + 1];

135 
	$Áke_f‹k_chûd
 ()

137 
HANDLE
 
£˘i⁄
, 
evít
;

138 
Áke_f‹k_öfo
 *
öfo
;

139 *
«me
;

141 
«me
 = 
	`make_£˘i⁄_«me
 (
	`GëCuºítPro˚ssId
 ());

142 
£˘i⁄
 = 
	`O≥nFûeM≠pög
 (
FILE_MAP_WRITE
, 
FALSE
, 
«me
);

143 
	`x‰ì
 (
«me
);

147 i‡(!
£˘i⁄
)

150 
öfo
 = 
	`M≠VõwOfFûe
 (
£˘i⁄
, 
FILE_MAP_WRITE
, 0, 0, 0);

151 i‡(!
öfo
)

153 
	`Clo£H™dÀ
 (
£˘i⁄
);

157 
evít
 = 
öfo
->event;

159 
öfo
->
logfûe_ch™ged
 = 
Ál£
;

160 i‡(!
›t
.
lfûíame
 && (!›t.
quõt
 || o±.
£rvî_ª•⁄£
))

163 
FILE
 *
√w_log_Â
 = 
	`unique_¸óã
 (
DEFAULT_LOGFILE
, 
Ál£
, &
›t
.
lfûíame
);

164 i‡(
√w_log_Â
)

166 
öfo
->
logfûe_ch™ged
 = 
åue
;

167 
	`°∫˝y
 (
öfo
->
lfûíame
, 
›t
.lfilename,  (info->lfilename));

168 
öfo
->
lfûíame
[ (info->lfilename) - 1] = '\0';

169 
	`f˛o£
 (
√w_log_Â
);

173 
	`Unm≠VõwOfFûe
 (
öfo
);

174 
	`Clo£H™dÀ
 (
£˘i⁄
);

177 i‡(!
	`SëEvít
 (
evít
))

180 
	`Clo£H™dÀ
 (
evít
);

182 
	}
}

193 
	$Áke_f‹k
 ()

195 
exe
[
MAX_PATH
 + 1];

196 
DWORD
 
exe_Àn
, 
À
;

197 
SECURITY_ATTRIBUTES
 
ß
;

198 
HANDLE
 
£˘i⁄
, 
evít
, 
h
[2];

199 
STARTUPINFO
 
si
;

200 
PROCESS_INFORMATION
 
pi
;

201 
Áke_f‹k_öfo
 *
öfo
;

202 *
«me
;

203 
BOOL
 
rv
;

205 
£˘i⁄
 = 
pi
.
hPro˚ss
 =Öi.
hThªad
 = 
NULL
;

209 
exe_Àn
 = 
	`GëModuÀFûeName
 (
	`GëModuÀH™dÀ
 (
NULL
), 
exe
,  (exe));

210 i‡(!
exe_Àn
 || (exe_À¿> (
exe
)))

213 
ß
.
nLígth
 =  (sa);

214 
ß
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

215 
ß
.
bInhîôH™dÀ
 = 
TRUE
;

219 
evít
 = 
	`Cª©eEvít
 (&
ß
, 
FALSE
, FALSE, 
NULL
);

220 i‡(!
evít
)

225 
	`xzîo
 (
si
);

226 
si
.
cb
 =  (si);

227 
rv
 = 
	`Cª©ePro˚ss
 (
exe
, 
	`GëComm™dLöe
 (), 
NULL
, NULL, 
TRUE
,

228 
CREATE_SUSPENDED
 | 
DETACHED_PROCESS
,

229 
NULL
, NULL, &
si
, &
pi
);

230 i‡(!
rv
)

231 
˛ónup
;

235 
«me
 = 
	`make_£˘i⁄_«me
 (
pi
.
dwPro˚ssId
);

236 
£˘i⁄
 =

237 
	`Cª©eFûeM≠pög
 (
INVALID_HANDLE_VALUE
, 
NULL
, 
PAGE_READWRITE
, 0,

238  (
Áke_f‹k_öfo
), 
«me
);

239 
À
 = 
	`GëLa°Eº‹
();

240 
	`x‰ì
 (
«me
);

242 i‡(!
£˘i⁄
 || (
À
 =
ERROR_ALREADY_EXISTS
))

244 
rv
 = 
FALSE
;

245 
˛ónup
;

249 
öfo
 = 
	`M≠VõwOfFûe
 (
£˘i⁄
, 
FILE_MAP_WRITE
, 0, 0, 0);

250 i‡(!
öfo
)

252 
rv
 = 
FALSE
;

253 
˛ónup
;

256 
öfo
->
evít
 =Évent;

258 
	`Unm≠VõwOfFûe
 (
öfo
);

261 
rv
 = 
	`ResumeThªad
 (
pi
.
hThªad
);

262 i‡(!
rv
)

264 
	`Tîmö©ePro˚ss
 (
pi
.
hPro˚ss
, (
DWORD
) -1);

265 
˛ónup
;

271 
h
[0] = 
evít
;

272 
h
[1] = 
pi
.
hPro˚ss
;

273 
rv
 = 
WAIT_OBJECT_0
 =
	`WaôF‹Mu…ùÀObje˘s
 (2, 
h
, 
FALSE
, 5 * 60 * 1000);

274 i‡(!
rv
)

275 
˛ónup
;

277 
öfo
 = 
	`M≠VõwOfFûe
 (
£˘i⁄
, 
FILE_MAP_READ
, 0, 0, 0);

278 i‡(!
öfo
)

280 
rv
 = 
FALSE
;

281 
˛ónup
;

285 i‡(
öfo
->
logfûe_ch™ged
 &&

286 !
	`memchr
 (
öfo
->
lfûíame
, '\0',  (info->lfilename)))

288 
rv
 = 
FALSE
;

289 
˛ónup
;

292 
	`¥ötf
 (
	`_
("C⁄töuög i¿background,Öid %lu.\n"), 
pi
.
dwPro˚ssId
);

293 i‡(
öfo
->
logfûe_ch™ged
)

294 
	`¥ötf
 (
	`_
("Ouçuàwû»bêwrôã¿tÿ%s.\n"), 
	`quŸe
 (
öfo
->
lfûíame
));

296 
	`Unm≠VõwOfFûe
 (
öfo
);

298 
˛ónup
:

300 i‡(
evít
)

301 
	`Clo£H™dÀ
 (
evít
);

302 i‡(
£˘i⁄
)

303 
	`Clo£H™dÀ
 (
£˘i⁄
);

304 i‡(
pi
.
hThªad
)

305 
	`Clo£H™dÀ
 (
pi
.
hThªad
);

306 i‡(
pi
.
hPro˚ss
)

307 
	`Clo£H™dÀ
 (
pi
.
hPro˚ss
);

310 i‡(
rv
)

311 
	`exô
 (0);

314 
	}
}

319 
	$f‹k_to_background
 ()

321 
rv
;

323 
rv
 = 
	`Áke_f‹k_chûd
 ();

324 i‡(
rv
 < 0)

326 
	`Ârötf
 (
°dîr
, "fake_fork_child() failed\n");

327 
	`ab‹t
 ();

329 i‡(
rv
 == 0)

332 
	`Áke_f‹k
 ();

334 
	`Ârötf
 (
°dîr
, "fake_fork() failed\n");

335 
	`ab‹t
 ();

338 
	}
}

340 
BOOL
 
WINAPI


341 
	$ws_h™dÀr
 (
DWORD
 
dwEvít
)

343 
dwEvít
)

345 #ifde‡
CTRLC_BACKGND


346 
CTRL_C_EVENT
:

347 
	`ws_h™gup
 ("CTRL+C");

348  
TRUE
;

350 #ifde‡
CTRLBREAK_BACKGND


351 
CTRL_BREAK_EVENT
:

352 
	`ws_h™gup
 ("CTRL+Break");

353  
TRUE
;

356  
FALSE
;

358 
	}
}

360 *
	gtôÀ_buf
 = 
NULL
;

361 *
	gcuº_uæ
 = 
NULL
;

362 
	gﬁd_≥r˚¡age
 = -1;

367 
	$ws_ch™gëôÀ
 (c⁄° *
uæ
)

369 
	`x‰ì_nuŒ
 (
tôÀ_buf
);

370 
	`x‰ì_nuŒ
 (
cuº_uæ
);

371 
tôÀ_buf
 = 
	`xmÆloc
 (
	`°æí
 (
uæ
) + 20);

372 
cuº_uæ
 = 
	`x°rdup
 (
uæ
);

373 
ﬁd_≥r˚¡age
 = -1;

374 
	`•rötf
 (
tôÀ_buf
, "Wgë %s", 
cuº_uæ
);

375 
	`SëC⁄sﬁeTôÀ
 (
tôÀ_buf
);

376 
	}
}

381 
	$ws_≥r˚¡tôÀ
 (
≥r˚¡age_Êﬂt
)

383 
≥r˚¡age
;

385 i‡(!
tôÀ_buf
 || !
cuº_uæ
)

388 
≥r˚¡age
 = (Ë
≥r˚¡age_Êﬂt
;

391 i‡(
≥r˚¡age
 < 0)

392 
≥r˚¡age
 = 0;

393 i‡(
≥r˚¡age
 > 100)

394 
≥r˚¡age
 = 100;

397 i‡(
≥r˚¡age
 =
ﬁd_≥r˚¡age
)

400 
ﬁd_≥r˚¡age
 = 
≥r˚¡age
;

402 
	`•rötf
 (
tôÀ_buf
, "Wgë [%d%%] %s", 
≥r˚¡age
, 
cuº_uæ
);

403 
	`SëC⁄sﬁeTôÀ
 (
tôÀ_buf
);

404 
	}
}

410 
	$ws_my∑th
 ()

412 *
w•©hßve
 = 
NULL
;

414 i‡(!
w•©hßve
)

416 
buf
[
MAX_PATH
 + 1];

417 *
p
;

418 
DWORD
 
Àn
;

420 
Àn
 = 
	`GëModuÀFûeName
 (
	`GëModuÀH™dÀ
 (
NULL
), 
buf
,  (buf));

421 i‡(!
Àn
 || (À¿> (
buf
)))

422  
NULL
;

424 
p
 = 
	`°ºchr
 (
buf
, 
PATH_SEPARATOR
);

425 i‡(!
p
)

426  
NULL
;

428 *
p
 = '\0';

429 
w•©hßve
 = 
	`x°rdup
 (
buf
);

432  
w•©hßve
;

433 
	}
}

440 
	$£t_¶ìp_mode
 ()

442 
	`DWORD
 (
	tWINAPI
 *
	tfunc_t
Ë(
	tDWORD
);

443 
func_t
 
£t_exec_°©e
;

445 
£t_exec_°©e
 =

446 (
func_t
Ë
	`GëProcAddªss
 (
	`GëModuÀH™dÀ
 ("KERNEL32.DLL"),

449 i‡(
£t_exec_°©e
)

450 
	`£t_exec_°©e
 (
ES_SYSTEM_REQUIRED
 | 
ES_CONTINUOUS
);

451 
	}
}

455 
	$ws_°¨tup
 ()

457 
WSADATA
 
d©a
;

458 
WORD
 
ªque°ed
 = 
	`MAKEWORD
 (1, 1);

459 
îr
 = 
	`WSASèπup
 (
ªque°ed
, &
d©a
);

460 i‡(
îr
 != 0)

462 
	`Ârötf
 (
°dîr
, 
	`_
("%s: Couldn't find usable socket driver.\n"),

463 
exec_«me
);

464 
	`exô
 (1);

467 i‡(
d©a
.
wVîsi⁄
 < 
ªque°ed
)

469 
	`Ârötf
 (
°dîr
, 
	`_
("%s: Couldn't find usable socket driver.\n"),

470 
exec_«me
);

471 
	`WSACÀ™up
 ();

472 
	`exô
 (1);

475 
	`©exô
 (
ws_˛ónup
);

476 
	`£t_¶ìp_mode
 ();

477 
	`SëC⁄sﬁeCålH™dÀr
 (
ws_h™dÀr
, 
TRUE
);

478 
	}
}

484 
	#THREAD_STACK_SIZE
 0

	)

486 
	sthªad_d©a


488 (*
	mfun
) (*);

489 *
	m¨g
;

490 
DWORD
 
	mws_îr‹
;

502 
DWORD
 
WINAPI


503 
	$thªad_hñ≥r
 (*
¨g
)

505 
thªad_d©a
 *
td
 = (thªad_d©®*Ë
¨g
;

510 
	`WSASëLa°Eº‹
 (
td
->
ws_îr‹
);

512 
td
->
	`fun
 (td->
¨g
);

516 
td
->
ws_îr‹
 = 
	`WSAGëLa°Eº‹
 ();

518 
	}
}

527 
boﬁ


528 
run_wôh_timeout
 (
£c⁄ds
, (*
fun
Ë(*), *
¨g
)

530 
HANDLE
 
thªad_hnd
;

531 
thªad_d©a
 
thªad_¨g
;

532 
DWORD
 
thªad_id
;

533 
boﬁ
 
rc
;

535 
	`DEBUGP
 (("£c⁄d†%.2f, ", 
£c⁄ds
));

537 i‡(
£c⁄ds
 == 0)

539 
blockög_ÁŒback
:

540 
	`fun
 (
¨g
);

541  
Ál£
;

544 
thªad_¨g
.
fun
 = fun;

545 
thªad_¨g
.
¨g
 =árg;

546 
thªad_¨g
.
ws_îr‹
 = 
	`WSAGëLa°Eº‹
 ();

547 
thªad_hnd
 = 
	`Cª©eThªad
 (
NULL
, 
THREAD_STACK_SIZE
, 
thªad_hñ≥r
,

548 &
thªad_¨g
, 0, &
thªad_id
);

549 i‡(!
thªad_hnd
)

551 
	`DEBUGP
 (("CreateThread() failed; [%#lx]\n",

552 (Ë
	`GëLa°Eº‹
 ()));

553 
blockög_ÁŒback
;

556 i‡(
	`WaôF‹SögÀObje˘
 (
thªad_hnd
, (
DWORD
)(1000 * 
£c⁄ds
))

557 =
WAIT_OBJECT_0
)

561 
	`WSASëLa°Eº‹
 (
thªad_¨g
.
ws_îr‹
);

562 
	`DEBUGP
 (("WösockÉº‹: %d\n", 
	`WSAGëLa°Eº‹
 ()));

563 
rc
 = 
Ál£
;

567 
	`Tîmö©eThªad
 (
thªad_hnd
, 1);

568 
rc
 = 
åue
;

571 
	`Clo£H™dÀ
 (
thªad_hnd
);

572 
thªad_hnd
 = 
NULL
;

573  
rc
;

574 
	}
}

577 #ifde‡
ENABLE_IPV6


583 
	$öë_¡›
 (
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
˙t
)

587 
sockaddr_ö6
 
sö6
;

588 
sockaddr_ö
 
sö
;

589 } 
ß
;

590 
DWORD
 
d°Àn
 = 
˙t
;

591 
size_t
 
§csize
;

593 
	`xzîo
 (
ß
);

594 
af
)

596 
AF_INET
:

597 
ß
.
sö
.
sö_Ámûy
 = 
AF_INET
;

598 
ß
.
sö
.
sö_addr
 = *(
ö_addr
 *Ë
§c
;

599 
§csize
 =  (
ß
.
sö
);

601 
AF_INET6
:

602 
ß
.
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

603 
ß
.
sö6
.
sö6_addr
 = *(
ö6_addr
 *Ë
§c
;

604 
§csize
 =  (
ß
.
sö6
);

607 
	`ab‹t
 ();

610 i‡(
	`WSAAddªssToSåög
 ((
sockaddr
 *Ë&
ß
, 
§csize
, 
NULL
, 
d°
, &
d°Àn
) != 0)

612 
î∫o
 = 
	`WSAGëLa°Eº‹
();

613  
NULL
;

615  (c⁄° *Ë
d°
;

616 
	}
}

621 
	$£t_wödows_fd_as_blockög_sockë
 (
fd
)

631 
ªt
 = 0;

632 
wßgÀ
 = 0;

633 c⁄° 
zîo
 = 0;

637 if(
wßgÀ
 =
WSAEINPROGRESS
)

638 
	`SÀï
(1);

640 
	`WSASëLa°Eº‹
 (0);

641 
ªt
 = 
	`io˘l
 (
fd
, 
FIONBIO
, &
zîo
);

642 
wßgÀ
 = 
	`WSAGëLa°Eº‹
();

644 
ªt
 && (
wßgÀ
 =
WSAEINPROGRESS
));

646 if(
ªt
)

648 
	`Ârötf
 (
°dîr
,

650 
	`DEBUGP
 (("WösockÉº‹: %d\n", 
	`WSAGëLa°Eº‹
 ()));

651 
	`ab‹t
 ();

654 
	}
}

	@src/mswindows.h

32 #i‚de‡
MSWINDOWS_H


33 
	#MSWINDOWS_H


	)

35 #i‚de‡
WGET_H


36 #îr‹ 
This
 
fûe
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN


	)

44 
	~<wödows.h
>

46 
	~<wösock2.h
>

47 
	~<ws2t˝ù.h
>

49 #i‚de‡
EAI_SYSTEM


50 
	#EAI_SYSTEM
 -1

	)

55 
	~<io.h
>

58 
	~<¥o˚ss.h
>

60 #i‚de‡
S_ISDIR


61 
	#S_ISDIR
(
m
Ë(((mË& (
_S_IFMT
)Ë=(
_S_IFDIR
))

	)

63 #i‚de‡
S_ISLNK


64 
	#S_ISLNK
(
a
Ë0

	)

68 #i‚de‡
HAVE_STRCASECMP


69 
	#°rˇ£cmp
 
°ricmp


	)

71 #i‚de‡
HAVE_STRNCASECMP


72 
	#°∫ˇ£cmp
 
°∫icmp


	)

75 
	~<°dio.h
>

78 
__öt64
 
	twgöt
;

79 
	#SIZEOF_WGINT
 8

	)

83 #i‡
deföed
 
HAVE_STRTOLL


84 
	#°r_to_wgöt
 
°πﬁl


	)

85 #ñi‡
deföed
 
HAVE__STRTOI64


86 
	#°r_to_wgöt
 
_°πoi64


	)

88 
	#°r_to_wgöt
 
°πﬁl


	)

89 
	#NEED_STRTOLL


	)

90 
	#°πﬁl_ty≥
 
__öt64


	)

95 
	#l°©
 
°©


	)

98 #ifde‡
°©_Æüs


99 
	#°©
(
f
, 
b
Ë
	`°©_Æüs
 (f, b)

	)

101 #ifde‡
f°©_Æüs


102 
	#f°©
(
f
, 
b
Ë
	`f°©_Æüs
 (f, b)

	)

105 
	#PATH_SEPARATOR
 '\\'

	)

108 #ifde‡
ENABLE_IPV6


109 c⁄° *
öë_¡›
 (, c⁄° *, *, 
sockÀn_t
);

113 
	~<sys/io˘l.h
>

117 
ws_°¨tup
 ();

118 
ws_ch™gëôÀ
 (const *);

119 
ws_≥r˚¡tôÀ
 ();

120 *
ws_my∑th
 ();

121 
wödows_maö
 (**);

122 
£t_wödows_fd_as_blockög_sockë
 ();

	@src/netrc.c

34 
	~"wgë.h
"

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

41 
	~"utûs.h
"

42 
	~"√åc.h
"

43 
	~"öô.h
"

45 
	#NETRC_FILE_NAME
 ".√åc"

	)

47 
acc_t
 *
	g√åc_li°
;

49 
acc_t
 *
∑r£_√åc
 (const *);

58 
	$£¨ch_√åc
 (c⁄° *
ho°
, c⁄° **
acc
, c⁄° **
∑sswd
,

59 
¶ack_deÁu…
)

61 
acc_t
 *
l
;

62 
¥o˚s£d_√åc
;

64 i‡(!
›t
.
√åc
)

67 i‡(!
¥o˚s£d_√åc
)

69 #ifde‡
__VMS


71 
îr
;

72 
°ru˘_°©
 
buf
;

73 *
∑th
 = "SYS$LOGIN:.netrc";

75 
√åc_li°
 = 
NULL
;

76 
¥o˚s£d_√åc
 = 1;

78 
îr
 = 
	`°©
 (
∑th
, &
buf
);

79 i‡(
îr
 == 0)

80 
√åc_li°
 = 
	`∑r£_√åc
 (
∑th
);

84 *
home
 = 
	`home_dú
 ();

86 
√åc_li°
 = 
NULL
;

87 
¥o˚s£d_√åc
 = 1;

88 i‡(
home
)

90 
îr
;

91 
°ru˘_°©
 
buf
;

92 *
∑th
 = (*)
	`Æloˇ
 (
	`°æí
 (
home
) + 1

93 + 
	`°æí
 (
NETRC_FILE_NAME
) + 1);

94 
	`•rötf
 (
∑th
, "%s/%s", 
home
, 
NETRC_FILE_NAME
);

95 
	`x‰ì
 (
home
);

96 
îr
 = 
	`°©
 (
∑th
, &
buf
);

97 i‡(
îr
 == 0)

98 
√åc_li°
 = 
	`∑r£_√åc
 (
∑th
);

104 i‡(!
√åc_li°
)

107 i‡(*
acc
 && *
∑sswd
)

110 
l
 = 
√åc_li°
;Ü;Ü =Ü->
√xt
)

112 i‡(!
l
->
ho°
)

114 i‡(!
	`°rˇ£cmp
 (
l
->
ho°
, host))

117 i‡(
l
)

119 i‡(*
acc
)

122 i‡(!
	`°rcmp
 (
l
->
acc
, *acc))

123 *
∑sswd
 = 
l
->passwd;

125 *
∑sswd
 = 
NULL
;

130 *
acc
 = 
l
->acc;

131 i‡(
l
->
∑sswd
)

132 *
∑sswd
 = 
l
->passwd;

138 i‡(!
¶ack_deÁu…
)

140 i‡(*
acc
)

143 
l
 = 
√åc_li°
;Ü;Ü =Ü->
√xt
)

144 i‡(!
l
->
ho°
)

146 i‡(!
l
)

148 *
acc
 = 
l
->acc;

149 i‡(!*
∑sswd
)

150 *
∑sswd
 = 
l
->passwd;

153 
	}
}

156 #ifde‡
STANDALONE


158 
	~<as£π.h
>

161 
	#xmÆloc
 
mÆloc


	)

162 
	#x‰ì
 
‰ì


	)

163 
	#x°rdup
 
°rdup


	)

165 
	#xªÆloc
 
ªÆloc


	)

178 
	$ªad_whﬁe_löe
 (
FILE
 *
Â
)

180 
Àngth
 = 0;

181 
bufsize
 = 81;

182 *
löe
 = 
	`xmÆloc
 (
bufsize
);

184 
	`fgës
 (
löe
 + 
Àngth
, 
bufsize
 -Üígth, 
Â
))

186 
Àngth
 +
	`°æí
 (
löe
 +Üength);

187 
	`as£π
 (
Àngth
 > 0);

188 i‡(
löe
[
Àngth
 - 1] == '\n')

193 
bufsize
 <<= 1;

194 
löe
 = 
	`xªÆloc
 (löe, 
bufsize
);

196 i‡(
Àngth
 =0 || 
	`„º‹
 (
Â
))

198 
	`x‰ì
 (
löe
);

199  
NULL
;

201 i‡(
Àngth
 + 1 < 
bufsize
)

206 
löe
 = 
	`xªÆloc
 (löe, 
Àngth
 + 1);

207  
löe
;

208 
	}
}

214 
	$maybe_add_to_li°
 (
acc_t
 **
√wíåy
,ácc_à**
li°
)

216 
acc_t
 *
a
, *
l
;

217 
a
 = *
√wíåy
;

218 
l
 = *
li°
;

221 i‡(
a
 && !á->
acc
)

224 
	`x‰ì_nuŒ
 (
a
->
ho°
);

225 
	`x‰ì_nuŒ
 (
a
->
acc
);

226 
	`x‰ì_nuŒ
 (
a
->
∑sswd
);

230 i‡(
a
)

233 
a
->
√xt
 = 
l
;

234 
l
 = 
a
;

238 
a
 = 
	`xmÆloc
 ( (
acc_t
));

242 
	`mem£t
 (
a
, 0, (*a));

245 *
√wíåy
 = 
a
;

246 *
li°
 = 
l
;

248 
	}
}

254 
	$shi·_À·
(*
°rög
)

256 *
p
;

258 
p
=
°rög
; *p; ++p)

259 *
p
 = *(p+1);

260 
	}
}

263 
acc_t
 *

264 
	$∑r£_√åc
 (c⁄° *
∑th
)

266 
FILE
 *
Â
;

267 *
löe
, *
p
, *
tok
;

268 c⁄° *
¥em©uª_tokí
;

269 
acc_t
 *
cuºít
, *
ªtvÆ
;

270 
 
, 
qm¨k
;

275 
tok_nŸhög
, 
tok_accou¡
, 
tok_logö
, 
tok_macdef
, 
tok_machöe
, 
tok_∑ssw‹d


276 } 
œ°_tokí
 = 
tok_nŸhög
;

278 
cuºít
 = 
ªtvÆ
 = 
NULL
;

280 
Â
 = 
	`f›í
 (
∑th
, "r");

281 i‡(!
Â
)

283 
	`Ârötf
 (
°dîr
, 
	`_
("%s: C™nŸÑód %†(%s).\n"), 
exec_«me
,

284 
∑th
, 
	`°ªº‹
 (
î∫o
));

285  
ªtvÆ
;

289 
 
 = 0;

290 
¥em©uª_tokí
 = 
NULL
;

293 (
löe
 = 
	`ªad_whﬁe_löe
 (
Â
)Ë!
NULL
)

295 
 
 ++;

298 
p
 = 
löe
;

299 
qm¨k
 = 0;

302 *
p
 && 
	`c_is•a˚
 (*p))

303 
p
 ++;

306 i‡(
œ°_tokí
 =
tok_macdef
 && !*
p
)

308 
œ°_tokí
 = 
tok_nŸhög
;

311 *
p
 && 
œ°_tokí
 !
tok_macdef
)

314 *
p
 && 
	`c_is•a˚
 (*p))

315 
p
 ++;

319 i‡(*
p
 == '#' || !*p)

324 i‡(*
p
 == '"'){

325 
qm¨k
 = 1;

326 
	`shi·_À·
 (
p
);

329 
tok
 = 
p
;

332 *
p
 && (
qm¨k
 ? *∞!'"' : !
	`c_is•a˚
 (*p))){

333 i‡(*
p
 == '\\')

334 
	`shi·_À·
 (
p
);

335 
p
 ++;

340 i‡(
qm¨k
)

342 
	`shi·_À·
 (
p
);

343 
qm¨k
 = 0;

347 i‡(*
p
)

348 *
p
 ++ = '\0';

350 
œ°_tokí
)

352 
tok_logö
:

353 i‡(
cuºít
)

354 
cuºít
->
acc
 = 
	`x°rdup
 (
tok
);

356 
¥em©uª_tokí
 = "login";

359 
tok_machöe
:

361 
	`maybe_add_to_li°
 (&
cuºít
, &
ªtvÆ
);

362 
cuºít
->
ho°
 = 
	`x°rdup
 (
tok
);

365 
tok_∑ssw‹d
:

366 i‡(
cuºít
)

367 
cuºít
->
∑sswd
 = 
	`x°rdup
 (
tok
);

369 
¥em©uª_tokí
 = "password";

373 
tok_macdef
:

374 i‡(!
cuºít
)

375 
¥em©uª_tokí
 = "macdef";

379 
tok_accou¡
:

380 i‡(!
cuºít
)

381 
¥em©uª_tokí
 = "account";

385 
tok_nŸhög
:

389 i‡(
¥em©uª_tokí
)

391 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: %s:%d: warning: %sÅokenáppears beforeány machineÇame\n"),

393 
exec_«me
, 
∑th
, 
 
, 
	`quŸe
 (
¥em©uª_tokí
));

394 
¥em©uª_tokí
 = 
NULL
;

397 i‡(
œ°_tokí
 !
tok_nŸhög
)

399 
œ°_tokí
 = 
tok_nŸhög
;

403 i‡(!
	`°rcmp
 (
tok
, "account"))

404 
œ°_tokí
 = 
tok_accou¡
;

405 i‡(!
	`°rcmp
 (
tok
, "default"))

407 
	`maybe_add_to_li°
 (&
cuºít
, &
ªtvÆ
);

409 i‡(!
	`°rcmp
 (
tok
, "login"))

410 
œ°_tokí
 = 
tok_logö
;

412 i‡(!
	`°rcmp
 (
tok
, "macdef"))

413 
œ°_tokí
 = 
tok_macdef
;

415 i‡(!
	`°rcmp
 (
tok
, "machine"))

416 
œ°_tokí
 = 
tok_machöe
;

418 i‡(!
	`°rcmp
 (
tok
, "password"))

419 
œ°_tokí
 = 
tok_∑ssw‹d
;

422 
	`Ârötf
 (
°dîr
, 
	`_
("%s: %s:%d: unknownÅoken \"%s\"\n"),

423 
exec_«me
, 
∑th
, 
 
, 
tok
);

427 
	`x‰ì
 (
löe
);

430 
	`f˛o£
 (
Â
);

433 
	`maybe_add_to_li°
 (&
cuºít
, &
ªtvÆ
);

434 
	`x‰ì
 (
cuºít
);

437 
cuºít
 = 
ªtvÆ
;

438 
ªtvÆ
 = 
NULL
;

439 
cuºít
)

441 
acc_t
 *
ßved_ª„ªn˚
;

444 
ßved_ª„ªn˚
 = 
cuºít
->
√xt
;

445 
cuºít
->
√xt
 = 
ªtvÆ
;

448 
ªtvÆ
 = 
cuºít
;

449 
cuºít
 = 
ßved_ª„ªn˚
;

452  
ªtvÆ
;

453 
	}
}

458 
	$‰ì_√åc
(
acc_t
 *
l
)

460 
acc_t
 *
t
;

462 
l
)

464 
t
 = 
l
->
√xt
;

465 
	`x‰ì_nuŒ
 (
l
->
acc
);

466 
	`x‰ì_nuŒ
 (
l
->
∑sswd
);

467 
	`x‰ì_nuŒ
 (
l
->
ho°
);

468 
	`x‰ì
 (
l
);

469 
l
 = 
t
;

471 
	}
}

473 #ifde‡
STANDALONE


474 
	~<sys/ty≥s.h
>

475 
	~<sys/°©.h
>

478 
	$maö
 (
¨gc
, **
¨gv
)

480 
°ru˘_°©
 
sb
;

481 *
¥ogøm_«me
, *
fûe
, *
èrgë
;

482 
acc_t
 *
hód
, *
a
;

484 i‡(
¨gc
 < 2 ||árgc > 3)

486 
	`Ârötf
 (
°dîr
, 
	`_
("Ußge: %†NETRC [HOSTNAME]\n"), 
¨gv
[0]);

487 
	`exô
 (1);

490 
¥ogøm_«me
 = 
¨gv
[0];

491 
fûe
 = 
¨gv
[1];

492 
èrgë
 = 
¨gv
[2];

494 i‡(
	`°©
 (
fûe
, &
sb
))

496 
	`Ârötf
 (
°dîr
, 
	`_
("%s: c™nŸ sèà%s: %s\n"), 
¨gv
[0], 
fûe
,

497 
	`°ªº‹
 (
î∫o
));

498 
	`exô
 (1);

501 
hód
 = 
	`∑r£_√åc
 (
fûe
);

502 
a
 = 
hód
;

503 
a
)

506 i‡(
èrgë
 && 
a
->
ho°
 && 
	`°rcmp
 (target,á->host))

508 
a
 =á->
√xt
;

512 i‡(!
èrgë
)

515 i‡(
a
->
ho°
)

516 
	`Âuts
 (
a
->
ho°
, 
°dout
);

518 
	`Âuts
 ("DEFAULT", 
°dout
);

520 
	`Âutc
 (' ', 
°dout
);

524 
	`Âuts
 (
a
->
acc
, 
°dout
);

526 i‡(
a
->
∑sswd
)

529 
	`Âutc
 (' ', 
°dout
);

530 
	`Âuts
 (
a
->
∑sswd
, 
°dout
);

533 
	`Âutc
 ('\n', 
°dout
);

536 i‡(
èrgë
)

537 
	`exô
 (0);

538 
a
 =á->
√xt
;

542 i‡(
èrgë
)

543 
	`exô
 (1);

545 
	`exô
 (0);

546 
	}
}

	@src/netrc.h

31 #i‚de‡
NETRC_H


32 
	#NETRC_H


	)

34 
	s_acc_t


36 *
	mho°
;

38 *
	macc
;

39 *
	m∑sswd
;

40 
_acc_t
 *
	m√xt
;

41 } 
	tacc_t
;

43 
£¨ch_√åc
 (const *, const **, const **, );

44 
‰ì_√åc
 (
acc_t
 *
l
);

	@src/openssl.c

32 
	~"wgë.h
"

34 
	~<as£π.h
>

35 
	~<î∫o.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

39 
	~<›ís¶/s¶.h
>

40 
	~<›ís¶/x509v3.h
>

41 
	~<›ís¶/îr.h
>

42 
	~<›ís¶/ønd.h
>

44 
	~"utûs.h
"

45 
	~"c⁄√˘.h
"

46 
	~"uæ.h
"

47 
	~"s¶.h
"

49 #ifde‡
WINDOWS


50 
	~<w32sock.h
>

55 
SSL_CTX
 *
	gs¶_˘x
;

60 
	$öô_¥ng
 ()

62 
«mebuf
[256];

63 c⁄° *
øndom_fûe
;

65 i‡(
	`RAND_°©us
 ())

72 i‡(
›t
.
øndom_fûe
)

73 
øndom_fûe
 = 
›t
.random_file;

77 
«mebuf
[0] = '\0';

78 
øndom_fûe
 = 
	`RAND_fûe_«me
 (
«mebuf
,  (namebuf));

81 i‡(
øndom_fûe
 && *random_file)

84 
	`RAND_lﬂd_fûe
 (
øndom_fûe
, 16384);

86 i‡(
	`RAND_°©us
 ())

90 i‡(
›t
.
egd_fûe
 && *opt.egd_file)

91 
	`RAND_egd
 (
›t
.
egd_fûe
);

93 i‡(
	`RAND_°©us
 ())

96 #ifde‡
WINDOWS


101 
	`RAND_s¸ìn
 ();

102 i‡(
	`RAND_°©us
 ())

108 
maxønd
 = 500;

115 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("WARNING: usingá weakÑandom seed.\n"));

117 
	`RAND_°©us
 (Ë=0 && 
maxønd
-- > 0)

119 
∫d
 = 
	`øndom_numbî
 (256);

120 
	`RAND_£ed
 (&
∫d
,  (rnd));

124 
	}
}

129 
	$¥öt_îr‹s
 ()

131 
îr
;

132 (
îr
 = 
	`ERR_gë_îr‹
 ()) != 0)

133 
	`log¥ötf
 (
LOG_NOTQUIET
, "O≥nSSL: %s\n", 
	`ERR_îr‹_°rög
 (
îr
, 
NULL
));

134 
	}
}

143 
	$key_ty≥_to_s¶_ty≥
 (
keyfûe_ty≥
 
ty≥
)

145 
ty≥
)

147 
keyfûe_≥m
:

148  
SSL_FILETYPE_PEM
;

149 
keyfûe_a¢1
:

150  
SSL_FILETYPE_ASN1
;

152 
	`ab‹t
 ();

154 
	}
}

161 
boﬁ


162 
	$s¶_öô
 ()

164 
SSL_METHOD
 c⁄° *
mëh
;

166 i‡(
s¶_˘x
)

168  
åue
;

171 
	`öô_¥ng
 ();

172 i‡(
	`RAND_°©us
 () != 1)

174 
	`log¥ötf
 (
LOG_NOTQUIET
,

175 
	`_
("CouldÇot seed PRNG; consider using --random-file.\n"));

176 
îr‹
;

179 
	`SSL_libøry_öô
 ();

180 
	`SSL_lﬂd_îr‹_°rögs
 ();

181 
	`SSLóy_add_Æl_Æg‹ôhms
 ();

182 
	`SSLóy_add_s¶_Æg‹ôhms
 ();

184 
›t
.
£cuª_¥Ÿocﬁ
)

186 
£cuª_¥Ÿocﬁ_auto
:

187 
mëh
 = 
	`SSLv23_˛õ¡_mëhod
 ();

189 #i‚de‡
OPENSSL_NO_SSL2


190 
£cuª_¥Ÿocﬁ_s¶v2
:

191 
mëh
 = 
	`SSLv2_˛õ¡_mëhod
 ();

194 
£cuª_¥Ÿocﬁ_s¶v3
:

195 
mëh
 = 
	`SSLv3_˛õ¡_mëhod
 ();

197 
£cuª_¥Ÿocﬁ_ésv1
:

198 
mëh
 = 
	`TLSv1_˛õ¡_mëhod
 ();

201 
	`ab‹t
 ();

204 
s¶_˘x
 = 
	`SSL_CTX_√w
 (
mëh
);

205 i‡(!
s¶_˘x
)

206 
îr‹
;

208 
	`SSL_CTX_£t_deÁu…_vîify_∑ths
 (
s¶_˘x
);

209 
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
 (
s¶_˘x
, 
›t
.
ˇ_˚π
, o±.
ˇ_dúe˘‹y
);

215 
	`SSL_CTX_£t_vîify
 (
s¶_˘x
, 
SSL_VERIFY_NONE
, 
NULL
);

218 i‡(
›t
.
˚π_fûe
 && !›t.
¥iv©e_key
)

220 
›t
.
¥iv©e_key
 = o±.
˚π_fûe
;

221 
›t
.
¥iv©e_key_ty≥
 = o±.
˚π_ty≥
;

224 i‡(
›t
.
˚π_fûe
)

225 i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
 (
s¶_˘x
, 
›t
.
˚π_fûe
,

226 
	`key_ty≥_to_s¶_ty≥
 (
›t
.
˚π_ty≥
))

228 
îr‹
;

229 i‡(
›t
.
¥iv©e_key
)

230 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
 (
s¶_˘x
, 
›t
.
¥iv©e_key
,

231 
	`key_ty≥_to_s¶_ty≥
 (
›t
.
¥iv©e_key_ty≥
))

233 
îr‹
;

237 
	`SSL_CTX_£t_mode
 (
s¶_˘x
, 
SSL_MODE_ENABLE_PARTIAL_WRITE
);

241 
	`SSL_CTX_£t_mode
 (
s¶_˘x
, 
SSL_MODE_AUTO_RETRY
);

243  
åue
;

245 
îr‹
:

246 i‡(
s¶_˘x
)

247 
	`SSL_CTX_‰ì
 (
s¶_˘x
);

248 
	`¥öt_îr‹s
 ();

249  
Ál£
;

250 
	}
}

252 
	s›ís¶_å™•‹t_c⁄ãxt
 {

253 
SSL
 *
	mc⁄n
;

254 *
	mœ°_îr‹
;

258 
	$›ís¶_ªad
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

260 
ªt
;

261 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

262 
SSL
 *
c⁄n
 = 
˘x
->conn;

264 
ªt
 = 
	`SSL_ªad
 (
c⁄n
, 
buf
, 
bufsize
);

265 
ªt
 == -1

266 && 
	`SSL_gë_îr‹
 (
c⁄n
, 
ªt
Ë=
SSL_ERROR_SYSCALL


267 && 
î∫o
 =
EINTR
);

269  
ªt
;

270 
	}
}

273 
	$›ís¶_wrôe
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

275 
ªt
 = 0;

276 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

277 
SSL
 *
c⁄n
 = 
˘x
->conn;

279 
ªt
 = 
	`SSL_wrôe
 (
c⁄n
, 
buf
, 
bufsize
);

280 
ªt
 == -1

281 && 
	`SSL_gë_îr‹
 (
c⁄n
, 
ªt
Ë=
SSL_ERROR_SYSCALL


282 && 
î∫o
 =
EINTR
);

283  
ªt
;

284 
	}
}

287 
	$›ís¶_pﬁl
 (
fd
, 
timeout
, 
waô_f‹
, *
¨g
)

289 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

290 
SSL
 *
c⁄n
 = 
˘x
->conn;

291 i‡(
	`SSL_≥ndög
 (
c⁄n
))

293 i‡(
timeout
 == 0)

295  
	`£À˘_fd
 (
fd
, 
timeout
, 
waô_f‹
);

296 
	}
}

299 
	$›ís¶_≥ek
 (
fd
, *
buf
, 
bufsize
, *
¨g
)

301 
ªt
;

302 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

303 
SSL
 *
c⁄n
 = 
˘x
->conn;

304 i‡(! 
	`›ís¶_pﬁl
 (
fd
, 0.0, 
WAIT_FOR_READ
, 
¨g
))

307 
ªt
 = 
	`SSL_≥ek
 (
c⁄n
, 
buf
, 
bufsize
);

308 
ªt
 == -1

309 && 
	`SSL_gë_îr‹
 (
c⁄n
, 
ªt
Ë=
SSL_ERROR_SYSCALL


310 && 
î∫o
 =
EINTR
);

311  
ªt
;

312 
	}
}

315 
	$›ís¶_îr°r
 (
fd
, *
¨g
)

317 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

318 
îrcode
;

319 *
îrmsg
 = 
NULL
;

320 
msgÀn
 = 0;

323 i‡((
îrcode
 = 
	`ERR_gë_îr‹
 ()) == 0)

324  
NULL
;

327 
	`x‰ì_nuŒ
 (
˘x
->
œ°_îr‹
);

337 c⁄° *
°r
 = 
	`ERR_îr‹_°rög
 (
îrcode
, 
NULL
);

338 
Àn
 = 
	`°æí
 (
°r
);

342 
îrmsg
 = 
	`xªÆloc
 (îrmsg, 
msgÀn
 + 
Àn
 + 2 + 1);

343 
	`mem˝y
 (
îrmsg
 + 
msgÀn
, 
°r
, 
Àn
);

344 
msgÀn
 +
Àn
;

347 
îrcode
 = 
	`ERR_gë_îr‹
 ();

348 i‡(
îrcode
 == 0)

351 
îrmsg
[
msgÀn
++] = ';';

352 
îrmsg
[
msgÀn
++] = ' ';

354 
îrmsg
[
msgÀn
] = '\0';

358 
˘x
->
œ°_îr‹
 = 
îrmsg
;

360  
îrmsg
;

361 
	}
}

364 
	$›ís¶_˛o£
 (
fd
, *
¨g
)

366 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
¨g
;

367 
SSL
 *
c⁄n
 = 
˘x
->conn;

369 
	`SSL_shutdown
 (
c⁄n
);

370 
	`SSL_‰ì
 (
c⁄n
);

371 
	`x‰ì_nuŒ
 (
˘x
->
œ°_îr‹
);

372 
	`x‰ì
 (
˘x
);

374 
	`˛o£
 (
fd
);

376 
	`DEBUGP
 (("Clo£d %d/SSL 0x%0*lx\n", 
fd
, 
	`PTR_FORMAT
 (
c⁄n
)));

377 
	}
}

382 
å™•‹t_im∂emíèti⁄
 
	g›ís¶_å™•‹t
 = {

383 
›ís¶_ªad
, 
›ís¶_wrôe
, 
›ís¶_pﬁl
,

384 
›ís¶_≥ek
, 
›ís¶_îr°r
, 
›ís¶_˛o£


395 
boﬁ


396 
	$s¶_c⁄√˘_wgë
 (
fd
)

398 
SSL
 *
c⁄n
;

399 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
;

401 
	`DEBUGP
 (("Initiating SSL handshake.\n"));

403 
	`as£π
 (
s¶_˘x
 !
NULL
);

404 
c⁄n
 = 
	`SSL_√w
 (
s¶_˘x
);

405 i‡(!
c⁄n
)

406 
îr‹
;

407 #i‚de‡
FD_TO_SOCKET


408 
	#FD_TO_SOCKET
(
X
Ë(X)

	)

410 i‡(!
	`SSL_£t_fd
 (
c⁄n
, 
	`FD_TO_SOCKET
 (
fd
)))

411 
îr‹
;

412 
	`SSL_£t_c⁄√˘_°©e
 (
c⁄n
);

413 i‡(
	`SSL_c⁄√˘
 (
c⁄n
Ë<0 || c⁄n->
°©e
 !
SSL_ST_OK
)

414 
îr‹
;

416 
˘x
 = 
	`x√w0
 (
›ís¶_å™•‹t_c⁄ãxt
);

417 
˘x
->
c⁄n
 = conn;

421 
	`fd_ªgi°î_å™•‹t
 (
fd
, &
›ís¶_å™•‹t
, 
˘x
);

422 
	`DEBUGP
 (("Handshake successful; connected socket %dÅo SSL handle 0x%0*lx\n",

423 
fd
, 
	`PTR_FORMAT
 (
c⁄n
)));

424  
åue
;

426 
îr‹
:

427 
	`DEBUGP
 (("SSL handshake failed.\n"));

428 
	`¥öt_îr‹s
 ();

429 i‡(
c⁄n
)

430 
	`SSL_‰ì
 (
c⁄n
);

431  
Ál£
;

432 
	}
}

434 
	#ASTERISK_EXCLUDES_DOT


	)

450 
boﬁ


451 
	$∑âîn_m©ch
 (c⁄° *
∑âîn
, c⁄° *
°rög
)

453 c⁄° *
p
 = 
∑âîn
, *
n
 = 
°rög
;

454 
c
;

455 ; (
c
 = 
	`c_tﬁowî
 (*
p
++)Ë!'\0'; 
n
++)

456 i‡(
c
 == '*')

458 
c
 = 
	`c_tﬁowî
 (*
p
); c == '*'; c = c_tolower (*++p))

460 ; *
n
 != '\0';Ç++)

461 i‡(
	`c_tﬁowî
 (*
n
Ë=
c
 && 
	`∑âîn_m©ch
 (
p
,Ç))

462  
åue
;

463 #ifde‡
ASTERISK_EXCLUDES_DOT


464 i‡(*
n
 == '.')

465  
Ál£
;

467  
c
 == '\0';

471 i‡(
c
 !
	`c_tﬁowî
 (*
n
))

472  
Ál£
;

474  *
n
 == '\0';

475 
	}
}

491 
boﬁ


492 
	$s¶_check_˚πifiˇã
 (
fd
, c⁄° *
ho°
)

494 
X509
 *
˚π
;

495 
GENERAL_NAMES
 *
subje˘A…Names
;

496 
comm⁄_«me
[256];

497 
vªsu…
;

498 
boﬁ
 
suc˚ss
 = 
åue
;

499 
boﬁ
 
Æt_«me_checked
 = 
Ál£
;

503 c⁄° *
£vîôy
 = 
›t
.
check_˚π
 ? 
	`_
("ERROR") : _("WARNING");

505 
›ís¶_å™•‹t_c⁄ãxt
 *
˘x
 = 
	`fd_å™•‹t_c⁄ãxt
 (
fd
);

506 
SSL
 *
c⁄n
 = 
˘x
->conn;

507 
	`as£π
 (
c⁄n
 !
NULL
);

509 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
 (
c⁄n
);

510 i‡(!
˚π
)

512 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s: No certificateÖresented by %s.\n"),

513 
£vîôy
, 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ho°
));

514 
suc˚ss
 = 
Ál£
;

515 
no_˚π
;

518 
IF_DEBUG


520 *
subje˘
 = 
	`X509_NAME_⁄ñöe
 (
	`X509_gë_subje˘_«me
 (
˚π
), 0, 0);

521 *
issuî
 = 
	`X509_NAME_⁄ñöe
 (
	`X509_gë_issuî_«me
 (
˚π
), 0, 0);

522 
	`DEBUGP
 (("certificate:\n subject: %s\n issuer: %s\n",

523 
	`quŸórg_n_°yÀ
 (0, 
esˇ≥_quŸög_°yÀ
, 
subje˘
),

524 
	`quŸórg_n_°yÀ
 (1, 
esˇ≥_quŸög_°yÀ
, 
issuî
)));

525 
	`OPENSSL_‰ì
 (
subje˘
);

526 
	`OPENSSL_‰ì
 (
issuî
);

529 
vªsu…
 = 
	`SSL_gë_vîify_ªsu…
 (
c⁄n
);

530 i‡(
vªsu…
 !
X509_V_OK
)

532 *
issuî
 = 
	`X509_NAME_⁄ñöe
 (
	`X509_gë_issuî_«me
 (
˚π
), 0, 0);

533 
	`log¥ötf
 (
LOG_NOTQUIET
,

534 
	`_
("%s: cannot verify %s's certificate, issued by %s:\n"),

535 
£vîôy
, 
	`quŸórg_n_°yÀ
 (0, 
esˇ≥_quŸög_°yÀ
, 
ho°
),

536 
	`quŸe_n
 (1, 
issuî
));

539 
vªsu…
)

541 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
:

542 
	`log¥ötf
 (
LOG_NOTQUIET
,

543 
	`_
(" UnableÅoÜocally verifyÅhe issuer'sáuthority.\n"));

545 
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
:

546 
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
:

547 
	`log¥ötf
 (
LOG_NOTQUIET
,

548 
	`_
(" Self-signed certificateÉncountered.\n"));

550 
X509_V_ERR_CERT_NOT_YET_VALID
:

551 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
(" Issued certificateÇot yet valid.\n"));

553 
X509_V_ERR_CERT_HAS_EXPIRED
:

554 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
(" Issued certificate hasÉxpired.\n"));

559 
	`log¥ötf
 (
LOG_NOTQUIET
, " %s\n",

560 
	`X509_vîify_˚π_îr‹_°rög
 (
vªsu…
));

562 
suc˚ss
 = 
Ál£
;

577 
subje˘A…Names
 = 
	`X509_gë_ext_d2i
 (
˚π
, 
NID_subje˘_Æt_«me
, 
NULL
, NULL);

579 i‡(
subje˘A…Names
)

585 
ASN1_OCTET_STRING
 *
ho°_ö_o˘ë_°rög
 = 
	`a2i_IPADDRESS
 (
ho°
);

587 
numÆäames
 = 
	`sk_GENERAL_NAME_num
 (
subje˘A…Names
);

588 
i
;

589 
i
=0; i < 
numÆäames
; i++)

591 c⁄° 
GENERAL_NAME
 *
«me
 =

592 
	`sk_GENERAL_NAME_vÆue
 (
subje˘A…Names
, 
i
);

593 i‡(
«me
)

595 i‡(
ho°_ö_o˘ë_°rög
)

597 i‡(
«me
->
ty≥
 =
GEN_IPADD
)

602 
Æt_«me_checked
 = 
åue
;

603 i‡(!
	`ASN1_STRING_cmp
 (
ho°_ö_o˘ë_°rög
,

604 
«me
->
d
.
iPAddªss
))

608 i‡(
«me
->
ty≥
 =
GEN_DNS
)

612 *
«me_ö_utf8
 = 
NULL
;

615 
Æt_«me_checked
 = 
åue
;

617 i‡(0 <
	`ASN1_STRING_to_UTF8
 (&
«me_ö_utf8
, 
«me
->
d
.
dNSName
))

620 i‡(
	`∑âîn_m©ch
 ((*)
«me_ö_utf8
, 
ho°
) &&

621 (
	`°æí
 ((*)
«me_ö_utf8
) ==

622 
	`ASN1_STRING_Àngth
 (
«me
->
d
.
dNSName
)))

624 
	`OPENSSL_‰ì
 (
«me_ö_utf8
);

627 
	`OPENSSL_‰ì
 (
«me_ö_utf8
);

632 
	`sk_GENERAL_NAME_‰ì
 (
subje˘A…Names
);

633 i‡(
ho°_ö_o˘ë_°rög
)

634 
	`ASN1_OCTET_STRING_‰ì
(
ho°_ö_o˘ë_°rög
);

636 i‡(
Æt_«me_checked
 =
åue
 && 
i
 >
numÆäames
)

638 
	`log¥ötf
 (
LOG_NOTQUIET
,

639 
	`_
("%s:Ço certificate subjectálternativeÇame matches\n"

641 
£vîôy
, 
	`quŸe_n
 (1, 
ho°
));

642 
suc˚ss
 = 
Ál£
;

646 i‡(
Æt_«me_checked
 =
Ál£
)

649 
X509_NAME
 *
x«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

650 
comm⁄_«me
[0] = '\0';

651 
	`X509_NAME_gë_ãxt_by_NID
 (
x«me
, 
NID_comm⁄Name
, 
comm⁄_«me
,

652  (
comm⁄_«me
));

654 i‡(!
	`∑âîn_m©ch
 (
comm⁄_«me
, 
ho°
))

656 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("\
%s: certificate commonÇame %s doesn't matchÑequested hostÇame %s.\n"),

658 
£vîôy
, 
	`quŸe_n
 (0, 
comm⁄_«me
), quŸe_¿(1, 
ho°
));

659 
suc˚ss
 = 
Ál£
;

671 
i
 = -1, 
j
;

672 
X509_NAME_ENTRY
 *
xíåy
;

673 
ASN1_STRING
 *
sd©a
;

675 i‡(
x«me
) {

678 
j
 = 
	`X509_NAME_gë_ödex_by_NID
 (
x«me
, 
NID_comm⁄Name
, 
i
);

679 i‡(
j
 == -1) ;

680 
i
 = 
j
;

684 
xíåy
 = 
	`X509_NAME_gë_íåy
(
x«me
,
i
);

685 
sd©a
 = 
	`X509_NAME_ENTRY_gë_d©a
(
xíåy
);

686 i‡(
	`°æí
 (
comm⁄_«me
Ë!
	`ASN1_STRING_Àngth
 (
sd©a
))

688 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("\
%s: certificate commonÇame is invalid (containsá NUL character).\n\
 may beán indicationÅhatÅhe host isÇot who it claimsÅo be\n\
(that is, it isÇotÅheÑeal %s).\n"),

692 
£vîôy
, 
	`quŸe
 (
ho°
));

693 
suc˚ss
 = 
Ál£
;

699 i‡(
suc˚ss
)

700 
	`DEBUGP
 (("X509 certificate successfully verifiedánd matches host %s\n",

701 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ho°
)));

702 
	`X509_‰ì
 (
˚π
);

704 
no_˚π
:

705 i‡(
›t
.
check_˚π
 && !
suc˚ss
)

706 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("\
 connectÅo %s insecurely, use `--no-check-certificate'.\n"),

708 
	`quŸórg_°yÀ
 (
esˇ≥_quŸög_°yÀ
, 
ho°
));

711  
›t
.
check_˚π
 ? 
suc˚ss
 : 
åue
;

712 
	}
}

	@src/options.h

32 
	s›ti⁄s


34 
	mvîbo£
;

36 
boﬁ
 
	mquõt
;

37 
	m¡ry
;

38 
boﬁ
 
	mªåy_c⁄ƒefu£d
;

39 
boﬁ
 
	mbackground
;

40 
boﬁ
 
	mign‹e_Àngth
;

41 
boﬁ
 
	mªcursive
;

42 
boﬁ
 
	m•™ho°
;

44 
	mmax_ªdúe˘
;

46 
boﬁ
 
	mªœtive_⁄ly
;

47 
boﬁ
 
	mno_∑ª¡
;

49 
	mª˛evñ
;

50 
boﬁ
 
	mdú°ru˘
;

52 
boﬁ
 
	mno_dú°ru˘
;

53 
	mcut_dús
;

54 
boﬁ
 
	madd_ho°dú
;

55 
boﬁ
 
	m¥Ÿocﬁ_dúe˘‹õs
;

56 
boﬁ
 
	mno˛obbî
;

58 
boﬁ
 
	mu∆ök
;

59 *
	mdú_¥efix
;

60 *
	mlfûíame
;

61 *
	möput_fûíame
;

62 *
	mchoo£_c⁄fig
;

63 
boﬁ
 
	mf‹˚_html
;

65 *
	mdeÁu…_∑ge
;

67 
boﬁ
 
	m•idî
;

69 **
	mac˚±s
;

70 **
	mªje˘s
;

71 **
	mex˛udes
;

72 **
	mö˛udes
;

74 
boﬁ
 
	mign‹e_ˇ£
;

77 **
	mdomaös
;

78 **
	mex˛ude_domaös
;

79 
boﬁ
 
	mdns_ˇche
;

81 **
	mfﬁlow_ègs
;

82 **
	mign‹e_ègs
;

84 
boﬁ
 
	mfﬁlow_·p
;

86 
boﬁ
 
	mªå_symlöks
;

88 *
	mouçut_documít
;

91 *
	mu£r
;

92 *
	m∑sswd
;

93 
boﬁ
 
	mask_∑sswd
;

95 
boﬁ
 
	mÆways_ª°
;

96 *
	m·p_u£r
;

97 *
	m·p_∑sswd
;

98 
boﬁ
 
	m√åc
;

99 
boﬁ
 
	m·p_glob
;

100 
boﬁ
 
	m·p_∑sv
;

102 *
	mhâp_u£r
;

103 *
	mhâp_∑sswd
;

104 **
	mu£r_hódîs
;

105 
boﬁ
 
	mhâp_kìp_Æive
;

107 
boﬁ
 
	mu£_¥oxy
;

108 
boﬁ
 
	mÆlow_ˇche
;

109 *
	mhâp_¥oxy
, *
	m·p_¥oxy
, *
	mhâps_¥oxy
;

110 **
	mno_¥oxy
;

111 *
	mba£_hªf
;

112 *
	m¥ogªss_ty≥
;

113 *
	m¥oxy_u£r
;

114 *
	m¥oxy_∑sswd
;

116 
	mªad_timeout
;

117 
	mdns_timeout
;

118 
	mc⁄√˘_timeout
;

120 
boﬁ
 
	møndom_waô
;

121 
	mwaô
;

122 
	mwaôªåy
;

123 
boﬁ
 
	mu£_robŸs
;

125 
wgöt
 
	mlimô_øã
;

127 
SUM_SIZE_INT
 
	mquŸa
;

130 
boﬁ
 
	m£rvî_ª•⁄£
;

131 
boﬁ
 
	mßve_hódîs
;

134 #ifde‡
ENABLE_DEBUG


135 
boﬁ
 
	mdebug
;

138 #ifde‡
USE_WATT32


139 
boﬁ
 
	mwdebug
;

142 
boﬁ
 
	mtime°ampög
;

144 
boﬁ
 
	mbackup_c⁄vîãd
;

145 
boﬁ
 
	mbackups
;

147 *
	mu£øgít
;

149 *
	mª„ªr
;

152 
boﬁ
 
	mc⁄vît_löks
;

154 
boﬁ
 
	mªmove_li°ög
;

156 
boﬁ
 
	mhtmlify
;

159 *
	mdŸ_°yÀ
;

160 
wgöt
 
	mdŸ_byãs
;

162 
	mdŸs_ö_löe
;

163 
	mdŸ_•acög
;

165 
boﬁ
 
	mdñëe_a·î
;

168 
boﬁ
 
	madju°_exãnsi⁄
;

170 
boﬁ
 
	m∑ge_ªquisôes
;

172 *
	mböd_addªss
;

174 #ifde‡
HAVE_SSL


176 
	m£cuª_¥Ÿocﬁ_auto
,

177 
	m£cuª_¥Ÿocﬁ_s¶v2
,

178 
	m£cuª_¥Ÿocﬁ_s¶v3
,

179 
	m£cuª_¥Ÿocﬁ_ésv1


180 } 
	m£cuª_¥Ÿocﬁ
;

181 
boﬁ
 
	mcheck_˚π
;

182 *
	m˚π_fûe
;

183 *
	m¥iv©e_key
;

184 
	ekeyfûe_ty≥
 {

185 
	mkeyfûe_≥m
,

186 
	mkeyfûe_a¢1


187 } 
	m˚π_ty≥
;

188 
keyfûe_ty≥


189 
	m¥iv©e_key_ty≥
;

191 *
	mˇ_dúe˘‹y
;

192 *
	mˇ_˚π
;

195 *
	møndom_fûe
;

196 *
	megd_fûe
;

199 
boﬁ
 
	mcookõs
;

200 *
	mcookõs_öput
;

201 *
	mcookõs_ouçut
;

202 
boﬁ
 
	mkìp_£ssi⁄_cookõs
;

205 *
	mpo°_d©a
;

206 *
	mpo°_fûe_«me
;

209 
	mª°ri˘_unix
,

210 
	mª°ri˘_wödows


211 } 
	mª°ri˘_fûes_os
;

212 
boﬁ
 
	mª°ri˘_fûes_˘æ
;

215 
boﬁ
 
	mª°ri˘_fûes_n⁄ascii
;

218 
	mª°ri˘_no_ˇ£_ª°ri˘i⁄
,

219 
	mª°ri˘_lowîˇ£
,

220 
	mª°ri˘_uµîˇ£


221 } 
	mª°ri˘_fûes_ˇ£
;

223 
boﬁ
 
	m°ri˘_commíts
;

226 
boﬁ
 
	m¥e£rve_≥rm
;

229 #ifde‡
ENABLE_IPV6


230 
boﬁ
 
	mùv4_⁄ly
;

231 
boﬁ
 
	mùv6_⁄ly
;

234 
	m¥e„r_ùv4
,

235 
	m¥e„r_ùv6
,

236 
	m¥e„r_n⁄e


237 } 
	m¥e„r_Ámûy
;

240 
boﬁ
 
	mc⁄ã¡_di•osôi⁄
;

241 
boﬁ
 
	mauth_wôhout_chÆÀnge
;

244 
boﬁ
 
	míabÀ_úi
;

245 *
	mícodög_ªmŸe
;

246 *
	mloˇÀ
;

248 
boﬁ
 
	måu°£rvî«mes
;

249 #ifde‡
__VMS


250 
	m·p_°mlf
;

253 
boﬁ
 
	mu££rvîtime°amps
;

256 
boﬁ
 
	mshow_Æl_dns_íåõs
;

260 
›ti⁄s
 
›t
;

	@src/progress.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<as£π.h
>

37 
	~<uni°d.h
>

38 
	~<sig«l.h
>

39 #ifde‡
HAVE_WCHAR_H


40 
	~<wch¨.h
>

43 
	~"¥ogªss.h
"

44 
	~"utûs.h
"

45 
	~"ªå.h
"

47 
	s¥ogªss_im∂emíèti⁄
 {

48 c⁄° *
	m«me
;

49 
boﬁ
 
	möãø˘ive
;

50 *(*
	m¸óã
Ë(
	mwgöt
, wgint);

51 (*
	mupd©e
Ë(*, 
	mwgöt
, );

52 (*
	mföish
) (*, );

53 (*
	m£t_∑øms
) (const *);

58 *
dŸ_¸óã
 (
wgöt
, wgint);

59 
dŸ_upd©e
 (*, 
wgöt
, );

60 
dŸ_föish
 (*, );

61 
dŸ_£t_∑øms
 (const *);

63 *
b¨_¸óã
 (
wgöt
, wgint);

64 
b¨_upd©e
 (*, 
wgöt
, );

65 
b¨_föish
 (*, );

66 
b¨_£t_∑øms
 (const *);

68 
¥ogªss_im∂emíèti⁄
 
	gim∂emíèti⁄s
[] = {

69 { "dŸ", 0, 
dŸ_¸óã
, 
dŸ_upd©e
, 
dŸ_föish
, 
dŸ_£t_∑øms
 },

70 { "b¨", 1, 
b¨_¸óã
, 
b¨_upd©e
, 
b¨_föish
, 
b¨_£t_∑øms
 }

72 
¥ogªss_im∂emíèti⁄
 *
	gcuºít_im∂
;

73 
	gcuºít_im∂_locked
;

78 
	#DEFAULT_PROGRESS_IMPLEMENTATION
 "b¨"

	)

86 
	#FALLBACK_PROGRESS_IMPLEMENTATION
 "dŸ"

	)

91 
boﬁ


92 
	$vÆid_¥ogªss_im∂emíèti⁄_p
 (c⁄° *
«me
)

94 
size_t
 
i
;

95 
¥ogªss_im∂emíèti⁄
 *
pi
 = 
im∂emíèti⁄s
;

96 *
cﬁ⁄
 = 
	`°rchr
 (
«me
, ':');

97 
size_t
 
«mñí
 = 
cﬁ⁄
 ? (size_tË(cﬁ⁄ - 
«me
Ë: 
	`°æí
 (name);

99 
i
 = 0; i < 
	`cou¡of
 (
im∂emíèti⁄s
); i++, 
pi
++)

100 i‡(!
	`°∫cmp
 (
pi
->
«me
,Çame, 
«mñí
))

101  
åue
;

102  
Ál£
;

103 
	}
}

108 
	$£t_¥ogªss_im∂emíèti⁄
 (c⁄° *
«me
)

110 
size_t
 
i
, 
«mñí
;

111 
¥ogªss_im∂emíèti⁄
 *
pi
 = 
im∂emíèti⁄s
;

112 c⁄° *
cﬁ⁄
;

114 i‡(!
«me
)

115 
«me
 = 
DEFAULT_PROGRESS_IMPLEMENTATION
;

117 
cﬁ⁄
 = 
	`°rchr
 (
«me
, ':');

118 
«mñí
 = 
cﬁ⁄
 ? (
size_t
Ë(cﬁ⁄ - 
«me
Ë: 
	`°æí
 (name);

120 
i
 = 0; i < 
	`cou¡of
 (
im∂emíèti⁄s
); i++, 
pi
++)

121 i‡(!
	`°∫cmp
 (
pi
->
«me
,Çame, 
«mñí
))

123 
cuºít_im∂
 = 
pi
;

124 
cuºít_im∂_locked
 = 0;

126 i‡(
cﬁ⁄
)

130 ++
cﬁ⁄
;

132 i‡(
pi
->
£t_∑øms
)

133 
pi
->
	`£t_∑øms
 (
cﬁ⁄
);

136 
	`ab‹t
 ();

137 
	}
}

139 
	gouçut_ªdúe˘ed
;

142 
	$¥ogªss_scheduÀ_ªdúe˘
 ()

144 
ouçut_ªdúe˘ed
 = 1;

145 
	}
}

154 
	$¥ogªss_¸óã
 (
wgöt
 
öôül
, wgöà
tŸÆ
)

157 i‡(
ouçut_ªdúe˘ed
)

159 i‡(!
cuºít_im∂_locked
)

160 
	`£t_¥ogªss_im∂emíèti⁄
 (
FALLBACK_PROGRESS_IMPLEMENTATION
);

161 
ouçut_ªdúe˘ed
 = 0;

164  
cuºít_im∂
->
	`¸óã
 (
öôül
, 
tŸÆ
);

165 
	}
}

172 
boﬁ


173 
	$¥ogªss_öãø˘ive_p
 (*
¥ogªss
)

175  
cuºít_im∂
->
öãø˘ive
;

176 
	}
}

182 
	$¥ogªss_upd©e
 (*
¥ogªss
, 
wgöt
 
howmuch
, 
d…ime
)

184 
cuºít_im∂
->
	`upd©e
 (
¥ogªss
, 
howmuch
, 
d…ime
);

185 
	}
}

191 
	$¥ogªss_föish
 (*
¥ogªss
, 
d…ime
)

193 
cuºít_im∂
->
	`föish
 (
¥ogªss
, 
d…ime
);

194 
	}
}

198 
	sdŸ_¥ogªss
 {

199 
wgöt
 
	möôül_Àngth
;

201 
wgöt
 
	mtŸÆ_Àngth
;

204 
	maccumuœãd
;

207 
	mrows
;

208 
	mdŸs
;

210 
	mœ°_timî_vÆue
;

216 
	$dŸ_¸óã
 (
wgöt
 
öôül
, wgöà
tŸÆ
)

218 
dŸ_¥ogªss
 *
dp
 = 
	`x√w0
 (dot_progress);

219 
dp
->
öôül_Àngth
 = 
öôül
;

220 
dp
->
tŸÆ_Àngth
 = 
tŸÆ
;

222 i‡(
dp
->
öôül_Àngth
)

224 
dŸ_byãs
 = 
›t
.dot_bytes;

225 c⁄° 
wgöt
 
ROW_BYTES
 = 
›t
.
dŸ_byãs
 * o±.
dŸs_ö_löe
;

227 
ªmaödî
 = 
dp
->
öôül_Àngth
 % 
ROW_BYTES
;

228 
wgöt
 
skù≥d
 = 
dp
->
öôül_Àngth
 - 
ªmaödî
;

230 i‡(
skù≥d
)

232 
wgöt
 
skù≥d_k
 = 
skù≥d
 / 1024;

233 
skù≥d_k_Àn
 = 
	`numdigô
 (
skù≥d_k
);

234 i‡(
skù≥d_k_Àn
 < 6)

235 
skù≥d_k_Àn
 = 6;

240 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("\n%*s[ skipping %sK ]"),

241 2 + 
skù≥d_k_Àn
, "",

242 
	`numbî_to_°©ic_°rög
 (
skù≥d_k
));

245 
	`log¥ötf
 (
LOG_VERBOSE
, "\n%6sK",

246 
	`numbî_to_°©ic_°rög
 (
skù≥d
 / 1024));

247 ; 
ªmaödî
 >
dŸ_byãs
;Ñemainder -= dot_bytes)

249 i‡(
dp
->
dŸs
 % 
›t
.
dŸ_•acög
 == 0)

250 
	`logputs
 (
LOG_VERBOSE
, " ");

251 
	`logputs
 (
LOG_VERBOSE
, ",");

252 ++
dp
->
dŸs
;

254 
	`as£π
 (
dp
->
dŸs
 < 
›t
.
dŸs_ö_löe
);

256 
dp
->
accumuœãd
 = 
ªmaödî
;

257 
dp
->
rows
 = 
skù≥d
 / 
ROW_BYTES
;

260  
dp
;

261 
	}
}

263 c⁄° *
ëa_to_hum™_sh‹t
 (, 
boﬁ
);

274 
	$¥öt_row_°©s
 (
dŸ_¥ogªss
 *
dp
, 
d…ime
, 
boﬁ
 
œ°
)

276 c⁄° 
wgöt
 
ROW_BYTES
 = 
›t
.
dŸ_byãs
 * o±.
dŸs_ö_löe
;

280 
wgöt
 
byãs_di•œyed
 = 
dp
->
rows
 * 
ROW_BYTES
 + dp->
dŸs
 * 
›t
.
dŸ_byãs
;

282 i‡(
œ°
)

284 
byãs_di•œyed
 +
dp
->
accumuœãd
;

286 i‡(
dp
->
tŸÆ_Àngth
)

291 
≥r˚¡age
 = 100.0 * 
byãs_di•œyed
 / 
dp
->
tŸÆ_Àngth
;

292 
	`log¥ötf
 (
LOG_VERBOSE
, "%3d%%", 
≥r˚¡age
);

296 
«mes
[] = {' ', 'K', 'M', 'G'};

297 
unôs
;

298 
øã
;

299 
wgöt
 
byãs_this_row
;

300 i‡(!
œ°
)

301 
byãs_this_row
 = 
ROW_BYTES
;

304 
byãs_this_row
 = 
dp
->
dŸs
 * 
›t
.
dŸ_byãs
 + dp->
accumuœãd
;

306 i‡(
dp
->
rows
 =dp->
öôül_Àngth
 / 
ROW_BYTES
)

307 
byãs_this_row
 -
dp
->
öôül_Àngth
 % 
ROW_BYTES
;

308 
øã
 = 
	`ˇlc_øã
 (
byãs_this_row
, 
d…ime
 - 
dp
->
œ°_timî_vÆue
, &
unôs
);

309 
	`log¥ötf
 (
LOG_VERBOSE
, " %4.*f%c",

310 
øã
 >= 99.95 ? 0 :Ñate >= 9.995 ? 1 : 2,

311 
øã
, 
«mes
[
unôs
]);

312 
dp
->
œ°_timî_vÆue
 = 
d…ime
;

315 i‡(!
œ°
)

319 i‡(
dp
->
tŸÆ_Àngth
)

321 
wgöt
 
byãs_ªmaöög
 = 
dp
->
tŸÆ_Àngth
 - 
byãs_di•œyed
;

323 
wgöt
 
byãs_soÁr
 = 
byãs_di•œyed
 - 
dp
->
öôül_Àngth
;

324 
ëa
 = 
d…ime
 * 
byãs_ªmaöög
 / 
byãs_soÁr
;

325 i‡(
ëa
 < 
INT_MAX
 - 1)

326 
	`log¥ötf
 (
LOG_VERBOSE
, " %s",

327 
	`ëa_to_hum™_sh‹t
 ((Ë(
ëa
 + 0.5), 
åue
));

333 i‡(
d…ime
 >= 10)

334 
	`log¥ötf
 (
LOG_VERBOSE
, "=%s",

335 
	`ëa_to_hum™_sh‹t
 ((Ë(
d…ime
 + 0.5), 
åue
));

337 
	`log¥ötf
 (
LOG_VERBOSE
, "=%ss", 
	`¥öt_decimÆ
 (
d…ime
));

339 
	}
}

344 
	$dŸ_upd©e
 (*
¥ogªss
, 
wgöt
 
howmuch
, 
d…ime
)

346 
dŸ_¥ogªss
 *
dp
 = 
¥ogªss
;

347 
dŸ_byãs
 = 
›t
.dot_bytes;

348 
wgöt
 
ROW_BYTES
 = 
›t
.
dŸ_byãs
 * o±.
dŸs_ö_löe
;

350 
	`log_£t_Êush
 (
Ál£
);

352 
dp
->
accumuœãd
 +
howmuch
;

353 ; 
dp
->
accumuœãd
 >
dŸ_byãs
; dp->accumulated -= dot_bytes)

355 i‡(
dp
->
dŸs
 == 0)

356 
	`log¥ötf
 (
LOG_VERBOSE
, "\n%6sK",

357 
	`numbî_to_°©ic_°rög
 (
dp
->
rows
 * 
ROW_BYTES
 / 1024));

359 i‡(
dp
->
dŸs
 % 
›t
.
dŸ_•acög
 == 0)

360 
	`logputs
 (
LOG_VERBOSE
, " ");

361 
	`logputs
 (
LOG_VERBOSE
, ".");

363 ++
dp
->
dŸs
;

364 i‡(
dp
->
dŸs
 >
›t
.
dŸs_ö_löe
)

366 ++
dp
->
rows
;

367 
dp
->
dŸs
 = 0;

369 
	`¥öt_row_°©s
 (
dp
, 
d…ime
, 
Ál£
);

373 
	`log_£t_Êush
 (
åue
);

374 
	}
}

379 
	$dŸ_föish
 (*
¥ogªss
, 
d…ime
)

381 
dŸ_¥ogªss
 *
dp
 = 
¥ogªss
;

382 
wgöt
 
ROW_BYTES
 = 
›t
.
dŸ_byãs
 * o±.
dŸs_ö_löe
;

383 
i
;

385 
	`log_£t_Êush
 (
Ál£
);

387 i‡(
dp
->
dŸs
 == 0)

388 
	`log¥ötf
 (
LOG_VERBOSE
, "\n%6sK",

389 
	`numbî_to_°©ic_°rög
 (
dp
->
rows
 * 
ROW_BYTES
 / 1024));

390 
i
 = 
dp
->
dŸs
; i < 
›t
.
dŸs_ö_löe
; i++)

392 i‡(
i
 % 
›t
.
dŸ_•acög
 == 0)

393 
	`logputs
 (
LOG_VERBOSE
, " ");

394 
	`logputs
 (
LOG_VERBOSE
, " ");

397 
	`¥öt_row_°©s
 (
dp
, 
d…ime
, 
åue
);

398 
	`logputs
 (
LOG_VERBOSE
, "\n\n");

399 
	`log_£t_Êush
 (
Ál£
);

401 
	`x‰ì
 (
dp
);

402 
	}
}

410 
	$dŸ_£t_∑øms
 (c⁄° *
∑øms
)

412 i‡(!
∑øms
 || !*params)

413 
∑øms
 = 
›t
.
dŸ_°yÀ
;

415 i‡(!
∑øms
)

419 i‡(!
	`°rˇ£cmp
 (
∑øms
, "default"))

423 
›t
.
dŸ_byãs
 = 1024;

424 
›t
.
dŸ_•acög
 = 10;

425 
›t
.
dŸs_ö_löe
 = 50;

427 i‡(!
	`°rˇ£cmp
 (
∑øms
, "binary"))

431 
›t
.
dŸ_byãs
 = 8192;

432 
›t
.
dŸ_•acög
 = 16;

433 
›t
.
dŸs_ö_löe
 = 48;

435 i‡(!
	`°rˇ£cmp
 (
∑øms
, "mega"))

439 
›t
.
dŸ_byãs
 = 65536L;

440 
›t
.
dŸ_•acög
 = 8;

441 
›t
.
dŸs_ö_löe
 = 48;

443 i‡(!
	`°rˇ£cmp
 (
∑øms
, "giga"))

448 
›t
.
dŸ_byãs
 = (1L << 20);

449 
›t
.
dŸ_•acög
 = 8;

450 
›t
.
dŸs_ö_löe
 = 32;

453 
	`Ârötf
 (
°dîr
,

454 
	`_
("Invalid dot style specification %s;Üeaving unchanged.\n"),

455 
	`quŸe
 (
∑øms
));

456 
	}
}

461 
	#DEFAULT_SCREEN_WIDTH
 80

	)

465 
	#MINIMUM_SCREEN_WIDTH
 45

	)

470 
	gs¸ìn_width
;

473 vﬁ©ûê
sig_©omic_t
 
	gª˚ived_sigwöch
;

476 
	#DLSPEED_HISTORY_SIZE
 20

	)

482 
	#DLSPEED_SAMPLE_MIN
 0.15

	)

487 
	#STALL_START_TIME
 5

	)

491 
	#REFRESH_INTERVAL
 0.2

	)

495 
	#ETA_REFRESH_INTERVAL
 0.99

	)

497 
	sb¨_¥ogªss
 {

498 
wgöt
 
	möôül_Àngth
;

500 
wgöt
 
	mtŸÆ_Àngth
;

502 
wgöt
 
	mcou¡
;

504 
	mœ°_s¸ìn_upd©e
;

508 
	mwidth
;

514 *
	mbuf„r
;

516 
	mtick
;

523 
	sb¨_¥ogªss_hi°
 {

524 
	mpos
;

525 
	mtimes
[
DLSPEED_HISTORY_SIZE
];

526 
wgöt
 
	mbyãs
[
DLSPEED_HISTORY_SIZE
];

530 
	mtŸÆ_time
;

531 
wgöt
 
	mtŸÆ_byãs
;

532 } 
	mhi°
;

534 
	mª˚¡_°¨t
;

536 
wgöt
 
	mª˚¡_byãs
;

538 
boﬁ
 
	m°ÆÀd
;

544 
	mœ°_ëa_time
;

547 
	mœ°_ëa_vÆue
;

550 
¸óã_image
 (
b¨_¥ogªss
 *, , 
boﬁ
);

551 
di•œy_image
 (*);

554 
	$b¨_¸óã
 (
wgöt
 
öôül
, wgöà
tŸÆ
)

556 
b¨_¥ogªss
 *
bp
 = 
	`x√w0
 (bar_progress);

560 i‡(
öôül
 > 
tŸÆ
)

561 
tŸÆ
 = 
öôül
;

563 
bp
->
öôül_Àngth
 = 
öôül
;

564 
bp
->
tŸÆ_Àngth
 = 
tŸÆ
;

568 i‡(!
s¸ìn_width
 || 
ª˚ived_sigwöch
)

570 
s¸ìn_width
 = 
	`dëîmöe_s¸ìn_width
 ();

571 i‡(!
s¸ìn_width
)

572 
s¸ìn_width
 = 
DEFAULT_SCREEN_WIDTH
;

573 i‡(
s¸ìn_width
 < 
MINIMUM_SCREEN_WIDTH
)

574 
s¸ìn_width
 = 
MINIMUM_SCREEN_WIDTH
;

575 
ª˚ived_sigwöch
 = 0;

579 
bp
->
width
 = 
s¸ìn_width
 - 1;

582 
bp
->
buf„r
 = 
	`xmÆloc
 (bp->
width
 + 100);

584 
	`logputs
 (
LOG_VERBOSE
, "\n");

586 
	`¸óã_image
 (
bp
, 0, 
Ál£
);

587 
	`di•œy_image
 (
bp
->
buf„r
);

589  
bp
;

590 
	}
}

592 
upd©e_•ìd_rög
 (
b¨_¥ogªss
 *, 
wgöt
, );

595 
	$b¨_upd©e
 (*
¥ogªss
, 
wgöt
 
howmuch
, 
d…ime
)

597 
b¨_¥ogªss
 *
bp
 = 
¥ogªss
;

598 
boﬁ
 
f‹˚_s¸ìn_upd©e
 = 
Ál£
;

600 
bp
->
cou¡
 +
howmuch
;

601 i‡(
bp
->
tŸÆ_Àngth
 > 0

602 && 
bp
->
cou¡
 + bp->
öôül_Àngth
 > bp->
tŸÆ_Àngth
)

608 
bp
->
tŸÆ_Àngth
 = bp->
öôül_Àngth
 + bp->
cou¡
;

610 
	`upd©e_•ìd_rög
 (
bp
, 
howmuch
, 
d…ime
);

614 i‡(
ª˚ived_sigwöch
)

616 
ﬁd_width
 = 
s¸ìn_width
;

617 
s¸ìn_width
 = 
	`dëîmöe_s¸ìn_width
 ();

618 i‡(!
s¸ìn_width
)

619 
s¸ìn_width
 = 
DEFAULT_SCREEN_WIDTH
;

620 i‡(
s¸ìn_width
 < 
MINIMUM_SCREEN_WIDTH
)

621 
s¸ìn_width
 = 
MINIMUM_SCREEN_WIDTH
;

622 i‡(
s¸ìn_width
 !
ﬁd_width
)

624 
bp
->
width
 = 
s¸ìn_width
 - 1;

625 
bp
->
buf„r
 = 
	`xªÆloc
 (bp->buf„r, bp->
width
 + 100);

626 
f‹˚_s¸ìn_upd©e
 = 
åue
;

628 
ª˚ived_sigwöch
 = 0;

631 i‡(
d…ime
 - 
bp
->
œ°_s¸ìn_upd©e
 < 
REFRESH_INTERVAL
 && !
f‹˚_s¸ìn_upd©e
)

635 
	`¸óã_image
 (
bp
, 
d…ime
, 
Ál£
);

636 
	`di•œy_image
 (
bp
->
buf„r
);

637 
bp
->
œ°_s¸ìn_upd©e
 = 
d…ime
;

638 
	}
}

641 
	$b¨_föish
 (*
¥ogªss
, 
d…ime
)

643 
b¨_¥ogªss
 *
bp
 = 
¥ogªss
;

645 i‡(
bp
->
tŸÆ_Àngth
 > 0

646 && 
bp
->
cou¡
 + bp->
öôül_Àngth
 > bp->
tŸÆ_Àngth
)

648 
bp
->
tŸÆ_Àngth
 = bp->
öôül_Àngth
 + bp->
cou¡
;

650 
	`¸óã_image
 (
bp
, 
d…ime
, 
åue
);

651 
	`di•œy_image
 (
bp
->
buf„r
);

653 
	`logputs
 (
LOG_VERBOSE
, "\n\n");

655 
	`x‰ì
 (
bp
->
buf„r
);

656 
	`x‰ì
 (
bp
);

657 
	}
}

678 
	$upd©e_•ìd_rög
 (
b¨_¥ogªss
 *
bp
, 
wgöt
 
howmuch
, 
d…ime
)

680 
b¨_¥ogªss_hi°
 *
hi°
 = &
bp
->hist;

681 
ª˚¡_age
 = 
d…ime
 - 
bp
->
ª˚¡_°¨t
;

684 
bp
->
ª˚¡_byãs
 +
howmuch
;

689 i‡(
ª˚¡_age
 < 
DLSPEED_SAMPLE_MIN
)

692 i‡(
howmuch
 == 0)

698 i‡(
ª˚¡_age
 >
STALL_START_TIME
)

703 
bp
->
°ÆÀd
 = 
åue
;

704 
	`xzîo
 (*
hi°
);

705 
bp
->
ª˚¡_byãs
 = 0;

713 i‡(
bp
->
°ÆÀd
)

715 
bp
->
°ÆÀd
 = 
Ál£
;

721 
ª˚¡_age
 = 1;

729 
hi°
->
tŸÆ_time
 -hi°->
times
[hi°->
pos
];

730 
hi°
->
tŸÆ_byãs
 -hi°->
byãs
[hi°->
pos
];

733 
hi°
->
times
[hi°->
pos
] = 
ª˚¡_age
;

734 
hi°
->
byãs
[hi°->
pos
] = 
bp
->
ª˚¡_byãs
;

735 
hi°
->
tŸÆ_time
 +
ª˚¡_age
;

736 
hi°
->
tŸÆ_byãs
 +
bp
->
ª˚¡_byãs
;

739 
bp
->
ª˚¡_°¨t
 = 
d…ime
;

740 
bp
->
ª˚¡_byãs
 = 0;

743 i‡(++
hi°
->
pos
 =
DLSPEED_HISTORY_SIZE
)

744 
hi°
->
pos
 = 0;

749 
i
;

750 
sumt
 = 0, 
sumb
 = 0;

751 
i
 = 0; i < 
DLSPEED_HISTORY_SIZE
; i++)

753 
sumt
 +
hi°
->
times
[
i
];

754 
sumb
 +
hi°
->
byãs
[
i
];

756 
	`as£π
 (
sumb
 =
hi°
->
tŸÆ_byãs
);

761 
diff
 = 
sumt
 - 
hi°
->
tŸÆ_time
;

762 i‡(
diff
 < 0) diff = -diff;

763 
	`as£π
 (
diff
 < 1e-9);

766 
	}
}

768 #i‡
USE_NLS_PROGRESS_BAR


770 
	$cou¡_cﬁs
 (c⁄° *
mbs
)

772 
wch¨_t
 
wc
;

773 
byãs
;

774 
ªmaöög
 = 
	`°æí
(
mbs
);

775 
cﬁs
 = 0;

776 
wccﬁs
;

778 *
mbs
 != '\0')

780 
byãs
 = 
	`mbtowc
 (&
wc
, 
mbs
, 
ªmaöög
);

781 
	`as£π
 (
byãs
 != 0);

782 i‡(
byãs
 == -1)

785  
cﬁs
 + 
ªmaöög
;

787 
mbs
 +
byãs
;

788 
ªmaöög
 -
byãs
;

789 
wccﬁs
 = 
	`wcwidth
(
wc
);

790 
cﬁs
 +(
wccﬁs
 == -1? 1 : wccols);

792  
cﬁs
;

793 
	}
}

795 
	#cou¡_cﬁs
(
mbs
Ë(()(
	`°æí
(mbs)))

	)

799 
	$gë_ëa
 (*
bcd
)

803 c⁄° 
ëa_°r
[] = 
	`N_
("Éta %s");

804 c⁄° *
ëa_å™s
;

805 
byãs_cﬁs_diff
;

806 i‡(
ëa_å™s
 =
NULL
)

808 
nbyãs
;

809 
ncﬁs
;

811 #i‡
USE_NLS_PROGRESS_BAR


812 
ëa_å™s
 = 
	`_
(
ëa_°r
);

814 
ëa_å™s
 = 
ëa_°r
;

824 
nbyãs
 = 
	`°æí
 (
ëa_å™s
);

825 
ncﬁs
 = 
	`cou¡_cﬁs
 (
ëa_å™s
);

826 
byãs_cﬁs_diff
 = 
nbyãs
 - 
ncﬁs
;

829 i‡(
bcd
 !
NULL
)

830 *
bcd
 = 
byãs_cﬁs_diff
;

832  
ëa_å™s
;

833 
	}
}

835 
	#APPEND_LITERAL
(
s
) do { \

836 
	`mem˝y
 (
p
, 
s
,  (s) - 1); \

837 
p
 + (
s
) - 1; \

838 } 0)

	)

843 
	#move_to_íd
(
s
Ë†
	`°rchr
 (s, '\0');

	)

845 #i‚de‡
MAX


846 
	#MAX
(
a
, 
b
Ë(◊Ë>(bË? (aË: (b))

	)

850 
	$¸óã_image
 (
b¨_¥ogªss
 *
bp
, 
dl_tŸÆ_time
, 
boﬁ
 
d⁄e
)

852 *
p
 = 
bp
->
buf„r
;

853 
wgöt
 
size
 = 
bp
->
öôül_Àngth
 + bp->
cou¡
;

855 c⁄° *
size_grou≥d
 = 
	`wôh_thoußnd_£ps
 (
size
);

856 
size_grou≥d_Àn
 = 
	`cou¡_cﬁs
 (
size_grou≥d
);

858 
size_grou≥d_diff
 = 
	`°æí
 (
size_grou≥d
Ë- 
size_grou≥d_Àn
;

859 
size_grou≥d_∑d
;

861 
b¨_¥ogªss_hi°
 *
hi°
 = &
bp
->hist;

881 
dlbyãs_size
 = 1 + 
	`MAX
 (
size_grou≥d_Àn
, 11);

882 
¥ogªss_size
 = 
bp
->
width
 - (4 + 2 + 
dlbyãs_size
 + 8 + 14);

886 
byãs_cﬁs_diff
 = 0;

888 i‡(
¥ogªss_size
 < 5)

889 
¥ogªss_size
 = 0;

892 i‡(
bp
->
tŸÆ_Àngth
 > 0)

894 
≥r˚¡age
 = 100.0 * 
size
 / 
bp
->
tŸÆ_Àngth
;

895 
	`as£π
 (
≥r˚¡age
 <= 100);

897 i‡(
≥r˚¡age
 < 100)

898 
	`•rötf
 (
p
, "%2d%% ", 
≥r˚¡age
);

900 
	`°r˝y
 (
p
, "100%");

901 
p
 += 4;

904 
	`APPEND_LITERAL
 (" ");

907 i‡(
¥ogªss_size
 && 
bp
->
tŸÆ_Àngth
 > 0)

910 
ösz
 = ()
bp
->
öôül_Àngth
 / bp->
tŸÆ_Àngth
 * 
¥ogªss_size
;

913 
dlsz
 = ()
size
 / 
bp
->
tŸÆ_Àngth
 * 
¥ogªss_size
;

915 *
begö
;

916 
i
;

918 
	`as£π
 (
dlsz
 <
¥ogªss_size
);

919 
	`as£π
 (
ösz
 <
dlsz
);

921 *
p
++ = '[';

922 
begö
 = 
p
;

926 
i
 = 0; i < 
ösz
; i++)

927 *
p
++ = '+';

928 
dlsz
 -
ösz
;

929 i‡(
dlsz
 > 0)

931 
i
 = 0; i < 
dlsz
 - 1; i++)

932 *
p
++ = '=';

933 *
p
++ = '>';

936 
p
 - 
begö
 < 
¥ogªss_size
)

937 *
p
++ = ' ';

938 *
p
++ = ']';

940 i‡(
¥ogªss_size
)

944 
öd
 = 
bp
->
tick
 % (
¥ogªss_size
 * 2 - 6);

945 
i
, 
pos
;

948 i‡(
öd
 < 
¥ogªss_size
 - 2)

949 
pos
 = 
öd
 + 1;

951 
pos
 = 
¥ogªss_size
 - (
öd
 -Örogress_size + 5);

953 *
p
++ = '[';

954 
i
 = 0; i < 
¥ogªss_size
; i++)

956 i‡(
i
 =
pos
 - 1Ë*
p
++ = '<';

957 i‡(
i
 =
pos
 ) *
p
++ = '=';

958 i‡(
i
 =
pos
 + 1Ë*
p
++ = '>';

960 *
p
++ = ' ';

962 *
p
++ = ']';

964 ++
bp
->
tick
;

968 
	`•rötf
 (
p
, " %s", 
size_grou≥d
);

969 
	`move_to_íd
 (
p
);

973 
size_grou≥d_∑d
 = 11 - 
size_grou≥d_Àn
;

974 
size_grou≥d_∑d
 > 0;

975 --
size_grou≥d_∑d
)

977 *
p
++ = ' ';

981 i‡(
hi°
->
tŸÆ_time
 > 0 && hi°->
tŸÆ_byãs
)

983 c⁄° *
sh‹t_unôs
[] = { "B/s", "K/s", "M/s", "G/s" };

984 
unôs
 = 0;

987 
wgöt
 
dlqu™t
 = 
hi°
->
tŸÆ_byãs
 + 
bp
->
ª˚¡_byãs
;

988 
d…ime
 = 
hi°
->
tŸÆ_time
 + (
dl_tŸÆ_time
 - 
bp
->
ª˚¡_°¨t
);

989 
dl•ìd
 = 
	`ˇlc_øã
 (
dlqu™t
, 
d…ime
, &
unôs
);

990 
	`•rötf
 (
p
, " %4.*f%s", 
dl•ìd
 >= 99.95 ? 0 : dlspeed >= 9.995 ? 1 : 2,

991 
dl•ìd
, 
sh‹t_unôs
[
unôs
]);

992 
	`move_to_íd
 (
p
);

995 
	`APPEND_LITERAL
 (" --.-K/s");

997 i‡(!
d⁄e
)

1002 i‡(
bp
->
tŸÆ_Àngth
 > 0 && bp->
cou¡
 > 0 && 
dl_tŸÆ_time
 > 3)

1004 
ëa
;

1009 i‡(
bp
->
tŸÆ_Àngth
 !
size


1010 && 
bp
->
œ°_ëa_vÆue
 != 0

1011 && 
dl_tŸÆ_time
 - 
bp
->
œ°_ëa_time
 < 
ETA_REFRESH_INTERVAL
)

1012 
ëa
 = 
bp
->
œ°_ëa_vÆue
;

1021 
wgöt
 
byãs_ªmaöög
 = 
bp
->
tŸÆ_Àngth
 - 
size
;

1022 
ëa_
 = 
dl_tŸÆ_time
 * 
byãs_ªmaöög
 / 
bp
->
cou¡
;

1023 i‡(
ëa_
 >
INT_MAX
 - 1)

1024 
skù_ëa
;

1025 
ëa
 = (Ë(
ëa_
 + 0.5);

1026 
bp
->
œ°_ëa_vÆue
 = 
ëa
;

1027 
bp
->
œ°_ëa_time
 = 
dl_tŸÆ_time
;

1030 
	`•rötf
 (
p
, 
	`gë_ëa
(&
byãs_cﬁs_diff
),

1031 
	`ëa_to_hum™_sh‹t
 (
ëa
, 
Ál£
));

1032 
	`move_to_íd
 (
p
);

1034 i‡(
bp
->
tŸÆ_Àngth
 > 0)

1036 
skù_ëa
:

1037 
	`APPEND_LITERAL
 (" ");

1043 
nbyãs
;

1044 
ncﬁs
;

1048 
	`°r˝y
 (
p
, 
	`_
(" in "));

1049 
nbyãs
 = 
	`°æí
 (
p
);

1050 
ncﬁs
 = 
	`cou¡_cﬁs
 (
p
);

1051 
byãs_cﬁs_diff
 = 
nbyãs
 - 
ncﬁs
;

1052 
p
 +
nbyãs
;

1053 i‡(
dl_tŸÆ_time
 >= 10)

1054 
	`°r˝y
 (
p
, 
	`ëa_to_hum™_sh‹t
 ((Ë(
dl_tŸÆ_time
 + 0.5), 
Ál£
));

1056 
	`•rötf
 (
p
, "%ss", 
	`¥öt_decimÆ
 (
dl_tŸÆ_time
));

1057 
	`move_to_íd
 (
p
);

1060 
p
 - 
bp
->
buf„r
 - 
byãs_cﬁs_diff
 - 
size_grou≥d_diff
 < bp->
width
)

1061 *
p
++ = ' ';

1062 *
p
 = '\0';

1063 
	}
}

1069 
	$di•œy_image
 (*
buf
)

1071 
boﬁ
 
ﬁd
 = 
	`log_£t_ßve_c⁄ãxt
 (
Ál£
);

1072 
	`logputs
 (
LOG_VERBOSE
, "\r");

1073 
	`logputs
 (
LOG_VERBOSE
, 
buf
);

1074 
	`log_£t_ßve_c⁄ãxt
 (
ﬁd
);

1075 
	}
}

1078 
	$b¨_£t_∑øms
 (c⁄° *
∑øms
)

1080 *
ãrm
 = 
	`gëív
 ("TERM");

1082 i‡(
∑øms


1083 && 0 =
	`°rcmp
 (
∑øms
, "force"))

1084 
cuºít_im∂_locked
 = 1;

1086 i‡((
›t
.
lfûíame


1087 #ifde‡
HAVE_ISATTY


1091 || !
	`ißây
 (
	`fûío
 (
°dîr
))

1098 || (
ãrm
 && 0 =
	`°rcmp
 (term, "emacs"))

1100 && !
cuºít_im∂_locked
)

1107 
	`£t_¥ogªss_im∂emíèti⁄
 (
FALLBACK_PROGRESS_IMPLEMENTATION
);

1110 
	}
}

1112 #ifde‡
SIGWINCH


1114 
	$¥ogªss_h™dÀ_sigwöch
 (
sig
)

1116 
ª˚ived_sigwöch
 = 1;

1117 
	`sig«l
 (
SIGWINCH
, 
¥ogªss_h™dÀ_sigwöch
);

1118 
	}
}

1138 
	$ëa_to_hum™_sh‹t
 (
£cs
, 
boﬁ
 
c⁄dí£d
)

1140 
buf
[10];

1141 
œ°
 = -1;

1142 c⁄° *
•a˚
 = 
c⁄dí£d
 ? "" : " ";

1147 i‡(
£cs
 =
œ°
)

1148  
buf
;

1149 
œ°
 = 
£cs
;

1151 i‡(
£cs
 < 100)

1152 
	`•rötf
 (
buf
, "%ds", 
£cs
);

1153 i‡(
£cs
 < 100 * 60)

1154 
	`•rötf
 (
buf
, "%dm%s%ds", 
£cs
 / 60, 
•a˚
, secs % 60);

1155 i‡(
£cs
 < 48 * 3600)

1156 
	`•rötf
 (
buf
, "%dh%s%dm", 
£cs
 / 3600, 
•a˚
, (secs / 60) % 60);

1157 i‡(
£cs
 < 100 * 86400)

1158 
	`•rötf
 (
buf
, "%dd%s%dh", 
£cs
 / 86400, 
•a˚
, (secs / 3600) % 24);

1161 
	`•rötf
 (
buf
, "%dd", 
£cs
 / 86400);

1163  
buf
;

1164 
	}
}

	@src/progress.h

31 #i‚de‡
PROGRESS_H


32 
	#PROGRESS_H


	)

34 
boﬁ
 
vÆid_¥ogªss_im∂emíèti⁄_p
 (const *);

35 
£t_¥ogªss_im∂emíèti⁄
 (const *);

36 
¥ogªss_scheduÀ_ªdúe˘
 ();

38 *
¥ogªss_¸óã
 (
wgöt
, wgint);

39 
boﬁ
 
¥ogªss_öãø˘ive_p
 (*);

40 
¥ogªss_upd©e
 (*, 
wgöt
, );

41 
¥ogªss_föish
 (*, );

43 
¥ogªss_h™dÀ_sigwöch
 ();

	@src/ptimer.c

54 
	~"wgë.h
"

56 
	~<°dio.h
>

57 
	~<°dlib.h
>

58 
	~<°rög.h
>

59 
	~<î∫o.h
>

60 
	~<uni°d.h
>

61 
	~<time.h
>

62 #ifde‡
HAVE_SYS_TIME_H


63 
	~<sys/time.h
>

69 #ifde‡
__CYGWIN__


70 
	~<wödows.h
>

73 
	~"utûs.h
"

74 
	~"±imî.h
"

79 #unde‡
PTIMER_POSIX


80 #unde‡
PTIMER_GETTIMEOFDAY


81 #unde‡
PTIMER_WINDOWS


83 #i‡
deföed
(
WINDOWS
Ë|| deföed(
__CYGWIN__
)

84 
	#PTIMER_WINDOWS


	)

85 #ñi‡
_POSIX_TIMERS
 - 0 > 0

86 
	#PTIMER_POSIX


	)

88 
	#PTIMER_GETTIMEOFDAY


	)

91 #ifde‡
PTIMER_POSIX


99 
time•ec
 
	t±imî_sy°em_time
;

101 
	#IMPL_öô
 
posix_öô


	)

102 
	#IMPL_mósuª
 
posix_mósuª


	)

103 
	#IMPL_diff
 
posix_diff


	)

104 
	#IMPL_ªsﬁuti⁄
 
posix_ªsﬁuti⁄


	)

108 
	gposix_˛ock_id
;

111 
	gposix_˛ock_ªsﬁuti⁄
;

116 
	$posix_öô
 ()

122 
	#NO_SYSCONF_CHECK
 -1

	)

124 
id
;

125 
sysc⁄f_«me
;

126 } 
˛ocks
[] = {

127 #i‡
	`deföed
(
_POSIX_MONOTONIC_CLOCK
) && _POSIX_MONOTONIC_CLOCK - 0 >= 0

128 { 
CLOCK_MONOTONIC
, 
_SC_MONOTONIC_CLOCK
 },

130 #ifde‡
CLOCK_HIGHRES


131 { 
CLOCK_HIGHRES
, 
NO_SYSCONF_CHECK
 },

133 { 
CLOCK_REALTIME
, 
NO_SYSCONF_CHECK
 },

135 
size_t
 
i
;

141 
i
 = 0; i < 
	`cou¡of
 (
˛ocks
); i++)

143 
time•ec
 
r
;

144 i‡(
˛ocks
[
i
].
sysc⁄f_«me
 !
NO_SYSCONF_CHECK
)

145 i‡(
	`sysc⁄f
 (
˛ocks
[
i
].
sysc⁄f_«me
) < 0)

147 i‡(
	`˛ock_gëªs
 (
˛ocks
[
i
].
id
, &
r
) < 0)

149 
posix_˛ock_id
 = 
˛ocks
[
i
].
id
;

150 
posix_˛ock_ªsﬁuti⁄
 = (Ë
r
.
tv_£c
 +Ñ.
tv_n£c
 / 1e9;

152 i‡(
posix_˛ock_ªsﬁuti⁄
 == 0)

153 
posix_˛ock_ªsﬁuti⁄
 = 1e-3;

156 i‡(
i
 =
	`cou¡of
 (
˛ocks
))

160 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot get REALTIME clock frequency: %s\n"),

161 
	`°ªº‹
 (
î∫o
));

163 
posix_˛ock_id
 = 
CLOCK_REALTIME
;

164 
posix_˛ock_ªsﬁuti⁄
 = 1e-3;

166 
	}
}

168 
ölöe
 

169 
	$posix_mósuª
 (
±imî_sy°em_time
 *
p°
)

171 
	`˛ock_gëtime
 (
posix_˛ock_id
, 
p°
);

172 
	}
}

174 
ölöe
 

175 
	$posix_diff
 (
±imî_sy°em_time
 *
p°1
,Ötimî_sy°em_timê*
p°2
)

177  ((
p°1
->
tv_£c
 - 
p°2
->tv_sec)

178 + (
p°1
->
tv_n£c
 - 
p°2
->tv_nsec) / 1e9);

179 
	}
}

181 
ölöe
 

182 
	$posix_ªsﬁuti⁄
 ()

184  
posix_˛ock_ªsﬁuti⁄
;

185 
	}
}

188 #ifde‡
PTIMER_GETTIMEOFDAY


195 
timevÆ
 
	t±imî_sy°em_time
;

197 
	#IMPL_mósuª
 
gëtimeofday_mósuª


	)

198 
	#IMPL_diff
 
gëtimeofday_diff


	)

199 
	#IMPL_ªsﬁuti⁄
 
gëtimeofday_ªsﬁuti⁄


	)

201 
ölöe
 

202 
	$gëtimeofday_mósuª
 (
±imî_sy°em_time
 *
p°
)

204 
	`gëtimeofday
 (
p°
, 
NULL
);

205 
	}
}

207 
ölöe
 

208 
	$gëtimeofday_diff
 (
±imî_sy°em_time
 *
p°1
,Ötimî_sy°em_timê*
p°2
)

210  ((
p°1
->
tv_£c
 - 
p°2
->tv_sec)

211 + (
p°1
->
tv_u£c
 - 
p°2
->tv_usec) / 1e6);

212 
	}
}

214 
ölöe
 

215 
	$gëtimeofday_ªsﬁuti⁄
 ()

221 
	}
}

224 #ifde‡
PTIMER_WINDOWS


233 
DWORD
 
	ml‹es
;

234 
LARGE_INTEGER
 
	mhúes
;

235 } 
	t±imî_sy°em_time
;

237 
	#IMPL_öô
 
wödows_öô


	)

238 
	#IMPL_mósuª
 
wödows_mósuª


	)

239 
	#IMPL_diff
 
wödows_diff


	)

240 
	#IMPL_ªsﬁuti⁄
 
wödows_ªsﬁuti⁄


	)

244 
boﬁ
 
	gwödows_húes_timîs
;

249 
	gwödows_húes_‰eq
;

252 
	$wödows_öô
 ()

254 
LARGE_INTEGER
 
‰eq
;

255 
‰eq
.
QuadP¨t
 = 0;

256 
	`QuîyPîf‹m™˚Fªquícy
 (&
‰eq
);

257 i‡(
‰eq
.
QuadP¨t
 != 0)

259 
wödows_húes_timîs
 = 
åue
;

260 
wödows_húes_‰eq
 = (Ë
‰eq
.
QuadP¨t
;

262 
	}
}

264 
ölöe
 

265 
	$wödows_mósuª
 (
±imî_sy°em_time
 *
p°
)

267 i‡(
wödows_húes_timîs
)

268 
	`QuîyPîf‹m™˚Cou¡î
 (&
p°
->
húes
);

275 
p°
->
l‹es
 = 
	`GëTickCou¡
 ();

276 
	}
}

278 
ölöe
 

279 
	$wödows_diff
 (
±imî_sy°em_time
 *
p°1
,Ötimî_sy°em_timê*
p°2
)

281 i‡(
wödows_húes_timîs
)

282  (
p°1
->
húes
.
QuadP¨t
 - 
p°2
->húes.QuadP¨tË/ 
wödows_húes_‰eq
;

284  
p°1
->
l‹es
 - 
p°2
->lores;

285 
	}
}

288 
	$wödows_ªsﬁuti⁄
 ()

290 i‡(
wödows_húes_timîs
)

291  1.0 / 
wödows_húes_‰eq
;

294 
	}
}

299 
	s±imî
 {

302 
±imî_sy°em_time
 
	m°¨t
;

305 
	mñ≠£d_œ°
;

310 
	mñ≠£d_¥e_°¨t
;

315 
±imî
 *

316 
	$±imî_√w
 ()

318 
±imî
 *
±
 = 
	`x√w0
 (ptimer);

319 #ifde‡
IMPL_öô


320 
boﬁ
 
öô_d⁄e
;

321 i‡(!
öô_d⁄e
)

323 
öô_d⁄e
 = 
åue
;

324 
	`IMPL_öô
 ();

327 
	`±imî_ª£t
 (
±
);

328  
±
;

329 
	}
}

335 
	$±imî_de°roy
 (
±imî
 *
±
)

337 
	`x‰ì
 (
±
);

338 
	}
}

345 
	$±imî_ª£t
 (
±imî
 *
±
)

348 
	`IMPL_mósuª
 (&
±
->
°¨t
);

349 
±
->
ñ≠£d_œ°
 = 0;

350 
±
->
ñ≠£d_¥e_°¨t
 = 0;

351 
	}
}

362 
	$±imî_mósuª
 (
±imî
 *
±
)

364 
±imî_sy°em_time
 
now
;

365 
ñ≠£d
;

367 
	`IMPL_mósuª
 (&
now
);

368 
ñ≠£d
 = 
±
->
ñ≠£d_¥e_°¨t
 + 
	`IMPL_diff
 (&
now
, &±->
°¨t
);

386 i‡(
ñ≠£d
 < 
±
->
ñ≠£d_œ°
)

388 
±
->
°¨t
 = 
now
;

389 
±
->
ñ≠£d_¥e_°¨t
 =Öt->
ñ≠£d_œ°
;

390 
ñ≠£d
 = 
±
->
ñ≠£d_œ°
;

393 
±
->
ñ≠£d_œ°
 = 
ñ≠£d
;

394  
ñ≠£d
;

395 
	}
}

402 
	$±imî_ªad
 (c⁄° 
±imî
 *
±
)

404  
±
->
ñ≠£d_œ°
;

405 
	}
}

412 
	$±imî_ªsﬁuti⁄
 ()

414  
	`IMPL_ªsﬁuti⁄
 ();

415 
	}
}

	@src/ptimer.h

31 #i‚de‡
PTIMER_H


32 
	#PTIMER_H


	)

34 
	g±imî
;

37 
±imî
 *
±imî_√w
 ();

38 
±imî_de°roy
 (
±imî
 *);

40 
±imî_ª£t
 (
±imî
 *);

41 
±imî_mósuª
 (
±imî
 *);

42 
±imî_ªad
 (c⁄° 
±imî
 *);

44 
±imî_ªsﬁuti⁄
 ();

	@src/recur.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

39 
	~<as£π.h
>

41 
	~"uæ.h
"

42 
	~"ªcur.h
"

43 
	~"utûs.h
"

44 
	~"ªå.h
"

45 
	~"·p.h
"

46 
	~"ho°.h
"

47 
	~"hash.h
"

48 
	~"ªs.h
"

49 
	~"c⁄vît.h
"

50 
	~"html-uæ.h
"

51 
	~"css-uæ.h
"

52 
	~"•idî.h
"

56 
	squeue_ñemít
 {

57 c⁄° *
	muæ
;

58 c⁄° *
	mª„ªr
;

59 
	mdïth
;

60 
boﬁ
 
	mhtml_Ælowed
;

62 
úi
 *
	múi
;

63 
boﬁ
 
	mcss_Ælowed
;

65 
queue_ñemít
 *
	m√xt
;

68 
	suæ_queue
 {

69 
queue_ñemít
 *
	mhód
;

70 
queue_ñemít
 *
	mèû
;

71 
	mcou¡
, 
	mmaxcou¡
;

76 
uæ_queue
 *

77 
	$uæ_queue_√w
 ()

79 
uæ_queue
 *
queue
 = 
	`x√w0
 (url_queue);

80  
queue
;

81 
	}
}

86 
	$uæ_queue_dñëe
 (
uæ_queue
 *
queue
)

88 
	`x‰ì
 (
queue
);

89 
	}
}

96 
	$uæ_íqueue
 (
uæ_queue
 *
queue
, 
úi
 *
i
,

97 c⁄° *
uæ
, c⁄° *
ª„ªr
, 
dïth
,

98 
boﬁ
 
html_Ælowed
, boﬁ 
css_Ælowed
)

100 
queue_ñemít
 *
qñ
 = 
	`x√w
 (queue_element);

101 
qñ
->
úi
 = 
i
;

102 
qñ
->
uæ
 = url;

103 
qñ
->
ª„ªr
 =Ñeferer;

104 
qñ
->
dïth
 = depth;

105 
qñ
->
html_Ælowed
 = html_allowed;

106 
qñ
->
css_Ælowed
 = css_allowed;

107 
qñ
->
√xt
 = 
NULL
;

109 ++
queue
->
cou¡
;

110 i‡(
queue
->
cou¡
 > queue->
maxcou¡
)

111 
queue
->
maxcou¡
 = queue->
cou¡
;

113 
	`DEBUGP
 (("Enqueuing %sát depth %d\n",

114 
	`quŸórg_n_°yÀ
 (0, 
esˇ≥_quŸög_°yÀ
, 
uæ
), 
dïth
));

115 
	`DEBUGP
 (("Queuêcou¡ %d, maxcou¡ %d.\n", 
queue
->
cou¡
, queue->
maxcou¡
));

117 i‡(
i
)

118 
	`DEBUGP
 (("[IRI Enqueuög %†wôh %s\n", 
	`quŸe_n
 (0, 
uæ
),

119 
i
->
uri_ícodög
 ? 
	`quŸe_n
 (1, i->uri_encoding) : "None"));

121 i‡(
queue
->
èû
)

122 
queue
->
èû
->
√xt
 = 
qñ
;

123 
queue
->
èû
 = 
qñ
;

125 i‡(!
queue
->
hód
)

126 
queue
->
hód
 = queue->
èû
;

127 
	}
}

132 
boﬁ


133 
	$uæ_dequeue
 (
uæ_queue
 *
queue
, 
úi
 **
i
,

134 c⁄° **
uæ
, c⁄° **
ª„ªr
, *
dïth
,

135 
boﬁ
 *
html_Ælowed
, boﬁ *
css_Ælowed
)

137 
queue_ñemít
 *
qñ
 = 
queue
->
hód
;

139 i‡(!
qñ
)

140  
Ál£
;

142 
queue
->
hód
 = queue->hód->
√xt
;

143 i‡(!
queue
->
hód
)

144 
queue
->
èû
 = 
NULL
;

146 *
i
 = 
qñ
->
úi
;

147 *
uæ
 = 
qñ
->url;

148 *
ª„ªr
 = 
qñ
->referer;

149 *
dïth
 = 
qñ
->depth;

150 *
html_Ælowed
 = 
qñ
->html_allowed;

151 *
css_Ælowed
 = 
qñ
->css_allowed;

153 --
queue
->
cou¡
;

155 
	`DEBUGP
 (("Dequeuing %sát depth %d\n",

156 
	`quŸórg_n_°yÀ
 (0, 
esˇ≥_quŸög_°yÀ
, 
qñ
->
uæ
), qñ->
dïth
));

157 
	`DEBUGP
 (("Queuêcou¡ %d, maxcou¡ %d.\n", 
queue
->
cou¡
, queue->
maxcou¡
));

159 
	`x‰ì
 (
qñ
);

160  
åue
;

161 
	}
}

163 
boﬁ
 
dow∆ﬂd_chûd_p
 (c⁄° 
uæpos
 *, 
uæ
 *, ,

164 
uæ
 *, 
hash_èbÀ
 *, 
úi
 *);

165 
boﬁ
 
des˚nd_ªdúe˘_p
 (c⁄° *, 
uæ
 *, ,

166 
uæ
 *, 
hash_èbÀ
 *, 
úi
 *);

190 
uîr_t


191 
	$ªåõve_åì
 (
uæ
 *
°¨t_uæ_∑r£d
, 
úi
 *
pi
)

193 
uîr_t
 
°©us
 = 
RETROK
;

196 
uæ_queue
 *
queue
;

200 
hash_èbÀ
 *
bœckli°
;

202 
úi
 *
i
 = 
	`úi_√w
 ();

204 
	#COPYSTR
(
x
Ë(xË? 
	`x°rdup
(xË: 
NULL
;

	)

206 i‡(
pi
)

208 
i
->
uri_ícodög
 = 
	`COPYSTR
 (
pi
->uri_encoding);

209 
i
->
c⁄ã¡_ícodög
 = 
	`COPYSTR
 (
pi
->content_encoding);

210 
i
->
utf8_ícode
 = 
pi
->utf8_encode;

213 
	`£t_uri_ícodög
 (
i
, 
›t
.
loˇÀ
, 
åue
);

214 #unde‡
COPYSTR


216 
queue
 = 
	`uæ_queue_√w
 ();

217 
bœckli°
 = 
	`make_°rög_hash_èbÀ
 (0);

221 
	`uæ_íqueue
 (
queue
, 
i
, 
	`x°rdup
 (
°¨t_uæ_∑r£d
->
uæ
), 
NULL
, 0, 
åue
,

222 
Ál£
);

223 
	`°rög_£t_add
 (
bœckli°
, 
°¨t_uæ_∑r£d
->
uæ
);

227 
boﬁ
 
des˚nd
 = 
Ál£
;

228 *
uæ
, *
ª„ªr
, *
fûe
 = 
NULL
;

229 
dïth
;

230 
boﬁ
 
html_Ælowed
, 
css_Ælowed
;

231 
boﬁ
 
is_css
 = 
Ál£
;

232 
boﬁ
 
dash_p_Àaf_HTML
 = 
Ál£
;

234 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

236 i‡(
°©us
 =
FWRITEERR
)

241 i‡(!
	`uæ_dequeue
 (
queue
, (
úi
 **Ë&
i
,

242 (c⁄° **)&
uæ
, (c⁄° **)&
ª„ªr
,

243 &
dïth
, &
html_Ælowed
, &
css_Ælowed
))

254 i‡(
dl_uæ_fûe_m≠
 && 
	`hash_èbÀ_c⁄èös
 (dl_uæ_fûe_m≠, 
uæ
))

256 
fûe
 = 
	`x°rdup
 (
	`hash_èbÀ_gë
 (
dl_uæ_fûe_m≠
, 
uæ
));

258 
	`DEBUGP
 (("Already downloaded \"%s\",Ñeusing it from \"%s\".\n",

259 
uæ
, 
fûe
));

262 i‡(
html_Ælowed


263 && 
dow∆ﬂded_html_£t


264 && 
	`°rög_£t_c⁄èös
 (
dow∆ﬂded_html_£t
, 
fûe
))

266 
des˚nd
 = 
åue
;

267 
is_css
 = 
Ál£
;

269 i‡(
css_Ælowed


270 && 
dow∆ﬂded_css_£t


271 && 
	`°rög_£t_c⁄èös
 (
dow∆ﬂded_css_£t
, 
fûe
))

273 
des˚nd
 = 
åue
;

274 
is_css
 = 
åue
;

279 
dt
 = 0, 
uæ_îr
;

280 *
ªdúe˘ed
 = 
NULL
;

281 
uæ
 *
uæ_∑r£d
 = 
	`uæ_∑r£
 (uæ, &
uæ_îr
, 
i
, 
åue
);

283 
°©us
 = 
	`ªåõve_uæ
 (
uæ_∑r£d
, 
uæ
, &
fûe
, &
ªdúe˘ed
, 
ª„ªr
,

284 &
dt
, 
Ál£
, 
i
, 
åue
);

286 i‡(
html_Ælowed
 && 
fûe
 && 
°©us
 =
RETROK


287 && (
dt
 & 
RETROKF
Ë&& (dà& 
TEXTHTML
))

289 
des˚nd
 = 
åue
;

290 
is_css
 = 
Ál£
;

296 i‡(
fûe
 && 
°©us
 =
RETROK


297 && (
dt
 & 
RETROKF
) &&

298 ((
dt
 & 
TEXTCSS
Ë|| 
css_Ælowed
))

300 
des˚nd
 = 
åue
;

301 
is_css
 = 
åue
;

304 i‡(
ªdúe˘ed
)

309 i‡(
des˚nd
)

311 i‡(!
	`des˚nd_ªdúe˘_p
 (
ªdúe˘ed
, 
uæ_∑r£d
, 
dïth
,

312 
°¨t_uæ_∑r£d
, 
bœckli°
, 
i
))

313 
des˚nd
 = 
Ál£
;

317 
	`°rög_£t_add
 (
bœckli°
, 
uæ
);

320 
	`x‰ì
 (
uæ
);

321 
uæ
 = 
ªdúe˘ed
;

325 
	`x‰ì
 (
uæ
);

326 
uæ
 = 
	`x°rdup
 (
uæ_∑r£d
->url);

328 
	`uæ_‰ì
(
uæ_∑r£d
);

331 i‡(
›t
.
•idî
)

333 
	`visôed_uæ
 (
uæ
, 
ª„ªr
);

336 i‡(
des˚nd


337 && 
dïth
 >
›t
.
ª˛evñ
 && o±.ª˛evñ !
INFINITE_RECURSION
)

339 i‡(
›t
.
∑ge_ªquisôes


340 && (
dïth
 =
›t
.
ª˛evñ
 || depth == opt.reclevel + 1))

349 
dash_p_Àaf_HTML
 = 
åue
;

356 
	`DEBUGP
 (("Not descending further;át depth %d, max. %d.\n",

357 
dïth
, 
›t
.
ª˛evñ
));

358 
des˚nd
 = 
Ál£
;

365 i‡(
des˚nd
)

367 
boﬁ
 
mëa_dißŒow_fﬁlow
 = 
Ál£
;

368 
uæpos
 *
chûdªn


369 
is_css
 ? 
	`gë_uæs_css_fûe
 (
fûe
, 
uæ
) :

370 
	`gë_uæs_html
 (
fûe
, 
uæ
, &
mëa_dißŒow_fﬁlow
, 
i
);

372 i‡(
›t
.
u£_robŸs
 && 
mëa_dißŒow_fﬁlow
)

374 
	`‰ì_uæpos
 (
chûdªn
);

375 
chûdªn
 = 
NULL
;

378 i‡(
chûdªn
)

380 
uæpos
 *
chûd
 = 
chûdªn
;

381 
uæ
 *
uæ_∑r£d
 = 
	`uæ_∑r£
 (uæ, 
NULL
, 
i
, 
åue
);

382 
úi
 *
ci
;

383 *
ª„ªr_uæ
 = 
uæ
;

384 
boﬁ
 
°rù_auth
 = (
uæ_∑r£d
 !
NULL


385 && 
uæ_∑r£d
->
u£r
 !
NULL
);

386 
	`as£π
 (
uæ_∑r£d
 !
NULL
);

389 i‡(
°rù_auth
)

390 
ª„ªr_uæ
 = 
	`uæ_°rög
 (
uæ_∑r£d
, 
URL_AUTH_HIDE
);

392 ; 
chûd
; chûd = chûd->
√xt
)

394 i‡(
chûd
->
ign‹e_whí_dow∆ﬂdög
)

396 i‡(
dash_p_Àaf_HTML
 && !
chûd
->
lök_ölöe_p
)

398 i‡(
	`dow∆ﬂd_chûd_p
 (
chûd
, 
uæ_∑r£d
, 
dïth
, 
°¨t_uæ_∑r£d
,

399 
bœckli°
, 
i
))

401 
ci
 = 
	`úi_√w
 ();

402 
	`£t_uri_ícodög
 (
ci
, 
i
->
c⁄ã¡_ícodög
, 
Ál£
);

403 
	`uæ_íqueue
 (
queue
, 
ci
, 
	`x°rdup
 (
chûd
->
uæ
->url),

404 
	`x°rdup
 (
ª„ªr_uæ
), 
dïth
 + 1,

405 
chûd
->
lök_ex≥˘_html
,

406 
chûd
->
lök_ex≥˘_css
);

410 
	`°rög_£t_add
 (
bœckli°
, 
chûd
->
uæ
->url);

414 i‡(
°rù_auth
)

415 
	`x‰ì
 (
ª„ªr_uæ
);

416 
	`uæ_‰ì
 (
uæ_∑r£d
);

417 
	`‰ì_uæpos
 (
chûdªn
);

421 i‡(
fûe


422 && (
›t
.
dñëe_a·î


423 || 
›t
.
•idî


424 || !
	`ac˚±abÀ
 (
fûe
)))

430 
	`DEBUGP
 (("Removing file dueÅo %s inÑecursive_retrieve():\n",

431 
›t
.
dñëe_a·î
 ? "--delete-after" :

432 (
›t
.
•idî
 ? "--spider" :

434 
	`log¥ötf
 (
LOG_VERBOSE
,

435 (
›t
.
dñëe_a·î
 || o±.
•idî


436 ? 
	`_
("Removing %s.\n")

437 : 
	`_
("Removing %s since it should beÑejected.\n")),

438 
fûe
);

439 i‡(
	`u∆ök
 (
fûe
))

440 
	`log¥ötf
 (
LOG_NOTQUIET
, "u∆ök: %s\n", 
	`°ªº‹
 (
î∫o
));

441 
	`logputs
 (
LOG_VERBOSE
, "\n");

442 
	`ªgi°î_dñëe_fûe
 (
fûe
);

445 
	`x‰ì
 (
uæ
);

446 
	`x‰ì_nuŒ
 (
ª„ªr
);

447 
	`x‰ì_nuŒ
 (
fûe
);

448 
	`úi_‰ì
 (
i
);

454 *
d1
, *
d2
;

455 
d3
;

456 
boﬁ
 
d4
, 
d5
;

457 
úi
 *
d6
;

458 
	`uæ_dequeue
 (
queue
, (
úi
 **)&
d6
,

459 (c⁄° **)&
d1
, (c⁄° **)&
d2
, &
d3
, &
d4
, &
d5
))

461 
	`úi_‰ì
 (
d6
);

462 
	`x‰ì
 (
d1
);

463 
	`x‰ì_nuŒ
 (
d2
);

466 
	`uæ_queue_dñëe
 (
queue
);

468 
	`°rög_£t_‰ì
 (
bœckli°
);

470 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

471  
QUOTEXC
;

472 i‡(
°©us
 =
FWRITEERR
)

473  
FWRITEERR
;

475  
RETROK
;

476 
	}
}

486 
boﬁ


487 
	$dow∆ﬂd_chûd_p
 (c⁄° 
uæpos
 *
upos
, 
uæ
 *
∑ª¡
, 
dïth
,

488 
uæ
 *
°¨t_uæ_∑r£d
, 
hash_èbÀ
 *
bœckli°
,

489 
úi
 *iri)

491 
uæ
 *
u
 = 
upos
->url;

492 c⁄° *
uæ
 = 
u
->url;

493 
boﬁ
 
u_scheme_like_hâp
;

495 
	`DEBUGP
 (("Decidög whëhîÅÿíqueuê\"%s\".\n", 
uæ
));

497 i‡(
	`°rög_£t_c⁄èös
 (
bœckli°
, 
uæ
))

499 i‡(
›t
.
•idî
)

501 *
ª„ºî
 = 
	`uæ_°rög
 (
∑ª¡
, 
URL_AUTH_HIDE_PASSWD
);

502 
	`DEBUGP
 (("dow∆ﬂd_chûd_p:Ö¨ít->uæ is: %s\n", 
	`quŸe
 (
∑ª¡
->
uæ
)));

503 
	`visôed_uæ
 (
uæ
, 
ª„ºî
);

504 
	`x‰ì
 (
ª„ºî
);

506 
	`DEBUGP
 (("Already onÅhe blackÜist.\n"));

507 
out
;

532 
u_scheme_like_hâp
 = 
	`schemes_¨e_simû¨_p
 (
u
->
scheme
, 
SCHEME_HTTP
);

535 i‡(!
u_scheme_like_hâp
 && !(
u
->
scheme
 =
SCHEME_FTP
 && 
›t
.
fﬁlow_·p
))

537 
	`DEBUGP
 (("Not followingÇon-HTTP schemes.\n"));

538 
out
;

543 i‡(
u_scheme_like_hâp
)

544 i‡(
›t
.
ªœtive_⁄ly
 && !
upos
->
lök_ªœtive_p
)

546 
	`DEBUGP
 (("It doesn'tÑeallyÜookÜikeáÑelativeÜink.\n"));

547 
out
;

552 i‡(!
	`ac˚±_domaö
 (
u
))

554 
	`DEBUGP
 (("The domain wasÇotáccepted.\n"));

555 
out
;

563 i‡(
›t
.
no_∑ª¡


564 && 
	`schemes_¨e_simû¨_p
 (
u
->
scheme
, 
°¨t_uæ_∑r£d
->scheme)

565 && 0 =
	`°rˇ£cmp
 (
u
->
ho°
, 
°¨t_uæ_∑r£d
->host)

566 && (
u
->
scheme
 !
°¨t_uæ_∑r£d
->scheme

567 || 
u
->
p‹t
 =
°¨t_uæ_∑r£d
->port)

568 && !(
›t
.
∑ge_ªquisôes
 && 
upos
->
lök_ölöe_p
))

570 i‡(!
	`subdú_p
 (
°¨t_uæ_∑r£d
->
dú
, 
u
->dir))

572 
	`DEBUGP
 (("GoingÅo \"%s\" wouldÉscape \"%s\" withÇo_parent on.\n",

573 
u
->
dú
, 
°¨t_uæ_∑r£d
->dir));

574 
out
;

581 i‡(
›t
.
ö˛udes
 || o±.
ex˛udes
)

583 i‡(!
	`accdú
 (
u
->
dú
))

585 
	`DEBUGP
 (("%†(%sËi†ex˛uded/nŸ-ö˛uded.\n", 
uæ
, 
u
->
dú
));

586 
out
;

595 i‡(
u
->
fûe
[0] != '\0'

596 && !(
	`has_html_suffix_p
 (
u
->
fûe
)

601 
›t
.
ª˛evñ
 =
INFINITE_RECURSION


603 || 
dïth
 < 
›t
.
ª˛evñ
 - 1

605 || 
›t
.
∑ge_ªquisôes
)))

607 i‡(!
	`ac˚±abÀ
 (
u
->
fûe
))

609 
	`DEBUGP
 (("%s (%s) doesÇot matchácc/rejÑules.\n",

610 
uæ
, 
u
->
fûe
));

611 
out
;

616 i‡(
	`schemes_¨e_simû¨_p
 (
u
->
scheme
, 
∑ª¡
->scheme))

617 i‡(!
›t
.
•™ho°
 && 0 !
	`°rˇ£cmp
 (
∑ª¡
->
ho°
, 
u
->host))

619 
	`DEBUGP
 (("This isÇotÅhe same hostnameásÅheÖarent's (%sánd %s).\n",

620 
u
->
ho°
, 
∑ª¡
->host));

621 
out
;

625 i‡(
›t
.
u£_robŸs
 && 
u_scheme_like_hâp
)

627 
robŸ_•ecs
 *
•ecs
 = 
	`ªs_gë_•ecs
 (
u
->
ho°
, u->
p‹t
);

628 i‡(!
•ecs
)

630 *
rfûe
;

631 i‡(
	`ªs_ªåõve_fûe
 (
uæ
, &
rfûe
, 
úi
))

633 
•ecs
 = 
	`ªs_∑r£_‰om_fûe
 (
rfûe
);

637 i‡(
›t
.
dñëe_a·î
 || o±.
•idî
)

639 
	`log¥ötf
 (
LOG_VERBOSE
, "Removög %s.\n", 
rfûe
);

640 i‡(
	`u∆ök
 (
rfûe
))

641 
	`log¥ötf
 (
LOG_NOTQUIET
, "unlink: %s\n",

642 
	`°ªº‹
 (
î∫o
));

645 
	`x‰ì
 (
rfûe
);

652 
•ecs
 = 
	`ªs_∑r£
 ("", 0);

654 
	`ªs_ªgi°î_•ecs
 (
u
->
ho°
, u->
p‹t
, 
•ecs
);

659 i‡(!
	`ªs_m©ch_∑th
 (
•ecs
, 
u
->
∑th
))

661 
	`DEBUGP
 (("NŸ fﬁlowög %†beˇu£ÑobŸs.txàf‹bid†ô.\n", 
uæ
));

662 
	`°rög_£t_add
 (
bœckli°
, 
uæ
);

663 
out
;

669 
	`DEBUGP
 (("DecidedÅoÜoad it.\n"));

671  
åue
;

673 
out
:

674 
	`DEBUGP
 (("Decided NOTÅoÜoad it.\n"));

676  
Ál£
;

677 
	}
}

684 
boﬁ


685 
	$des˚nd_ªdúe˘_p
 (c⁄° *
ªdúe˘ed
, 
uæ
 *
‹ig_∑r£d
, 
dïth
,

686 
uæ
 *
°¨t_uæ_∑r£d
, 
hash_èbÀ
 *
bœckli°
,

687 
úi
 *iri)

689 
uæ
 *
√w_∑r£d
;

690 
uæpos
 *
upos
;

691 
boﬁ
 
suc˚ss
;

693 
	`as£π
 (
‹ig_∑r£d
 !
NULL
);

695 
√w_∑r£d
 = 
	`uæ_∑r£
 (
ªdúe˘ed
, 
NULL
, NULL, 
Ál£
);

696 
	`as£π
 (
√w_∑r£d
 !
NULL
);

698 
upos
 = 
	`x√w0
 (
uæpos
);

699 
upos
->
uæ
 = 
√w_∑r£d
;

701 
suc˚ss
 = 
	`dow∆ﬂd_chûd_p
 (
upos
, 
‹ig_∑r£d
, 
dïth
,

702 
°¨t_uæ_∑r£d
, 
bœckli°
, 
úi
);

704 
	`uæ_‰ì
 (
√w_∑r£d
);

705 
	`x‰ì
 (
upos
);

707 i‡(!
suc˚ss
)

708 
	`DEBUGP
 (("Redúe˘i⁄ \"%s\" faûedÅhêã°.\n", 
ªdúe˘ed
));

710  
suc˚ss
;

711 
	}
}

	@src/recur.h

32 #i‚de‡
RECUR_H


33 
	#RECUR_H


	)

35 
	~"uæ.h
"

43 
	#INFINITE_RECURSION
 -1

	)

45 
	guæpos
;

47 
ªcursive_˛ónup
 ();

48 
uîr_t
 
ªåõve_åì
 (
uæ
 *, 
úi
 *);

	@src/res.c

71 
	~"wgë.h
"

73 
	~<°dio.h
>

74 
	~<°dlib.h
>

75 
	~<°rög.h
>

76 
	~<î∫o.h
>

77 
	~<as£π.h
>

79 
	~"utûs.h
"

80 
	~"hash.h
"

81 
	~"uæ.h
"

82 
	~"ªå.h
"

83 
	~"ªs.h
"

85 #ifde‡
TESTING


86 
	~"ã°.h
"

89 
	s∑th_öfo
 {

90 *
	m∑th
;

91 
boﬁ
 
	mÆlowedp
;

92 
boﬁ
 
	mu£r_agít_exa˘_p
;

95 
	srobŸ_•ecs
 {

96 
	mcou¡
;

97 
	msize
;

98 
∑th_öfo
 *
	m∑ths
;

108 
	$m©ch_u£r_agít
 (c⁄° *
agít
, 
Àngth
,

109 
boﬁ
 *
m©ches
, boﬁ *
exa˘_m©ch
)

111 i‡(
Àngth
 =1 && *
agít
 == '*')

113 *
m©ches
 = 
åue
;

114 *
exa˘_m©ch
 = 
Ál£
;

116 i‡(
	`BOUNDED_EQUAL_NO_CASE
 (
agít
,ágíà+ 
Àngth
, "wget"))

118 *
m©ches
 = 
åue
;

119 *
exa˘_m©ch
 = 
åue
;

123 *
m©ches
 = 
Ál£
;

124 *
exa˘_m©ch
 = 
Ál£
;

126 
	}
}

132 
	$add_∑th
 (
robŸ_•ecs
 *
•ecs
, c⁄° *
∑th_b
, c⁄° *
∑th_e
,

133 
boﬁ
 
Ælowedp
, boﬁ 
exa˘p
)

135 
∑th_öfo
 
µ
;

136 i‡(
∑th_b
 < 
∑th_e
 && *path_b == '/')

139 ++
∑th_b
;

140 
µ
.
∑th
 = 
	`°rdupdñim
 (
∑th_b
, 
∑th_e
);

141 
µ
.
Ælowedp
 =állowedp;

142 
µ
.
u£r_agít_exa˘_p
 = 
exa˘p
;

143 ++
•ecs
->
cou¡
;

144 i‡(
•ecs
->
cou¡
 > s≥cs->
size
)

146 i‡(
•ecs
->
size
 == 0)

147 
•ecs
->
size
 = 1;

149 
•ecs
->
size
 <<= 1;

150 
•ecs
->
∑ths
 = 
	`xªÆloc
 (specs->paths,

151 
•ecs
->
size
 *  (
∑th_öfo
));

153 
•ecs
->
∑ths
[•ecs->
cou¡
 - 1] = 
µ
;

154 
	}
}

160 
	$¥u√_n⁄_exa˘
 (
robŸ_•ecs
 *
•ecs
)

162 
∑th_öfo
 *
√w∑ths
;

163 
i
, 
j
, 
˙t
;

164 
˙t
 = 0;

165 
i
 = 0; i < 
•ecs
->
cou¡
; i++)

166 i‡(
•ecs
->
∑ths
[
i
].
u£r_agít_exa˘_p
)

167 ++
˙t
;

168 
√w∑ths
 = 
	`x√w_¨øy
 (
∑th_öfo
, 
˙t
);

169 
i
 = 0, 
j
 = 0; i < 
•ecs
->
cou¡
; i++)

170 i‡(
•ecs
->
∑ths
[
i
].
u£r_agít_exa˘_p
)

171 
√w∑ths
[
j
++] = 
•ecs
->
∑ths
[
i
];

172 
	`as£π
 (
j
 =
˙t
);

173 
	`x‰ì
 (
•ecs
->
∑ths
);

174 
•ecs
->
∑ths
 = 
√w∑ths
;

175 
•ecs
->
cou¡
 = 
˙t
;

176 
•ecs
->
size
 = 
˙t
;

177 
	}
}

179 
	#EOL
(
p
Ë(’Ë>
löìnd
)

	)

181 
	#SKIP_SPACE
(
p
) do { \

182 !
	`EOL
 (
p
Ë&& 
	`c_is•a˚
 (*p)) \

183 ++
p
; \

184 } 0)

	)

186 
	#FIELD_IS
(
°rög_lôîÆ
) \

187 
	`BOUNDED_EQUAL_NO_CASE
 (
fõld_b
, 
fõld_e
, 
°rög_lôîÆ
)

	)

219 
robŸ_•ecs
 *

220 
	$ªs_∑r£
 (c⁄° *
sour˚
, 
Àngth
)

222 
löe_cou¡
 = 1;

224 c⁄° *
p
 = 
sour˚
;

225 c⁄° *
íd
 = 
sour˚
 + 
Àngth
;

228 
boﬁ
 
u£r_agít_≠∂õs
 = 
Ál£
;

232 
boﬁ
 
u£r_agít_exa˘
 = 
Ál£
;

235 
boﬁ
 
found_exa˘
 = 
Ál£
;

239 
ªc‹d_cou¡
 = 0;

241 
robŸ_•ecs
 *
•ecs
 = 
	`x√w0
 (robot_specs);

245 c⁄° *
löìnd
, *
löìnd_ªÆ
;

246 c⁄° *
fõld_b
, *
fõld_e
;

247 c⁄° *
vÆue_b
, *
vÆue_e
;

249 i‡(
p
 =
íd
)

251 
löìnd_ªÆ
 = 
	`memchr
 (
p
, '\n', 
íd
 -Ö);

252 i‡(
löìnd_ªÆ
)

253 ++
löìnd_ªÆ
;

255 
löìnd_ªÆ
 = 
íd
;

256 
löìnd
 = 
löìnd_ªÆ
;

260 
	`SKIP_SPACE
 (
p
);

261 i‡(
	`EOL
 (
p
) || *p == '#')

262 
√xt
;

267 
löìnd
 = 
p
;Üöìnd < 
löìnd_ªÆ
;Üineend++)

268 i‡((
löìnd
 =
p
 || 
	`c_is•a˚
 (*(lineend - 1)))

269 && *
löìnd
 == '#')

273 
löìnd
 > 
p
 && 
	`c_is•a˚
 (*(lineend - 1)))

274 --
löìnd
;

276 
	`as£π
 (!
	`EOL
 (
p
));

278 
fõld_b
 = 
p
;

279 !
	`EOL
 (
p
Ë&& (
	`c_iß um
 (*p) || *p == '-'))

280 ++
p
;

281 
fõld_e
 = 
p
;

283 
	`SKIP_SPACE
 (
p
);

284 i‡(
fõld_b
 =
fõld_e
 || 
	`EOL
 (
p
) || *p != ':')

286 
	`DEBUGP
 (("Ign‹ög mÆf‹medÜöê%d\n", 
löe_cou¡
));

287 
√xt
;

289 ++
p
;

290 
	`SKIP_SPACE
 (
p
);

292 
vÆue_b
 = 
p
;

293 !
	`EOL
 (
p
))

294 ++
p
;

295 
vÆue_e
 = 
p
;

298 i‡(
	`FIELD_IS
 ("user-agent"))

325 i‡(
ªc‹d_cou¡
 !0 || 
u£r_agít_≠∂õs
 =
Ál£
)

326 
	`m©ch_u£r_agít
 (
vÆue_b
, 
vÆue_e
 - value_b,

327 &
u£r_agít_≠∂õs
, &
u£r_agít_exa˘
);

328 i‡(
u£r_agít_exa˘
)

329 
found_exa˘
 = 
åue
;

330 
ªc‹d_cou¡
 = 0;

332 i‡(
	`FIELD_IS
 ("allow"))

334 i‡(
u£r_agít_≠∂õs
)

336 
	`add_∑th
 (
•ecs
, 
vÆue_b
, 
vÆue_e
, 
åue
, 
u£r_agít_exa˘
);

338 ++
ªc‹d_cou¡
;

340 i‡(
	`FIELD_IS
 ("disallow"))

342 i‡(
u£r_agít_≠∂õs
)

344 
boﬁ
 
Ælowed
 = 
Ál£
;

345 i‡(
vÆue_b
 =
vÆue_e
)

347 
Ælowed
 = 
åue
;

348 
	`add_∑th
 (
•ecs
, 
vÆue_b
, 
vÆue_e
, 
Ælowed
, 
u£r_agít_exa˘
);

350 ++
ªc‹d_cou¡
;

354 
	`DEBUGP
 (("Ign‹ög unknow¿fõldáàlöê%d\n", 
löe_cou¡
));

355 
√xt
;

358 
√xt
:

359 
p
 = 
löìnd_ªÆ
;

360 ++
löe_cou¡
;

363 i‡(
found_exa˘
)

367 
	`¥u√_n⁄_exa˘
 (
•ecs
);

369 i‡(
•ecs
->
size
 > s≥cs->
cou¡
)

373 
•ecs
->
∑ths
 = 
	`xªÆloc
 (specs->paths,

374 
•ecs
->
cou¡
 *  (
∑th_öfo
));

375 
•ecs
->
size
 = s≥cs->
cou¡
;

378  
•ecs
;

379 
	}
}

384 
robŸ_•ecs
 *

385 
	$ªs_∑r£_‰om_fûe
 (c⁄° *
fûíame
)

387 
robŸ_•ecs
 *
•ecs
;

388 
fûe_mem‹y
 *
fm
 = 
	`wgë_ªad_fûe
 (
fûíame
);

389 i‡(!
fm
)

391 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Cannot open %s: %s"),

392 
fûíame
, 
	`°ªº‹
 (
î∫o
));

393  
NULL
;

395 
•ecs
 = 
	`ªs_∑r£
 (
fm
->
c⁄ã¡
, fm->
Àngth
);

396 
	`wgë_ªad_fûe_‰ì
 (
fm
);

397  
•ecs
;

398 
	}
}

401 
	$‰ì_•ecs
 (
robŸ_•ecs
 *
•ecs
)

403 
i
;

404 
i
 = 0; i < 
•ecs
->
cou¡
; i++)

405 
	`x‰ì
 (
•ecs
->
∑ths
[
i
].
∑th
);

406 
	`x‰ì_nuŒ
 (
•ecs
->
∑ths
);

407 
	`x‰ì
 (
•ecs
);

408 
	}
}

416 
	#DECODE_MAYBE
(
c
, 
±r
) do { \

417 i‡(
c
 ='%' && 
	`c_isxdigô
 (
±r
[1]) && c_isxdigit (ptr[2])) \

419 
decoded
 = 
	`X2DIGITS_TO_NUM
 (
±r
[1],Ötr[2]); \

420 i‡(
decoded
 != '/') \

422 
c
 = 
decoded
; \

423 
±r
 += 2; \

426 } 0)

	)

432 
boﬁ


433 
	$m©ches
 (c⁄° *
ªc‹d_∑th
, c⁄° *
uæ_∑th
)

435 c⁄° *
Ω
 = 
ªc‹d_∑th
;

436 c⁄° *
up
 = 
uæ_∑th
;

438 ; ; ++
Ω
, ++
up
)

440 
rc
 = *
Ω
;

441 
uc
 = *
up
;

442 i‡(!
rc
)

443  
åue
;

444 i‡(!
uc
)

445  
Ál£
;

446 
	`DECODE_MAYBE
(
rc
, 
Ω
);

447 
	`DECODE_MAYBE
(
uc
, 
up
);

448 i‡(
rc
 !
uc
)

449  
Ál£
;

451 
	}
}

457 
boﬁ


458 
	$ªs_m©ch_∑th
 (c⁄° 
robŸ_•ecs
 *
•ecs
, c⁄° *
∑th
)

460 
i
;

461 i‡(!
•ecs
)

462  
åue
;

463 
i
 = 0; i < 
•ecs
->
cou¡
; i++)

464 i‡(
	`m©ches
 (
•ecs
->
∑ths
[
i
].
∑th
,Öath))

466 
boﬁ
 
Ælowedp
 = 
•ecs
->
∑ths
[
i
].allowedp;

467 
	`DEBUGP
 (("%sÖath %s because ofÑule %s.\n",

468 
Ælowedp
 ? "Allowing" : "Rejecting",

469 
∑th
, 
	`quŸe
 (
•ecs
->
∑ths
[
i
].path)));

470  
Ælowedp
;

472  
åue
;

473 
	}
}

477 
hash_èbÀ
 *
	gªgi°îed_•ecs
;

480 
	#SET_HOSTPORT
(
ho°
, 
p‹t
, 
ªsu…
) do { \

481 
HP_Àn
 = 
	`°æí
 (
ho°
); \

482 
ªsu…
 = 
	`Æloˇ
 (
HP_Àn
 + 1 + 
	`numdigô
 (
p‹t
) + 1); \

483 
	`mem˝y
 (
ªsu…
, 
ho°
, 
HP_Àn
); \

484 
ªsu…
[
HP_Àn
] = ':'; \

485 
	`numbî_to_°rög
 (
ªsu…
 + 
HP_Àn
 + 1, 
p‹t
); \

486 } 0)

	)

492 
	$ªs_ªgi°î_•ecs
 (c⁄° *
ho°
, 
p‹t
, 
robŸ_•ecs
 *
•ecs
)

494 
robŸ_•ecs
 *
ﬁd
;

495 *
hp
, *
hp_ﬁd
;

496 
	`SET_HOSTPORT
 (
ho°
, 
p‹t
, 
hp
);

498 i‡(!
ªgi°îed_•ecs
)

499 
ªgi°îed_•ecs
 = 
	`make_noˇ£_°rög_hash_èbÀ
 (0);

501 i‡(
	`hash_èbÀ_gë_∑ú
 (
ªgi°îed_•ecs
, 
hp
, &
hp_ﬁd
, &
ﬁd
))

503 i‡(
ﬁd
)

504 
	`‰ì_•ecs
 (
ﬁd
);

505 
	`hash_èbÀ_put
 (
ªgi°îed_•ecs
, 
hp_ﬁd
, 
•ecs
);

509 
	`hash_èbÀ_put
 (
ªgi°îed_•ecs
, 
	`x°rdup
 (
hp
), 
•ecs
);

511 
	}
}

515 
robŸ_•ecs
 *

516 
	$ªs_gë_•ecs
 (c⁄° *
ho°
, 
p‹t
)

518 *
hp
;

519 
	`SET_HOSTPORT
 (
ho°
, 
p‹t
, 
hp
);

520 i‡(!
ªgi°îed_•ecs
)

521  
NULL
;

522  
	`hash_èbÀ_gë
 (
ªgi°îed_•ecs
, 
hp
);

523 
	}
}

527 
	#RES_SPECS_LOCATION
 "/robŸs.txt"

	)

535 
boﬁ


536 
	$ªs_ªåõve_fûe
 (c⁄° *
uæ
, **
fûe
, 
úi
 *iri)

538 
úi
 *
i
 = 
	`úi_√w
 ();

539 
uîr_t
 
îr
;

540 *
robŸs_uæ
 = 
	`uri_mîge
 (
uæ
, 
RES_SPECS_LOCATION
);

541 
ßved_ts_vÆ
 = 
›t
.
time°ampög
;

542 
ßved_•_vÆ
 = 
›t
.
•idî
, 
uæ_îr
;

543 
uæ
 * 
uæ_∑r£d
;

547 
	`£t_uri_ícodög
 (
i
, 
úi
->
uri_ícodög
, 
Ál£
);

548 
i
->
utf8_ícode
 = 
Ál£
;

550 
	`logputs
 (
LOG_VERBOSE
, 
	`_
("LoadingÑobots.txt;Ölease ignoreÉrrors.\n"));

551 *
fûe
 = 
NULL
;

552 
›t
.
time°ampög
 = 
Ál£
;

553 
›t
.
•idî
 = 
Ál£
;

555 
uæ_∑r£d
 = 
	`uæ_∑r£
 (
robŸs_uæ
, &
uæ_îr
, 
i
, 
åue
);

556 i‡(!
uæ_∑r£d
)

558 *
îr‹
 = 
	`uæ_îr‹
 (
robŸs_uæ
, 
uæ_îr
);

559 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s.\n", 
robŸs_uæ
, 
îr‹
);

560 
	`x‰ì
 (
îr‹
);

561 
îr
 = 
URLERROR
;

565 
îr
 = 
	`ªåõve_uæ
 (
uæ_∑r£d
, 
robŸs_uæ
, 
fûe
, 
NULL
, NULL, NULL,

566 
Ál£
, 
i
, false);

567 
	`uæ_‰ì
(
uæ_∑r£d
);

570 
›t
.
time°ampög
 = 
ßved_ts_vÆ
;

571 
›t
.
•idî
 = 
ßved_•_vÆ
;

572 
	`x‰ì
 (
robŸs_uæ
);

573 
	`úi_‰ì
 (
i
);

575 i‡(
îr
 !
RETROK
 && *
fûe
 !
NULL
)

580 
	`x‰ì
 (*
fûe
);

581 *
fûe
 = 
NULL
;

583  
îr
 =
RETROK
;

584 
	}
}

586 
boﬁ


587 
	$is_robŸs_txt_uæ
 (c⁄° *
uæ
)

589 *
robŸs_uæ
 = 
	`uri_mîge
 (
uæ
, 
RES_SPECS_LOCATION
);

590 
boﬁ
 
ªt
 = 
	`¨e_uæs_equÆ
 (
uæ
, 
robŸs_uæ
);

592 
	`x‰ì
 (
robŸs_uæ
);

594  
ªt
;

595 
	}
}

598 
	$ªs_˛ónup
 ()

600 i‡(
ªgi°îed_•ecs
)

602 
hash_èbÀ_ôî©‹
 
ôî
;

603 
	`hash_èbÀ_ôî©e
 (
ªgi°îed_•ecs
, &
ôî
);

604 
	`hash_èbÀ_ôî_√xt
 (&
ôî
);

607 
	`x‰ì
 (
ôî
.
key
);

608 
	`‰ì_•ecs
 (
ôî
.
vÆue
);

610 
	`hash_èbÀ_de°roy
 (
ªgi°îed_•ecs
);

611 
ªgi°îed_•ecs
 = 
NULL
;

613 
	}
}

615 #ifde‡
TESTING


618 
	$ã°_is_robŸs_txt_uæ
()

620 
i
;

622 *
uæ
;

623 
boﬁ
 
ex≥˘ed_ªsu…
;

624 } 
ã°_¨øy
[] = {

625 { "hâp://www.yoyody√.com/robŸs.txt", 
åue
 },

626 { "hâp://www.yoyody√.com/somï©h/", 
Ál£
 },

627 { "hâp://www.yoyody√.com/somï©h/robŸs.txt", 
Ál£
 },

630 
i
 = 0; i < (
ã°_¨øy
)/(test_array[0]); ++i)

632 
	`mu_as£π
 ("test_is_robots_txt_url: wrongÑesult",

633 
	`is_robŸs_txt_uæ
 (
ã°_¨øy
[
i
].
uæ
Ë=ã°_¨øy[i].
ex≥˘ed_ªsu…
);

636  
NULL
;

637 
	}
}

	@src/res.h

31 #i‚de‡
RES_H


32 
	#RES_H


	)

34 
	grobŸ_•ecs
;

36 
robŸ_•ecs
 *
ªs_∑r£
 (const *, );

37 
robŸ_•ecs
 *
ªs_∑r£_‰om_fûe
 (const *);

39 
boﬁ
 
ªs_m©ch_∑th
 (c⁄° 
robŸ_•ecs
 *, const *);

41 
ªs_ªgi°î_•ecs
 (c⁄° *, , 
robŸ_•ecs
 *);

42 
robŸ_•ecs
 *
ªs_gë_•ecs
 (const *, );

44 
boﬁ
 
ªs_ªåõve_fûe
 (c⁄° *, **, 
úi
 *);

46 
boﬁ
 
is_robŸs_txt_uæ
 (const *);

48 
ªs_˛ónup
 ();

	@src/retr.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<°rög.h
>

39 
	~<as£π.h
>

41 
	~"exôs.h
"

42 
	~"utûs.h
"

43 
	~"ªå.h
"

44 
	~"¥ogªss.h
"

45 
	~"uæ.h
"

46 
	~"ªcur.h
"

47 
	~"·p.h
"

48 
	~"hâp.h
"

49 
	~"ho°.h
"

50 
	~"c⁄√˘.h
"

51 
	~"hash.h
"

52 
	~"c⁄vît.h
"

53 
	~"±imî.h
"

54 
	~"html-uæ.h
"

55 
	~"úi.h
"

58 
SUM_SIZE_INT
 
	gtŸÆ_dow∆ﬂded_byãs
;

61 
	gtŸÆ_dow∆ﬂd_time
;

65 
FILE
 *
	gouçut_°ªam
;

69 
boﬁ
 
	gouçut_°ªam_ªguœr
;

72 
wgöt
 
	mchunk_byãs
;

73 
	mchunk_°¨t
;

74 
	m¶ìp_adju°
;

75 } 
	glimô_d©a
;

78 
	$limô_b™dwidth_ª£t
 ()

80 
	`xzîo
 (
limô_d©a
);

81 
	}
}

88 
	$limô_b™dwidth
 (
wgöt
 
byãs
, 
±imî
 *
timî
)

90 
dñè_t
 = 
	`±imî_ªad
 (
timî
Ë- 
limô_d©a
.
chunk_°¨t
;

91 
ex≥˘ed
;

93 
limô_d©a
.
chunk_byãs
 +
byãs
;

98 
ex≥˘ed
 = (Ë
limô_d©a
.
chunk_byãs
 / 
›t
.
limô_øã
;

100 i‡(
ex≥˘ed
 > 
dñè_t
)

102 
¶p
 = 
ex≥˘ed
 - 
dñè_t
 + 
limô_d©a
.
¶ìp_adju°
;

103 
t0
, 
t1
;

104 i‡(
¶p
 < 0.2)

106 
	`DEBUGP
 (("deferringá %.2f ms sleep (%s/%.2f).\n",

107 
¶p
 * 1000, 
	`numbî_to_°©ic_°rög
 (
limô_d©a
.
chunk_byãs
),

108 
dñè_t
));

111 
	`DEBUGP
 (("\nsleeping %.2f ms for %s bytes,ádjust %.2f ms\n",

112 
¶p
 * 1000, 
	`numbî_to_°©ic_°rög
 (
limô_d©a
.
chunk_byãs
),

113 
limô_d©a
.
¶ìp_adju°
));

115 
t0
 = 
	`±imî_ªad
 (
timî
);

116 
	`x¶ìp
 (
¶p
);

117 
t1
 = 
	`±imî_mósuª
 (
timî
);

123 
limô_d©a
.
¶ìp_adju°
 = 
¶p
 - (
t1
 - 
t0
);

126 i‡(
limô_d©a
.
¶ìp_adju°
 > 0.5)

127 
limô_d©a
.
¶ìp_adju°
 = 0.5;

128 i‡(
limô_d©a
.
¶ìp_adju°
 < -0.5)

129 
limô_d©a
.
¶ìp_adju°
 = -0.5;

132 
limô_d©a
.
chunk_byãs
 = 0;

133 
limô_d©a
.
chunk_°¨t
 = 
	`±imî_ªad
 (
timî
);

134 
	}
}

136 #i‚de‡
MIN


137 
	#MIN
(
i
, 
j
Ë((iË<(jË? (iË: (j))

	)

145 
	$wrôe_d©a
 (
FILE
 *
out
, c⁄° *
buf
, 
bufsize
, 
wgöt
 *
skù
,

146 
wgöt
 *
wrôãn
)

148 i‡(!
out
)

150 i‡(*
skù
 > 
bufsize
)

152 *
skù
 -
bufsize
;

155 i‡(*
skù
)

157 
buf
 +*
skù
;

158 
bufsize
 -*
skù
;

159 *
skù
 = 0;

160 i‡(
bufsize
 == 0)

164 
	`fwrôe
 (
buf
, 1, 
bufsize
, 
out
);

165 *
wrôãn
 +
bufsize
;

180 #i‚de‡
__VMS


181 
	`fÊush
 (
out
);

183  !
	`„º‹
 (
out
);

184 
	}
}

206 
	$fd_ªad_body
 (
fd
, 
FILE
 *
out
, 
wgöt
 
t‹ód
, wgöà
°¨ços
,

207 
wgöt
 *
qtyªad
, wgöà*
qtywrôãn
, *
ñ≠£d
, 
Êags
)

209 
ªt
 = 0;

210 #unde‡
max


211 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

212 
dlbufsize
 = 
	`max
 (
BUFSIZ
, 8 * 1024);

213 *
dlbuf
 = 
	`xmÆloc
 (
dlbufsize
);

215 
±imî
 *
timî
 = 
NULL
;

216 
œ°_suc˚ssful_ªad_tm
 = 0;

219 *
¥ogªss
 = 
NULL
;

225 
boﬁ
 
¥ogªss_öãø˘ive
 = 
Ál£
;

227 
boﬁ
 
exa˘
 = !!(
Êags
 & 
rb_ªad_exa˘ly
);

230 
boﬁ
 
chunked
 = 
Êags
 & 
rb_chunked_å™s„r_ícodög
;

231 
wgöt
 
skù
 = 0;

234 
wgöt
 
sum_ªad
 = 0;

235 
wgöt
 
sum_wrôãn
 = 0;

236 
wgöt
 
ªmaöög_chunk_size
 = 0;

238 i‡(
Êags
 & 
rb_skù_°¨ços
)

239 
skù
 = 
°¨ços
;

241 i‡(
›t
.
vîbo£
)

246 
wgöt
 
°¨t
 = 
skù
 ? 0 : 
°¨ços
;

247 
¥ogªss
 = 
	`¥ogªss_¸óã
 (
°¨t
, sèπ + 
t‹ód
);

248 
¥ogªss_öãø˘ive
 = 
	`¥ogªss_öãø˘ive_p
 (
¥ogªss
);

251 i‡(
›t
.
limô_øã
)

252 
	`limô_b™dwidth_ª£t
 ();

257 i‡(
¥ogªss
 || 
›t
.
limô_øã
 || 
ñ≠£d
)

259 
timî
 = 
	`±imî_√w
 ();

260 
œ°_suc˚ssful_ªad_tm
 = 0;

267 i‡(
›t
.
limô_øã
 && o±.limô_øã < 
dlbufsize
)

268 
dlbufsize
 = 
›t
.
limô_øã
;

274 !
exa˘
 || (
sum_ªad
 < 
t‹ód
))

276 
rdsize
;

277 
tmout
 = 
›t
.
ªad_timeout
;

279 i‡(
chunked
)

281 i‡(
ªmaöög_chunk_size
 == 0)

283 *
löe
 = 
	`fd_ªad_löe
 (
fd
);

284 *
ídl
;

285 i‡(
löe
 =
NULL
)

287 
ªt
 = -1;

291 
ªmaöög_chunk_size
 = 
	`°πﬁ
 (
löe
, &
ídl
, 16);

292 i‡(
ªmaöög_chunk_size
 == 0)

294 
ªt
 = 0;

295 i‡(
	`fd_ªad_löe
 (
fd
Ë=
NULL
)

296 
ªt
 = -1;

301 
rdsize
 = 
	`MIN
 (
ªmaöög_chunk_size
, 
dlbufsize
);

304 
rdsize
 = 
exa˘
 ? 
	`MIN
 (
t‹ód
 - 
sum_ªad
, 
dlbufsize
) : dlbufsize;

306 i‡(
¥ogªss_öãø˘ive
)

311 
tmout
 = 0.95;

312 i‡(
›t
.
ªad_timeout
)

314 
waôtm
;

315 
waôtm
 = 
	`±imî_ªad
 (
timî
Ë- 
œ°_suc˚ssful_ªad_tm
;

316 i‡(
waôtm
 + 
tmout
 > 
›t
.
ªad_timeout
)

319 
tmout
 = 
›t
.
ªad_timeout
 - 
waôtm
;

320 i‡(
tmout
 < 0)

323 
ªt
 = -1, 
î∫o
 = 
ETIMEDOUT
;

329 
ªt
 = 
	`fd_ªad
 (
fd
, 
dlbuf
, 
rdsize
, 
tmout
);

331 i‡(
¥ogªss_öãø˘ive
 && 
ªt
 < 0 && 
î∫o
 =
ETIMEDOUT
)

332 
ªt
 = 0;

333 i‡(
ªt
 <= 0)

336 i‡(
¥ogªss
 || 
›t
.
limô_øã
 || 
ñ≠£d
)

338 
	`±imî_mósuª
 (
timî
);

339 i‡(
ªt
 > 0)

340 
œ°_suc˚ssful_ªad_tm
 = 
	`±imî_ªad
 (
timî
);

343 i‡(
ªt
 > 0)

345 
sum_ªad
 +
ªt
;

346 i‡(!
	`wrôe_d©a
 (
out
, 
dlbuf
, 
ªt
, &
skù
, &
sum_wrôãn
))

348 
ªt
 = -2;

349 
out
;

351 i‡(
chunked
)

353 
ªmaöög_chunk_size
 -
ªt
;

354 i‡(
ªmaöög_chunk_size
 == 0)

355 i‡(
	`fd_ªad_löe
 (
fd
Ë=
NULL
)

357 
ªt
 = -1;

363 i‡(
›t
.
limô_øã
)

364 
	`limô_b™dwidth
 (
ªt
, 
timî
);

366 i‡(
¥ogªss
)

367 
	`¥ogªss_upd©e
 (
¥ogªss
, 
ªt
, 
	`±imî_ªad
 (
timî
));

368 #ifde‡
WINDOWS


369 i‡(
t‹ód
 > 0 && !
›t
.
quõt
)

370 
	`ws_≥r˚¡tôÀ
 (100.0 *

371 (
°¨ços
 + 
sum_ªad
Ë/ (°¨ço†+ 
t‹ód
));

374 i‡(
ªt
 < -1)

375 
ªt
 = -1;

377 
out
:

378 i‡(
¥ogªss
)

379 
	`¥ogªss_föish
 (
¥ogªss
, 
	`±imî_ªad
 (
timî
));

381 i‡(
ñ≠£d
)

382 *
ñ≠£d
 = 
	`±imî_ªad
 (
timî
);

383 i‡(
timî
)

384 
	`±imî_de°roy
 (
timî
);

386 i‡(
qtyªad
)

387 *
qtyªad
 +
sum_ªad
;

388 i‡(
qtywrôãn
)

389 *
qtywrôãn
 +
sum_wrôãn
;

391 
	`‰ì
 (
dlbuf
);

393  
ªt
;

394 
	}
}

448 
	$fd_ªad_hunk
 (
fd
, 
hunk_ãrmö©‹_t
 
ãrmö©‹
, 
sizehöt
, 
maxsize
)

450 
bufsize
 = 
sizehöt
;

451 *
hunk
 = 
	`xmÆloc
 (
bufsize
);

452 
èû
 = 0;

454 
	`as£π
 (!
maxsize
 || maxsizê>
bufsize
);

458 c⁄° *
íd
;

459 
pkÀn
, 
rdÀn
, 
ªmaö
;

463 
pkÀn
 = 
	`fd_≥ek
 (
fd
, 
hunk
 + 
èû
, 
bufsize
 - 1 -Åail, -1);

464 i‡(
pkÀn
 < 0)

466 
	`x‰ì
 (
hunk
);

467  
NULL
;

469 
íd
 = 
	`ãrmö©‹
 (
hunk
, hunk + 
èû
, 
pkÀn
);

470 i‡(
íd
)

474 
ªmaö
 = 
íd
 - (
hunk
 + 
èû
);

475 
	`as£π
 (
ªmaö
 >= 0);

476 i‡(
ªmaö
 == 0)

479 
hunk
[
èû
] = '\0';

480  
hunk
;

482 i‡(
bufsize
 - 1 < 
èû
 + 
ªmaö
)

484 
bufsize
 = 
èû
 + 
ªmaö
 + 1;

485 
hunk
 = 
	`xªÆloc
 (hunk, 
bufsize
);

491 
ªmaö
 = 
pkÀn
;

497 
rdÀn
 = 
	`fd_ªad
 (
fd
, 
hunk
 + 
èû
, 
ªmaö
, 0);

498 i‡(
rdÀn
 < 0)

500 
	`x‰ì_nuŒ
 (
hunk
);

501  
NULL
;

503 
èû
 +
rdÀn
;

504 
hunk
[
èû
] = '\0';

506 i‡(
rdÀn
 == 0)

508 i‡(
èû
 == 0)

511 
	`x‰ì
 (
hunk
);

512 
î∫o
 = 0;

513  
NULL
;

517  
hunk
;

519 i‡(
íd
 && 
rdÀn
 =
ªmaö
)

522  
hunk
;

526 i‡(
èû
 =
bufsize
 - 1)

530 i‡(
maxsize
 && 
bufsize
 >= maxsize)

532 
	`x‰ì
 (
hunk
);

533 
î∫o
 = 
ENOMEM
;

534  
NULL
;

536 
bufsize
 <<= 1;

537 i‡(
maxsize
 && 
bufsize
 > maxsize)

538 
bufsize
 = 
maxsize
;

539 
hunk
 = 
	`xªÆloc
 (hunk, 
bufsize
);

542 
	}
}

545 
	$löe_ãrmö©‹
 (c⁄° *
°¨t
, c⁄° *
≥eked
, 
≥ekÀn
)

547 c⁄° *
p
 = 
	`memchr
 (
≥eked
, '\n', 
≥ekÀn
);

548 i‡(
p
)

550  
p
 + 1;

551  
NULL
;

552 
	}
}

558 
	#FD_READ_LINE_MAX
 4096

	)

568 
	$fd_ªad_löe
 (
fd
)

570  
	`fd_ªad_hunk
 (
fd
, 
löe_ãrmö©‹
, 128, 
FD_READ_LINE_MAX
);

571 
	}
}

577 
	$ªå_øã
 (
wgöt
 
byãs
, 
£cs
)

579 
ªs
[20];

580 c⁄° *
øã_«mes
[] = {"B/s", "KB/s", "MB/s", "GB/s" };

581 
unôs
;

583 
dÃ©e
 = 
	`ˇlc_øã
 (
byãs
, 
£cs
, &
unôs
);

586 
	`•rötf
 (
ªs
, "%.*f %s",

587 
dÃ©e
 >= 99.95 ? 0 : dlrate >= 9.995 ? 1 : 2,

588 
dÃ©e
, 
øã_«mes
[
unôs
]);

590  
ªs
;

591 
	}
}

602 
	$ˇlc_øã
 (
wgöt
 
byãs
, 
£cs
, *
unôs
)

604 
dÃ©e
;

606 
	`as£π
 (
£cs
 >= 0);

607 
	`as£π
 (
byãs
 >= 0);

609 i‡(
£cs
 == 0)

614 
£cs
 = 
	`±imî_ªsﬁuti⁄
 () / 2.0;

616 
dÃ©e
 = 
byãs
 / 
£cs
;

617 i‡(
dÃ©e
 < 1024.0)

618 *
unôs
 = 0;

619 i‡(
dÃ©e
 < 1024.0 * 1024.0)

620 *
unôs
 = 1, 
dÃ©e
 /= 1024.0;

621 i‡(
dÃ©e
 < 1024.0 * 1024.0 * 1024.0)

622 *
unôs
 = 2, 
dÃ©e
 /= (1024.0 * 1024.0);

625 *
unôs
 = 3, 
dÃ©e
 /= (1024.0 * 1024.0 * 1024.0);

627  
dÃ©e
;

628 
	}
}

631 
	#SUSPEND_POST_DATA
 do { \

632 
po°_d©a_su•íded
 = 
åue
; \

633 
ßved_po°_d©a
 = 
›t
.
po°_d©a
; \

634 
ßved_po°_fûe_«me
 = 
›t
.
po°_fûe_«me
; \

635 
›t
.
po°_d©a
 = 
NULL
; \

636 
›t
.
po°_fûe_«me
 = 
NULL
; \

637 } 0)

	)

639 
	#RESTORE_POST_DATA
 do { \

640 i‡(
po°_d©a_su•íded
) \

642 
›t
.
po°_d©a
 = 
ßved_po°_d©a
; \

643 
›t
.
po°_fûe_«me
 = 
ßved_po°_fûe_«me
; \

644 
po°_d©a_su•íded
 = 
Ál£
; \

646 } 0)

	)

648 *
gë¥oxy
 (
uæ
 *);

656 
uîr_t


657 
	$ªåõve_uæ
 (
uæ
 * 
‹ig_∑r£d
, c⁄° *
‹iguæ
, **
fûe
,

658 **
√wloc
, c⁄° *
ªfuæ
, *
dt
, 
boﬁ
 
ªcursive
,

659 
úi
 *úi, 
boﬁ
 
ªgi°î_°©us
)

661 
uîr_t
 
ªsu…
;

662 *
uæ
;

663 
boﬁ
 
loˇti⁄_ch™ged
;

664 
boﬁ
 
úi_ÁŒbacked
 = 0;

665 
dummy
;

666 *
my√wloc
, *
¥oxy
;

667 
uæ
 *
u
 = 
‹ig_∑r£d
, *
¥oxy_uæ
;

668 
up_îr‹_code
;

669 *
loˇl_fûe
;

670 
ªdúe˘i⁄_cou¡
 = 0;

672 
boﬁ
 
po°_d©a_su•íded
 = 
Ál£
;

673 *
ßved_po°_d©a
 = 
NULL
;

674 *
ßved_po°_fûe_«me
 = 
NULL
;

677 i‡(!
dt
)

679 
dt
 = &
dummy
;

680 
dummy
 = 0;

682 
uæ
 = 
	`x°rdup
 (
‹iguæ
);

683 i‡(
√wloc
)

684 *
√wloc
 = 
NULL
;

685 i‡(
fûe
)

686 *
fûe
 = 
NULL
;

688 i‡(!
ªfuæ
)

689 
ªfuæ
 = 
›t
.
ª„ªr
;

691 
ªdúe˘ed
:

694 
ªsu…
 = 
NOCONERROR
;

695 
my√wloc
 = 
NULL
;

696 
loˇl_fûe
 = 
NULL
;

697 
¥oxy_uæ
 = 
NULL
;

699 
¥oxy
 = 
	`gë¥oxy
 (
u
);

700 i‡(
¥oxy
)

702 
úi
 *
pi
 = 
	`úi_√w
 ();

703 
	`£t_uri_ícodög
 (
pi
, 
›t
.
loˇÀ
, 
åue
);

704 
pi
->
utf8_ícode
 = 
Ál£
;

707 
¥oxy_uæ
 = 
	`uæ_∑r£
 (
¥oxy
, &
up_îr‹_code
, 
NULL
, 
åue
);

708 i‡(!
¥oxy_uæ
)

710 *
îr‹
 = 
	`uæ_îr‹
 (
¥oxy
, 
up_îr‹_code
);

711 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("ErrorÖarsingÖroxy URL %s: %s.\n"),

712 
¥oxy
, 
îr‹
);

713 
	`x‰ì
 (
uæ
);

714 
	`x‰ì
 (
îr‹
);

715 
RESTORE_POST_DATA
;

716 
ªsu…
 = 
PROXERR
;

717 
baû
;

719 i‡(
¥oxy_uæ
->
scheme
 !
SCHEME_HTTP
 &&Öroxy_uæ->schemê!
u
->scheme)

721 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("Eº‹ i¿¥oxy URL %s: Mu° bêHTTP.\n"), 
¥oxy
);

722 
	`uæ_‰ì
 (
¥oxy_uæ
);

723 
	`x‰ì
 (
uæ
);

724 
RESTORE_POST_DATA
;

725 
ªsu…
 = 
PROXERR
;

726 
baû
;

730 i‡(
u
->
scheme
 =
SCHEME_HTTP


731 #ifde‡
HAVE_SSL


732 || 
u
->
scheme
 =
SCHEME_HTTPS


734 || (
¥oxy_uæ
 &&Öroxy_uæ->
scheme
 =
SCHEME_HTTP
))

736 
ªsu…
 = 
	`hâp_lo›
 (
u
, 
‹ig_∑r£d
, &
my√wloc
, &
loˇl_fûe
, 
ªfuæ
, 
dt
,

737 
¥oxy_uæ
, 
úi
);

739 i‡(
u
->
scheme
 =
SCHEME_FTP
)

744 
boﬁ
 
ﬁdªc
 = 
ªcursive
, 
glob
 = 
›t
.
·p_glob
;

745 i‡(
ªdúe˘i⁄_cou¡
)

746 
ﬁdªc
 = 
glob
 = 
Ál£
;

748 
ªsu…
 = 
	`·p_lo›
 (
u
, &
loˇl_fûe
, 
dt
, 
¥oxy_uæ
, 
ªcursive
, 
glob
);

749 
ªcursive
 = 
ﬁdªc
;

755 i‡(
ªdúe˘i⁄_cou¡
 && 
loˇl_fûe
 && 
u
->
scheme
 =
SCHEME_FTP
)

757 i‡(
	`has_html_suffix_p
 (
loˇl_fûe
))

758 *
dt
 |
TEXTHTML
;

762 i‡(
¥oxy_uæ
)

764 
	`uæ_‰ì
 (
¥oxy_uæ
);

765 
¥oxy_uæ
 = 
NULL
;

768 
loˇti⁄_ch™ged
 = (
ªsu…
 =
NEWLOCATION
 ||Ñesu… =
NEWLOCATION_KEEP_POST
);

769 i‡(
loˇti⁄_ch™ged
)

771 *
c⁄°ru˚d_√wloc
;

772 
uæ
 *
√wloc_∑r£d
;

774 
	`as£π
 (
my√wloc
 !
NULL
);

776 i‡(
loˇl_fûe
)

777 
	`x‰ì
 (
loˇl_fûe
);

783 
c⁄°ru˚d_√wloc
 = 
	`uri_mîge
 (
uæ
, 
my√wloc
);

784 
	`x‰ì
 (
my√wloc
);

785 
my√wloc
 = 
c⁄°ru˚d_√wloc
;

789 
úi
->
utf8_ícode
 = 
›t
.
íabÀ_úi
;

790 
	`£t_c⁄ã¡_ícodög
 (
úi
, 
NULL
);

791 
	`x‰ì_nuŒ
 (
úi
->
‹ig_uæ
);

794 
√wloc_∑r£d
 = 
	`uæ_∑r£
 (
my√wloc
, &
up_îr‹_code
, 
úi
, 
åue
);

795 i‡(!
√wloc_∑r£d
)

797 *
îr‹
 = 
	`uæ_îr‹
 (
my√wloc
, 
up_îr‹_code
);

798 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s.\n", 
	`es˙⁄¥öt_uri
 (
my√wloc
),

799 
îr‹
);

800 i‡(
‹ig_∑r£d
 !
u
)

802 
	`uæ_‰ì
 (
u
);

804 
	`x‰ì
 (
uæ
);

805 
	`x‰ì
 (
my√wloc
);

806 
	`x‰ì
 (
îr‹
);

807 
RESTORE_POST_DATA
;

808 
baû
;

814 
	`x‰ì
 (
my√wloc
);

815 
my√wloc
 = 
	`x°rdup
 (
√wloc_∑r£d
->
uæ
);

818 i‡(++
ªdúe˘i⁄_cou¡
 > 
›t
.
max_ªdúe˘
)

820 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%dÑedirectionsÉxceeded.\n"),

821 
›t
.
max_ªdúe˘
);

822 
	`uæ_‰ì
 (
√wloc_∑r£d
);

823 i‡(
‹ig_∑r£d
 !
u
)

825 
	`uæ_‰ì
 (
u
);

827 
	`x‰ì
 (
uæ
);

828 
	`x‰ì
 (
my√wloc
);

829 
RESTORE_POST_DATA
;

830 
ªsu…
 = 
WRONGCODE
;

831 
baû
;

834 
	`x‰ì
 (
uæ
);

835 
uæ
 = 
my√wloc
;

836 i‡(
‹ig_∑r£d
 !
u
)

838 
	`uæ_‰ì
 (
u
);

840 
u
 = 
√wloc_∑r£d
;

852 i‡(
ªsu…
 !
NEWLOCATION_KEEP_POST
 && !
po°_d©a_su•íded
)

853 
SUSPEND_POST_DATA
;

855 
ªdúe˘ed
;

859 i‡(!(*
dt
 & 
RETROKF
Ë&& 
úi
->
utf8_ícode
)

861 
úi
->
utf8_ícode
 = 
Ál£
;

862 i‡(
‹ig_∑r£d
 !
u
)

864 
	`uæ_‰ì
 (
u
);

866 
u
 = 
	`uæ_∑r£
 (
‹iguæ
, 
NULL
, 
úi
, 
åue
);

867 i‡(
u
)

869 
	`DEBUGP
 (("[IRI fÆlbackögÅÿn⁄-utf8 f‹ %s\n", 
	`quŸe
 (
uæ
)));

870 
uæ
 = 
	`x°rdup
 (
u
->url);

871 
úi_ÁŒbacked
 = 1;

872 
ªdúe˘ed
;

875 
	`DEBUGP
 (("[Couldn'àÁŒbackÅÿn⁄-utf8 f‹ %s\n", 
	`quŸe
 (
uæ
)));

878 i‡(
loˇl_fûe
 && 
u
 && *
dt
 & 
RETROKF
)

880 
	`ªgi°î_dow∆ﬂd
 (
u
->
uæ
, 
loˇl_fûe
);

882 i‡(!
›t
.
•idî
 && 
ªdúe˘i⁄_cou¡
 && 0 !
	`°rcmp
 (
‹iguæ
, 
u
->
uæ
))

883 
	`ªgi°î_ªdúe˘i⁄
 (
‹iguæ
, 
u
->
uæ
);

885 i‡(*
dt
 & 
TEXTHTML
)

886 
	`ªgi°î_html
 (
u
->
uæ
, 
loˇl_fûe
);

888 i‡(*
dt
 & 
TEXTCSS
)

889 
	`ªgi°î_css
 (
u
->
uæ
, 
loˇl_fûe
);

892 i‡(
fûe
)

893 *
fûe
 = 
loˇl_fûe
 ?Üoˇl_fûê: 
NULL
;

895 
	`x‰ì_nuŒ
 (
loˇl_fûe
);

897 i‡(
‹ig_∑r£d
 !
u
)

899 
	`uæ_‰ì
 (
u
);

902 i‡(
ªdúe˘i⁄_cou¡
 || 
úi_ÁŒbacked
)

904 i‡(
√wloc
)

905 *
√wloc
 = 
uæ
;

907 
	`x‰ì
 (
uæ
);

911 i‡(
√wloc
)

912 *
√wloc
 = 
NULL
;

913 
	`x‰ì
 (
uæ
);

916 
RESTORE_POST_DATA
;

918 
baû
:

919 i‡(
ªgi°î_°©us
)

920 
	`öf‹m_exô_°©us
 (
ªsu…
);

921  
ªsu…
;

922 
	}
}

930 
uîr_t


931 
	$ªåõve_‰om_fûe
 (c⁄° *
fûe
, 
boﬁ
 
html
, *
cou¡
)

933 
uîr_t
 
°©us
;

934 
uæpos
 *
uæ_li°
, *
cur_uæ
;

935 
úi
 *úò
	`úi_√w
();

937 *
öput_fûe
, *
uæ_fûe
 = 
NULL
;

938 c⁄° *
uæ
 = 
fûe
;

940 
°©us
 = 
RETROK
;

941 *
cou¡
 = 0;

944 
	`£t_uri_ícodög
 (
úi
, 
›t
.
loˇÀ
, 
åue
);

945 
	`£t_c⁄ã¡_ícodög
 (
úi
, 
›t
.
loˇÀ
);

947 i‡(
	`uæ_vÆid_scheme
 (
uæ
))

949 
dt
,
uæ_îr
;

950 
uîr_t
 
°©us
;

951 
uæ
 *
uæ_∑r£d
 = 
	`uæ_∑r£
 (uæ, &
uæ_îr
, 
úi
, 
åue
);

952 i‡(!
uæ_∑r£d
)

954 *
îr‹
 = 
	`uæ_îr‹
 (
uæ
, 
uæ_îr
);

955 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s.\n", 
uæ
, 
îr‹
);

956 
	`x‰ì
 (
îr‹
);

957  
URLERROR
;

960 i‡(!
›t
.
ba£_hªf
)

961 
›t
.
ba£_hªf
 = 
	`x°rdup
 (
uæ
);

963 
°©us
 = 
	`ªåõve_uæ
 (
uæ_∑r£d
, 
uæ
, &
uæ_fûe
, 
NULL
, NULL, &
dt
,

964 
Ál£
, 
úi
, 
åue
);

965 
	`uæ_‰ì
 (
uæ_∑r£d
);

967 i‡(!
uæ_fûe
 || (
°©us
 !
RETROK
))

968  
°©us
;

970 i‡(
dt
 & 
TEXTHTML
)

971 
html
 = 
åue
;

975 i‡(
úi
->
c⁄ã¡_ícodög
 !
›t
.
loˇÀ
)

976 
	`£t_uri_ícodög
 (
úi
, iri->
c⁄ã¡_ícodög
, 
Ál£
);

979 
úi
->
utf8_ícode
 = 
›t
.
íabÀ_úi
;

980 
	`x‰ì_nuŒ
 (
úi
->
‹ig_uæ
);

981 
úi
->
‹ig_uæ
 = 
NULL
;

983 
öput_fûe
 = 
uæ_fûe
;

986 
öput_fûe
 = (*Ë
fûe
;

988 
uæ_li°
 = (
html
 ? 
	`gë_uæs_html
 (
öput_fûe
, 
NULL
, NULL, 
úi
)

989 : 
	`gë_uæs_fûe
 (
öput_fûe
));

991 
	`x‰ì_nuŒ
 (
uæ_fûe
);

993 
cur_uæ
 = 
uæ_li°
; cur_uæ; cur_uæ = cur_uæ->
√xt
, ++*
cou¡
)

995 *
fûíame
 = 
NULL
, *
√w_fûe
 = NULL;

996 
dt
;

997 
úi
 *
tmpúi
 = 
	`úi_dup
 (iri);

998 
uæ
 *
∑r£d_uæ
 = 
NULL
;

1000 i‡(
cur_uæ
->
ign‹e_whí_dow∆ﬂdög
)

1003 i‡(
›t
.
quŸa
 && 
tŸÆ_dow∆ﬂded_byãs
 > opt.quota)

1005 
°©us
 = 
QUOTEXC
;

1009 
∑r£d_uæ
 = 
	`uæ_∑r£
 (
cur_uæ
->
uæ
->uæ, 
NULL
, 
tmpúi
, 
åue
);

1011 i‡((
›t
.
ªcursive
 || o±.
∑ge_ªquisôes
)

1012 && (
cur_uæ
->
uæ
->
scheme
 !
SCHEME_FTP
 || 
	`gë¥oxy
 (cur_url->url)))

1014 
ﬁd_fﬁlow_·p
 = 
›t
.
fﬁlow_·p
;

1017 i‡(
cur_uæ
->
uæ
->
scheme
 =
SCHEME_FTP
)

1018 
›t
.
fﬁlow_·p
 = 1;

1020 
°©us
 = 
	`ªåõve_åì
 (
∑r£d_uæ
 ?Ö¨£d_uæ : 
cur_uæ
->
uæ
,

1021 
tmpúi
);

1023 
›t
.
fﬁlow_·p
 = 
ﬁd_fﬁlow_·p
;

1026 
°©us
 = 
	`ªåõve_uæ
 (
∑r£d_uæ
 ?Ö¨£d_uæ : 
cur_uæ
->
uæ
,

1027 
cur_uæ
->
uæ
->uæ, &
fûíame
,

1028 &
√w_fûe
, 
NULL
, &
dt
, 
›t
.
ªcursive
, 
tmpúi
,

1029 
åue
);

1031 i‡(
∑r£d_uæ
)

1032 
	`uæ_‰ì
 (
∑r£d_uæ
);

1034 i‡(
fûíame
 && 
›t
.
dñëe_a·î
 && 
	`fûe_exi°s_p
 (filename))

1036 
	`DEBUGP
 (("\
 file dueÅo --delete-after inÑetrieve_from_file():\n"));

1038 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("Removög %s.\n"), 
fûíame
);

1039 i‡(
	`u∆ök
 (
fûíame
))

1040 
	`log¥ötf
 (
LOG_NOTQUIET
, "u∆ök: %s\n", 
	`°ªº‹
 (
î∫o
));

1041 
dt
 &~
RETROKF
;

1044 
	`x‰ì_nuŒ
 (
√w_fûe
);

1045 
	`x‰ì_nuŒ
 (
fûíame
);

1046 
	`úi_‰ì
 (
tmpúi
);

1050 
	`‰ì_uæpos
 (
uæ_li°
);

1052 
	`úi_‰ì
 (
úi
);

1054  
°©us
;

1055 
	}
}

1060 
	$¥ötwh©
 (
n1
, 
n2
)

1062 
	`logputs
 (
LOG_VERBOSE
, (
n1
 =
n2
Ë? 
	`_
("Giving up.\n\n") : _("Retrying.\n\n"));

1063 
	}
}

1072 
	$¶ìp_bëwìn_ªåõvÆs
 (
cou¡
)

1074 
boﬁ
 
fú°_ªåõvÆ
 = 
åue
;

1076 i‡(
fú°_ªåõvÆ
)

1079 
fú°_ªåõvÆ
 = 
Ál£
;

1083 i‡(
›t
.
waôªåy
 && 
cou¡
 > 1)

1087 i‡(
cou¡
 <
›t
.
waôªåy
)

1088 
	`x¶ìp
 (
cou¡
 - 1);

1090 
	`x¶ìp
 (
›t
.
waôªåy
);

1092 i‡(
›t
.
waô
)

1094 i‡(!
›t
.
øndom_waô
 || 
cou¡
 > 1)

1098 
	`x¶ìp
 (
›t
.
waô
);

1104 
waô£cs
 = (0.5 + 
	`øndom_Êﬂt
 ()Ë* 
›t
.
waô
;

1105 
	`DEBUGP
 (("sleep_between_retrievals:ávg=%f,sleep=%f\n",

1106 
›t
.
waô
, 
waô£cs
));

1107 
	`x¶ìp
 (
waô£cs
);

1110 
	}
}

1114 
	$‰ì_uæpos
 (
uæpos
 *
l
)

1116 
l
)

1118 
uæpos
 *
√xt
 = 
l
->next;

1119 i‡(
l
->
uæ
)

1120 
	`uæ_‰ì
 (
l
->
uæ
);

1121 
	`x‰ì_nuŒ
 (
l
->
loˇl_«me
);

1122 
	`x‰ì
 (
l
);

1123 
l
 = 
√xt
;

1125 
	}
}

1129 
	$rŸ©e_backups
(c⁄° *
‚ame
)

1131 
maxÀn
 = 
	`°æí
 (
‚ame
Ë+ 1 + 
	`numdigô
 (
›t
.
backups
) + 1;

1132 *
‰om
 = (*)
	`Æloˇ
 (
maxÀn
);

1133 *
to
 = (*)
	`Æloˇ
 (
maxÀn
);

1134 
°ru˘_°©
 
sb
;

1135 
i
;

1137 i‡(
	`°©
 (
‚ame
, &
sb
) == 0)

1138 i‡(
	`S_ISREG
 (
sb
.
°_mode
) == 0)

1141 
i
 = 
›t
.
backups
; i > 1; i--)

1143 
	`•rötf
 (
‰om
, "%s.%d", 
‚ame
, 
i
 - 1);

1144 
	`•rötf
 (
to
, "%s.%d", 
‚ame
, 
i
);

1145 
	`ª«me
 (
‰om
, 
to
);

1148 
	`•rötf
 (
to
, "%s.%d", 
‚ame
, 1);

1149 
	`ª«me
(
‚ame
, 
to
);

1150 
	}
}

1152 
boﬁ
 
no_¥oxy_m©ch
 (const *, const **);

1157 
	$gë¥oxy
 (
uæ
 *
u
)

1159 *
¥oxy
 = 
NULL
;

1160 *
ªwrôãn_uæ
;

1161 
ªwrôãn_°‹age
[1024];

1163 i‡(!
›t
.
u£_¥oxy
)

1164  
NULL
;

1165 i‡(
	`no_¥oxy_m©ch
 (
u
->
ho°
, (c⁄° **)
›t
.
no_¥oxy
))

1166  
NULL
;

1168 
u
->
scheme
)

1170 
SCHEME_HTTP
:

1171 
¥oxy
 = 
›t
.
hâp_¥oxy
 ? o±.hâp_¥oxy : 
	`gëív
 ("http_proxy");

1173 #ifde‡
HAVE_SSL


1174 
SCHEME_HTTPS
:

1175 
¥oxy
 = 
›t
.
hâps_¥oxy
 ? o±.hâps_¥oxy : 
	`gëív
 ("https_proxy");

1178 
SCHEME_FTP
:

1179 
¥oxy
 = 
›t
.
·p_¥oxy
 ? o±.·p_¥oxy : 
	`gëív
 ("ftp_proxy");

1181 
SCHEME_INVALID
:

1184 i‡(!
¥oxy
 || !*proxy)

1185  
NULL
;

1189 
ªwrôãn_uæ
 = 
	`ªwrôe_sh‹th™d_uæ
 (
¥oxy
);

1190 i‡(
ªwrôãn_uæ
)

1192 
	`°∫˝y
 (
ªwrôãn_°‹age
, 
ªwrôãn_uæ
,  (rewritten_storage));

1193 
ªwrôãn_°‹age
[ (rewritten_storage) - 1] = '\0';

1194 
¥oxy
 = 
ªwrôãn_°‹age
;

1197  
¥oxy
;

1198 
	}
}

1202 
boﬁ


1203 
	$uæ_u£s_¥oxy
 (
uæ
 * 
u
)

1205 
boﬁ
 
ªt
;

1206 i‡(!
u
)

1207  
Ál£
;

1208 
ªt
 = 
	`gë¥oxy
 (
u
Ë!
NULL
;

1209  
ªt
;

1210 
	}
}

1213 
boﬁ


1214 
	$no_¥oxy_m©ch
 (c⁄° *
ho°
, c⁄° **
no_¥oxy
)

1216 i‡(!
no_¥oxy
)

1217  
Ál£
;

1219  
	`sufm©ch
 (
no_¥oxy
, 
ho°
);

1220 
	}
}

1224 
	$£t_loˇl_fûe
 (c⁄° **
fûe
, c⁄° *
deÁu…_fûe
)

1226 i‡(
›t
.
ouçut_documít
)

1228 i‡(
ouçut_°ªam_ªguœr
)

1229 *
fûe
 = 
›t
.
ouçut_documít
;

1232 *
fûe
 = 
deÁu…_fûe
;

1233 
	}
}

1236 
boﬁ


1237 
	$öput_fûe_uæ
 (c⁄° *
öput_fûe
)

1239 
boﬁ
 
fú°
 = 
åue
;

1241 i‡(
öput_fûe


1242 && 
	`uæ_has_scheme
 (
öput_fûe
)

1243 && 
fú°
)

1245 
fú°
 = 
Ál£
;

1246  
åue
;

1249  
Ál£
;

1250 
	}
}

	@src/retr.h

32 #i‚de‡
RETR_H


33 
	#RETR_H


	)

35 
	~"uæ.h
"

39 
SUM_SIZE_INT
 
tŸÆ_dow∆ﬂded_byãs
;

40 
tŸÆ_dow∆ﬂd_time
;

41 
FILE
 *
ouçut_°ªam
;

42 
boﬁ
 
ouçut_°ªam_ªguœr
;

46 
	mrb_ªad_exa˘ly
 = 1,

47 
	mrb_skù_°¨ços
 = 2,

50 
	mrb_chunked_å™s„r_ícodög
 = 4

53 
fd_ªad_body
 (, 
FILE
 *, 
wgöt
, wgint, wgint *, wgint *, *, );

55 c⁄° *(*
	thunk_ãrmö©‹_t
) (const *, const *, );

57 *
fd_ªad_hunk
 (, 
hunk_ãrmö©‹_t
, , );

58 *
fd_ªad_löe
 ();

60 
uîr_t
 
ªåõve_uæ
 (
uæ
 *, const *, **, **,

61 c⁄° *, *, 
boﬁ
, 
úi
 *, bool);

62 
uîr_t
 
ªåõve_‰om_fûe
 (c⁄° *, 
boﬁ
, *);

64 c⁄° *
ªå_øã
 (
wgöt
, );

65 
ˇlc_øã
 (
wgöt
, , *);

66 
¥ötwh©
 (, );

68 
¶ìp_bëwìn_ªåõvÆs
 ();

70 
rŸ©e_backups
 (const *);

72 
boﬁ
 
uæ_u£s_¥oxy
 (
uæ
 *);

74 
£t_loˇl_fûe
 (const **, const *);

76 
boﬁ
 
öput_fûe_uæ
 (const *);

	@src/spider.c

31 
	~"wgë.h
"

33 
	~<°dio.h
>

34 
	~<î∫o.h
>

35 
	~<as£π.h
>

37 
	~"•idî.h
"

38 
	~"uæ.h
"

39 
	~"utûs.h
"

40 
	~"hash.h
"

41 
	~"ªs.h
"

44 
hash_èbÀ
 *
	gn⁄exi°ög_uæs_£t
;

49 
	$•idî_˛ónup
 ()

51 i‡(
n⁄exi°ög_uæs_£t
)

52 
	`°rög_£t_‰ì
 (
n⁄exi°ög_uæs_£t
);

53 
	}
}

57 
	$n⁄exi°ög_uæ
 (c⁄° *
uæ
)

60 i‡(
	`is_robŸs_txt_uæ
 (
uæ
))

62 i‡(!
n⁄exi°ög_uæs_£t
)

63 
n⁄exi°ög_uæs_£t
 = 
	`make_°rög_hash_èbÀ
 (0);

64 
	`°rög_£t_add
 (
n⁄exi°ög_uæs_£t
, 
uæ
);

65 
	}
}

68 
	$¥öt_brokí_löks
 ()

70 
hash_èbÀ_ôî©‹
 
ôî
;

71 
num_ñems
;

73 i‡(!
n⁄exi°ög_uæs_£t
)

75 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("FoundÇo brokenÜinks.\n\n"));

79 
num_ñems
 = 
	`hash_èbÀ_cou¡
 (
n⁄exi°ög_uæs_£t
);

80 
	`as£π
 (
num_ñems
 > 0);

82 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`ngëãxt
("Found %d brokenÜink.\n\n",

83 "Found %d brokíÜöks.\n\n", 
num_ñems
),

84 
num_ñems
);

86 
	`hash_èbÀ_ôî©e
 (
n⁄exi°ög_uæs_£t
, &
ôî
);

87 
	`hash_èbÀ_ôî_√xt
 (&
ôî
); )

90 c⁄° *
uæ
 = (c⁄° *Ë
ôî
.
key
;

92 
	`log¥ötf
 (
LOG_NOTQUIET
, 
	`_
("%s\n"), 
uæ
);

94 
	`logputs
 (
LOG_NOTQUIET
, "\n");

95 
	}
}

	@src/spider.h

31 #i‚de‡
SPIDER_H


32 
	#SPIDER_H


	)

34 
	#visôed_uæ
(
a
,
b
)

	)

35 
n⁄exi°ög_uæ
 (const *);

36 
¥öt_brokí_löks
 ();

	@src/ssl.h

32 #i‚de‡
GEN_SSLFUNC_H


33 
	#GEN_SSLFUNC_H


	)

35 
boﬁ
 
s¶_öô
 ();

36 
boﬁ
 
s¶_c⁄√˘_wgë
 ();

37 
boﬁ
 
s¶_check_˚πifiˇã
 (, const *);

	@src/sysdep.h

35 #i‚de‡
SYSDEP_H


36 
	#SYSDEP_H


	)

39 #ifde‡
__sun


40 #ifde‡
__SVR4


41 
	#sﬁ¨is


	)

45 #i‡
deföed
(
__INTERIX
Ë&& !deföed(
_ALL_SOURCE
)

46 
	#_ALL_SOURCE


	)

59 #unde‡
NAMESPACE_TWEAKS


61 #ifde‡
sﬁ¨is


62 
	#NAMESPACE_TWEAKS


	)

65 #i‡
deföed
(
__löux__
Ë|| deföed(
__GLIBC__
)

66 
	#NAMESPACE_TWEAKS


	)

69 #ifde‡
NAMESPACE_TWEAKS


72 
	#_XOPEN_SOURCE
 500

	)

81 #i‡
HAVE_ALLOCA_H


82 
	~<Æloˇ.h
>

83 #ñi‡
deföed
 
WINDOWS


84 
	~<mÆloc.h
>

85 #i‚de‡
Æloˇ


86 
	#Æloˇ
 
_Æloˇ


	)

88 #ñi‡
deföed
 
__GNUC__


89 
	#Æloˇ
 
__buûtö_Æloˇ


	)

90 #ñi‡
deföed
 
_AIX


91 
	#Æloˇ
 
__Æloˇ


	)

93 
	~<°ddef.h
>

94 #ifde‡ 
__˝lu•lus


97 *
Æloˇ
 (
size_t
);

102 
	~<sys/ty≥s.h
>

103 
	~<sys/°©.h
>

105 #ifde‡
HAVE_INTTYPES_H


107 
	~<°döt.h
>

108 
	~<öây≥s.h
>

111 #ifde‡
WINDOWS


118 
	~"mswödows.h
"

122 
	~<°dboﬁ.h
>

125 #i‡
deföed
(
__EMX__
Ë|| deföed(
MSDOS
)

126 #i‚de‡
S_ISLNK


127 
	#S_ISLNK
(
m
Ë0

	)

129 #i‚de‡
l°©


130 
	#l°©
 
°©


	)

140 #i‚de‡
S_ISLNK


141 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

143 #i‚de‡
S_ISDIR


144 
	#S_ISDIR
(
m
Ë(((mË& (
_S_IFMT
)Ë=(
_S_IFDIR
))

	)

146 #i‚de‡
S_ISREG


147 
	#S_ISREG
(
m
Ë(((mË& 
_S_IFMT
Ë=
_S_IFREG
)

	)

152 #i‚de‡
°ru˘_°©


153 
	#°ru˘_°©
 
°©


	)

155 #i‚de‡
°ru˘_f°©


156 
	#°ru˘_f°©
 
°©


	)

160 
	~<limôs.h
>

162 #i‚de‡
CHAR_BIT


163 
	#CHAR_BIT
 8

	)

167 
	#TYPE_MAXIMUM
(
t
Ë(—Ë(~ (~ (tË0 << ( (tË* 
CHAR_BIT
 - 1))))

	)

171 #i‚de‡
HAVE_STRCASECMP


172 
°rˇ£cmp
 ();

174 #i‚de‡
HAVE_STRNCASECMP


175 
°∫ˇ£cmp
 ();

177 #i‚de‡
HAVE_STRPTIME


178 *
°Ωtime
 ();

180 #i‚de‡
HAVE_TIMEGM


181 
	~<time.h
>

182 
time_t
 
timegm
 (
tm
 *);

184 #i‚de‡
HAVE_MEMRCHR


185 *
memrchr
 (c⁄° *, , 
size_t
);

190 #i‚de‡
HAVE_SNPRINTF


191 
¢¥ötf
 (*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, ...);

193 #i‚de‡
HAVE_VSNPRINTF


194 
	~<°d¨g.h
>

195 
v¢¥ötf
 (*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, 
va_li°
 
¨g
);

204 #i‚de‡
MAP_FAILED


205 
	#MAP_FAILED
 ((*Ë-1)

	)

211 #ifde‡
HAVE_WORKING_FNMATCH_H


212 
	#SYSTEM_FNMATCH


	)

215 #ifde‡
SYSTEM_FNMATCH


216 
	~<‚m©ch.h
>

220 #unde‡
FNM_PATHNAME


221 #unde‡
FNM_NOESCAPE


222 #unde‡
FNM_PERIOD


223 #unde‡
FNM_NOMATCH


225 
	#FNM_PATHNAME
 (1 << 0Ë

	)

226 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

227 
	#FNM_PERIOD
 (1 << 2Ë

	)

228 
	#FNM_NOMATCH
 1

	)

230 
‚m©ch
 (const *, const *, );

234 #i‚de‡
HAVE_SIG_ATOMIC_T


235 
	tsig_©omic_t
;

244 #i‚de‡
HAVE_UINT32_T


245 #i‡
SIZEOF_INT
 == 4

246 
	tuöt32_t
;

248 #i‡
SIZEOF_LONG
 == 4

249 
	tuöt32_t
;

251 #i‡
SIZEOF_SHORT
 == 4

252 
	tuöt32_t
;

261 #i‚de‡
HAVE_UINTPTR_T


262 
	tuöçå_t
;

266 #i‚de‡
HAVE_INTPTR_T


267 
	töçå_t
;

	@src/test.c

31 
	~<°dio.h
>

33 
	~"ã°.h
"

35 #i‚de‡
TESTING


39 c⁄° *
ã°_∑r£_c⁄ã¡_di•osôi⁄
();

40 c⁄° *
ã°_subdú_p
();

41 c⁄° *
ã°_dú_m©ches_p
();

42 c⁄° *
ã°_comm™ds_s‹ãd
();

43 c⁄° *
ã°_cmd_•ec_ª°ri˘_fûe_«mes
();

44 c⁄° *
ã°_∑th_sim∂ify
 ();

45 c⁄° *
ã°_≠≥nd_uri_∑thñ
();

46 c⁄° *
ã°_¨e_uæs_equÆ
();

47 c⁄° *
ã°_is_robŸs_txt_uæ
();

49 
	gã°s_run
;

52 
	$Æl_ã°s
()

54 
	`mu_run_ã°
 (
ã°_∑r£_c⁄ã¡_di•osôi⁄
);

55 
	`mu_run_ã°
 (
ã°_subdú_p
);

56 
	`mu_run_ã°
 (
ã°_dú_m©ches_p
);

57 
	`mu_run_ã°
 (
ã°_comm™ds_s‹ãd
);

58 
	`mu_run_ã°
 (
ã°_cmd_•ec_ª°ri˘_fûe_«mes
);

59 
	`mu_run_ã°
 (
ã°_∑th_sim∂ify
);

60 
	`mu_run_ã°
 (
ã°_≠≥nd_uri_∑thñ
);

61 
	`mu_run_ã°
 (
ã°_¨e_uæs_equÆ
);

62 
	`mu_run_ã°
 (
ã°_is_robŸs_txt_uæ
);

64  
NULL
;

65 
	}
}

67 *
	g¥ogøm_«me
;

70 
	$maö
 (
¨gc
, *
¨gv
[])

72 c⁄° *
ªsu…
;

74 
¥ogøm_«me
 = 
¨gv
[0];

76 
ªsu…
 = 
	`Æl_ã°s
();

78 i‡(
ªsu…
 !
NULL
)

80 
	`puts
 (
ªsu…
);

84 
	`¥ötf
 ("ALL TESTS PASSED\n");

87 
	`¥ötf
 ("Te°†run: %d\n", 
ã°s_run
);

89  
ªsu…
 != 0;

90 
	}
}

	@src/test.h

31 #i‚de‡
TEST_H


32 
	#TEST_H


	)

35 
	#mu_as£π
(
mesßge
, 
ã°
Ëdÿ{ i‡(!—e°)Ë mesßge; } 0)

	)

36 
	#mu_run_ã°
(
ã°
) \

38 c⁄° *
mesßge
; \

39 
	`puts
("RUNNING TEST " #test "..."); \

40 
mesßge
 = 
	`ã°
(); \

41 
ã°s_run
++; \

42 i‡(
mesßge
)  message; \

43 
	`puts
("PASSED\n"); \

44 } 0)

	)

46 
ã°s_run
;

	@src/url.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

39 
	~<as£π.h
>

41 
	~"utûs.h
"

42 
	~"uæ.h
"

43 
	~"ho°.h
"

45 #ifde‡
__VMS


46 
	~"vms.h
"

49 #ifde‡
TESTING


50 
	~"ã°.h
"

54 
	mscm_dißbÀd
 = 1,

55 
	mscm_has_∑øms
 = 2,

56 
	mscm_has_quîy
 = 4,

57 
	mscm_has_‰agmít
 = 8

60 
	sscheme_d©a


63 c⁄° *
	m«me
;

65 c⁄° *
	mÀadög_°rög
;

67 
	mdeÁu…_p‹t
;

69 
	mÊags
;

73 
scheme_d©a
 
	gsuµ‹ãd_schemes
[] =

75 { "hâp", "hâp://", 
DEFAULT_HTTP_PORT
, 
scm_has_quîy
|
scm_has_‰agmít
 },

76 #ifde‡
HAVE_SSL


77 { "hâps", "hâps://", 
DEFAULT_HTTPS_PORT
, 
scm_has_quîy
|
scm_has_‰agmít
 },

79 { "·p", "·p://", 
DEFAULT_FTP_PORT
, 
scm_has_∑øms
|
scm_has_‰agmít
 },

82 { 
NULL
, NULL, -1, 0 }

87 
boﬁ
 
∑th_sim∂ify
 (
uæ_scheme
, *);

115 
	muæchr_ª£rved
 = 1,

118 
	muæchr_unß„
 = 2

121 
	#uæchr_ã°
(
c
, 
mask
Ë(
uæchr_èbÀ
[()(c)] & (mask))

	)

122 
	#URL_RESERVED_CHAR
(
c
Ë
	`uæchr_ã°
(c, 
uæchr_ª£rved
)

	)

123 
	#URL_UNSAFE_CHAR
(
c
Ë
	`uæchr_ã°
(c, 
uæchr_unß„
)

	)

126 
	#R
 
uæchr_ª£rved


	)

127 
	#U
 
uæchr_unß„


	)

128 
	#RU
 
R
|
U


	)

130 c⁄° 
	guæchr_èbÀ
[256] =

132 
U
, U, U, U, U, U, U, U,

133 
U
, U, U, U, U, U, U, U,

134 
U
, U, U, U, U, U, U, U,

135 
U
, U, U, U, U, U, U, U,

136 
U
, 0, U, 
RU
, 
R
, U, R, 0,

137 0, 0, 0, 
R
, R, 0, 0, R,

139 0, 0, 
RU
, 
R
, 
U
, R, U, R,

140 
RU
, 0, 0, 0, 0, 0, 0, 0,

143 0, 0, 0, 
RU
, 
U
, RU, U, 0,

144 
U
, 0, 0, 0, 0, 0, 0, 0,

147 0, 0, 0, 
U
, U, U, 0, U,

149 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

150 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

151 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

152 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

154 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

155 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

156 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

157 
U
, U, U, U, U, U, U, U, U, U, U, U, U, U, U, U,

159 #unde‡
R


160 #unde‡
U


161 #unde‡
RU


173 
	$uæ_u√sˇ≥
 (*
s
)

175 *
t
 = 
s
;

176 *
h
 = 
s
;

178 ; *
h
; h++, 
t
++)

180 i‡(*
h
 != '%')

182 
c›ych¨
:

183 *
t
 = *
h
;

187 
c
;

189 i‡(!
h
[1] || !h[2] || !(
	`c_isxdigô
 (h[1]) && c_isxdigit (h[2])))

190 
c›ych¨
;

191 
c
 = 
	`X2DIGITS_TO_NUM
 (
h
[1], h[2]);

194 i‡(
c
 == '\0')

195 
c›ych¨
;

196 *
t
 = 
c
;

197 
h
 += 2;

200 *
t
 = '\0';

201 
	}
}

211 
	$uæ_esˇ≥_1
 (c⁄° *
s
, 
mask
, 
boﬁ
 
Ælow_∑s°hrough
)

213 c⁄° *
p1
;

214 *
p2
, *
√w°r
;

215 
√wÀn
;

216 
addôi⁄
 = 0;

218 
p1
 = 
s
; *p1;Ö1++)

219 i‡(
	`uæchr_ã°
 (*
p1
, 
mask
))

220 
addôi⁄
 += 2;

222 i‡(!
addôi⁄
)

223  
Ælow_∑s°hrough
 ? (*)
s
 : 
	`x°rdup
 (s);

225 
√wÀn
 = (
p1
 - 
s
Ë+ 
addôi⁄
;

226 
√w°r
 = 
	`xmÆloc
 (
√wÀn
 + 1);

228 
p1
 = 
s
;

229 
p2
 = 
√w°r
;

230 *
p1
)

233 i‡(
	`uæchr_ã°
 (*
p1
, 
mask
))

235 
c
 = *
p1
++;

236 *
p2
++ = '%';

237 *
p2
++ = 
	`XNUM_TO_DIGIT
 (
c
 >> 4);

238 *
p2
++ = 
	`XNUM_TO_DIGIT
 (
c
 & 0xf);

241 *
p2
++ = *
p1
++;

243 
	`as£π
 (
p2
 - 
√w°r
 =
√wÀn
);

244 *
p2
 = '\0';

246  
√w°r
;

247 
	}
}

253 
	$uæ_esˇ≥
 (c⁄° *
s
)

255  
	`uæ_esˇ≥_1
 (
s
, 
uæchr_unß„
, 
Ál£
);

256 
	}
}

262 
	$uæ_esˇ≥_unß„_™d_ª£rved
 (c⁄° *
s
)

264  
	`uæ_esˇ≥_1
 (
s
, 
uæchr_unß„
|
uæchr_ª£rved
, 
Ál£
);

265 
	}
}

271 
	$uæ_esˇ≥_Ælow_∑s°hrough
 (c⁄° *
s
)

273  
	`uæ_esˇ≥_1
 (
s
, 
uæchr_unß„
, 
åue
);

274 
	}
}

282 
ölöe
 
boﬁ


283 
	$ch¨_√eds_esˇpög
 (c⁄° *
p
)

285 i‡(*
p
 == '%')

287 i‡(
	`c_isxdigô
 (*(
p
 + 1)) && c_isxdigit (*(p + 2)))

288  
Ál£
;

291  
åue
;

293 i‡(
	`URL_UNSAFE_CHAR
 (*
p
Ë&& !
	`URL_RESERVED_CHAR
 (*p))

294  
åue
;

296  
Ál£
;

297 
	}
}

378 
	$ªícode_esˇ≥s
 (c⁄° *
s
)

380 c⁄° *
p1
;

381 *
√w°r
, *
p2
;

382 
ﬁdÀn
, 
√wÀn
;

384 
ícode_cou¡
 = 0;

388 
p1
 = 
s
; *p1;Ö1++)

389 i‡(
	`ch¨_√eds_esˇpög
 (
p1
))

390 ++
ícode_cou¡
;

392 i‡(!
ícode_cou¡
)

394  (*Ë
s
;

396 
ﬁdÀn
 = 
p1
 - 
s
;

398 
√wÀn
 = 
ﬁdÀn
 + 2 * 
ícode_cou¡
;

399 
√w°r
 = 
	`xmÆloc
 (
√wÀn
 + 1);

403 
p1
 = 
s
;

404 
p2
 = 
√w°r
;

406 *
p1
)

407 i‡(
	`ch¨_√eds_esˇpög
 (
p1
))

409 
c
 = *
p1
++;

410 *
p2
++ = '%';

411 *
p2
++ = 
	`XNUM_TO_DIGIT
 (
c
 >> 4);

412 *
p2
++ = 
	`XNUM_TO_DIGIT
 (
c
 & 0xf);

415 *
p2
++ = *
p1
++;

417 *
p2
 = '\0';

418 
	`as£π
 (
p2
 - 
√w°r
 =
√wÀn
);

419  
√w°r
;

420 
	}
}

425 
uæ_scheme


426 
	$uæ_scheme
 (c⁄° *
uæ
)

428 
i
;

430 
i
 = 0; 
suµ‹ãd_schemes
[i].
Àadög_°rög
; i++)

431 i‡(0 =
	`°∫ˇ£cmp
 (
uæ
, 
suµ‹ãd_schemes
[
i
].
Àadög_°rög
,

432 
	`°æí
 (
suµ‹ãd_schemes
[
i
].
Àadög_°rög
)))

434 i‡(!(
suµ‹ãd_schemes
[
i
].
Êags
 & 
scm_dißbÀd
))

435  (
uæ_scheme
Ë
i
;

437  
SCHEME_INVALID
;

440  
SCHEME_INVALID
;

441 
	}
}

443 
	#SCHEME_CHAR
(
ch
Ë(
	`c_iß um
 (chË|| (chË='-' || (chË='+')

	)

449 
boﬁ


450 
	$uæ_has_scheme
 (c⁄° *
uæ
)

452 c⁄° *
p
 = 
uæ
;

455 i‡(!*
p
 || !
	`SCHEME_CHAR
 (*p))

456  
Ál£
;

457 ++
p
;

459 *
p
 && 
	`SCHEME_CHAR
 (*p))

460 ++
p
;

462  *
p
 == ':';

463 
	}
}

465 
boﬁ


466 
	$uæ_vÆid_scheme
 (c⁄° *
uæ
)

468 
uæ_scheme
 
scheme
 = 
	`uæ_scheme
 (
uæ
);

469  
scheme
 !
SCHEME_INVALID
;

470 
	}
}

473 
	$scheme_deÁu…_p‹t
 (
uæ_scheme
 
scheme
)

475  
suµ‹ãd_schemes
[
scheme
].
deÁu…_p‹t
;

476 
	}
}

479 
	$scheme_dißbÀ
 (
uæ_scheme
 
scheme
)

481 
suµ‹ãd_schemes
[
scheme
].
Êags
 |
scm_dißbÀd
;

482 
	}
}

491 
	$uæ_skù_¸edítüls
 (c⁄° *
uæ
)

495 c⁄° *
p
 = (c⁄° *)
	`°Ωbrk
 (
uæ
, "@/?#;");

496 i‡(!
p
 || *p != '@')

497  
uæ
;

498  
p
 + 1;

499 
	}
}

504 
boﬁ


505 
	$∑r£_¸edítüls
 (c⁄° *
beg
, c⁄° *
íd
, **
u£r
, **
∑sswd
)

507 *
cﬁ⁄
;

508 c⁄° *
u£ªnd
;

510 i‡(
beg
 =
íd
)

511  
Ál£
;

513 
cﬁ⁄
 = 
	`memchr
 (
beg
, ':', 
íd
 - beg);

514 i‡(
cﬁ⁄
 =
beg
)

515  
Ál£
;

517 i‡(
cﬁ⁄
)

519 *
∑sswd
 = 
	`°rdupdñim
 (
cﬁ⁄
 + 1, 
íd
);

520 
u£ªnd
 = 
cﬁ⁄
;

521 
	`uæ_u√sˇ≥
 (*
∑sswd
);

525 *
∑sswd
 = 
NULL
;

526 
u£ªnd
 = 
íd
;

528 *
u£r
 = 
	`°rdupdñim
 (
beg
, 
u£ªnd
);

529 
	`uæ_u√sˇ≥
 (*
u£r
);

530  
åue
;

531 
	}
}

548 
	$ªwrôe_sh‹th™d_uæ
 (c⁄° *
uæ
)

550 c⁄° *
p
;

551 *
ªt
;

553 i‡(
	`uæ_scheme
 (
uæ
Ë!
SCHEME_INVALID
)

554  
NULL
;

558 
p
 = 
	`°Ωbrk
 (
uæ
, ":/");

559 i‡(
p
 =
uæ
)

560  
NULL
;

565 i‡(
p
 &&Ö[0] == ':' &&Ö[1] == '/' &&Ö[2] == '/')

566  
NULL
;

568 i‡(
p
 && *p == ':')

572 
digôs
 = 
	`°r•n
 (
p
 + 1, "0123456789");

573 i‡(
digôs
 && (
p
[1 + digits] == '/' ||Ö[1 + digits] == '\0'))

574 
hâp
;

577 
ªt
 = 
	`≠rötf
 ("·p://%s", 
uæ
);

578 
ªt
[6 + (
p
 - 
uæ
)] = '/';

582 
hâp
:

584 
ªt
 = 
	`≠rötf
 ("hâp://%s", 
uæ
);

586  
ªt
;

587 
	}
}

589 
•lô_∑th
 (const *, **, **);

595 
ölöe
 *

596 
	$°Ωbrk_‹_eos
 (c⁄° *
s
, c⁄° *
ac˚±
)

598 *
p
 = 
	`°Ωbrk
 (
s
, 
ac˚±
);

599 i‡(!
p
)

600 
p
 = 
	`°rchr
 (
s
, '\0');

601  
p
;

602 
	}
}

607 
boﬁ


608 
	$lowîˇ£_°r
 (*
°r
)

610 
boﬁ
 
ch™ged
 = 
Ál£
;

611 ; *
°r
; str++)

612 i‡(
	`c_isuµî
 (*
°r
))

614 
ch™ged
 = 
åue
;

615 *
°r
 = 
	`c_tﬁowî
 (*str);

617  
ch™ged
;

618 
	}
}

621 
	$öô_£ps
 (
uæ_scheme
 
scheme
)

623 
£ps
[8] = ":/";

624 *
p
 = 
£ps
 + 2;

625 
Êags
 = 
suµ‹ãd_schemes
[
scheme
].flags;

627 i‡(
Êags
 & 
scm_has_∑øms
)

628 *
p
++ = ';';

629 i‡(
Êags
 & 
scm_has_quîy
)

630 *
p
++ = '?';

631 i‡(
Êags
 & 
scm_has_‰agmít
)

632 *
p
++ = '#';

633 *
p
 = '\0';

634  
£ps
;

635 
	}
}

637 c⁄° *
	g∑r£_îr‹s
[] = {

638 
	#PE_NO_ERROR
 0

	)

639 
N_
("NoÉrror"),

640 
	#PE_UNSUPPORTED_SCHEME
 1

	)

641 
N_
("Unsupported scheme %s"),

642 
	#PE_MISSING_SCHEME
 2

	)

643 
N_
("Scheme missing"),

644 
	#PE_INVALID_HOST_NAME
 3

	)

645 
N_
("Invalid hostÇame"),

646 
	#PE_BAD_PORT_NUMBER
 4

	)

647 
N_
("BadÖortÇumber"),

648 
	#PE_INVALID_USER_NAME
 5

	)

649 
N_
("Invalid userÇame"),

650 
	#PE_UNTERMINATED_IPV6_ADDRESS
 6

	)

651 
N_
("Unterminated IPv6Çumericáddress"),

652 
	#PE_IPV6_NOT_SUPPORTED
 7

	)

653 
N_
("IPv6áddressesÇot supported"),

654 
	#PE_INVALID_IPV6_ADDRESS
 8

	)

655 
N_
("Invalid IPv6Çumericáddress")

663 
uæ
 *

664 
	$uæ_∑r£
 (c⁄° *
uæ
, *
îr‹
, 
úi
 *úi, 
boﬁ
 
≥r˚¡_ícode
)

666 
uæ
 *
u
;

667 c⁄° *
p
;

668 
boﬁ
 
∑th_modifõd
, 
ho°_modifõd
;

670 
uæ_scheme
 
scheme
;

671 c⁄° *
£ps
;

673 c⁄° *
u«me_b
, *
u«me_e
;

674 c⁄° *
ho°_b
, *
ho°_e
;

675 c⁄° *
∑th_b
, *
∑th_e
;

676 c⁄° *
∑øms_b
, *
∑øms_e
;

677 c⁄° *
quîy_b
, *
quîy_e
;

678 c⁄° *
‰agmít_b
, *
‰agmít_e
;

680 
p‹t
;

681 *
u£r
 = 
NULL
, *
∑sswd
 = NULL;

683 c⁄° *
uæ_ícoded
 = 
NULL
;

684 *
√w_uæ
 = 
NULL
;

686 
îr‹_code
;

688 
scheme
 = 
	`uæ_scheme
 (
uæ
);

689 i‡(
scheme
 =
SCHEME_INVALID
)

691 i‡(
	`uæ_has_scheme
 (
uæ
))

692 
îr‹_code
 = 
PE_UNSUPPORTED_SCHEME
;

694 
îr‹_code
 = 
PE_MISSING_SCHEME
;

695 
îr‹
;

698 i‡(
úi
 && iri->
utf8_ícode
)

700 
úi
->
utf8_ícode
 = 
	`ªmŸe_to_utf8
 (úi, iri->
‹ig_uæ
 ? iri->‹ig_uæ : 
uæ
, (c⁄° **Ë&
√w_uæ
);

701 i‡(!
úi
->
utf8_ícode
)

702 
√w_uæ
 = 
NULL
;

704 
úi
->
‹ig_uæ
 = 
	`x°rdup
 (
uæ
);

708 i‡(
≥r˚¡_ícode
)

709 
uæ_ícoded
 = 
	`ªícode_esˇ≥s
 (
√w_uæ
 ?Çew_uæ : 
uæ
);

711 
uæ_ícoded
 = 
√w_uæ
 ?Çew_uæ : 
uæ
;

713 
p
 = 
uæ_ícoded
;

715 i‡(
√w_uæ
 && 
uæ_ícoded
 !=Çew_url)

716 
	`x‰ì
 (
√w_uæ
);

718 
p
 +
	`°æí
 (
suµ‹ãd_schemes
[
scheme
].
Àadög_°rög
);

719 
u«me_b
 = 
p
;

720 
p
 = 
	`uæ_skù_¸edítüls
 (p);

721 
u«me_e
 = 
p
;

731 
∑th_b
 = 
∑th_e
 = 
NULL
;

732 
∑øms_b
 = 
∑øms_e
 = 
NULL
;

733 
quîy_b
 = 
quîy_e
 = 
NULL
;

734 
‰agmít_b
 = 
‰agmít_e
 = 
NULL
;

739 
£ps
 = 
	`öô_£ps
 (
scheme
);

741 
ho°_b
 = 
p
;

743 i‡(*
p
 == '[')

750 
ho°_b
 = 
p
 + 1;

751 
ho°_e
 = 
	`°rchr
 (
ho°_b
, ']');

753 i‡(!
ho°_e
)

755 
îr‹_code
 = 
PE_UNTERMINATED_IPV6_ADDRESS
;

756 
îr‹
;

759 #ifde‡
ENABLE_IPV6


761 i‡(!
	`is_vÆid_ùv6_addªss
(
ho°_b
, 
ho°_e
))

763 
îr‹_code
 = 
PE_INVALID_IPV6_ADDRESS
;

764 
îr‹
;

768 
p
 = 
ho°_e
 + 1;

770 
îr‹_code
 = 
PE_IPV6_NOT_SUPPORTED
;

771 
îr‹
;

778 i‡(!
	`°rchr
 (
£ps
, *
p
))

781 
îr‹_code
 = 
PE_INVALID_HOST_NAME
;

782 
îr‹
;

787 
p
 = 
	`°Ωbrk_‹_eos
 (p, 
£ps
);

788 
ho°_e
 = 
p
;

790 ++
£ps
;

792 i‡(
ho°_b
 =
ho°_e
)

794 
îr‹_code
 = 
PE_INVALID_HOST_NAME
;

795 
îr‹
;

798 
p‹t
 = 
	`scheme_deÁu…_p‹t
 (
scheme
);

799 i‡(*
p
 == ':')

801 c⁄° *
p‹t_b
, *
p‹t_e
, *
µ
;

805 ++
p
;

806 
p‹t_b
 = 
p
;

807 
p
 = 
	`°Ωbrk_‹_eos
 (p, 
£ps
);

808 
p‹t_e
 = 
p
;

811 i‡(
p‹t_b
 !
p‹t_e
)

812 
p‹t
 = 0, 
µ
 = 
p‹t_b
;Ö∞< 
p‹t_e
;Öp++)

814 i‡(!
	`c_isdigô
 (*
µ
))

818 
îr‹_code
 = 
PE_BAD_PORT_NUMBER
;

819 
îr‹
;

821 
p‹t
 = 10 *Ö‹à+ (*
µ
 - '0');

824 i‡(
p‹t
 > 0xffff)

826 
îr‹_code
 = 
PE_BAD_PORT_NUMBER
;

827 
îr‹
;

833 ++
£ps
;

837 
	#GET_URL_PART
(
£pch¨
, 
v¨
) do { \

838 i‡(*
p
 =
£pch¨
) \

839 
v¨
##
_b
 = ++
p
, v¨##
_e
 =Ö = 
	`°Ωbrk_‹_eos
 (p, 
£ps
); \

840 ++
£ps
; \

841 } 0)

	)

843 
	`GET_URL_PART
 ('/', 
∑th
);

844 i‡(
suµ‹ãd_schemes
[
scheme
].
Êags
 & 
scm_has_∑øms
)

845 
	`GET_URL_PART
 (';', 
∑øms
);

846 i‡(
suµ‹ãd_schemes
[
scheme
].
Êags
 & 
scm_has_quîy
)

847 
	`GET_URL_PART
 ('?', 
quîy
);

848 i‡(
suµ‹ãd_schemes
[
scheme
].
Êags
 & 
scm_has_‰agmít
)

849 
	`GET_URL_PART
 ('#', 
‰agmít
);

851 #unde‡
GET_URL_PART


852 
	`as£π
 (*
p
 == 0);

854 i‡(
u«me_b
 !
u«me_e
)

859 i‡(!
	`∑r£_¸edítüls
 (
u«me_b
, 
u«me_e
 - 1, &
u£r
, &
∑sswd
))

861 
îr‹_code
 = 
PE_INVALID_USER_NAME
;

862 
îr‹
;

866 
u
 = 
	`x√w0
 (
uæ
);

867 
u
->
scheme
 = scheme;

868 
u
->
ho°
 = 
	`°rdupdñim
 (
ho°_b
, 
ho°_e
);

869 
u
->
p‹t
 =Öort;

870 
u
->
u£r
 = user;

871 
u
->
∑sswd
 =Öasswd;

873 
u
->
∑th
 = 
	`°rdupdñim
 (
∑th_b
, 
∑th_e
);

874 
∑th_modifõd
 = 
	`∑th_sim∂ify
 (
scheme
, 
u
->
∑th
);

875 
	`•lô_∑th
 (
u
->
∑th
, &u->
dú
, &u->
fûe
);

877 
ho°_modifõd
 = 
	`lowîˇ£_°r
 (
u
->
ho°
);

883 i‡(
	`°rchr
 (
u
->
ho°
, '%'))

885 
	`uæ_u√sˇ≥
 (
u
->
ho°
);

886 
ho°_modifõd
 = 
åue
;

889 i‡(
›t
.
íabÀ_úi
 && 
úi
)

891 *
√w
 = 
	`idn_ícode
 (
úi
, 
u
->
ho°
);

892 i‡(
√w
)

894 
	`x‰ì
 (
u
->
ho°
);

895 
u
->
ho°
 = 
√w
;

896 
ho°_modifõd
 = 
åue
;

901 i‡(
∑øms_b
)

902 
u
->
∑øms
 = 
	`°rdupdñim
 (
∑øms_b
, 
∑øms_e
);

903 i‡(
quîy_b
)

904 
u
->
quîy
 = 
	`°rdupdñim
 (
quîy_b
, 
quîy_e
);

905 i‡(
‰agmít_b
)

906 
u
->
‰agmít
 = 
	`°rdupdñim
 (
‰agmít_b
, 
‰agmít_e
);

908 i‡(
›t
.
íabÀ_úi
 || 
∑th_modifõd
 || 
u
->
‰agmít
 || 
ho°_modifõd
 || 
∑th_b
 =
∑th_e
)

913 
u
->
uæ
 = 
	`uæ_°rög
 (u, 
URL_AUTH_SHOW
);

915 i‡(
uæ_ícoded
 !
uæ
)

916 
	`x‰ì
 ((*Ë
uæ_ícoded
);

920 i‡(
uæ_ícoded
 =
uæ
)

921 
u
->
uæ
 = 
	`x°rdup
 (url);

923 
u
->
uæ
 = (*Ë
uæ_ícoded
;

926  
u
;

928 
îr‹
:

930 i‡(
uæ_ícoded
 && uæ_ícoded !
uæ
)

931 
	`x‰ì
 ((*Ë
uæ_ícoded
);

935 i‡(
îr‹
)

936 *
îr‹
 = 
îr‹_code
;

937  
NULL
;

938 
	}
}

944 
	$uæ_îr‹
 (c⁄° *
uæ
, 
îr‹_code
)

946 
	`as£π
 (
îr‹_code
 >0 && ((
size_t
Ëîr‹_codeË< 
	`cou¡of
 (
∑r£_îr‹s
));

948 i‡(
îr‹_code
 =
PE_UNSUPPORTED_SCHEME
)

950 *
îr‹
, *
p
;

951 *
scheme
 = 
	`x°rdup
 (
uæ
);

952 
	`as£π
 (
	`uæ_has_scheme
 (
uæ
));

954 i‡((
p
 = 
	`°rchr
 (
scheme
, ':')))

955 *
p
 = '\0';

956 i‡(!
	`°rˇ£cmp
 (
scheme
, "https"))

957 
îr‹
 = 
	`≠rötf
 (
	`_
("HTTPS supportÇot compiled in"));

959 
îr‹
 = 
	`≠rötf
 (
	`_
(
∑r£_îr‹s
[
îr‹_code
]), 
	`quŸe
 (
scheme
));

960 
	`x‰ì
 (
scheme
);

962  
îr‹
;

965  
	`x°rdup
 (
	`_
(
∑r£_îr‹s
[
îr‹_code
]));

966 
	}
}

984 
	$•lô_∑th
 (c⁄° *
∑th
, **
dú
, **
fûe
)

986 *
œ°_¶ash
 = 
	`°ºchr
 (
∑th
, '/');

987 i‡(!
œ°_¶ash
)

989 *
dú
 = 
	`x°rdup
 ("");

990 *
fûe
 = 
	`x°rdup
 (
∑th
);

994 *
dú
 = 
	`°rdupdñim
 (
∑th
, 
œ°_¶ash
);

995 *
fûe
 = 
	`x°rdup
 (
œ°_¶ash
 + 1);

997 
	`uæ_u√sˇ≥
 (*
dú
);

998 
	`uæ_u√sˇ≥
 (*
fûe
);

999 
	}
}

1011 
	$fuŒ_∑th_Àngth
 (c⁄° 
uæ
 *url)

1013 
Àn
 = 0;

1015 
	#FROB
(
ñ
Ëi‡(
uæ
->ñË
Àn
 +1 + 
	`°æí
 (uæ->ñ)

	)

1017 
	`FROB
 (
∑th
);

1018 
	`FROB
 (
∑øms
);

1019 
	`FROB
 (
quîy
);

1021 #unde‡
FROB


1023  
Àn
;

1024 
	}
}

1029 
	$fuŒ_∑th_wrôe
 (c⁄° 
uæ
 *uæ, *
whîe
)

1031 
	#FROB
(
ñ
, 
chr
) do { \

1032 *
f_ñ
 = 
uæ
->
ñ
; \

1033 i‡(
f_ñ
) { \

1034 
l
 = 
	`°æí
 (
f_ñ
); \

1035 *
whîe
++ = 
chr
; \

1036 
	`mem˝y
 (
whîe
, 
f_ñ
, 
l
); \

1037 
whîe
 +
l
; \

1039 } 0)

	)

1041 
	`FROB
 (
∑th
, '/');

1042 
	`FROB
 (
∑øms
, ';');

1043 
	`FROB
 (
quîy
, '?');

1045 #unde‡
FROB


1046 
	}
}

1053 
	$uæ_fuŒ_∑th
 (c⁄° 
uæ
 *url)

1055 
Àngth
 = 
	`fuŒ_∑th_Àngth
 (
uæ
);

1056 *
fuŒ_∑th
 = 
	`xmÆloc
 (
Àngth
 + 1);

1058 
	`fuŒ_∑th_wrôe
 (
uæ
, 
fuŒ_∑th
);

1059 
fuŒ_∑th
[
Àngth
] = '\0';

1061  
fuŒ_∑th
;

1062 
	}
}

1069 
	$u√sˇ≥_sögÀ_ch¨
 (*
°r
, 
chr
)

1071 c⁄° 
c1
 = 
	`XNUM_TO_DIGIT
 (
chr
 >> 4);

1072 c⁄° 
c2
 = 
	`XNUM_TO_DIGIT
 (
chr
 & 0xf);

1073 *
h
 = 
°r
;

1074 *
t
 = 
°r
;

1075 ; *
h
; h++, 
t
++)

1077 i‡(
h
[0] ='%' && h[1] =
c1
 && h[2] =
c2
)

1079 *
t
 = 
chr
;

1080 
h
 += 2;

1083 *
t
 = *
h
;

1085 *
t
 = '\0';

1086 
	}
}

1092 
	$uæ_esˇ≥_dú
 (c⁄° *
dú
)

1094 *
√wdú
 = 
	`uæ_esˇ≥_1
 (
dú
, 
uæchr_unß„
 | 
uæchr_ª£rved
, 1);

1095 i‡(
√wdú
 =
dú
)

1096  (*)
dú
;

1098 
	`u√sˇ≥_sögÀ_ch¨
 (
√wdú
, '/');

1099  
√wdú
;

1100 
	}
}

1106 
	$sync_∑th
 (
uæ
 *
u
)

1108 *
√w∑th
, *
efûe
, *
edú
;

1110 
	`x‰ì
 (
u
->
∑th
);

1118 
edú
 = 
	`uæ_esˇ≥_dú
 (
u
->
dú
);

1119 
efûe
 = 
	`uæ_esˇ≥_1
 (
u
->
fûe
, 
uæchr_unß„
 | 
uæchr_ª£rved
, 1);

1121 i‡(!*
edú
)

1122 
√w∑th
 = 
	`x°rdup
 (
efûe
);

1125 
dúÀn
 = 
	`°æí
 (
edú
);

1126 
fûñí
 = 
	`°æí
 (
efûe
);

1129 *
p
 = 
√w∑th
 = 
	`xmÆloc
 (
dúÀn
 + 1 + 
fûñí
 + 1);

1130 
	`mem˝y
 (
p
, 
edú
, 
dúÀn
);

1131 
p
 +
dúÀn
;

1132 *
p
++ = '/';

1133 
	`mem˝y
 (
p
, 
efûe
, 
fûñí
);

1134 
p
 +
fûñí
;

1135 *
p
 = '\0';

1138 
u
->
∑th
 = 
√w∑th
;

1140 i‡(
edú
 !
u
->
dú
)

1141 
	`x‰ì
 (
edú
);

1142 i‡(
efûe
 !
u
->
fûe
)

1143 
	`x‰ì
 (
efûe
);

1146 
	`x‰ì
 (
u
->
uæ
);

1147 
u
->
uæ
 = 
	`uæ_°rög
 (u, 
URL_AUTH_SHOW
);

1148 
	}
}

1154 
	$uæ_£t_dú
 (
uæ
 *uæ, c⁄° *
√wdú
)

1156 
	`x‰ì
 (
uæ
->
dú
);

1157 
uæ
->
dú
 = 
	`x°rdup
 (
√wdú
);

1158 
	`sync_∑th
 (
uæ
);

1159 
	}
}

1162 
	$uæ_£t_fûe
 (
uæ
 *uæ, c⁄° *
√wfûe
)

1164 
	`x‰ì
 (
uæ
->
fûe
);

1165 
uæ
->
fûe
 = 
	`x°rdup
 (
√wfûe
);

1166 
	`sync_∑th
 (
uæ
);

1167 
	}
}

1170 
	$uæ_‰ì
 (
uæ
 *url)

1172 
	`x‰ì
 (
uæ
->
ho°
);

1173 
	`x‰ì
 (
uæ
->
∑th
);

1174 
	`x‰ì
 (
uæ
->url);

1176 
	`x‰ì_nuŒ
 (
uæ
->
∑øms
);

1177 
	`x‰ì_nuŒ
 (
uæ
->
quîy
);

1178 
	`x‰ì_nuŒ
 (
uæ
->
‰agmít
);

1179 
	`x‰ì_nuŒ
 (
uæ
->
u£r
);

1180 
	`x‰ì_nuŒ
 (
uæ
->
∑sswd
);

1182 
	`x‰ì
 (
uæ
->
dú
);

1183 
	`x‰ì
 (
uæ
->
fûe
);

1185 
	`x‰ì
 (
uæ
);

1186 
	}
}

1191 
	$mkÆldús
 (c⁄° *
∑th
)

1193 c⁄° *
p
;

1194 *
t
;

1195 
°ru˘_°©
 
°
;

1196 
ªs
;

1198 
p
 = 
∑th
 + 
	`°æí
 (path);

1199 ; *
p
 !'/' &&Ö !
∑th
;Ö--)

1203 i‡((
p
 =
∑th
) && (*p != '/'))

1205 
t
 = 
	`°rdupdñim
 (
∑th
, 
p
);

1208 i‡((
	`°©
 (
t
, &
°
) == 0))

1210 i‡(
	`S_ISDIR
 (
°
.
°_mode
))

1212 
	`x‰ì
 (
t
);

1229 
	`DEBUGP
 (("Removög %†beˇu£ o‡dúe˘‹y d™gî!\n", 
t
));

1230 
	`u∆ök
 (
t
);

1233 
ªs
 = 
	`make_dúe˘‹y
 (
t
);

1234 i‡(
ªs
 != 0)

1235 
	`log¥ötf
 (
LOG_NOTQUIET
, "%s: %s", 
t
, 
	`°ªº‹
 (
î∫o
));

1236 
	`x‰ì
 (
t
);

1237  
ªs
;

1238 
	}
}

1250 
	sgrowabÀ
 {

1251 *
	mba£
;

1252 
	msize
;

1253 
	mèû
;

1260 
	#GROW
(
g
, 
≠≥nd_size
) do { \

1261 
growabÀ
 *
G_
 = 
g
; \

1262 
	`DO_REALLOC
 (
G_
->
ba£
, G_->
size
, G_->
èû
 + 
≠≥nd_size
, ); \

1263 } 0)

	)

1266 
	#TAIL
(
r
Ë(‘)->
ba£
 + (r)->
èû
)

	)

1269 
	#TAIL_INCR
(
r
, 
≠≥nd_cou¡
Ë(‘)->
èû
 +≠≥nd_cou¡)

	)

1275 
	$≠≥nd_°rög
 (c⁄° *
°r
, 
growabÀ
 *
de°
)

1277 
l
 = 
	`°æí
 (
°r
);

1278 
	`GROW
 (
de°
, 
l
);

1279 
	`mem˝y
 (
	`TAIL
 (
de°
), 
°r
, 
l
);

1280 
	`TAIL_INCR
 (
de°
, 
l
);

1281 
	}
}

1287 
	$≠≥nd_ch¨
 (
ch
, 
growabÀ
 *
de°
)

1289 
	`GROW
 (
de°
, 1);

1290 *
	`TAIL
 (
de°
Ë
ch
;

1291 
	`TAIL_INCR
 (
de°
, 1);

1292 
	}
}

1295 
	mfûechr_nŸ_unix
 = 1,

1296 
	mfûechr_nŸ_wödows
 = 2,

1297 
	mfûechr_c⁄åﬁ
 = 4

1300 
	#FILE_CHAR_TEST
(
c
, 
mask
) \

1301 ((
›t
.
ª°ri˘_fûes_n⁄ascii
 && !
	`c_ißscii
 (()(
c
))) || \

1302 (
fûechr_èbÀ
[()(
c
)] & (
mask
)))

	)

1305 
	#U
 
fûechr_nŸ_unix


	)

1306 
	#W
 
fûechr_nŸ_wödows


	)

1307 
	#C
 
fûechr_c⁄åﬁ


	)

1309 
	#UW
 
U
|
W


	)

1310 
	#UWC
 
U
|
W
|
C


	)

1319 c⁄° 
	gfûechr_èbÀ
[256] =

1321 
UWC
, 
C
, C, C, C, C, C, C,

1322 
C
, C, C, C, C, C, C, C,

1323 
C
, C, C, C, C, C, C, C,

1324 
C
, C, C, C, C, C, C, C,

1325 0, 0, 
W
, 0, 0, 0, 0, 0,

1326 0, 0, 
W
, 0, 0, 0, 0, 
UW
,

1328 0, 0, 
W
, 0, W, 0, W, W,

1332 0, 0, 0, 0, 
W
, 0, 0, 0,

1336 0, 0, 0, 0, 
W
, 0, 0, 
C
,

1338 
C
, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C,

1339 
C
, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C,

1348 #unde‡
U


1349 #unde‡
W


1350 #unde‡
C


1351 #unde‡
UW


1352 #unde‡
UWC


1358 
	#FN_PORT_SEP
 (
›t
.
ª°ri˘_fûes_os
 !
ª°ri˘_wödows
 ? ':' : '+')

	)

1363 
	#FN_QUERY_SEP
 (
›t
.
ª°ri˘_fûes_os
 !
ª°ri˘_wödows
 ? '?' : '@')

	)

1373 
	$≠≥nd_uri_∑thñ
 (c⁄° *
b
, c⁄° *
e
, 
boﬁ
 
esˇ≥d
,

1374 
growabÀ
 *
de°
)

1376 c⁄° *
p
;

1377 
quŸed
, 
ouéí
;

1379 
mask
;

1380 i‡(
›t
.
ª°ri˘_fûes_os
 =
ª°ri˘_unix
)

1381 
mask
 = 
fûechr_nŸ_unix
;

1383 
mask
 = 
fûechr_nŸ_wödows
;

1384 i‡(
›t
.
ª°ri˘_fûes_˘æ
)

1385 
mask
 |
fûechr_c⁄åﬁ
;

1388 i‡(
esˇ≥d
)

1390 *
u√sˇ≥d
;

1391 
	`BOUNDED_TO_ALLOCA
 (
b
, 
e
, 
u√sˇ≥d
);

1392 
	`uæ_u√sˇ≥
 (
u√sˇ≥d
);

1393 
b
 = 
u√sˇ≥d
;

1394 
e
 = 
u√sˇ≥d
 + 
	`°æí
 (unescaped);

1399 i‡(
e
 - 
b
 == 2 && b[0] == '.' && b[1] == '.')

1401 
b
 = "%2E%2E";

1402 
e
 = 
b
 + 6;

1407 
quŸed
 = 0;

1408 
p
 = 
b
;Ö < 
e
;Ö++)

1409 i‡(
	`FILE_CHAR_TEST
 (*
p
, 
mask
))

1410 ++
quŸed
;

1415 
ouéí
 = (
e
 - 
b
Ë+ (2 * 
quŸed
);

1416 
	`GROW
 (
de°
, 
ouéí
);

1418 i‡(!
quŸed
)

1422 
	`mem˝y
 (
	`TAIL
 (
de°
), 
b
, 
ouéí
);

1426 *
q
 = 
	`TAIL
 (
de°
);

1427 
p
 = 
b
;Ö < 
e
;Ö++)

1429 i‡(!
	`FILE_CHAR_TEST
 (*
p
, 
mask
))

1430 *
q
++ = *
p
;

1433 
ch
 = *
p
;

1434 *
q
++ = '%';

1435 *
q
++ = 
	`XNUM_TO_DIGIT
 (
ch
 >> 4);

1436 *
q
++ = 
	`XNUM_TO_DIGIT
 (
ch
 & 0xf);

1439 
	`as£π
 (
q
 - 
	`TAIL
 (
de°
Ë=
ouéí
);

1443 i‡(
›t
.
ª°ri˘_fûes_ˇ£
 =
ª°ri˘_lowîˇ£


1444 || 
›t
.
ª°ri˘_fûes_ˇ£
 =
ª°ri˘_uµîˇ£
)

1446 *
q
;

1447 
q
 = 
	`TAIL
 (
de°
); q < TAIL (de°Ë+ 
ouéí
; ++q)

1449 i‡(
›t
.
ª°ri˘_fûes_ˇ£
 =
ª°ri˘_lowîˇ£
)

1450 *
q
 = 
	`c_tﬁowî
 (*q);

1452 *
q
 = 
	`c_touµî
 (*q);

1456 
	`TAIL_INCR
 (
de°
, 
ouéí
);

1457 
	}
}

1474 
	$≠≥nd_dú_°ru˘uª
 (c⁄° 
uæ
 *
u
, 
growabÀ
 *
de°
)

1476 *
∑thñ
, *
√xt
;

1477 
cut
 = 
›t
.
cut_dús
;

1482 
∑thñ
 = 
u
->
∑th
;

1483 ; (
√xt
 = 
	`°rchr
 (
∑thñ
, '/')Ë!
NULL
;Öathel =Çext + 1)

1485 i‡(
cut
-- > 0)

1487 i‡(
∑thñ
 =
√xt
)

1491 i‡(
de°
->
èû
)

1492 
	`≠≥nd_ch¨
 ('/', 
de°
);

1493 
	`≠≥nd_uri_∑thñ
 (
∑thñ
, 
√xt
, 
åue
, 
de°
);

1495 
	}
}

1501 
	$uæ_fûe_«me
 (c⁄° 
uæ
 *
u
, *
ª∂a˚d_fûíame
)

1503 
growabÀ
 
‚ªs
;

1505 c⁄° *
u_fûe
, *
u_quîy
;

1506 *
‚ame
, *
unique
;

1507 *
ödex_fûíame
 = "index.html";

1509 
‚ªs
.
ba£
 = 
NULL
;

1510 
‚ªs
.
size
 = 0;

1511 
‚ªs
.
èû
 = 0;

1514 i‡(
›t
.
deÁu…_∑ge
)

1515 
ödex_fûíame
 = 
›t
.
deÁu…_∑ge
;

1519 i‡(
›t
.
dú_¥efix
)

1520 
	`≠≥nd_°rög
 (
›t
.
dú_¥efix
, &
‚ªs
);

1525 i‡(
›t
.
dú°ru˘
)

1527 i‡(
›t
.
¥Ÿocﬁ_dúe˘‹õs
)

1529 i‡(
‚ªs
.
èû
)

1530 
	`≠≥nd_ch¨
 ('/', &
‚ªs
);

1531 
	`≠≥nd_°rög
 (
suµ‹ãd_schemes
[
u
->
scheme
].
«me
, &
‚ªs
);

1533 i‡(
›t
.
add_ho°dú
)

1535 i‡(
‚ªs
.
èû
)

1536 
	`≠≥nd_ch¨
 ('/', &
‚ªs
);

1537 i‡(0 !
	`°rcmp
 (
u
->
ho°
, ".."))

1538 
	`≠≥nd_°rög
 (
u
->
ho°
, &
‚ªs
);

1543 
	`≠≥nd_°rög
 ("%2E%2E", &
‚ªs
);

1544 i‡(
u
->
p‹t
 !
	`scheme_deÁu…_p‹t
 (u->
scheme
))

1546 
p‹t°r
[24];

1547 
	`numbî_to_°rög
 (
p‹t°r
, 
u
->
p‹t
);

1548 
	`≠≥nd_ch¨
 (
FN_PORT_SEP
, &
‚ªs
);

1549 
	`≠≥nd_°rög
 (
p‹t°r
, &
‚ªs
);

1553 
	`≠≥nd_dú_°ru˘uª
 (
u
, &
‚ªs
);

1556 i‡(!
ª∂a˚d_fûíame
)

1559 i‡(
‚ªs
.
èû
)

1560 
	`≠≥nd_ch¨
 ('/', &
‚ªs
);

1561 
u_fûe
 = *
u
->
fûe
 ? u->fûê: 
ödex_fûíame
;

1562 
	`≠≥nd_uri_∑thñ
 (
u_fûe
, u_fûê+ 
	`°æí
 (u_fûe), 
Ál£
, &
‚ªs
);

1565 
u_quîy
 = 
u
->
quîy
 && *u->quîy ? u->quîy : 
NULL
;

1566 i‡(
u_quîy
)

1568 
	`≠≥nd_ch¨
 (
FN_QUERY_SEP
, &
‚ªs
);

1569 
	`≠≥nd_uri_∑thñ
 (
u_quîy
, u_quîy + 
	`°æí
 (u_query),

1570 
åue
, &
‚ªs
);

1575 i‡(
‚ªs
.
èû
)

1576 
	`≠≥nd_ch¨
 ('/', &
‚ªs
);

1577 
u_fûe
 = 
ª∂a˚d_fûíame
;

1578 
	`≠≥nd_uri_∑thñ
 (
u_fûe
, u_fûê+ 
	`°æí
 (u_fûe), 
Ál£
, &
‚ªs
);

1582 
	`≠≥nd_ch¨
 ('\0', &
‚ªs
);

1584 
‚ame
 = 
‚ªs
.
ba£
;

1595 i‡((
›t
.
no˛obbî
 || o±.
Æways_ª°
 || o±.
time°ampög
 || o±.
dú°ru˘
)

1596 && !(
	`fûe_exi°s_p
 (
‚ame
Ë&& !
	`fûe_n⁄_dúe˘‹y_p
 (fname)))

1598 
unique
 = 
‚ame
;

1602 
unique
 = 
	`unique_«me
 (
‚ame
, 
åue
);

1603 i‡(
unique
 !
‚ame
)

1604 
	`x‰ì
 (
‚ame
);

1608 #ifde‡
__VMS


1610 *
unique2
;

1612 
unique2
 = 
	`ods_c⁄f‹m
–
unique
);

1613 i‡(
unique2
 !
unique
)

1615 
	`x‰ì
 (
unique
);

1616 
unique
 = 
unique2
;

1621  
unique
;

1622 
	}
}

1638 
boﬁ


1639 
	$∑th_sim∂ify
 (
uæ_scheme
 
scheme
, *
∑th
)

1641 *
h
 = 
∑th
;

1642 *
t
 = 
∑th
;

1643 *
beg
 = 
∑th
;

1644 *
íd
 = 
	`°rchr
 (
∑th
, '\0');

1646 
h
 < 
íd
)

1650 i‡(
h
[0] == '.' && (h[1] == '/' || h[1] == '\0'))

1653 
h
 += 2;

1655 i‡(
h
[0] == '.' && h[1] == '.' && (h[2] == '/' || h[2] == '\0'))

1659 i‡(
t
 > 
beg
)

1663 --
t
;Å > 
beg
 &&Å[-1] != '/';Å--)

1666 i‡(
scheme
 =
SCHEME_FTP
)

1674 
beg
 = 
t
 + 3;

1675 
ªguœr
;

1677 
h
 += 3;

1681 
ªguœr
:

1685 i‡(
t
 =
h
)

1688 
h
 < 
íd
 && *h != '/')

1689 
t
++, 
h
++;

1690 i‡(
h
 < 
íd
)

1691 
t
++, 
h
++;

1696 
h
 < 
íd
 && *h != '/')

1697 *
t
++ = *
h
++;

1698 i‡(
h
 < 
íd
)

1699 *
t
++ = *
h
++;

1704 i‡(
t
 !
h
)

1705 *
t
 = '\0';

1707  
t
 !
h
;

1708 
	}
}

1715 
	$∑th_íd
 (c⁄° *
uæ
)

1717 
uæ_scheme
 
scheme
 = 
	`uæ_scheme
 (
uæ
);

1718 c⁄° *
£ps
;

1719 i‡(
scheme
 =
SCHEME_INVALID
)

1720 
scheme
 = 
SCHEME_HTTP
;

1722 
£ps
 = 
	`öô_£ps
 (
scheme
) + 2;

1723  
	`°Ωbrk_‹_eos
 (
uæ
, 
£ps
);

1724 
	}
}

1728 
	#föd_œ°_ch¨
(
b
, 
e
, 
c
Ë
	`memrchr
 ((b), (c), (eË- (b))

	)

1743 
	$uri_mîge
 (c⁄° *
ba£
, c⁄° *
lök
)

1745 
lökÀngth
;

1746 c⁄° *
íd
;

1747 *
mîge
;

1749 i‡(
	`uæ_has_scheme
 (
lök
))

1750  
	`x°rdup
 (
lök
);

1753 
íd
 = 
	`∑th_íd
 (
ba£
);

1754 
lökÀngth
 = 
	`°æí
 (
lök
);

1756 i‡(!*
lök
)

1759  
	`x°rdup
 (
ba£
);

1761 i‡(*
lök
 == '?')

1769 
ba£Àngth
 = 
íd
 - 
ba£
;

1770 
mîge
 = 
	`xmÆloc
 (
ba£Àngth
 + 
lökÀngth
 + 1);

1771 
	`mem˝y
 (
mîge
, 
ba£
, 
ba£Àngth
);

1772 
	`mem˝y
 (
mîge
 + 
ba£Àngth
, 
lök
, 
lökÀngth
);

1773 
mîge
[
ba£Àngth
 + 
lökÀngth
] = '\0';

1775 i‡(*
lök
 == '#')

1781 
ba£Àngth
;

1782 c⁄° *
íd1
 = 
	`°rchr
 (
ba£
, '#');

1783 i‡(!
íd1
)

1784 
íd1
 = 
ba£
 + 
	`°æí
 (base);

1785 
ba£Àngth
 = 
íd1
 - 
ba£
;

1786 
mîge
 = 
	`xmÆloc
 (
ba£Àngth
 + 
lökÀngth
 + 1);

1787 
	`mem˝y
 (
mîge
, 
ba£
, 
ba£Àngth
);

1788 
	`mem˝y
 (
mîge
 + 
ba£Àngth
, 
lök
, 
lökÀngth
);

1789 
mîge
[
ba£Àngth
 + 
lökÀngth
] = '\0';

1791 i‡(*
lök
 == '/' && *(link + 1) == '/')

1801 
•™
;

1802 c⁄° *
¶ash
;

1803 c⁄° *
°¨t_ö£π
;

1806 
¶ash
 = 
	`memchr
 (
ba£
, '/', 
íd
 - base);

1810 i‡(
¶ash
 && *(slash + 1) == '/')

1811 
°¨t_ö£π
 = 
¶ash
;

1813 
°¨t_ö£π
 = 
ba£
;

1815 
•™
 = 
°¨t_ö£π
 - 
ba£
;

1816 
mîge
 = 
	`xmÆloc
 (
•™
 + 
lökÀngth
 + 1);

1817 i‡(
•™
)

1818 
	`mem˝y
 (
mîge
, 
ba£
, 
•™
);

1819 
	`mem˝y
 (
mîge
 + 
•™
, 
lök
, 
lökÀngth
);

1820 
mîge
[
•™
 + 
lökÀngth
] = '\0';

1822 i‡(*
lök
 == '/')

1830 
•™
;

1831 c⁄° *
¶ash
;

1832 c⁄° *
°¨t_ö£π
 = 
NULL
;

1833 c⁄° *
pos
 = 
ba£
;

1834 
boﬁ
 
£í_¶ash_¶ash
 = 
Ál£
;

1837 
agaö
:

1838 
¶ash
 = 
	`memchr
 (
pos
, '/', 
íd
 -Öos);

1839 i‡(
¶ash
 && !
£í_¶ash_¶ash
)

1840 i‡(*(
¶ash
 + 1) == '/')

1842 
pos
 = 
¶ash
 + 2;

1843 
£í_¶ash_¶ash
 = 
åue
;

1844 
agaö
;

1853 i‡(!
¶ash
 && !
£í_¶ash_¶ash
)

1856 
°¨t_ö£π
 = 
ba£
;

1857 i‡(!
¶ash
 && 
£í_¶ash_¶ash
)

1860 
°¨t_ö£π
 = 
íd
;

1861 i‡(
¶ash
 && !
£í_¶ash_¶ash
)

1864 
°¨t_ö£π
 = 
ba£
;

1865 i‡(
¶ash
 && 
£í_¶ash_¶ash
)

1868 
°¨t_ö£π
 = 
¶ash
;

1870 
•™
 = 
°¨t_ö£π
 - 
ba£
;

1871 
mîge
 = 
	`xmÆloc
 (
•™
 + 
lökÀngth
 + 1);

1872 i‡(
•™
)

1873 
	`mem˝y
 (
mîge
, 
ba£
, 
•™
);

1874 
	`mem˝y
 (
mîge
 + 
•™
, 
lök
, 
lökÀngth
);

1875 
mîge
[
•™
 + 
lökÀngth
] = '\0';

1884 
boﬁ
 
√ed_ex∂icô_¶ash
 = 
Ál£
;

1885 
•™
;

1886 c⁄° *
°¨t_ö£π
;

1887 c⁄° *
œ°_¶ash
 = 
	`föd_œ°_ch¨
 (
ba£
, 
íd
, '/');

1888 i‡(!
œ°_¶ash
)

1891 
°¨t_ö£π
 = 
ba£
;

1893 i‡(
œ°_¶ash
 &&Üa°_¶ash >
ba£
 + 2

1894 && 
œ°_¶ash
[-2] == ':' &&Üast_slash[-1] == '/')

1898 
°¨t_ö£π
 = 
íd
 + 1;

1899 
√ed_ex∂icô_¶ash
 = 
åue
;

1905 
°¨t_ö£π
 = 
œ°_¶ash
 + 1;

1908 
•™
 = 
°¨t_ö£π
 - 
ba£
;

1909 
mîge
 = 
	`xmÆloc
 (
•™
 + 
lökÀngth
 + 1);

1910 i‡(
•™
)

1911 
	`mem˝y
 (
mîge
, 
ba£
, 
•™
);

1912 i‡(
√ed_ex∂icô_¶ash
)

1913 
mîge
[
•™
 - 1] = '/';

1914 
	`mem˝y
 (
mîge
 + 
•™
, 
lök
, 
lökÀngth
);

1915 
mîge
[
•™
 + 
lökÀngth
] = '\0';

1918  
mîge
;

1919 
	}
}

1921 
	#APPEND
(
p
, 
s
) do { \

1922 
Àn
 = 
	`°æí
 (
s
); \

1923 
	`mem˝y
 (
p
, 
s
, 
Àn
); \

1924 
p
 +
Àn
; \

1925 } 0)

	)

1931 
	#HIDDEN_PASSWORD
 "*∑ssw‹d*"

	)

1941 
	$uæ_°rög
 (c⁄° 
uæ
 *uæ, 
uæ_auth_mode
 
auth_mode
)

1943 
size
;

1944 *
ªsu…
, *
p
;

1945 *
quŸed_ho°
, *
quŸed_u£r
 = 
NULL
, *
quŸed_∑sswd
 = NULL;

1947 
scheme_p‹t
 = 
suµ‹ãd_schemes
[
uæ
->
scheme
].
deÁu…_p‹t
;

1948 c⁄° *
scheme_°r
 = 
suµ‹ãd_schemes
[
uæ
->
scheme
].
Àadög_°rög
;

1949 
ÂÀn
 = 
	`fuŒ_∑th_Àngth
 (
uæ
);

1951 
boﬁ
 
bøckës_¨ound_ho°
;

1953 
	`as£π
 (
scheme_°r
 !
NULL
);

1956 i‡(
uæ
->
u£r
)

1958 i‡(
auth_mode
 !
URL_AUTH_HIDE
)

1960 
quŸed_u£r
 = 
	`uæ_esˇ≥_Ælow_∑s°hrough
 (
uæ
->
u£r
);

1961 i‡(
uæ
->
∑sswd
)

1963 i‡(
auth_mode
 =
URL_AUTH_HIDE_PASSWD
)

1964 
quŸed_∑sswd
 = 
HIDDEN_PASSWORD
;

1966 
quŸed_∑sswd
 = 
	`uæ_esˇ≥_Ælow_∑s°hrough
 (
uæ
->
∑sswd
);

1973 
quŸed_ho°
 = 
	`uæ_esˇ≥_Ælow_∑s°hrough
 (
uæ
->
ho°
);

1978 i‡(
quŸed_ho°
 !
uæ
->
ho°
)

1979 
	`u√sˇ≥_sögÀ_ch¨
 (
quŸed_ho°
, ':');

1980 
bøckës_¨ound_ho°
 = 
	`°rchr
 (
quŸed_ho°
, ':'Ë!
NULL
;

1982 
size
 = (
	`°æí
 (
scheme_°r
)

1983 + 
	`°æí
 (
quŸed_ho°
)

1984 + (
bøckës_¨ound_ho°
 ? 2 : 0)

1985 + 
ÂÀn


1987 i‡(
uæ
->
p‹t
 !
scheme_p‹t
)

1988 
size
 +1 + 
	`numdigô
 (
uæ
->
p‹t
);

1989 i‡(
quŸed_u£r
)

1991 
size
 +1 + 
	`°æí
 (
quŸed_u£r
);

1992 i‡(
quŸed_∑sswd
)

1993 
size
 +1 + 
	`°æí
 (
quŸed_∑sswd
);

1996 
p
 = 
ªsu…
 = 
	`xmÆloc
 (
size
);

1998 
	`APPEND
 (
p
, 
scheme_°r
);

1999 i‡(
quŸed_u£r
)

2001 
	`APPEND
 (
p
, 
quŸed_u£r
);

2002 i‡(
quŸed_∑sswd
)

2004 *
p
++ = ':';

2005 
	`APPEND
 (
p
, 
quŸed_∑sswd
);

2007 *
p
++ = '@';

2010 i‡(
bøckës_¨ound_ho°
)

2011 *
p
++ = '[';

2012 
	`APPEND
 (
p
, 
quŸed_ho°
);

2013 i‡(
bøckës_¨ound_ho°
)

2014 *
p
++ = ']';

2015 i‡(
uæ
->
p‹t
 !
scheme_p‹t
)

2017 *
p
++ = ':';

2018 
p
 = 
	`numbî_to_°rög
 (p, 
uæ
->
p‹t
);

2021 
	`fuŒ_∑th_wrôe
 (
uæ
, 
p
);

2022 
p
 +
ÂÀn
;

2023 *
p
++ = '\0';

2025 
	`as£π
 (
p
 - 
ªsu…
 =
size
);

2027 i‡(
quŸed_u£r
 && quŸed_u£∏!
uæ
->
u£r
)

2028 
	`x‰ì
 (
quŸed_u£r
);

2029 i‡(
quŸed_∑sswd
 && 
auth_mode
 =
URL_AUTH_SHOW


2030 && 
quŸed_∑sswd
 !
uæ
->
∑sswd
)

2031 
	`x‰ì
 (
quŸed_∑sswd
);

2032 i‡(
quŸed_ho°
 !
uæ
->
ho°
)

2033 
	`x‰ì
 (
quŸed_ho°
);

2035  
ªsu…
;

2036 
	}
}

2043 
boﬁ


2044 
	$schemes_¨e_simû¨_p
 (
uæ_scheme
 
a
, uæ_schemê
b
)

2046 i‡(
a
 =
b
)

2047  
åue
;

2048 #ifde‡
HAVE_SSL


2049 i‡((
a
 =
SCHEME_HTTP
 && 
b
 =
SCHEME_HTTPS
)

2050 || (
a
 =
SCHEME_HTTPS
 && 
b
 =
SCHEME_HTTP
))

2051  
åue
;

2053  
Ál£
;

2054 
	}
}

2057 
	$gëch¨_‰om_esˇ≥d_°rög
 (c⁄° *
°r
, *
c
)

2059 c⁄° *
p
 = 
°r
;

2061 
	`as£π
 (
°r
 && *str);

2062 
	`as£π
 (
c
);

2064 i‡(
p
[0] == '%')

2066 i‡(!
	`c_isxdigô
(
p
[1]) || !c_isxdigit(p[2]))

2068 *
c
 = '%';

2073 i‡(
p
[2] == 0)

2076 *
c
 = 
	`X2DIGITS_TO_NUM
 (
p
[1],Ö[2]);

2077 i‡(
	`URL_RESERVED_CHAR
(*
c
))

2079 *
c
 = '%';

2088 *
c
 = 
p
[0];

2092 
	}
}

2094 
boﬁ


2095 
	$¨e_uæs_equÆ
 (c⁄° *
u1
, c⁄° *
u2
)

2097 c⁄° *
p
, *
q
;

2098 
µ
, 
qq
;

2099 
ch1
, 
ch2
;

2100 
	`as£π
(
u1
 && 
u2
);

2102 
p
 = 
u1
;

2103 
q
 = 
u2
;

2105 *
p
 && *
q


2106 && (
µ
 = 
	`gëch¨_‰om_esˇ≥d_°rög
 (
p
, &
ch1
))

2107 && (
qq
 = 
	`gëch¨_‰om_esˇ≥d_°rög
 (
q
, &
ch2
))

2108 && (
	`c_tﬁowî
(
ch1
Ë=c_tﬁowî(
ch2
)))

2110 
p
 +
µ
;

2111 
q
 +
qq
;

2114  (*
p
 =0 && *
q
 =0 ? 
åue
 : 
Ál£
);

2115 
	}
}

2117 #ifde‡
TESTING


2124 
	$ps
 (*
∑th
)

2126 *
c›y
 = 
	`x°rdup
 (
∑th
);

2127 
	`∑th_sim∂ify
 (
c›y
);

2128  
c›y
;

2129 
	}
}

2133 
	$run_ã°
 (*
ã°
, *
ex≥˘ed_ªsu…
, 
uæ_scheme
 
scheme
,

2134 
boﬁ
 
ex≥˘ed_ch™ge
)

2136 *
ã°_c›y
 = 
	`x°rdup
 (
ã°
);

2137 
boﬁ
 
modifõd
 = 
	`∑th_sim∂ify
 (
scheme
, 
ã°_c›y
);

2139 i‡(0 !
	`°rcmp
 (
ã°_c›y
, 
ex≥˘ed_ªsu…
))

2141 
	`¥ötf
 ("FailedÖath_simplify(\"%s\"):Éxpected \"%s\", got \"%s\".\n",

2142 
ã°
, 
ex≥˘ed_ªsu…
, 
ã°_c›y
);

2143 
	`mu_as£π
 ("", 0);

2145 i‡(
modifõd
 !
ex≥˘ed_ch™ge
)

2147 i‡(
ex≥˘ed_ch™ge
)

2148 
	`¥ötf
 ("Expected modification withÖath_simplify(\"%s\").\n",

2149 
ã°
);

2151 
	`¥ötf
 ("ExpectedÇo modification withÖath_simplify(\"%s\").\n",

2152 
ã°
);

2154 
	`x‰ì
 (
ã°_c›y
);

2155 
	`mu_as£π
 ("", 
modifõd
 =
ex≥˘ed_ch™ge
);

2156  
NULL
;

2157 
	}
}

2160 
	$ã°_∑th_sim∂ify
 ()

2163 *
ã°
, *
ªsu…
;

2164 
uæ_scheme
 
scheme
;

2165 
boﬁ
 
should_modify
;

2166 } 
ã°s
[] = {

2167 { "", "", 
SCHEME_HTTP
, 
Ál£
 },

2168 { ".", "", 
SCHEME_HTTP
, 
åue
 },

2169 { "./", "", 
SCHEME_HTTP
, 
åue
 },

2170 { "..", "", 
SCHEME_HTTP
, 
åue
 },

2171 { "../", "", 
SCHEME_HTTP
, 
åue
 },

2172 { "..", "..", 
SCHEME_FTP
, 
Ál£
 },

2173 { "../", "../", 
SCHEME_FTP
, 
Ál£
 },

2174 { "foo", "foo", 
SCHEME_HTTP
, 
Ál£
 },

2175 { "foo/b¨", "foo/b¨", 
SCHEME_HTTP
, 
Ál£
 },

2176 { "foo///b¨", "foo///b¨", 
SCHEME_HTTP
, 
Ál£
 },

2177 { "foo/.", "foo/", 
SCHEME_HTTP
, 
åue
 },

2178 { "foo/./", "foo/", 
SCHEME_HTTP
, 
åue
 },

2179 { "foo./", "foo./", 
SCHEME_HTTP
, 
Ál£
 },

2180 { "foo/../b¨", "b¨", 
SCHEME_HTTP
, 
åue
 },

2181 { "foo/../b¨/", "b¨/", 
SCHEME_HTTP
, 
åue
 },

2182 { "foo/b¨/..", "foo/", 
SCHEME_HTTP
, 
åue
 },

2183 { "foo/b¨/../x", "foo/x", 
SCHEME_HTTP
, 
åue
 },

2184 { "foo/b¨/../x/", "foo/x/", 
SCHEME_HTTP
, 
åue
 },

2185 { "foo/..", "", 
SCHEME_HTTP
, 
åue
 },

2186 { "foo/../..", "", 
SCHEME_HTTP
, 
åue
 },

2187 { "foo/../../..", "", 
SCHEME_HTTP
, 
åue
 },

2188 { "foo/../../b¨/../../baz", "baz", 
SCHEME_HTTP
, 
åue
 },

2189 { "foo/../..", "..", 
SCHEME_FTP
, 
åue
 },

2190 { "foo/../../..", "../..", 
SCHEME_FTP
, 
åue
 },

2191 { "foo/../../b¨/../../baz", "../../baz", 
SCHEME_FTP
, 
åue
 },

2192 { "a/b/../../c", "c", 
SCHEME_HTTP
, 
åue
 },

2193 { "./a/../b", "b", 
SCHEME_HTTP
, 
åue
 }

2195 
i
;

2197 
i
 = 0; i < 
	`cou¡of
 (
ã°s
); i++)

2199 c⁄° *
mesßge
;

2200 *
ã°
 = 
ã°s
[
i
].test;

2201 *
ex≥˘ed_ªsu…
 = 
ã°s
[
i
].
ªsu…
;

2202 
uæ_scheme
 
scheme
 = 
ã°s
[
i
].scheme;

2203 
boﬁ
 
ex≥˘ed_ch™ge
 = 
ã°s
[
i
].
should_modify
;

2204 
mesßge
 = 
	`run_ã°
 (
ã°
, 
ex≥˘ed_ªsu…
, 
scheme
, 
ex≥˘ed_ch™ge
);

2205 i‡(
mesßge
)  message;

2207  
NULL
;

2208 
	}
}

2211 
	$ã°_≠≥nd_uri_∑thñ
()

2213 
i
;

2215 *
‹igöÆ_uæ
;

2216 *
öput
;

2217 
boﬁ
 
esˇ≥d
;

2218 *
ex≥˘ed_ªsu…
;

2219 } 
ã°_¨øy
[] = {

2220 { "hâp://www.yoyody√.com/∑th/", "somïage.html", 
Ál£
, "http://www.yoyodyne.com/path/somepage.html" },

2223 
i
 = 0; i < (
ã°_¨øy
)/(test_array[0]); ++i)

2225 
growabÀ
 
de°
;

2226 c⁄° *
p
 = 
ã°_¨øy
[
i
].
öput
;

2228 
	`mem£t
 (&
de°
, 0,  (dest));

2230 
	`≠≥nd_°rög
 (
ã°_¨øy
[
i
].
‹igöÆ_uæ
, &
de°
);

2231 
	`≠≥nd_uri_∑thñ
 (
p
,Ö + 
	`°æí
’), 
ã°_¨øy
[
i
].
esˇ≥d
, &
de°
);

2232 
	`≠≥nd_ch¨
 ('\0', &
de°
);

2234 
	`mu_as£π
 ("test_append_uri_pathel: wrongÑesult",

2235 
	`°rcmp
 (
de°
.
ba£
, 
ã°_¨øy
[
i
].
ex≥˘ed_ªsu…
) == 0);

2238  
NULL
;

2239 
	}
}

2242 
	$ã°_¨e_uæs_equÆ
()

2244 
i
;

2246 *
uæ1
;

2247 *
uæ2
;

2248 
boﬁ
 
ex≥˘ed_ªsu…
;

2249 } 
ã°_¨øy
[] = {

2250 { "hâp://www.adomaö.com/≠©h/", "hâp://www.adomaö.com/≠©h/", 
åue
 },

2251 { "hâp://www.adomaö.com/≠©h/", "hâp://www.adomaö.com/™Ÿhî∑th/", 
Ál£
 },

2252 { "hâp://www.adomaö.com/≠©h/", "hâp://www.™Ÿhîdomaö.com/∑th/", 
Ál£
 },

2253 { "hâp://www.adomaö.com/~∑th/", "hâp://www.adomaö.com/%7ï©h/", 
åue
 },

2254 { "hâp://www.adomaö.com/l⁄gî-∑th/", "hâp://www.adomaö.com/∑th/", 
Ál£
 },

2255 { "hâp://www.adomaö.com/∑th%2f", "hâp://www.adomaö.com/∑th/", 
Ál£
 },

2258 
i
 = 0; i < (
ã°_¨øy
)/(test_array[0]); ++i)

2260 
	`mu_as£π
 ("test_are_urls_equal: wrongÑesult",

2261 
	`¨e_uæs_equÆ
 (
ã°_¨øy
[
i
].
uæ1
,Åe°_¨øy[i].
uæ2
Ë=ã°_¨øy[i].
ex≥˘ed_ªsu…
);

2264  
NULL
;

2265 
	}
}

	@src/url.h

32 #i‚de‡
URL_H


33 
	#URL_H


	)

36 
	#DEFAULT_HTTP_PORT
 80

	)

37 
	#DEFAULT_FTP_PORT
 21

	)

38 
	#DEFAULT_HTTPS_PORT
 443

	)

42 
	euæ_auth_mode
 {

43 
	mURL_AUTH_SHOW
,

44 
	mURL_AUTH_HIDE_PASSWD
,

45 
	mURL_AUTH_HIDE


51 
	euæ_scheme
 {

52 
	mSCHEME_HTTP
,

53 #ifde‡
HAVE_SSL


54 
	mSCHEME_HTTPS
,

56 
	mSCHEME_FTP
,

57 
	mSCHEME_INVALID


61 
	suæ


63 *
	muæ
;

64 
uæ_scheme
 
	mscheme
;

66 *
	mho°
;

67 
	mp‹t
;

70 *
	m∑th
;

71 *
	m∑øms
;

72 *
	mquîy
;

73 *
	m‰agmít
;

76 *
	mdú
;

77 *
	mfûe
;

80 *
	mu£r
;

81 *
	m∑sswd
;

86 *
uæ_esˇ≥
 (const *);

87 *
uæ_esˇ≥_unß„_™d_ª£rved
 (const *);

89 
uæ
 *
uæ_∑r£
 (c⁄° *, *, 
úi
 *úi, 
boﬁ
 
≥r˚¡_ícode
);

90 *
uæ_îr‹
 (const *, );

91 *
uæ_fuŒ_∑th
 (c⁄° 
uæ
 *);

92 
uæ_£t_dú
 (
uæ
 *, const *);

93 
uæ_£t_fûe
 (
uæ
 *, const *);

94 
uæ_‰ì
 (
uæ
 *);

96 
uæ_scheme
 url_scheme (const *);

97 
boﬁ
 
uæ_has_scheme
 (const *);

98 
boﬁ
 
uæ_vÆid_scheme
 (const *);

99 
scheme_deÁu…_p‹t
 (
uæ_scheme
);

100 
scheme_dißbÀ
 (
uæ_scheme
);

102 *
uæ_°rög
 (c⁄° 
uæ
 *, 
uæ_auth_mode
);

103 *
uæ_fûe_«me
 (c⁄° 
uæ
 *, *);

105 *
uri_mîge
 (const *, const *);

107 
mkÆldús
 (const *);

109 *
ªwrôe_sh‹th™d_uæ
 (const *);

110 
boﬁ
 
schemes_¨e_simû¨_p
 (
uæ_scheme
 
a
, uæ_schemê
b
);

112 
boﬁ
 
¨e_uæs_equÆ
 (c⁄° *
u1
, c⁄° *
u2
);

	@src/utils.c

32 
	~"wgë.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<time.h
>

38 
	~<uni°d.h
>

39 #ifde‡
HAVE_MMAP


40 
	~<sys/mm™.h
>

42 #ifde‡
HAVE_PROCESS_H


43 
	~<¥o˚ss.h
>

45 
	~<î∫o.h
>

46 
	~<f˙é.h
>

47 
	~<as£π.h
>

48 
	~<°d¨g.h
>

49 
	~<loˇÀ.h
>

51 #i‡
HAVE_UTIME


52 
	~<sys/ty≥s.h
>

53 #ifde‡
HAVE_UTIME_H


54 
	~<utime.h
>

57 #ifde‡
HAVE_SYS_UTIME_H


58 
	~<sys/utime.h
>

62 
	~<sys/°©.h
>

65 #ifde‡
HAVE_SYS_IOCTL_H


66 
	~<sys/io˘l.h
>

68 #ifde‡
HAVE_TERMIOS_H


69 
	~<ãrmios.h
>

73 
	~<sig«l.h
>

74 
	~<£tjmp.h
>

76 #i‚de‡
HAVE_SIGSETJMP


78 #ifde‡
sig£tjmp


79 
	#HAVE_SIGSETJMP


	)

83 #i‡
deföed
 
HAVE_SIGSETJMP
 || deföed 
HAVE_SIGBLOCK


84 
	#USE_SIGNAL_TIMEOUT


	)

87 
	~"utûs.h
"

88 
	~"hash.h
"

90 #ifde‡
__VMS


91 
	~"vms.h
"

94 #ifde‡
TESTING


95 
	~"ã°.h
"

99 
	$memÁèl
 (c⁄° *
c⁄ãxt
, 
©ãm±ed_size
)

103 
	`log_£t_ßve_c⁄ãxt
 (
Ál£
);

108 i‡(
©ãm±ed_size
 =
UNKNOWN_ATTEMPTED_SIZE
)

110 
	`log¥ötf
 (
LOG_ALWAYS
,

111 
	`_
("%s: %s: FailedÅoállocateÉnough memory; memoryÉxhausted.\n"),

112 
exec_«me
, 
c⁄ãxt
);

116 
	`log¥ötf
 (
LOG_ALWAYS
,

117 
	`_
("%s: %s: FailedÅoállocate %ld bytes; memoryÉxhausted.\n"),

118 
exec_«me
, 
c⁄ãxt
, 
©ãm±ed_size
);

121 
	`exô
 (1);

122 
	}
}

170 
	gch¨_¥›
[ 256] = {

209 
	$x°rdup_lowî
 (c⁄° *
s
)

211 *
c›y
 = 
	`x°rdup
 (
s
);

212 *
p
 = 
c›y
;

213 ; *
p
;Ö++)

214 *
p
 = 
	`c_tﬁowî
 (*p);

215  
c›y
;

216 
	}
}

222 
	$°rdupdñim
 (c⁄° *
beg
, c⁄° *
íd
)

224 *
ªs
 = 
	`xmÆloc
 (
íd
 - 
beg
 + 1);

225 
	`mem˝y
 (
ªs
, 
beg
, 
íd
 - beg);

226 
ªs
[
íd
 - 
beg
] = '\0';

227  
ªs
;

228 
	}
}

234 
	$£p°rög
 (c⁄° *
s
)

236 **
ªs
;

237 c⁄° *
p
;

238 
i
 = 0;

240 i‡(!
s
 || !*s)

241  
NULL
;

242 
ªs
 = 
NULL
;

243 
p
 = 
s
;

244 *
s
)

246 i‡(*
s
 == ',')

248 
ªs
 = 
	`xªÆloc
 (ªs, (
i
 + 2) *  (*));

249 
ªs
[
i
] = 
	`°rdupdñim
 (
p
, 
s
);

250 
ªs
[++
i
] = 
NULL
;

251 ++
s
;

253 
	`c_is•a˚
 (*
s
))

254 ++
s
;

255 
p
 = 
s
;

258 ++
s
;

260 
ªs
 = 
	`xªÆloc
 (ªs, (
i
 + 2) *  (*));

261 
ªs
[
i
] = 
	`°rdupdñim
 (
p
, 
s
);

262 
ªs
[
i
 + 1] = 
NULL
;

263  
ªs
;

264 
	}
}

282 
	#FMT_MAX_LENGTH
 1048576

	)

285 
	$≠rötf
 (c⁄° *
fmt
, ...)

287 #i‡
deföed
 
HAVE_VASPRINTF
 && !deföed 
DEBUG_MALLOC


289 
ªt
;

290 
va_li°
 
¨gs
;

291 *
°r
;

292 
	`va_°¨t
 (
¨gs
, 
fmt
);

293 
ªt
 = 
	`va•rötf
 (&
°r
, 
fmt
, 
¨gs
);

294 
	`va_íd
 (
¨gs
);

295 i‡(
ªt
 < 0 && 
î∫o
 =
ENOMEM
)

296 
	`memÁèl
 ("≠rötf", 
UNKNOWN_ATTEMPTED_SIZE
);

298 i‡(
ªt
 < 0)

299  
NULL
;

300  
°r
;

305 
size
 = 32;

306 *
°r
 = 
	`xmÆloc
 (
size
);

313 
n
;

314 
va_li°
 
¨gs
;

316 
	`va_°¨t
 (
¨gs
, 
fmt
);

317 
n
 = 
	`v¢¥ötf
 (
°r
, 
size
, 
fmt
, 
¨gs
);

318 
	`va_íd
 (
¨gs
);

321 i‡(
n
 > -1 &&Ç < 
size
)

322  
°r
;

325 i‡(
n
 > -1)

326 
size
 = 
n
 + 1;

327 i‡(
size
 >
FMT_MAX_LENGTH
)

330 
	`log¥ötf
 (
LOG_ALWAYS
,

331 
	`_
("%s:áprintf:Åext buffer isÅoo big (%ld bytes), "

333 
exec_«me
, 
size
);

334 
	`ab‹t
 ();

340 
size
 <<= 1;

342 
°r
 = 
	`xªÆloc
 (°r, 
size
);

345 
	}
}

351 
	$c⁄ˇt_°rögs
 (c⁄° *
°r0
, ...)

353 
va_li°
 
¨gs
;

354 
ßved_Àngths
[5];

355 *
ªt
, *
p
;

357 c⁄° *
√xt_°r
;

358 
tŸÆ_Àngth
 = 0;

359 
size_t
 
¨gcou¡
;

363 
¨gcou¡
 = 0;

364 
	`va_°¨t
 (
¨gs
, 
°r0
);

365 
√xt_°r
 = 
°r0
;Çext_°∏!
NULL
;Çext_°∏
	`va_¨g
 (
¨gs
, *))

367 
Àn
 = 
	`°æí
 (
√xt_°r
);

368 i‡(
¨gcou¡
 < 
	`cou¡of
 (
ßved_Àngths
))

369 
ßved_Àngths
[
¨gcou¡
++] = 
Àn
;

370 
tŸÆ_Àngth
 +
Àn
;

372 
	`va_íd
 (
¨gs
);

373 
p
 = 
ªt
 = 
	`xmÆloc
 (
tŸÆ_Àngth
 + 1);

377 
¨gcou¡
 = 0;

378 
	`va_°¨t
 (
¨gs
, 
°r0
);

379 
√xt_°r
 = 
°r0
;Çext_°∏!
NULL
;Çext_°∏
	`va_¨g
 (
¨gs
, *))

381 
Àn
;

382 i‡(
¨gcou¡
 < 
	`cou¡of
 (
ßved_Àngths
))

383 
Àn
 = 
ßved_Àngths
[
¨gcou¡
++];

385 
Àn
 = 
	`°æí
 (
√xt_°r
);

386 
	`mem˝y
 (
p
, 
√xt_°r
, 
Àn
);

387 
p
 +
Àn
;

389 
	`va_íd
 (
¨gs
);

390 *
p
 = '\0';

392  
ªt
;

393 
	}
}

399 
	$fmâime
 (
time_t
 
t
, c⁄° *
fmt
)

401 
ouçut
[32];

402 
tm
 *tm = 
	`loˇ…ime
(&
t
);

403 i‡(!
tm
)

404 
	`ab‹t
 ();

405 i‡(!
	`°r·ime
(
ouçut
, (ouçut), 
fmt
, 
tm
))

406 
	`ab‹t
 ();

407  
ouçut
;

408 
	}
}

416 
	$time_°r
 (
time_t
 
t
)

418  
	`fmâime
(
t
, "%H:%M:%S");

419 
	}
}

424 
	$d©ëime_°r
 (
time_t
 
t
)

426  
	`fmâime
(
t
, "%Y-%m-%d %H:%M:%S");

427 
	}
}

432 #ifde‡
__VMS


435 
	$f‹k_to_background
 ()

438 
	}
}

442 #i‡!
deföed
(
WINDOWS
Ë&& !deföed(
MSDOS
)

444 
	$f‹k_to_background
 ()

446 
pid_t
 
pid
;

448 
boﬁ
 
logfûe_ch™ged
 = 
Ál£
;

450 i‡(!
›t
.
lfûíame
 && (!›t.
quõt
 || o±.
£rvî_ª•⁄£
))

457 
FILE
 *
√w_log_Â
 = 
	`unique_¸óã
 (
DEFAULT_LOGFILE
, 
Ál£
, &
›t
.
lfûíame
);

458 i‡(
√w_log_Â
)

460 
logfûe_ch™ged
 = 
åue
;

461 
	`f˛o£
 (
√w_log_Â
);

464 
pid
 = 
	`f‹k
 ();

465 i‡(
pid
 < 0)

468 
	`≥º‹
 ("fork");

469 
	`exô
 (1);

471 i‡(
pid
 != 0)

474 
	`¥ötf
 (
	`_
("C⁄töuög i¿background,Öid %d.\n"), (Ë
pid
);

475 i‡(
logfûe_ch™ged
)

476 
	`¥ötf
 (
	`_
("Ouçuàwû»bêwrôã¿tÿ%s.\n"), 
	`quŸe
 (
›t
.
lfûíame
));

477 
	`exô
 (0);

481 
	`£tsid
 ();

482 
	`‰e›í
 ("/dev/nuŒ", "r", 
°dö
);

483 
	`‰e›í
 ("/dev/nuŒ", "w", 
°dout
);

484 
	`‰e›í
 ("/dev/nuŒ", "w", 
°dîr
);

485 
	}
}

496 
	$touch
 (c⁄° *
fûe
, 
time_t
 
tm
)

498 #i‡
HAVE_UTIME


499 #ifde‡
HAVE_STRUCT_UTIMBUF


500 
utimbuf
 
times
;

503 
time_t
 
a˘ime
;

504 
time_t
 
modtime
;

505 } 
times
;

507 
times
.
modtime
 = 
tm
;

508 
times
.
a˘ime
 = 
	`time
 (
NULL
);

509 i‡(
	`utime
 (
fûe
, &
times
) == -1)

510 
	`log¥ötf
 (
LOG_NOTQUIET
, "utime(%s): %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

512 
time•ec
 
time•ecs
[2];

513 
fd
;

515 
fd
 = 
	`›í
 (
fûe
, 
O_WRONLY
);

516 i‡(
fd
 < 0)

518 
	`log¥ötf
 (
LOG_NOTQUIET
, "›í(%s): %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

522 
time•ecs
[0].
tv_£c
 = 
	`time
 (
NULL
);

523 
time•ecs
[0].
tv_n£c
 = 0L;

524 
time•ecs
[1].
tv_£c
 = 
tm
;

525 
time•ecs
[1].
tv_n£c
 = 0L;

527 i‡(
	`futimís
 (
fd
, 
time•ecs
) == -1)

528 
	`log¥ötf
 (
LOG_NOTQUIET
, "futimís(%s): %s\n", 
fûe
, 
	`°ªº‹
 (
î∫o
));

530 
	`˛o£
 (
fd
);

532 
	}
}

537 
	$ªmove_lök
 (c⁄° *
fûe
)

539 
îr
 = 0;

540 
°ru˘_°©
 
°
;

542 i‡(
	`l°©
 (
fûe
, &
°
Ë=0 && 
	`S_ISLNK
 (°.
°_mode
))

544 
	`DEBUGP
 (("U∆ökög %†(symlök).\n", 
fûe
));

545 
îr
 = 
	`u∆ök
 (
fûe
);

546 i‡(
îr
 != 0)

547 
	`log¥ötf
 (
LOG_VERBOSE
, 
	`_
("FailedÅo unlink symlink %s: %s\n"),

548 
	`quŸe
 (
fûe
), 
	`°ªº‹
 (
î∫o
));

550  
îr
;

551 
	}
}

560 
boﬁ


561 
	$fûe_exi°s_p
 (c⁄° *
fûíame
)

563 #ifde‡
HAVE_ACCESS


564  
	`ac˚ss
 (
fûíame
, 
F_OK
) >= 0;

566 
°ru˘_°©
 
buf
;

567  
	`°©
 (
fûíame
, &
buf
) >= 0;

569 
	}
}

573 
boﬁ


574 
	$fûe_n⁄_dúe˘‹y_p
 (c⁄° *
∑th
)

576 
°ru˘_°©
 
buf
;

579 i‡(
	`l°©
 (
∑th
, &
buf
) != 0)

580  
Ál£
;

581  
	`S_ISDIR
 (
buf
.
°_mode
Ë? 
Ál£
 : 
åue
;

582 
	}
}

586 
wgöt


587 
	$fûe_size
 (c⁄° *
fûíame
)

589 #i‡
	`deföed
(
HAVE_FSEEKO
Ë&& deföed(
HAVE_FTELLO
)

590 
wgöt
 
size
;

595 
FILE
 *
Â
 = 
	`f›í
 (
fûíame
, "rb");

596 i‡(!
Â
)

598 
	`f£eko
 (
Â
, 0, 
SEEK_END
);

599 
size
 = 
	`·ñlo
 (
Â
);

600 
	`f˛o£
 (
Â
);

601  
size
;

603 
°ru˘_°©
 
°
;

604 i‡(
	`°©
 (
fûíame
, &
°
) < 0)

606  
°
.
°_size
;

608 
	}
}

616 #ifde‡
UNIQ_SEP


623 
	$unique_«me_1
 (c⁄° *
¥efix
)

625 
cou¡
 = 1;

626 
∂í
 = 
	`°æí
 (
¥efix
);

627 *
ãm∂©e
 = (*)
	`Æloˇ
 (
∂í
 + 1 + 24);

628 *
ãm∂©e_èû
 = 
ãm∂©e
 + 
∂í
;

630 
	`mem˝y
 (
ãm∂©e
, 
¥efix
, 
∂í
);

631 *
ãm∂©e_èû
++ = 
UNIQ_SEP
;

634 
	`numbî_to_°rög
 (
ãm∂©e_èû
, 
cou¡
++);

635 
	`fûe_exi°s_p
 (
ãm∂©e
));

637  
	`x°rdup
 (
ãm∂©e
);

638 
	}
}

659 
	$unique_«me
 (c⁄° *
fûe
, 
boﬁ
 
Ælow_∑s°hrough
)

663 i‡(!
	`fûe_exi°s_p
 (
fûe
))

664  
Ælow_∑s°hrough
 ? (*)
fûe
 : 
	`x°rdup
 (file);

668  
	`unique_«me_1
 (
fûe
);

669 
	}
}

677 
	$unique_«me
 (c⁄° *
fûe
, 
boﬁ
 
Ælow_∑s°hrough
)

680  
Ælow_∑s°hrough
 ? (*)
fûe
 : 
	`x°rdup
 (file);

681 
	}
}

690 
FILE
 *

691 
	$unique_¸óã
 (c⁄° *
«me
, 
boﬁ
 
bö¨y
, **
›íed_«me
)

694 *
u«me
 = 
	`unique_«me
 (
«me
, 
Ál£
);

695 
FILE
 *
Â
;

696 (
Â
 = 
	`f›í_ex˛
 (
u«me
, 
bö¨y
)Ë=
NULL
 && 
î∫o
 =
EEXIST
)

698 
	`x‰ì
 (
u«me
);

699 
u«me
 = 
	`unique_«me
 (
«me
, 
Ál£
);

701 i‡(
›íed_«me
 && 
Â
 !
NULL
)

703 i‡(
Â
)

704 *
›íed_«me
 = 
u«me
;

707 *
›íed_«me
 = 
NULL
;

708 
	`x‰ì
 (
u«me
);

712 
	`x‰ì
 (
u«me
);

713  
Â
;

714 
	}
}

726 
FILE
 *

727 
	$f›í_ex˛
 (c⁄° *
‚ame
, 
bö¨y
)

729 
fd
;

730 #ifde‡
O_EXCL


737 #ifde‡
__VMS


741 
	#OPEN_OPT_ARGS
 "f›=sqo", "acc", 
acc_cb
, &
›í_id


	)

743 
›í_id
;

744 
Êags
 = 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
;

746 i‡(
bö¨y
 > 1)

748 
›í_id
 = 11;

749 
fd
 = 
	`›í
–
‚ame
,

750 
Êags
,

754 
OPEN_OPT_ARGS
);

756 i‡(
bö¨y
)

758 
›í_id
 = 12;

759 
fd
 = 
	`›í
–
‚ame
,

760 
Êags
,

765 
OPEN_OPT_ARGS
);

769 
›í_id
 = 13;

770 
fd
 = 
	`›í
–
‚ame
,

771 
Êags
,

775 
OPEN_OPT_ARGS
);

778 
Êags
 = 
O_WRONLY
 | 
O_CREAT
 | 
O_EXCL
;

779 #ifde‡
O_BINARY


780 i‡(
bö¨y
)

781 
Êags
 |
O_BINARY
;

783 
fd
 = 
	`›í
 (
‚ame
, 
Êags
, 0666);

786 i‡(
fd
 < 0)

787  
NULL
;

788  
	`fd›í
 (
fd
, 
bö¨y
 ? "wb" : "w");

793 i‡(
	`fûe_exi°s_p
 (
‚ame
))

795 
î∫o
 = 
EEXIST
;

796  
NULL
;

798  
	`f›í
 (
‚ame
, 
bö¨y
 ? "wb" : "w");

800 
	}
}

809 
	$make_dúe˘‹y
 (c⁄° *
dúe˘‹y
)

811 
i
, 
ªt
, 
quô
 = 0;

812 *
dú
;

816 
	`STRDUP_ALLOCA
 (
dú
, 
dúe˘‹y
);

820 
i
 = (*
dú
 == '/'); 1; ++i)

822 ; 
dú
[
i
] && dir[i] != '/'; i++)

824 i‡(!
dú
[
i
])

825 
quô
 = 1;

826 
dú
[
i
] = '\0';

830 i‡(!
	`fûe_exi°s_p
 (
dú
))

831 
ªt
 = 
	`mkdú
 (
dú
, 0777);

833 
ªt
 = 0;

834 i‡(
quô
)

837 
dú
[
i
] = '/';

839  
ªt
;

840 
	}
}

852 
	$fûe_mîge
 (c⁄° *
ba£
, c⁄° *
fûe
)

854 *
ªsu…
;

855 c⁄° *
cut
 = (c⁄° *)
	`°ºchr
 (
ba£
, '/');

857 i‡(!
cut
)

858  
	`x°rdup
 (
fûe
);

860 
ªsu…
 = 
	`xmÆloc
 (
cut
 - 
ba£
 + 1 + 
	`°æí
 (
fûe
) + 1);

861 
	`mem˝y
 (
ªsu…
, 
ba£
, 
cut
 - base);

862 
ªsu…
[
cut
 - 
ba£
] = '/';

863 
	`°r˝y
 (
ªsu…
 + (
cut
 - 
ba£
Ë+ 1, 
fûe
);

865  
ªsu…
;

866 
	}
}

871 
	$‚m©ch_noˇ£
 (c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
)

873 #ifde‡
FNM_CASEFOLD


876  
	`‚m©ch
 (
∑âîn
, 
°rög
, 
Êags
 | 
FNM_CASEFOLD
);

879 *
∑tc›y
 = (*Ë
	`Æloˇ
 (
	`°æí
 (
∑âîn
) + 1);

880 *
°rc›y
 = (*Ë
	`Æloˇ
 (
	`°æí
 (
°rög
) + 1);

881 *
p
;

882 
p
 = 
∑tc›y
; *
∑âîn
;Öattern++,Ö++)

883 *
p
 = 
	`c_tﬁowî
 (*
∑âîn
);

884 *
p
 = '\0';

885 
p
 = 
°rc›y
; *
°rög
; string++,Ö++)

886 *
p
 = 
	`c_tﬁowî
 (*
°rög
);

887 *
p
 = '\0';

888  
	`‚m©ch
 (
∑tc›y
, 
°rc›y
, 
Êags
);

890 
	}
}

892 
boﬁ
 
ö_ac˛i°
 (const *const *, const *, bool);

896 
boﬁ


897 
	$ac˚±abÀ
 (c⁄° *
s
)

899 
l
 = 
	`°æí
 (
s
);

901 i‡(
›t
.
ouçut_documít
 && 
	`°rcmp
 (
s
, opt.output_document) == 0)

902  
åue
;

904 
l
 && 
s
[l] != '/')

905 --
l
;

906 i‡(
s
[
l
] == '/')

907 
s
 +(
l
 + 1);

908 i‡(
›t
.
ac˚±s
)

910 i‡(
›t
.
ªje˘s
)

911  (
	`ö_ac˛i°
 ((c⁄° *c⁄° *)
›t
.
ac˚±s
, 
s
, 
åue
)

912 && !
	`ö_ac˛i°
 ((c⁄° *c⁄° *)
›t
.
ªje˘s
, 
s
, 
åue
));

914  
	`ö_ac˛i°
 ((c⁄° *c⁄° *)
›t
.
ac˚±s
, 
s
, 
åue
);

916 i‡(
›t
.
ªje˘s
)

917  !
	`ö_ac˛i°
 ((c⁄° *c⁄° *)
›t
.
ªje˘s
, 
s
, 
åue
);

918  
åue
;

919 
	}
}

924 
boﬁ


925 
	$subdú_p
 (c⁄° *
d1
, c⁄° *
d2
)

927 i‡(*
d1
 == '\0')

928  
åue
;

929 i‡(!
›t
.
ign‹e_ˇ£
)

930 ; *
d1
 && *
d2
 && (*d1 == *d2); ++d1, ++d2)

933 ; *
d1
 && *
d2
 && (
	`c_tﬁowî
 (*d1) == c_tolower (*d2)); ++d1, ++d2)

936  *
d1
 ='\0' && (*
d2
 == '\0' || *d2 == '/');

937 
	}
}

942 
boﬁ


943 
	$dú_m©ches_p
 (**
dúli°
, c⁄° *
dú
)

945 **
x
;

946 (*
m©chî
) (const *, const *, )

947 
›t
.
ign‹e_ˇ£
 ? 
‚m©ch_noˇ£
 : 
‚m©ch
;

949 
x
 = 
dúli°
; *x; x++)

952 *
p
 = *
x
 + (**x == '/');

953 i‡(
	`has_wûdˇrds_p
 (
p
))

955 i‡(
	`m©chî
 (
p
, 
dú
, 
FNM_PATHNAME
) == 0)

960 i‡(
	`subdú_p
 (
p
, 
dú
))

965  *
x
 ? 
åue
 : 
Ál£
;

966 
	}
}

974 
boﬁ


975 
	$accdú
 (c⁄° *
dúe˘‹y
)

978 i‡(*
dúe˘‹y
 == '/')

979 ++
dúe˘‹y
;

980 i‡(
›t
.
ö˛udes
)

982 i‡(!
	`dú_m©ches_p
 (
›t
.
ö˛udes
, 
dúe˘‹y
))

983  
Ál£
;

985 i‡(
›t
.
ex˛udes
)

987 i‡(
	`dú_m©ches_p
 (
›t
.
ex˛udes
, 
dúe˘‹y
))

988  
Ál£
;

990  
åue
;

991 
	}
}

1001 
boﬁ


1002 
	$m©ch_èû
 (c⁄° *
°rög
, c⁄° *
èû
, 
boﬁ
 
fﬁd_ˇ£
)

1004 
i
, 
j
;

1009 i‡(!
fﬁd_ˇ£
)

1011 
i
 = 
	`°æí
 (
°rög
), 
j
 = såÀ¿(
èû
); i >= 0 && j >= 0; i--, j--)

1012 i‡(
°rög
[
i
] !
èû
[
j
])

1017 
i
 = 
	`°æí
 (
°rög
), 
j
 = såÀ¿(
èû
); i >= 0 && j >= 0; i--, j--)

1018 i‡(
	`c_tﬁowî
 (
°rög
[
i
]Ë!c_tﬁowî (
èû
[
j
]))

1023 i‡(
j
 == -1)

1024  
åue
;

1026  
Ál£
;

1027 
	}
}

1035 
boﬁ


1036 
	$ö_ac˛i°
 (c⁄° *c⁄° *
ac˚±s
, c⁄° *
s
, 
boﬁ
 
backw¨d
)

1038 ; *
ac˚±s
;áccepts++)

1040 i‡(
	`has_wûdˇrds_p
 (*
ac˚±s
))

1042 
ªs
 = 
›t
.
ign‹e_ˇ£


1043 ? 
	`‚m©ch_noˇ£
 (*
ac˚±s
, 
s
, 0Ë: 
	`‚m©ch
 (*accepts, s, 0);

1045 i‡(
ªs
 == 0)

1046  
åue
;

1050 i‡(
backw¨d
)

1052 i‡(
	`m©ch_èû
 (
s
, *
ac˚±s
, 
›t
.
ign‹e_ˇ£
))

1053  
åue
;

1057 
cmp
 = 
›t
.
ign‹e_ˇ£


1058 ? 
	`°rˇ£cmp
 (
s
, *
ac˚±s
Ë: 
	`°rcmp
 (s, *accepts);

1059 i‡(
cmp
 == 0)

1060  
åue
;

1064  
Ál£
;

1065 
	}
}

1073 
	$suffix
 (c⁄° *
°r
)

1075 
i
;

1077 
i
 = 
	`°æí
 (
°r
); i && str[i] != '/' && str[i] != '.'; i--)

1080 i‡(
°r
[
i
++] == '.')

1081  (*)
°r
 + 
i
;

1083  
NULL
;

1084 
	}
}

1089 
boﬁ


1090 
	$has_wûdˇrds_p
 (c⁄° *
s
)

1092 ; *
s
; s++)

1093 i‡(*
s
 == '*' || *s == '?' || *s == '[' || *s == ']')

1094  
åue
;

1095  
Ál£
;

1096 
	}
}

1108 
boﬁ


1109 
	$has_html_suffix_p
 (c⁄° *
‚ame
)

1111 *
suf
;

1113 i‡((
suf
 = 
	`suffix
 (
‚ame
)Ë=
NULL
)

1114  
Ál£
;

1115 i‡(!
	`°rˇ£cmp
 (
suf
, "html"))

1116  
åue
;

1117 i‡(!
	`°rˇ£cmp
 (
suf
, "htm"))

1118  
åue
;

1119 i‡(
suf
[0] && !
	`°rˇ£cmp
 (suf + 1, "html"))

1120  
åue
;

1121  
Ál£
;

1122 
	}
}

1137 
	$ªad_whﬁe_löe
 (
FILE
 *
Â
)

1139 
Àngth
 = 0;

1140 
bufsize
 = 82;

1141 *
löe
 = 
	`xmÆloc
 (
bufsize
);

1143 
	`fgës
 (
löe
 + 
Àngth
, 
bufsize
 -Üígth, 
Â
))

1145 
Àngth
 +
	`°æí
 (
löe
 +Üength);

1146 i‡(
Àngth
 == 0)

1151 i‡(
löe
[
Àngth
 - 1] == '\n')

1157 
bufsize
 <<= 1;

1158 
löe
 = 
	`xªÆloc
 (löe, 
bufsize
);

1160 i‡(
Àngth
 =0 || 
	`„º‹
 (
Â
))

1162 
	`x‰ì
 (
löe
);

1163  
NULL
;

1165 i‡(
Àngth
 + 1 < 
bufsize
)

1170 
löe
 = 
	`xªÆloc
 (löe, 
Àngth
 + 1);

1171  
löe
;

1172 
	}
}

1190 
fûe_mem‹y
 *

1191 
	$wgë_ªad_fûe
 (c⁄° *
fûe
)

1193 
fd
;

1194 
fûe_mem‹y
 *
fm
;

1195 
size
;

1196 
boﬁ
 
öhibô_˛o£
 = 
Ál£
;

1200 i‡(
	`HYPHENP
 (
fûe
))

1202 
fd
 = 
	`fûío
 (
°dö
);

1203 
öhibô_˛o£
 = 
åue
;

1208 
fd
 = 
	`›í
 (
fûe
, 
O_RDONLY
);

1209 i‡(
fd
 < 0)

1210  
NULL
;

1211 
fm
 = 
	`x√w
 (
fûe_mem‹y
);

1213 #ifde‡
HAVE_MMAP


1215 
°ru˘_f°©
 
buf
;

1216 i‡(
	`f°©
 (
fd
, &
buf
) < 0)

1217 
mm≠_lo£
;

1218 
fm
->
Àngth
 = 
buf
.
°_size
;

1223 
fm
->
c⁄ã¡
 = 
	`mm≠
 (
NULL
, fm->
Àngth
, 
PROT_READ
 | 
PROT_WRITE
,

1224 
MAP_PRIVATE
, 
fd
, 0);

1225 i‡(
fm
->
c⁄ã¡
 =(*)
MAP_FAILED
)

1226 
mm≠_lo£
;

1227 i‡(!
öhibô_˛o£
)

1228 
	`˛o£
 (
fd
);

1230 
fm
->
mm≠_p
 = 1;

1231  
fm
;

1234 
mm≠_lo£
:

1241 
fm
->
Àngth
 = 0;

1242 
size
 = 512;

1244 
fm
->
c⁄ã¡
 = 
	`xmÆloc
 (
size
);

1247 
wgöt
 
ƒód
;

1248 i‡(
fm
->
Àngth
 > 
size
 / 2)

1264 
size
 <<= 1;

1265 
fm
->
c⁄ã¡
 = 
	`xªÆloc
 (fm->c⁄ã¡, 
size
);

1267 
ƒód
 = 
	`ªad
 (
fd
, 
fm
->
c⁄ã¡
 + fm->
Àngth
, 
size
 - fm->length);

1268 i‡(
ƒód
 > 0)

1270 
fm
->
Àngth
 +
ƒód
;

1271 i‡(
ƒód
 < 0)

1273 
lo£
;

1278 i‡(!
öhibô_˛o£
)

1279 
	`˛o£
 (
fd
);

1280 i‡(
size
 > 
fm
->
Àngth
 && fm->length != 0)

1283 
fm
->
c⁄ã¡
 = 
	`xªÆloc
 (fm->c⁄ã¡, fm->
Àngth
);

1284 
fm
->
mm≠_p
 = 0;

1285  
fm
;

1287 
lo£
:

1288 i‡(!
öhibô_˛o£
)

1289 
	`˛o£
 (
fd
);

1290 
	`x‰ì
 (
fm
->
c⁄ã¡
);

1291 
	`x‰ì
 (
fm
);

1292  
NULL
;

1293 
	}
}

1301 
	$wgë_ªad_fûe_‰ì
 (
fûe_mem‹y
 *
fm
)

1303 #ifde‡
HAVE_MMAP


1304 i‡(
fm
->
mm≠_p
)

1306 
	`munm≠
 (
fm
->
c⁄ã¡
, fm->
Àngth
);

1311 
	`x‰ì
 (
fm
->
c⁄ã¡
);

1313 
	`x‰ì
 (
fm
);

1314 
	}
}

1319 
	$‰ì_vec
 (**
vec
)

1321 i‡(
vec
)

1323 **
p
 = 
vec
;

1324 *
p
)

1325 
	`x‰ì
 (*
p
++);

1326 
	`x‰ì
 (
vec
);

1328 
	}
}

1334 
	$mîge_vecs
 (**
v1
, **
v2
)

1336 
i
, 
j
;

1338 i‡(!
v1
)

1339  
v2
;

1340 i‡(!
v2
)

1341  
v1
;

1342 i‡(!*
v2
)

1345 
	`x‰ì
 (
v2
);

1346  
v1
;

1349 
i
 = 0; 
v1
[i]; i++)

1352 
j
 = 0; 
v2
[j]; j++)

1355 
v1
 = 
	`xªÆloc
 (v1, (
i
 + 
j
 + 1) *  (**));

1356 
	`mem˝y
 (
v1
 + 
i
, 
v2
, (
j
 + 1) *  (*));

1357 
	`x‰ì
 (
v2
);

1358  
v1
;

1359 
	}
}

1365 
	$vec_≠≥nd
 (**
vec
, c⁄° *
°r
)

1367 
˙t
;

1369 i‡(
vec
 !
NULL
)

1371 
˙t
 = 0; 
vec
[cnt]; cnt++)

1373 ++
˙t
;

1376 
˙t
 = 1;

1378 
vec
 = 
	`xªÆloc
 (vec, (
˙t
 + 1) *  (*));

1380 
vec
[
˙t
 - 1] = 
	`x°rdup
 (
°r
);

1381 
vec
[
˙t
] = 
NULL
;

1382  
vec
;

1383 
	}
}

1391 
	$°rög_£t_add
 (
hash_èbÀ
 *
ht
, c⁄° *
s
)

1396 i‡(
	`hash_èbÀ_c⁄èös
 (
ht
, 
s
))

1403 
	`hash_èbÀ_put
 (
ht
, 
	`x°rdup
 (
s
), "1");

1404 
	}
}

1409 
	$°rög_£t_c⁄èös
 (
hash_èbÀ
 *
ht
, c⁄° *
s
)

1411  
	`hash_èbÀ_c⁄èös
 (
ht
, 
s
);

1412 
	}
}

1417 
	$°rög_£t_to_¨øy
 (
hash_èbÀ
 *
ht
, **
¨øy
)

1419 
hash_èbÀ_ôî©‹
 
ôî
;

1420 
	`hash_èbÀ_ôî©e
 (
ht
, &
ôî
); 
	`hash_èbÀ_ôî_√xt
 (&iter); )

1421 *
¨øy
++ = 
ôî
.
key
;

1422 
	}
}

1429 
	$°rög_£t_‰ì
 (
hash_èbÀ
 *
ht
)

1431 
hash_èbÀ_ôî©‹
 
ôî
;

1432 
	`hash_èbÀ_ôî©e
 (
ht
, &
ôî
); 
	`hash_èbÀ_ôî_√xt
 (&iter); )

1433 
	`x‰ì
 (
ôî
.
key
);

1434 
	`hash_èbÀ_de°roy
 (
ht
);

1435 
	}
}

1440 
	$‰ì_keys_™d_vÆues
 (
hash_èbÀ
 *
ht
)

1442 
hash_èbÀ_ôî©‹
 
ôî
;

1443 
	`hash_èbÀ_ôî©e
 (
ht
, &
ôî
); 
	`hash_èbÀ_ôî_√xt
 (&iter); )

1445 
	`x‰ì
 (
ôî
.
key
);

1446 
	`x‰ì
 (
ôî
.
vÆue
);

1448 
	}
}

1460 
	$gë_groupög_d©a
 (c⁄° **
£p
, c⁄° **
groupög
)

1462 c⁄° *
ˇched_£p
;

1463 c⁄° *
ˇched_groupög
;

1464 
boﬁ
 
öôülized
;

1465 i‡(!
öôülized
)

1468 
lc⁄v
 *lc⁄v = 
	`loˇÀc⁄v
 ();

1469 
ˇched_£p
 = 
lc⁄v
->
thoußnds_£p
;

1470 
ˇched_groupög
 = 
lc⁄v
->
groupög
;

1471 #i‡! 
USE_NLS_PROGRESS_BAR


1474 i‡(
	`°æí
(
ˇched_£p
) > 1)

1475 
ˇched_£p
 = "";

1477 i‡(!*
ˇched_£p
)

1484 i‡(*
lc⁄v
->
decimÆ_poöt
 != ',')

1485 
ˇched_£p
 = ",";

1487 
ˇched_£p
 = ".";

1488 
ˇched_groupög
 = "\x03";

1490 
öôülized
 = 
åue
;

1492 *
£p
 = 
ˇched_£p
;

1493 *
groupög
 = 
ˇched_groupög
;

1494 
	}
}

1506 
	$wôh_thoußnd_£ps
 (
wgöt
 
n
)

1508 
outbuf
[48];

1509 *
p
 = 
outbuf
 +  outbuf;

1512 c⁄° *
groupög
, *
£p
;

1513 
£∂í
;

1516 
i
 = 0, 
groupsize
;

1517 c⁄° *
©group
;

1519 
boﬁ
 
√g©ive
 = 
n
 < 0;

1522 
	`gë_groupög_d©a
 (&
£p
, &
groupög
);

1523 
£∂í
 = 
	`°æí
 (
£p
);

1524 
©group
 = 
groupög
;

1525 
groupsize
 = *
©group
++;

1529 i‡(
√g©ive
)

1530 
n
 = -n;

1534 *--
p
 = '\0';

1537 *--
p
 = 
n
 % 10 + '0';

1538 
n
 /= 10;

1539 i‡(
n
 == 0)

1542 i‡(++
i
 =
groupsize
)

1544 i‡(
£∂í
 == 1)

1545 *--
p
 = *
£p
;

1547 
	`mem˝y
 (
p
 -
£∂í
, 
£p
, seplen);

1548 
i
 = 0;

1549 i‡(*
©group
)

1550 
groupsize
 = *
©group
++;

1553 i‡(
√g©ive
)

1554 *--
p
 = '-';

1556  
p
;

1557 
	}
}

1576 
	$hum™_ªadabÀ
 (
HR_NUMTYPE
 
n
)

1579 
powîs
[] =

1588 
buf
[8];

1589 
size_t
 
i
;

1592 i‡(
n
 < 1024)

1594 
	`¢¥ötf
 (
buf
,  (buf), "%d", (Ë
n
);

1595  
buf
;

1601 
i
 = 0; i < 
	`cou¡of
 (
powîs
); i++)

1606 i‡((
n
 / 1024Ë< 1024 || 
i
 =
	`cou¡of
 (
powîs
) - 1)

1608 
vÆ
 = 
n
 / 1024.0;

1611 
	`¢¥ötf
 (
buf
,  (buf), "%.*f%c",

1612 
vÆ
 < 10 ? 1 : 0, vÆ, 
powîs
[
i
]);

1613  
buf
;

1615 
n
 /= 1024;

1617  
NULL
;

1618 
	}
}

1624 
	$numdigô
 (
wgöt
 
numbî
)

1626 
˙t
 = 1;

1627 i‡(
numbî
 < 0)

1628 ++
˙t
;

1629 (
numbî
 /= 10) != 0)

1630 ++
˙t
;

1631  
˙t
;

1632 
	}
}

1634 
	#PR
(
mask
Ë*
p
++ = 
n
 / (maskË+ '0'

	)

1641 
	#DIGITS_1
(
mask
Ë
	`PR
 (mask)

	)

1642 
	#DIGITS_2
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_1
 ((maskË/ 10)

	)

1643 
	#DIGITS_3
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_2
 ((maskË/ 10)

	)

1644 
	#DIGITS_4
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_3
 ((maskË/ 10)

	)

1645 
	#DIGITS_5
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_4
 ((maskË/ 10)

	)

1646 
	#DIGITS_6
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_5
 ((maskË/ 10)

	)

1647 
	#DIGITS_7
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_6
 ((maskË/ 10)

	)

1648 
	#DIGITS_8
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_7
 ((maskË/ 10)

	)

1649 
	#DIGITS_9
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_8
 ((maskË/ 10)

	)

1650 
	#DIGITS_10
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_9
 ((maskË/ 10)

	)

1654 
	#DIGITS_11
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_10
 ((maskË/ 10)

	)

1655 
	#DIGITS_12
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_11
 ((maskË/ 10)

	)

1656 
	#DIGITS_13
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_12
 ((maskË/ 10)

	)

1657 
	#DIGITS_14
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_13
 ((maskË/ 10)

	)

1658 
	#DIGITS_15
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_14
 ((maskË/ 10)

	)

1659 
	#DIGITS_16
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_15
 ((maskË/ 10)

	)

1660 
	#DIGITS_17
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_16
 ((maskË/ 10)

	)

1661 
	#DIGITS_18
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_17
 ((maskË/ 10)

	)

1662 
	#DIGITS_19
(
mask
Ë
	`PR
 (mask), 
n
 %(mask), 
	`DIGITS_18
 ((maskË/ 10)

	)

1665 
	#W
 
wgöt


	)

1687 
	$numbî_to_°rög
 (*
buf„r
, 
wgöt
 
numbî
)

1689 *
p
 = 
buf„r
;

1690 
wgöt
 
n
 = 
numbî
;

1692 
œ°_digô_ch¨
 = 0;

1694 #i‡(
SIZEOF_WGINT
 != 4) && (SIZEOF_WGINT != 8)

1697 
p
 +
	`•rötf
 (
buf
, "%j", (
ötmax_t
Ë(
n
));

1700 i‡(
n
 < 0)

1702 i‡(
n
 < -
WGINT_MAX
)

1707 
œ°_digô
 = 
n
 % 10;

1709 i‡(
œ°_digô
 < 0)

1710 
œ°_digô_ch¨
 = '0' - 
œ°_digô
;

1712 
œ°_digô_ch¨
 = '0' + 
œ°_digô
;

1714 
n
 /= 10;

1717 *
p
++ = '-';

1718 
n
 = -n;

1725 i‡(
n
 < 10Ë
	`DIGITS_1
 (1);

1726 i‡(
n
 < 100Ë
	`DIGITS_2
 (10);

1727 i‡(
n
 < 1000Ë
	`DIGITS_3
 (100);

1728 i‡(
n
 < 10000Ë
	`DIGITS_4
 (1000);

1729 i‡(
n
 < 100000Ë
	`DIGITS_5
 (10000);

1730 i‡(
n
 < 1000000Ë
	`DIGITS_6
 (100000);

1731 i‡(
n
 < 10000000Ë
	`DIGITS_7
 (1000000);

1732 i‡(
n
 < 100000000Ë
	`DIGITS_8
 (10000000);

1733 i‡(
n
 < 1000000000Ë
	`DIGITS_9
 (100000000);

1734 #i‡
SIZEOF_WGINT
 == 4

1736 
	`DIGITS_10
 (1000000000);

1742 i‡(
n
 < 10*(
W
)1000000000Ë
	`DIGITS_10
 (1000000000);

1743 i‡(
n
 < 100*(
W
)1000000000Ë
	`DIGITS_11
 (10*(W)1000000000);

1744 i‡(
n
 < 1000*(
W
)1000000000Ë
	`DIGITS_12
 (100*(W)1000000000);

1745 i‡(
n
 < 10000*(
W
)1000000000Ë
	`DIGITS_13
 (1000*(W)1000000000);

1746 i‡(
n
 < 100000*(
W
)1000000000Ë
	`DIGITS_14
 (10000*(W)1000000000);

1747 i‡(
n
 < 1000000*(
W
)1000000000Ë
	`DIGITS_15
 (100000*(W)1000000000);

1748 i‡(
n
 < 10000000*(
W
)1000000000Ë
	`DIGITS_16
 (1000000*(W)1000000000);

1749 i‡(
n
 < 100000000*(
W
)1000000000Ë
	`DIGITS_17
 (10000000*(W)1000000000);

1750 i‡(
n
 < 1000000000*(
W
)1000000000Ë
	`DIGITS_18
 (100000000*(W)1000000000);

1751 
	`DIGITS_19
 (1000000000*(
W
)1000000000);

1754 i‡(
œ°_digô_ch¨
)

1755 *
p
++ = 
œ°_digô_ch¨
;

1757 *
p
 = '\0';

1760  
p
;

1761 
	}
}

1763 #unde‡
PR


1764 #unde‡
W


1765 #unde‡
SPRINTF_WGINT


1766 #unde‡
DIGITS_1


1767 #unde‡
DIGITS_2


1768 #unde‡
DIGITS_3


1769 #unde‡
DIGITS_4


1770 #unde‡
DIGITS_5


1771 #unde‡
DIGITS_6


1772 #unde‡
DIGITS_7


1773 #unde‡
DIGITS_8


1774 #unde‡
DIGITS_9


1775 #unde‡
DIGITS_10


1776 #unde‡
DIGITS_11


1777 #unde‡
DIGITS_12


1778 #unde‡
DIGITS_13


1779 #unde‡
DIGITS_14


1780 #unde‡
DIGITS_15


1781 #unde‡
DIGITS_16


1782 #unde‡
DIGITS_17


1783 #unde‡
DIGITS_18


1784 #unde‡
DIGITS_19


1786 
	#RING_SIZE
 3

	)

1820 
	$numbî_to_°©ic_°rög
 (
wgöt
 
numbî
)

1822 
rög
[
RING_SIZE
][24];

1823 
rögpos
;

1824 *
buf
 = 
rög
[
rögpos
];

1825 
	`numbî_to_°rög
 (
buf
, 
numbî
);

1826 
rögpos
 = (rögpo†+ 1Ë% 
RING_SIZE
;

1827  
buf
;

1828 
	}
}

1834 
	$dëîmöe_s¸ìn_width
 ()

1838 #ifde‡
TIOCGWINSZ


1839 
fd
;

1840 
wösize
 
wsz
;

1842 i‡(
›t
.
lfûíame
 !
NULL
)

1845 
fd
 = 
	`fûío
 (
°dîr
);

1846 i‡(
	`io˘l
 (
fd
, 
TIOCGWINSZ
, &
wsz
) < 0)

1849  
wsz
.
ws_cﬁ
;

1850 #ñi‡
	`deföed
(
WINDOWS
)

1851 
CONSOLE_SCREEN_BUFFER_INFO
 
csbi
;

1852 i‡(!
	`GëC⁄sﬁeS¸ìnBuf„rInfo
 (
	`GëStdH™dÀ
 (
STD_ERROR_HANDLE
), &
csbi
))

1854  
csbi
.
dwSize
.
X
;

1858 
	}
}

1862 
	g∫d_£eded
;

1877 
	$øndom_numbî
 (
max
)

1879 #ifde‡
HAVE_DRAND48


1880 i‡(!
∫d_£eded
)

1882 
	`§™d48
 ((Ë
	`time
 (
NULL
Ë^ (Ë
	`gëpid
 ());

1883 
∫d_£eded
 = 1;

1885  
	`Ã™d48
 (Ë% 
max
;

1888 
bounded
;

1889 
∫d
;

1890 i‡(!
∫d_£eded
)

1892 
	`§™d
 ((Ë
	`time
 (
NULL
Ë^ (Ë
	`gëpid
 ());

1893 
∫d_£eded
 = 1;

1895 
∫d
 = 
	`ønd
 ();

1901 
bounded
 = (Ë
max
 * 
∫d
 / (
RAND_MAX
 + 1.0);

1902  (Ë
bounded
;

1905 
	}
}

1912 
	$øndom_Êﬂt
 ()

1914 #ifde‡
HAVE_DRAND48


1915 i‡(!
∫d_£eded
)

1917 
	`§™d48
 ((Ë
	`time
 (
NULL
Ë^ (Ë
	`gëpid
 ());

1918 
∫d_£eded
 = 1;

1920  
	`dønd48
 ();

1922  ( 
	`øndom_numbî
 (10000) / 10000.0

1923 + 
	`øndom_numbî
 (10000) / (10000.0 * 10000.0)

1924 + 
	`øndom_numbî
 (10000) / (10000.0 * 10000.0 * 10000.0)

1925 + 
	`øndom_numbî
 (10000) / (10000.0 * 10000.0 * 10000.0 * 10000.0));

1927 
	}
}

1932 #ifde‡
USE_SIGNAL_TIMEOUT


1933 #ifde‡
HAVE_SIGSETJMP


1934 
	#SETJMP
(
ív
Ë
	`sig£tjmp
 (ív, 1)

	)

1936 
sigjmp_buf
 
	grun_wôh_timeout_ív
;

1939 
	$ab‹t_run_wôh_timeout
 (
sig
)

1941 
	`as£π
 (
sig
 =
SIGALRM
);

1942 
	`sigl⁄gjmp
 (
run_wôh_timeout_ív
, -1);

1943 
	}
}

1945 
	#SETJMP
(
ív
Ë
	`£tjmp
 (ív)

	)

1947 
jmp_buf
 
	grun_wôh_timeout_ív
;

1950 
	$ab‹t_run_wôh_timeout
 (
sig
)

1952 
	`as£π
 (
sig
 =
SIGALRM
);

1956 
sig£t_t
 
£t
;

1957 
	`sigem±y£t
 (&
£t
);

1958 
	`sigadd£t
 (&
£t
, 
SIGALRM
);

1959 
	`sig¥ocmask
 (
SIG_BLOCK
, &
£t
, 
NULL
);

1962 
	`l⁄gjmp
 (
run_wôh_timeout_ív
, -1);

1963 
	}
}

1975 
	$Æ¨m_£t
 (
timeout
)

1977 #ifde‡
ITIMER_REAL


1979 
ôimîvÆ
 
ôv
;

1980 
	`xzîo
 (
ôv
);

1981 
ôv
.
ô_vÆue
.
tv_£c
 = (Ë
timeout
;

1982 
ôv
.
ô_vÆue
.
tv_u£c
 = 1000000 * (
timeout
 - ()timeout);

1983 i‡(
ôv
.
ô_vÆue
.
tv_£c
 =0 && itv.ô_vÆue.
tv_u£c
 == 0)

1986 
ôv
.
ô_vÆue
.
tv_u£c
 = 1;

1987 
	`£tôimî
 (
ITIMER_REAL
, &
ôv
, 
NULL
);

1990 
£cs
 = (Ë
timeout
;

1991 i‡(
£cs
 == 0)

1996 
£cs
 = 1;

1997 
	`Æ¨m
 (
£cs
);

1999 
	}
}

2004 
	$Æ¨m_ˇn˚l
 ()

2006 #ifde‡
ITIMER_REAL


2007 
ôimîvÆ
 
dißbÀ
;

2008 
	`xzîo
 (
dißbÀ
);

2009 
	`£tôimî
 (
ITIMER_REAL
, &
dißbÀ
, 
NULL
);

2011 
	`Æ¨m
 (0);

2013 
	}
}

2042 
boﬁ


2043 
run_wôh_timeout
 (
timeout
, (*
fun
Ë(*), *
¨g
)

2045 
ßved_î∫o
;

2047 i‡(
timeout
 == 0)

2049 
	`fun
 (
¨g
);

2050  
Ál£
;

2053 
	`sig«l
 (
SIGALRM
, 
ab‹t_run_wôh_timeout
);

2054 i‡(
	`SETJMP
 (
run_wôh_timeout_ív
) != 0)

2057 
	`sig«l
 (
SIGALRM
, 
SIG_DFL
);

2058  
åue
;

2060 
	`Æ¨m_£t
 (
timeout
);

2061 
	`fun
 (
¨g
);

2064 
ßved_î∫o
 = 
î∫o
;

2065 
	`Æ¨m_ˇn˚l
 ();

2066 
	`sig«l
 (
SIGALRM
, 
SIG_DFL
);

2067 
î∫o
 = 
ßved_î∫o
;

2069  
Ál£
;

2070 
	}
}

2074 #i‚de‡
WINDOWS


2079 
boﬁ


2080 
run_wôh_timeout
 (
timeout
, (*
fun
Ë(*), *
¨g
)

2082 
	`fun
 (
¨g
);

2083  
Ál£
;

2084 
	}
}

2088 #i‚de‡
WINDOWS


2094 
	$x¶ìp
 (
£c⁄ds
)

2096 #ifde‡
HAVE_NANOSLEEP


2102 
time•ec
 
¶ìp
, 
ªmaöög
;

2103 
¶ìp
.
tv_£c
 = (Ë
£c⁄ds
;

2104 
¶ìp
.
tv_n£c
 = 1000000000 * (
£c⁄ds
 - () seconds);

2105 
	`«no¶ìp
 (&
¶ìp
, &
ªmaöög
Ë< 0 && 
î∫o
 =
EINTR
)

2108 
¶ìp
 = 
ªmaöög
;

2109 #ñi‡
	`deföed
(
HAVE_USLEEP
)

2111 i‡(
£c⁄ds
 >= 1)

2116 
	`¶ìp
 (
£c⁄ds
);

2117 
£c⁄ds
 -= () seconds;

2119 
	`u¶ìp
 (
£c⁄ds
 * 1000000);

2125 
timevÆ
 
¶ìp
;

2126 
¶ìp
.
tv_£c
 = (Ë
£c⁄ds
;

2127 
¶ìp
.
tv_u£c
 = 1000000 * (
£c⁄ds
 - () seconds);

2128 
	`£À˘
 (0, 
NULL
, NULL, NULL, &
¶ìp
);

2134 
	}
}

2148 
	$ba£64_ícode
 (c⁄° *
d©a
, 
Àngth
, *
de°
)

2151 c⁄° 
tbl
[64] = {

2159 c⁄° *
s
 = 
d©a
;

2161 c⁄° *
íd
 = (c⁄° *Ë
d©a
 + 
Àngth
 - 2;

2162 *
p
 = 
de°
;

2165 ; 
s
 < 
íd
; s += 3)

2167 *
p
++ = 
tbl
[
s
[0] >> 2];

2168 *
p
++ = 
tbl
[((
s
[0] & 3) << 4) + (s[1] >> 4)];

2169 *
p
++ = 
tbl
[((
s
[1] & 0xf) << 2) + (s[2] >> 6)];

2170 *
p
++ = 
tbl
[
s
[2] & 0x3f];

2174 
Àngth
 % 3)

2177 *
p
++ = 
tbl
[
s
[0] >> 2];

2178 *
p
++ = 
tbl
[(
s
[0] & 3) << 4];

2179 *
p
++ = '=';

2180 *
p
++ = '=';

2183 *
p
++ = 
tbl
[
s
[0] >> 2];

2184 *
p
++ = 
tbl
[((
s
[0] & 3) << 4) + (s[1] >> 4)];

2185 *
p
++ = 
tbl
[((
s
[1] & 0xf) << 2)];

2186 *
p
++ = '=';

2190 *
p
 = '\0';

2192  
p
 - 
de°
;

2193 
	}
}

2197 
	#NEXT_CHAR
(
c
, 
p
) do { \

2198 
c
 = (Ë*
p
++; \

2199 } 
	`c_is•a˚
 (
c
))

	)

2201 
	#IS_ASCII
(
c
Ë(((cË& 0x80Ë=0)

	)

2216 
	$ba£64_decode
 (c⁄° *
ba£64
, *
de°
)

2220 c⁄° sig√d 
ba£64_ch¨_to_vÆue
[128] =

2236 
	#BASE64_CHAR_TO_VALUE
(
c
Ë((Ë
ba£64_ch¨_to_vÆue
[c])

	)

2237 
	#IS_BASE64
(
c
Ë((
	`IS_ASCII
 (cË&& 
	`BASE64_CHAR_TO_VALUE
 (cË>0Ë|| c ='=')

	)

2239 c⁄° *
p
 = 
ba£64
;

2240 *
q
 = 
de°
;

2244 
c
;

2245 
vÆue
;

2248 
	`NEXT_CHAR
 (
c
, 
p
);

2249 i‡(!
c
)

2251 i‡(
c
 ='=' || !
	`IS_BASE64
 (c))

2253 
vÆue
 = 
	`BASE64_CHAR_TO_VALUE
 (
c
) << 18;

2256 
	`NEXT_CHAR
 (
c
, 
p
);

2257 i‡(!
c
)

2259 i‡(
c
 ='=' || !
	`IS_BASE64
 (c))

2261 
vÆue
 |
	`BASE64_CHAR_TO_VALUE
 (
c
) << 12;

2262 *
q
++ = 
vÆue
 >> 16;

2265 
	`NEXT_CHAR
 (
c
, 
p
);

2266 i‡(!
c
)

2268 i‡(!
	`IS_BASE64
 (
c
))

2271 i‡(
c
 == '=')

2273 
	`NEXT_CHAR
 (
c
, 
p
);

2274 i‡(!
c
)

2276 i‡(
c
 != '=')

2281 
vÆue
 |
	`BASE64_CHAR_TO_VALUE
 (
c
) << 6;

2282 *
q
++ = 0xf‡& 
vÆue
 >> 8;

2285 
	`NEXT_CHAR
 (
c
, 
p
);

2286 i‡(!
c
)

2288 i‡(
c
 == '=')

2290 i‡(!
	`IS_BASE64
 (
c
))

2293 
vÆue
 |
	`BASE64_CHAR_TO_VALUE
 (
c
);

2294 *
q
++ = 0xf‡& 
vÆue
;

2296 #unde‡
IS_BASE64


2297 #unde‡
BASE64_CHAR_TO_VALUE


2299  
q
 - (*Ë
de°
;

2300 
	}
}

2302 #unde‡
IS_ASCII


2303 #unde‡
NEXT_CHAR


2309 
mîges‹t_öã∫Æ
 (*
ba£
, *
ãmp
, 
size_t
 
size
, size_à
‰om
, size_à
to
,

2310 (*
cmpfun
) (const *, const *))

2312 
	#ELT
(
¨øy
, 
pos
Ë((*)◊ºayË+ (posË* 
size
)

	)

2313 i‡(
‰om
 < 
to
)

2315 
size_t
 
i
, 
j
, 
k
;

2316 
size_t
 
mid
 = (
to
 + 
‰om
) / 2;

2317 
	`mîges‹t_öã∫Æ
 (
ba£
, 
ãmp
, 
size
, 
‰om
, 
mid
, 
cmpfun
);

2318 
	`mîges‹t_öã∫Æ
 (
ba£
, 
ãmp
, 
size
, 
mid
 + 1, 
to
, 
cmpfun
);

2319 
i
 = 
‰om
;

2320 
j
 = 
mid
 + 1;

2321 
k
 = 
‰om
; (
i
 <
mid
Ë&& (
j
 <
to
); k++)

2322 i‡(
	`cmpfun
 (
	`ELT
 (
ba£
, 
i
), ELT (ba£, 
j
)) <= 0)

2323 
	`mem˝y
 (
	`ELT
 (
ãmp
, 
k
), ELT (
ba£
, 
i
++), 
size
);

2325 
	`mem˝y
 (
	`ELT
 (
ãmp
, 
k
), ELT (
ba£
, 
j
++), 
size
);

2326 
i
 <
mid
)

2327 
	`mem˝y
 (
	`ELT
 (
ãmp
, 
k
++), ELT (
ba£
, 
i
++), 
size
);

2328 
j
 <
to
)

2329 
	`mem˝y
 (
	`ELT
 (
ãmp
, 
k
++), ELT (
ba£
, 
j
++), 
size
);

2330 
k
 = 
‰om
; k <
to
; k++)

2331 
	`mem˝y
 (
	`ELT
 (
ba£
, 
k
), ELT (
ãmp
, k), 
size
);

2333 #unde‡
ELT


2334 
	}
}

2341 
°abÀ_s‹t
 (*
ba£
, 
size_t
 
nmemb
, size_à
size
,

2342 (*
cmpfun
) (const *, const *))

2344 i‡(
size
 > 1)

2346 *
ãmp
 = 
	`Æloˇ
 (
nmemb
 * 
size
 *  (*));

2347 
	`mîges‹t_öã∫Æ
 (
ba£
, 
ãmp
, 
size
, 0, 
nmemb
 - 1, 
cmpfun
);

2349 
	}
}

2363 
	$¥öt_decimÆ
 (
numbî
)

2365 
buf
[32];

2366 
n
 = 
numbî
 >= 0 ?Çumber : -number;

2368 i‡(
n
 >= 9.95)

2371 
	`¢¥ötf
 (
buf
,  buf, "%.0f", 
numbî
);

2372 i‡(
n
 >= 0.95)

2373 
	`¢¥ötf
 (
buf
,  buf, "%.1f", 
numbî
);

2374 i‡(
n
 >= 0.001)

2375 
	`¢¥ötf
 (
buf
,  buf, "%.1g", 
numbî
);

2376 i‡(
n
 >= 0.0005)

2378 
	`¢¥ötf
 (
buf
,  buf, "%.3f", 
numbî
);

2381 
	`°r˝y
 (
buf
, "0");

2383  
buf
;

2384 
	}
}

2386 #ifde‡
TESTING


2389 
	$ã°_subdú_p
()

2391 
i
;

2393 *
d1
;

2394 *
d2
;

2395 
boﬁ
 
ªsu…
;

2396 } 
ã°_¨øy
[] = {

2397 { "/somedú", "/somedú", 
åue
 },

2398 { "/somedú", "/somedú/d2", 
åue
 },

2399 { "/somedú/d1", "/somedú", 
Ál£
 },

2402 
i
 = 0; i < 
	`cou¡of
(
ã°_¨øy
); ++i)

2404 
boﬁ
 
ªs
 = 
	`subdú_p
 (
ã°_¨øy
[
i
].
d1
,Åe°_¨øy[i].
d2
);

2406 
	`mu_as£π
 ("test_subdir_p: wrongÑesult",

2407 
ªs
 =
ã°_¨øy
[
i
].
ªsu…
);

2410  
NULL
;

2411 
	}
}

2414 
	$ã°_dú_m©ches_p
()

2416 
i
;

2418 *
dúli°
[3];

2419 *
dú
;

2420 
boﬁ
 
ªsu…
;

2421 } 
ã°_¨øy
[] = {

2422 { { "/somedú", "/someŸhîdú", 
NULL
 }, "somedú", 
åue
 },

2423 { { "/somedú", "/someŸhîdú", 
NULL
 }, "™Ÿhîdú", 
Ál£
 },

2424 { { "/somedú", "/*Ÿhîdú", 
NULL
 }, "™Ÿhîdú", 
åue
 },

2425 { { "/somedú/d1", "/someŸhîdú", 
NULL
 }, "somedú/d1", 
åue
 },

2426 { { "*/*d1", "/someŸhîdú", 
NULL
 }, "somedú/d1", 
åue
 },

2427 { { "/somedú/d1", "/someŸhîdú", 
NULL
 }, "d1", 
Ál£
 },

2428 { { "!COMPLETE", 
NULL
, NULL }, "!COMPLETE", 
åue
 },

2429 { { "*COMPLETE", 
NULL
, NULL }, "!COMPLETE", 
åue
 },

2430 { { "*/!COMPLETE", 
NULL
, NULL }, "foo/!COMPLETE", 
åue
 },

2431 { { "*COMPLETE", 
NULL
, NULL }, "foo/!COMPLETE", 
Ál£
 },

2432 { { "*/*COMPLETE", 
NULL
, NULL }, "foo/!COMPLETE", 
åue
 },

2433 { { "/dú wôh s∑˚s", 
NULL
, NULL }, "dú wôh s∑˚s", 
åue
 },

2434 { { "/dú*wôh*•a˚s", 
NULL
, NULL }, "dú wôh s∑˚s", 
åue
 },

2435 { { "/Tmp/has", 
NULL
, NULL }, "/Tmp/ha†•a˚", 
Ál£
 },

2436 { { "/Tmp/has", 
NULL
, NULL }, "/Tmp/has,comma", 
Ál£
 },

2439 
i
 = 0; i < 
	`cou¡of
(
ã°_¨øy
); ++i)

2441 
boﬁ
 
ªs
 = 
	`dú_m©ches_p
 (
ã°_¨øy
[
i
].
dúli°
,Åe°_¨øy[i].
dú
);

2443 
	`mu_as£π
 ("test_dir_matches_p: wrongÑesult",

2444 
ªs
 =
ã°_¨øy
[
i
].
ªsu…
);

2447  
NULL
;

2448 
	}
}

	@src/utils.h

32 #i‚de‡
UTILS_H


33 
	#UTILS_H


	)

36 
	#UNKNOWN_ATTEMPTED_SIZE
 -3

	)

43 
	#x√w
(
ty≥
Ë(
	`xmÆloc
 ( (ty≥)))

	)

44 
	#x√w0
(
ty≥
Ë(
	`xˇŒoc
 (1,  (ty≥)))

	)

45 
	#x√w_¨øy
(
ty≥
, 
Àn
Ë(
	`xmÆloc
 (÷íË*  (ty≥)))

	)

46 
	#x√w0_¨øy
(
ty≥
, 
Àn
Ë(
	`xˇŒoc
 (÷í),  (ty≥)))

	)

48 
	#Æloˇ_¨øy
(
ty≥
, 
size
Ë(—y≥ *Ë
	`Æloˇ
 ((sizeË*  (ty≥)))

	)

50 
	#x‰ì
 
‰ì


	)

55 
	#x‰ì_nuŒ
(
p
Ëi‡(!’)Ë; 
	`x‰ì
 (p)

	)

57 
	ghash_èbÀ
;

59 
	sfûe_mem‹y
 {

60 *
	mc⁄ã¡
;

61 
	mÀngth
;

62 
	mmm≠_p
;

65 
	#HYPHENP
(
x
Ë(*(xË='-' && !*((xË+ 1))

	)

67 *
time_°r
 (
time_t
);

68 *
d©ëime_°r
 (
time_t
);

70 *
x°rdup_lowî
 (const *);

72 *
°rdupdñim
 (const *, const *);

73 **
£p°rög
 (const *);

74 
boﬁ
 
subdú_p
 (const *, const *);

75 
f‹k_to_background
 ();

77 *
	$≠rötf
 (c⁄° *, ...Ë
	`GCC_FORMAT_ATTR
 (1, 2);

78 *
	`c⁄ˇt_°rögs
 (const *, ...);

80 
	`touch
 (c⁄° *, 
time_t
);

81 
	`ªmove_lök
 (const *);

82 
boﬁ
 
	`fûe_exi°s_p
 (const *);

83 
boﬁ
 
	`fûe_n⁄_dúe˘‹y_p
 (const *);

84 
wgöt
 
	`fûe_size
 (const *);

85 
	`make_dúe˘‹y
 (const *);

86 *
	`unique_«me
 (c⁄° *, 
boﬁ
);

87 
FILE
 *
	`unique_¸óã
 (c⁄° *, 
boﬁ
, **);

88 
FILE
 *
	`f›í_ex˛
 (const *, );

89 *
	`fûe_mîge
 (const *, const *);

91 
	`‚m©ch_noˇ£
 (const *, const *, );

92 
boﬁ
 
	`ac˚±abÀ
 (const *);

93 
boﬁ
 
	`accdú
 (c⁄° *
s
);

94 *
	`suffix
 (c⁄° *
s
);

95 
boﬁ
 
	`m©ch_èû
 (const *, const *, bool);

96 
boﬁ
 
	`has_wûdˇrds_p
 (const *);

98 
boﬁ
 
	`has_html_suffix_p
 (const *);

100 *
	`ªad_whﬁe_löe
 (
FILE
 *);

101 
fûe_mem‹y
 *
	`wgë_ªad_fûe
 (const *);

102 
	`wgë_ªad_fûe_‰ì
 (
fûe_mem‹y
 *);

104 
	`‰ì_vec
 (**);

105 **
	`mîge_vecs
 (**, **);

106 **
	`vec_≠≥nd
 (**, const *);

108 
	`°rög_£t_add
 (
hash_èbÀ
 *, const *);

109 
	`°rög_£t_c⁄èös
 (
hash_èbÀ
 *, const *);

110 
	`°rög_£t_to_¨øy
 (
hash_èbÀ
 *, **);

111 
	`°rög_£t_‰ì
 (
hash_èbÀ
 *);

112 
	`‰ì_keys_™d_vÆues
 (
hash_èbÀ
 *);

114 c⁄° *
	`wôh_thoußnd_£ps
 (
wgöt
);

119 #i‡
SIZEOF_WGINT
 >= 8

120 
	#HR_NUMTYPE
 
wgöt


	)

122 
	#HR_NUMTYPE
 

	)

124 *
	`hum™_ªadabÀ
 (
HR_NUMTYPE
);

127 
	`numdigô
 (
wgöt
);

128 *
	`numbî_to_°rög
 (*, 
wgöt
);

129 *
	`numbî_to_°©ic_°rög
 (
wgöt
);

131 
	`dëîmöe_s¸ìn_width
 ();

132 
	`øndom_numbî
 ();

133 
	`øndom_Êﬂt
 ();

135 
boﬁ
 
	`run_wôh_timeout
 (, (*) (*), *);

136 
	`x¶ìp
 ();

139 
	#BASE64_LENGTH
(
Àn
Ë(4 * ((÷íË+ 2Ë/ 3))

	)

141 
	`ba£64_ícode
 (const *, , *);

142 
	`ba£64_decode
 (const *, *);

144 
	`°abÀ_s‹t
 (*, 
size_t
, size_t, (*) (const *, const *));

146 c⁄° *
	`¥öt_decimÆ
 ();

148 
ch¨_¥›
[];

	@src/wget.h

37 #i‚de‡
WGET_H


38 
	#WGET_H


	)

40 
	~"c⁄fig.h
"

42 #i‡((
deföed
 
_WIN32
 || deföed 
__WIN32__
Ë&& !deföed 
__CYGWIN__
)

43 
	#WINDOWS


	)

47 
	~"sysdï.h
"

50 #i‚de‡
ENABLE_DEBUG


51 
	#NDEBUG


	)

55 #i‡
deföed
 
HAVE_LIBSSL
 || deföed 
HAVE_LIBSSL32
 || deföed 
HAVE_LIBGNUTLS


56 
	#HAVE_SSL


	)

61 
	~"gëãxt.h
"

62 
	#_
(
°rög
Ë
	`gëãxt
 (°rög)

	)

73 
	#N_
(
°rög
Ë
	)
string

75 #i‡! 
ENABLE_NLS


76 #unde‡
HAVE_WCHAR_H


77 #unde‡
HAVE_WCWIDTH


78 #unde‡
HAVE_MBTOWC


81 #i‡
HAVE_WCWIDTH
 && 
HAVE_MBTOWC


82 
	#USE_NLS_PROGRESS_BAR
 1

	)

85 #unde‡
USE_NLS_PROGRESS_BAR


104 
	~"c-˘y≥.h
"

109 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

110 
	#GCC_FORMAT_ATTR
(
a
, 
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
,á, b)))

	)

111 
	#LIKELY
(
exp
Ë
	`__buûtö_ex≥˘
 (!!”xp), 1)

	)

112 
	#UNLIKELY
(
exp
Ë
	`__buûtö_ex≥˘
 (”xp), 0)

	)

114 
	#GCC_FORMAT_ATTR
(
a
, 
b
)

	)

115 
	#LIKELY
(
exp
Ë”xp)

	)

116 
	#UNLIKELY
(
exp
Ë”xp)

	)

122 #ifde‡
ENABLE_DEBUG


123 
	#IF_DEBUG
 i‡(
	`UNLIKELY
 (
›t
.
debug
))

	)

125 
	#IF_DEBUG
 i‡(0)

	)

133 
	#DEBUGP
(
¨gs
Ëdÿ{ 
IF_DEBUG
 { 
debug_log¥ötf
árgs; } } 0)

	)

142 #ifde‡
WINDOWS


144 #ñi‡
SIZEOF_LONG
 >= 8

146 
	twgöt
;

147 
	#SIZEOF_WGINT
 
SIZEOF_LONG


	)

148 #ñi‡
SIZEOF_LONG_LONG
 >= 8

150 
	twgöt
;

151 
	#SIZEOF_WGINT
 
SIZEOF_LONG_LONG


	)

152 #ñi‡
HAVE_INT64_T


153 
öt64_t
 
	twgöt
;

154 
	#SIZEOF_WGINT
 8

	)

155 #ñi‡
SIZEOF_OFF_T
 >= 8

158 
off_t
 
	twgöt
;

159 
	#SIZEOF_WGINT
 
SIZEOF_OFF_T


	)

163 
	twgöt
;

164 
	#SIZEOF_WGINT
 
SIZEOF_LONG


	)

171 #ifde‡
WINDOWS


173 #ñi‡
SIZEOF_WGINT
 =
SIZEOF_LONG


174 
	#°r_to_wgöt
 
°πﬁ


	)

175 #ñi‡
SIZEOF_WGINT
 =
SIZEOF_LONG_LONG


176 
	#°r_to_wgöt
 
°πﬁl


	)

177 #i‚de‡
HAVE_STRTOLL


178 
	#NEED_STRTOLL


	)

179 
	#°πﬁl_ty≥
 

	)

183 
	#°r_to_wgöt
 
°πﬁl


	)

184 
	#NEED_STRTOLL


	)

185 
	#°πﬁl_ty≥
 
wgöt


	)

188 
	#WGINT_MAX
 
	`TYPE_MAXIMUM
 (
wgöt
)

	)

191 #ifde‡
NEED_STRTOLL


192 
°πﬁl_ty≥
 
°πﬁl
 (const *, **, );

205 #i‡
SIZEOF_WGINT
 >= 8

207 
wgöt
 
	tSUM_SIZE_INT
;

210 
	tSUM_SIZE_INT
;

213 
	~"›ti⁄s.h
"

216 
	~<Æloˇ.h
>

217 
	~"xÆloc.h
"

220 
	~"log.h
"

223 
	~"quŸe.h
"

224 
	~"quŸórg.h
"

227 
	~"úi.h
"

237 
	#cou¡of
(
¨øy
Ë( (¨øyË/  (◊ºay)[0]))

	)

240 
	#xzîo
(
x
Ë
	`mem£t
 (&(x), '\0',  (x))

	)

245 
	#XDIGIT_TO_NUM
(
h
Ë((hË< 'A' ? (hË- '0' : 
	`c_touµî
 (hË- 'A' + 10)

	)

246 
	#X2DIGITS_TO_NUM
(
h1
, 
h2
Ë((
	`XDIGIT_TO_NUM
 (h1Ë<< 4Ë+ XDIGIT_TO_NUM (h2))

	)

251 
	#XNUM_TO_DIGIT
(
x
Ë("0123456789ABCDEF"[x] + 0)

	)

252 
	#XNUM_TO_digô
(
x
Ë("0123456789abcdef"[x] + 0)

	)

257 
	#BOUNDED_TO_ALLOCA
(
beg
, 
íd
, 
∂a˚
) do { \

258 c⁄° *
BTA_beg
 = (
beg
); \

259 
BTA_Àn
 = (
íd
Ë- 
BTA_beg
; \

260 **
BTA_de°
 = &(
∂a˚
); \

261 *
BTA_de°
 = 
	`Æloˇ
 (
BTA_Àn
 + 1); \

262 
	`mem˝y
 (*
BTA_de°
, 
BTA_beg
, 
BTA_Àn
); \

263 (*
BTA_de°
)[
BTA_Àn
] = '\0'; \

264 } 0)

	)

268 
	#BOUNDED_EQUAL
(
beg
, 
íd
, 
°rög_lôîÆ
) \

269 ((
íd
Ë- (
beg
Ë= (
°rög_lôîÆ
) - 1 \

270 && !
	`memcmp
 (
beg
, 
°rög_lôîÆ
,  (°rög_lôîÆË- 1))

	)

273 
	#BOUNDED_EQUAL_NO_CASE
(
beg
, 
íd
, 
°rög_lôîÆ
) \

274 ((
íd
Ë- (
beg
Ë= (
°rög_lôîÆ
) - 1 \

275 && !
	`°∫ˇ£cmp
 (
beg
, 
°rög_lôîÆ
,  (°rög_lôîÆË- 1))

	)

283 
	#STRDUP_ALLOCA
(
±r
, 
°r
) do { \

284 **
SA_de°
 = &(
±r
); \

285 c⁄° *
SA_§c
 = (
°r
); \

286 *
SA_de°
 = (*)
	`Æloˇ
 (
	`°æí
 (
SA_§c
) + 1); \

287 
	`°r˝y
 (*
SA_de°
, 
SA_§c
); \

288 } 0)

	)

298 
	#DO_REALLOC
(
ba£v¨
, 
sizev¨
, 
√eded_size
, 
ty≥
) do { \

299 
DR_√eded_size
 = (
√eded_size
); \

300 
DR_√wsize
 = 0; \

301 (
sizev¨
Ë< (
DR_√eded_size
)) { \

302 
DR_√wsize
 = 
sizev¨
 << 1; \

303 i‡(
DR_√wsize
 < 16) \

304 
DR_√wsize
 = 16; \

305 (
sizev¨
Ë
DR_√wsize
; \

307 i‡(
DR_√wsize
) \

308 
ba£v¨
 = 
	`xªÆloc
 (ba£v¨, 
DR_√wsize
 *  (
ty≥
)); \

309 } 0)

	)

315 
	#PTR_FORMAT
(
p
Ë(Ë(2 *  (*)), (Ë’)

	)

317 c⁄° *
exec_«me
;

322 
	mTEXTHTML
 = 0x0001,

324 
	mRETROKF
 = 0x0002,

325 
	mHEAD_ONLY
 = 0x0004,

326 
	mSEND_NOCACHE
 = 0x0008,

327 
	mACCEPTRANGES
 = 0x0010,

328 
	mADDED_HTML_EXTENSION
 = 0x0020,

329 
	mTEXTCSS
 = 0x0040

338 
	mNOCONERROR
, 
	mHOSTERR
, 
	mCONSOCKERR
, 
	mCONERROR
, 
	mCONSSLERR
,

339 
	mCONIMPOSSIBLE
, 
	mNEWLOCATION
, 
	mNOTENOUGHMEM
 ,

340 
	mCONPORTERR
 , 
	mCONCLOSED
 ,

342 
	mFTPOK
, 
	mFTPLOGINC
, 
	mFTPLOGREFUSED
, 
	mFTPPORTERR
, 
	mFTPSYSERR
,

343 
	mFTPNSFOD
, 
	mFTPRETROK
 , 
	mFTPUNKNOWNTYPE
, 
	mFTPRERR
, 
	mFTPREXC
 ,

345 
	mFTPSRVERR
, 
	mFTPRETRINT
, 
	mFTPRESTFAIL
, 
	mURLERROR
, 
	mFOPENERR
,

346 
	mFOPEN_EXCL_ERR
, 
	mFWRITEERR
, 
	mHOK
 , 
	mHLEXC
 , 
	mHEOF
,

348 
	mHERR
, 
	mRETROK
, 
	mRECLEVELEXC
, 
	mFTPACCDENIED
 , 
	mWRONGCODE
,

349 
	mFTPINVPASV
, 
	mFTPNOPASV
, 
	mCONTNOTSUPPORTED
, 
	mRETRUNNEEDED
, 
	mRETRFINISHED
,

351 
	mREADERR
, 
	mTRYLIMEXC
, 
	mURLBADPATTERN
 , 
	mFILEBADFILE
 , 
	mRANGEERR
,

352 
	mRETRBADPATTERN
, 
	mRETNOTSUP
 , 
	mROBOTSOK
 , 
	mNOROBOTS
 ,

353 
	mPROXERR
,

355 
	mAUTHFAILED
, 
	mQUOTEXC
, 
	mWRITEFAILED
, 
	mSSLINITFAILED
, 
	mVERIFCERTERR
,

356 
	mUNLINKERR
, 
	mNEWLOCATION_KEEP_POST


357 } 
	tuîr_t
;

373 #ifde‡
__VMS


374 
	#ORIG_SFX
 "_‹ig"

	)

376 
	#ORIG_SFX
 ".‹ig"

	)

385 #i‚de‡
__VMS


386 
	#UNIQ_SEP
 '.'

	)

	@util/trunc.c

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

17 
	#PROGRAM_NAME
 "åunc"

	)

20 
	$ußge
 (
FILE
 *
f
)

22 
	`Âuts
 (

23 
PROGRAM_NAME
 " [-c] fûêsz\n\
\n\
Åhêfûesizêo‡FILEÅÿSIZE.\n\
\n\
-c: cª©êFILE i‡ô d€¢'àexi°.\n\
\n\
 suffixe†f‹ SIZE (ˇ£-ö£nsôive):\n\
: SIZE * 1024\n\
: SIZE * 1024 * 1024\n", 
f
);

32 
	}
}

34 
off_t


35 
	$gë_size
 (c⁄° 
°r
[])

37 
vÆ
;

38 
suffix
;

39 *
íd
;

41 
î∫o
 = 0;

42 
vÆ
 = 
	`°πoul
(
°r
, &
íd
, 10);

43 i‡(
íd
 =
°r
)

45 
	`Âuts
 (
PROGRAM_NAME
 ": sizêi†nŸáÇumbî.\n", 
°dîr
);

46 
	`ußge
 (
°dîr
);

47 
	`exô
 (
EXIT_FAILURE
);

49 i‡(
î∫o
 =
ERANGE


50 || ()(
off_t
)
vÆ
 != val)

52 
	`Âuts
 (
PROGRAM_NAME
 ": sizêi†ouào‡ønge.\n", 
°dîr
);

53 
	`exô
 (
EXIT_FAILURE
);

56 
suffix
 = 
	`tﬁowî
 ((Ë
íd
[0]);

57 i‡(
suffix
 == 'k')

59 
vÆ
 *= 1024;

61 i‡(
suffix
 == 'm')

63 
vÆ
 *= 1024 * 1024;

66  
vÆ
;

67 
	}
}

70 
	$maö
 (
¨gc
, *
¨gv
[])

72 c⁄° *
‚ame
;

73 c⁄° *
sz°r
;

74 
off_t
 
sz
;

75 
¸óã
 = 0;

76 
›ti⁄
;

77 
fd
;

80 (
›ti⁄
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "c")) != -1)

82 
›ti⁄
) {

84 
¸óã
 = 1;

87 
	`Ârötf
 (
°dîr
, 
PROGRAM_NAME
 ": Unrecognized option `%c'.\n\n",

88 
›t›t
);

89 
	`ußge
 (
°dîr
);

90 
	`exô
 (
EXIT_FAILURE
);

93 
	`ab‹t
();

97 i‡(
¨gv
[
›töd
] =
NULL


98 || 
¨gv
[
›töd
+1] =
NULL


99 || 
¨gv
[
›töd
+2] !
NULL
)

101 
	`ußge
 (
°dîr
);

102 
	`exô
 (
EXIT_FAILURE
);

105 
‚ame
 = 
¨gv
[
›töd
];

106 
sz°r
 = 
¨gv
[
›töd
+1];

108 
sz
 = 
	`gë_size
(
sz°r
);

109 i‡(
¸óã
)

111 
mode_t
 
mode
 = 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
 | 
S_IWOTH
;

112 
fd
 = 
	`›í
(
‚ame
, 
O_WRONLY
 | 
O_CREAT
, 
mode
);

116 
fd
 = 
	`›í
(
‚ame
, 
O_WRONLY
);

119 i‡(
fd
 == -1)

121 
	`≥º‹
 (
PROGRAM_NAME
 ": open");

122 
	`exô
 (
EXIT_FAILURE
);

125 i‡(
	`·runˇã
(
fd
, 
sz
) == -1)

127 
	`≥º‹
 (
PROGRAM_NAME
 ":Åruncate");

128 
	`exô
 (
EXIT_FAILURE
);

132 
	}
}

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/config.h

5 
	#CPU_VENDOR_OS
 "i686-pc-löux-gnu"

	)

8 
	#HAVE_ADDRINFO_STRUCT
 1

	)

11 
	#HAVE_ARPA_INET_H
 1

	)

14 
	#HAVE_BZERO
 1

	)

26 
	#HAVE_ERRNO_H
 1

	)

29 
	#HAVE_FCNTL_H
 1

	)

32 
	#HAVE_GETADDRINFO
 1

	)

35 
	#HAVE_GETADDRINFO_PROTO
 1

	)

38 
	#HAVE_GETHOSTBYNAME2
 1

	)

41 
	#HAVE_GETHOSTBYNAME_R
 1

	)

44 
	#HAVE_GETHOSTNAME
 1

	)

47 
	#HAVE_GETHOSTNAME_PROTO
 1

	)

50 
	#HAVE_GETNAMEINFO
 1

	)

53 
	#HAVE_GETNAMEINFO_PROTO
 1

	)

56 
	#HAVE_GETRUSAGE_PROTO
 1

	)

59 
	#HAVE_HSTRERROR
 1

	)

62 
	#HAVE_HSTRERROR_PROTO
 1

	)

65 
	#HAVE_IF_NAMEINDEX_STRUCT
 1

	)

68 
	#HAVE_IF_NAMETOINDEX
 1

	)

71 
	#HAVE_IF_NAMETOINDEX_PROTO
 1

	)

74 
	#HAVE_INET6_RTH_INIT
 1

	)

77 
	#HAVE_INET_ATON
 1

	)

80 
	#HAVE_INET_ATON_PROTO
 1

	)

83 
	#HAVE_INET_PTON
 1

	)

86 
	#HAVE_INET_PTON_PROTO
 1

	)

98 
	#HAVE_LIBPTHREAD
 1

	)

110 
	#HAVE_MKSTEMP
 1

	)

113 
	#HAVE_MSGHDR_MSG_CONTROL
 1

	)

119 
	#HAVE_NETDB_H
 1

	)

125 
	#HAVE_NETINET_IN_H
 1

	)

131 
	#HAVE_POLL
 1

	)

134 
	#HAVE_POLL_H
 1

	)

137 
	#HAVE_PSELECT
 1

	)

140 
	#HAVE_PSELECT_PROTO
 1

	)

143 
	#HAVE_PTHREAD_H
 1

	)

146 
	#HAVE_SIGNAL_H
 1

	)

149 
	#HAVE_SNPRINTF
 1

	)

152 
	#HAVE_SNPRINTF_PROTO
 1

	)

161 
	#HAVE_SOCKATMARK
 1

	)

164 
	#HAVE_SOCKATMARK_PROTO
 1

	)

167 
	#HAVE_STDIO_H
 1

	)

170 
	#HAVE_STDLIB_H
 1

	)

173 
	#HAVE_STRINGS_H
 1

	)

176 
	#HAVE_STRING_H
 1

	)

179 
	#HAVE_STROPTS_H
 1

	)

182 
	#HAVE_STRUCT_IFREQ_IFR_MTU
 1

	)

185 
	#HAVE_STRUCT_SOCKADDR_STORAGE
 1

	)

194 
	#HAVE_SYS_IOCTL_H
 1

	)

197 
	#HAVE_SYS_PARAM_H
 1

	)

200 
	#HAVE_SYS_SELECT_H
 1

	)

203 
	#HAVE_SYS_SOCKET_H
 1

	)

209 
	#HAVE_SYS_STAT_H
 1

	)

212 
	#HAVE_SYS_SYSCTL_H
 1

	)

215 
	#HAVE_SYS_TIME_H
 1

	)

218 
	#HAVE_SYS_TYPES_H
 1

	)

221 
	#HAVE_SYS_UIO_H
 1

	)

224 
	#HAVE_SYS_UN_H
 1

	)

227 
	#HAVE_SYS_WAIT_H
 1

	)

230 
	#HAVE_TIMESPEC_STRUCT
 1

	)

233 
	#HAVE_TIME_H
 1

	)

236 
	#HAVE_UNISTD_H
 1

	)

239 
	#HAVE_VSNPRINTF
 1

	)

248 
	#IPV4
 1

	)

251 
	#IPV6
 1

	)

254 
	#IPv4
 1

	)

257 
	#IPv6
 1

	)

260 
	#MCAST
 1

	)

263 
	#PACKAGE_BUGREPORT
 ""

	)

266 
	#PACKAGE_NAME
 ""

	)

269 
	#PACKAGE_STRING
 ""

	)

272 
	#PACKAGE_TARNAME
 ""

	)

275 
	#PACKAGE_VERSION
 ""

	)

281 
	#STDC_HEADERS
 1

	)

284 
	#TIME_WITH_SYS_TIME
 1

	)

287 
	#UNIXDOMAIN
 1

	)

290 
	#UNIXdomaö
 1

	)

314 
	#t_sˇœr_t
 
öt32_t


	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

20 #i‚de‡
_ERROR_H


21 
	#_ERROR_H
 1

	)

23 
	~<„©uªs.h
>

26 
__BEGIN_DECLS


32 
	$îr‹
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__f‹m©
, ...)

33 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

35 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__‚ame
,

36 
__löío
, 
__c⁄°
 *
__f‹m©
, ...)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

42 (*
îr‹_¥öt_¥og«me
) ();

45 
îr‹_mesßge_cou¡
;

49 
îr‹_⁄e_≥r_löe
;

52 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


53 
	~<bôs/îr‹.h
>

56 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/fnmatch.h

19 #i‚def 
_FNMATCH_H


20 
	#_FNMATCH_H
 1

	)

22 #ifdef 
__˝lu•lus


27 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


28 
	#__c⁄°
 c⁄°

	)

30 
	#__c⁄°


	)

36 #unde‡
FNM_PATHNAME


37 #unde‡
FNM_NOESCAPE


38 #unde‡
FNM_PERIOD


41 
	#FNM_PATHNAME
 (1 << 0Ë

	)

42 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

43 
	#FNM_PERIOD
 (1 << 2Ë

	)

45 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


46 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

47 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

48 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

49 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

53 
	#FNM_NOMATCH
 1

	)

59 #ifde‡
_XOPEN_SOURCE


60 
	#FNM_NOSYS
 (-1)

	)

65 
‚m©ch
 (
__c⁄°
 *
__∑âîn
, __c⁄° *
__«me
,

66 
__Êags
);

68 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnutls/gnutls.h

37 #i‚de‡
GNUTLS_H


38 
	#GNUTLS_H


	)

41 
	~<°ddef.h
>

43 #i‚de‡
HAVE_SSIZE_T


44 
	#HAVE_SSIZE_T


	)

46 
	~<sys/ty≥s.h
>

50 
	~<time.h
>

51 #ifde‡
__˝lu•lus


56 
	#GNUTLS_VERSION
 "2.12.14"

	)

58 
	#GNUTLS_VERSION_MAJOR
 2

	)

59 
	#GNUTLS_VERSION_MINOR
 12

	)

60 
	#GNUTLS_VERSION_PATCH
 14

	)

62 
	#GNUTLS_VERSION_NUMBER
 0x020c0e

	)

64 
	#GNUTLS_CIPHER_RIJNDAEL_128_CBC
 
GNUTLS_CIPHER_AES_128_CBC


	)

65 
	#GNUTLS_CIPHER_RIJNDAEL_256_CBC
 
GNUTLS_CIPHER_AES_256_CBC


	)

66 
	#GNUTLS_CIPHER_RIJNDAEL_CBC
 
GNUTLS_CIPHER_AES_128_CBC


	)

67 
	#GNUTLS_CIPHER_ARCFOUR
 
GNUTLS_CIPHER_ARCFOUR_128


	)

95 
	egnués_cùhî_Æg‹ôhm


97 
GNUTLS_CIPHER_UNKNOWN
 = 0,

98 
GNUTLS_CIPHER_NULL
 = 1,

99 
GNUTLS_CIPHER_ARCFOUR_128
 = 2,

100 
GNUTLS_CIPHER_3DES_CBC
 = 3,

101 
GNUTLS_CIPHER_AES_128_CBC
 = 4,

102 
GNUTLS_CIPHER_AES_256_CBC
 = 5,

103 
GNUTLS_CIPHER_ARCFOUR_40
 = 6,

104 
GNUTLS_CIPHER_CAMELLIA_128_CBC
 = 7,

105 
GNUTLS_CIPHER_CAMELLIA_256_CBC
 = 8,

106 
GNUTLS_CIPHER_RC2_40_CBC
 = 90,

107 
GNUTLS_CIPHER_DES_CBC
 = 91,

108 
GNUTLS_CIPHER_AES_192_CBC
 = 92,

112 
GNUTLS_CIPHER_IDEA_PGP_CFB
 = 200,

113 
GNUTLS_CIPHER_3DES_PGP_CFB
 = 201,

114 
GNUTLS_CIPHER_CAST5_PGP_CFB
 = 202,

115 
GNUTLS_CIPHER_BLOWFISH_PGP_CFB
 = 203,

116 
GNUTLS_CIPHER_SAFER_SK128_PGP_CFB
 = 204,

117 
GNUTLS_CIPHER_AES128_PGP_CFB
 = 205,

118 
GNUTLS_CIPHER_AES192_PGP_CFB
 = 206,

119 
GNUTLS_CIPHER_AES256_PGP_CFB
 = 207,

120 
GNUTLS_CIPHER_TWOFISH_PGP_CFB
 = 208

121 } 
	tgnués_cùhî_Æg‹ôhm_t
;

141 
GNUTLS_KX_UNKNOWN
 = 0,

142 
GNUTLS_KX_RSA
 = 1,

143 
GNUTLS_KX_DHE_DSS
 = 2,

144 
GNUTLS_KX_DHE_RSA
 = 3,

145 
GNUTLS_KX_ANON_DH
 = 4,

146 
GNUTLS_KX_SRP
 = 5,

147 
GNUTLS_KX_RSA_EXPORT
 = 6,

148 
GNUTLS_KX_SRP_RSA
 = 7,

149 
GNUTLS_KX_SRP_DSS
 = 8,

150 
GNUTLS_KX_PSK
 = 9,

151 
GNUTLS_KX_DHE_PSK
 = 10

152 } 
	tgnués_kx_Æg‹ôhm_t
;

163 
GNUTLS_PARAMS_RSA_EXPORT
 = 1,

164 
GNUTLS_PARAMS_DH
 = 2

165 } 
	tgnués_∑øms_ty≥_t
;

179 
GNUTLS_CRD_CERTIFICATE
 = 1,

180 
GNUTLS_CRD_ANON
,

181 
GNUTLS_CRD_SRP
,

182 
GNUTLS_CRD_PSK
,

183 
GNUTLS_CRD_IA


184 } 
	tgnués_¸edítüls_ty≥_t
;

186 
	#GNUTLS_MAC_SHA
 
GNUTLS_MAC_SHA1


	)

187 
	#GNUTLS_DIG_SHA
 
GNUTLS_DIG_SHA1


	)

207 
GNUTLS_MAC_UNKNOWN
 = 0,

208 
GNUTLS_MAC_NULL
 = 1,

209 
GNUTLS_MAC_MD5
 = 2,

210 
GNUTLS_MAC_SHA1
 = 3,

211 
GNUTLS_MAC_RMD160
 = 4,

212 
GNUTLS_MAC_MD2
 = 5,

213 
GNUTLS_MAC_SHA256
 = 6,

214 
GNUTLS_MAC_SHA384
 = 7,

215 
GNUTLS_MAC_SHA512
 = 8,

216 
GNUTLS_MAC_SHA224
 = 9

219 } 
	tgnués_mac_Æg‹ôhm_t
;

238 
GNUTLS_DIG_UNKNOWN
 = 
GNUTLS_MAC_UNKNOWN
,

239 
GNUTLS_DIG_NULL
 = 
GNUTLS_MAC_NULL
,

240 
GNUTLS_DIG_MD5
 = 
GNUTLS_MAC_MD5
,

241 
GNUTLS_DIG_SHA1
 = 
GNUTLS_MAC_SHA1
,

242 
GNUTLS_DIG_RMD160
 = 
GNUTLS_MAC_RMD160
,

243 
GNUTLS_DIG_MD2
 = 
GNUTLS_MAC_MD2
,

244 
GNUTLS_DIG_SHA256
 = 
GNUTLS_MAC_SHA256
,

245 
GNUTLS_DIG_SHA384
 = 
GNUTLS_MAC_SHA384
,

246 
GNUTLS_DIG_SHA512
 = 
GNUTLS_MAC_SHA512
,

247 
GNUTLS_DIG_SHA224
 = 
GNUTLS_MAC_SHA224


250 } 
	tgnués_dige°_Æg‹ôhm_t
;

255 
	#GNUTLS_MAX_ALGORITHM_NUM
 16

	)

269 
GNUTLS_COMP_UNKNOWN
 = 0,

270 
GNUTLS_COMP_NULL
 = 1,

271 
GNUTLS_COMP_DEFLATE
 = 2,

272 
GNUTLS_COMP_ZLIB
 = 
GNUTLS_COMP_DEFLATE
,

273 
GNUTLS_COMP_LZO
 = 3

276 } 
	tgnués_com¥essi⁄_mëhod_t
;

287 
GNUTLS_SERVER
 = 1,

288 
GNUTLS_CLIENT


289 } 
	tgnués_c⁄√˘i⁄_íd_t
;

300 
GNUTLS_AL_WARNING
 = 1,

301 
GNUTLS_AL_FATAL


302 } 
	tgnués_Æît_Àvñ_t
;

347 
GNUTLS_A_CLOSE_NOTIFY
,

348 
GNUTLS_A_UNEXPECTED_MESSAGE
 = 10,

349 
GNUTLS_A_BAD_RECORD_MAC
 = 20,

350 
GNUTLS_A_DECRYPTION_FAILED
,

351 
GNUTLS_A_RECORD_OVERFLOW
,

352 
GNUTLS_A_DECOMPRESSION_FAILURE
 = 30,

353 
GNUTLS_A_HANDSHAKE_FAILURE
 = 40,

354 
GNUTLS_A_SSL3_NO_CERTIFICATE
 = 41,

355 
GNUTLS_A_BAD_CERTIFICATE
 = 42,

356 
GNUTLS_A_UNSUPPORTED_CERTIFICATE
,

357 
GNUTLS_A_CERTIFICATE_REVOKED
,

358 
GNUTLS_A_CERTIFICATE_EXPIRED
,

359 
GNUTLS_A_CERTIFICATE_UNKNOWN
,

360 
GNUTLS_A_ILLEGAL_PARAMETER
,

361 
GNUTLS_A_UNKNOWN_CA
,

362 
GNUTLS_A_ACCESS_DENIED
,

363 
GNUTLS_A_DECODE_ERROR
 = 50,

364 
GNUTLS_A_DECRYPT_ERROR
,

365 
GNUTLS_A_EXPORT_RESTRICTION
 = 60,

366 
GNUTLS_A_PROTOCOL_VERSION
 = 70,

367 
GNUTLS_A_INSUFFICIENT_SECURITY
,

368 
GNUTLS_A_INTERNAL_ERROR
 = 80,

369 
GNUTLS_A_USER_CANCELED
 = 90,

370 
GNUTLS_A_NO_RENEGOTIATION
 = 100,

371 
GNUTLS_A_UNSUPPORTED_EXTENSION
 = 110,

372 
GNUTLS_A_CERTIFICATE_UNOBTAINABLE
 = 111,

373 
GNUTLS_A_UNRECOGNIZED_NAME
 = 112,

374 
GNUTLS_A_UNKNOWN_PSK_IDENTITY
 = 115,

375 
GNUTLS_A_INNER_APPLICATION_FAILURE
 = 208,

376 
GNUTLS_A_INNER_APPLICATION_VERIFICATION
 = 209

377 } 
	tgnués_Æît_des¸ùti⁄_t
;

398 
GNUTLS_HANDSHAKE_HELLO_REQUEST
 = 0,

399 
GNUTLS_HANDSHAKE_CLIENT_HELLO
 = 1,

400 
GNUTLS_HANDSHAKE_SERVER_HELLO
 = 2,

401 
GNUTLS_HANDSHAKE_NEW_SESSION_TICKET
 = 4,

402 
GNUTLS_HANDSHAKE_CERTIFICATE_PKT
 = 11,

403 
GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE
 = 12,

404 
GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST
 = 13,

405 
GNUTLS_HANDSHAKE_SERVER_HELLO_DONE
 = 14,

406 
GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY
 = 15,

407 
GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE
 = 16,

408 
GNUTLS_HANDSHAKE_FINISHED
 = 20,

409 
GNUTLS_HANDSHAKE_SUPPLEMENTAL
 = 23

410 } 
	tgnués_h™dshake_des¸ùti⁄_t
;

433 
GNUTLS_CERT_INVALID
 = 2,

434 
GNUTLS_CERT_REVOKED
 = 32,

435 
GNUTLS_CERT_SIGNER_NOT_FOUND
 = 64,

436 
GNUTLS_CERT_SIGNER_NOT_CA
 = 128,

437 
GNUTLS_CERT_INSECURE_ALGORITHM
 = 256,

438 
GNUTLS_CERT_NOT_ACTIVATED
 = 512,

439 
GNUTLS_CERT_EXPIRED
 = 1024

440 } 
	tgnués_˚πifiˇã_°©us_t
;

452 
GNUTLS_CERT_IGNORE
 = 0,

453 
GNUTLS_CERT_REQUEST
 = 1,

454 
GNUTLS_CERT_REQUIRE
 = 2

455 } 
	tgnués_˚πifiˇã_ªque°_t
;

466 
GNUTLS_OPENPGP_CERT
 = 0,

467 
GNUTLS_OPENPGP_CERT_FINGERPRINT
 = 1

468 } 
	tgnués_›ípgp_¸t_°©us_t
;

479 
GNUTLS_SHUT_RDWR
 = 0,

480 
GNUTLS_SHUT_WR
 = 1

481 } 
	tgnués_˛o£_ªque°_t
;

497 
GNUTLS_SSL3
 = 1,

498 
GNUTLS_TLS1_0
 = 2,

499 
GNUTLS_TLS1
 = 
GNUTLS_TLS1_0
,

500 
GNUTLS_TLS1_1
 = 3,

501 
GNUTLS_TLS1_2
 = 4,

502 
GNUTLS_VERSION_MAX
 = 
GNUTLS_TLS1_2
,

503 
GNUTLS_VERSION_UNKNOWN
 = 0xff

504 } 
	tgnués_¥Ÿocﬁ_t
;

516 
GNUTLS_CRT_UNKNOWN
 = 0,

517 
GNUTLS_CRT_X509
 = 1,

518 
GNUTLS_CRT_OPENPGP
 = 2

519 } 
	tgnués_˚πifiˇã_ty≥_t
;

530 
GNUTLS_X509_FMT_DER
 = 0,

531 
GNUTLS_X509_FMT_PEM
 = 1

532 } 
	tgnués_x509_¸t_fmt_t
;

542 
	egnués_˚πifiˇã_¥öt_f‹m©s


544 
GNUTLS_CRT_PRINT_FULL
 = 0,

545 
GNUTLS_CRT_PRINT_ONELINE
 = 1,

546 
GNUTLS_CRT_PRINT_UNSIGNED_FULL
 = 2

547 } 
	tgnués_˚πifiˇã_¥öt_f‹m©s_t
;

560 
GNUTLS_PK_UNKNOWN
 = 0,

561 
GNUTLS_PK_RSA
 = 1,

562 
GNUTLS_PK_DSA
 = 2,

563 
GNUTLS_PK_DH
 = 3

564 } 
	tgnués_pk_Æg‹ôhm_t
;

566 c⁄° *
gnués_pk_Æg‹ôhm_gë_«me
 (
gnués_pk_Æg‹ôhm_t
 
Æg‹ôhm
);

589 
GNUTLS_SIGN_UNKNOWN
 = 0,

590 
GNUTLS_SIGN_RSA_SHA1
 = 1,

591 
GNUTLS_SIGN_RSA_SHA
 = 
GNUTLS_SIGN_RSA_SHA1
,

592 
GNUTLS_SIGN_DSA_SHA1
 = 2,

593 
GNUTLS_SIGN_DSA_SHA
 = 
GNUTLS_SIGN_DSA_SHA1
,

594 
GNUTLS_SIGN_RSA_MD5
 = 3,

595 
GNUTLS_SIGN_RSA_MD2
 = 4,

596 
GNUTLS_SIGN_RSA_RMD160
 = 5,

597 
GNUTLS_SIGN_RSA_SHA256
 = 6,

598 
GNUTLS_SIGN_RSA_SHA384
 = 7,

599 
GNUTLS_SIGN_RSA_SHA512
 = 8,

600 
GNUTLS_SIGN_RSA_SHA224
 = 9,

601 
GNUTLS_SIGN_DSA_SHA224
 = 10,

602 
GNUTLS_SIGN_DSA_SHA256
 = 11

603 } 
	tgnués_sign_Æg‹ôhm_t
;

605 c⁄° *
gnués_sign_Æg‹ôhm_gë_«me
 (
gnués_sign_Æg‹ôhm_t
 
sign
);

620 
GNUTLS_SEC_PARAM_UNKNOWN
,

621 
GNUTLS_SEC_PARAM_WEAK
,

622 
GNUTLS_SEC_PARAM_LOW
,

623 
GNUTLS_SEC_PARAM_NORMAL
,

624 
GNUTLS_SEC_PARAM_HIGH
,

625 
GNUTLS_SEC_PARAM_ULTRA


626 } 
	tgnués_£c_∑øm_t
;

636 
GNUTLS_CB_TLS_UNIQUE


637 } 
	tgnués_ch™√l_bödög_t
;

642 *
	tgnués_å™•‹t_±r_t
;

644 
gnués_£ssi⁄_öt
;

645 
gnués_£ssi⁄_öt
 *
	tgnués_£ssi⁄_t
;

647 
gnués_dh_∑øms_öt
;

648 
gnués_dh_∑øms_öt
 *
	tgnués_dh_∑øms_t
;

651 
gnués_x509_¥ivkey_öt
;

652 
gnués_x509_¥ivkey_öt
 *
	tgnués_rß_∑øms_t
;

654 
gnués_¥i‹ôy_°
;

655 
gnués_¥i‹ôy_°
 *
	tgnués_¥i‹ôy_t
;

659 *
d©a
;

660 
size
;

661 } 
	tgnués_d©um_t
;

664 
	sgnués_∑øms_°


666 
gnués_∑øms_ty≥_t
 
ty≥
;

667 
	u∑øms


669 
gnués_dh_∑øms_t
 
dh
;

670 
gnués_rß_∑øms_t
 
rß_exp‹t
;

671 } 
∑øms
;

672 
deöô
;

673 } 
	tgnués_∑øms_°
;

675 
	tgnués_∑øms_fun˘i⁄
 (
	tgnués_£ssi⁄_t
, 
	tgnués_∑øms_ty≥_t
,

676 
	tgnués_∑øms_°
 *);

680 
gnués_öô
 (
gnués_£ssi⁄_t
 * 
£ssi⁄
,

681 
gnués_c⁄√˘i⁄_íd_t
 
c⁄_íd
);

682 
gnués_deöô
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

683 
	#_gnués_deöô
(
x
Ë
	`gnués_deöô
(x)

	)

685 
gnués_bye
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
gnués_˛o£_ªque°_t
 
how
);

687 
gnués_h™dshake
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

688 
gnués_ªh™dshake
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

690 
gnués_Æît_des¸ùti⁄_t
 
gnués_Æît_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

691 
gnués_Æît_£nd
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

692 
gnués_Æît_Àvñ_t
 
Àvñ
,

693 
gnués_Æît_des¸ùti⁄_t
 
desc
);

694 
gnués_Æît_£nd_≠¥›rüã
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
îr
);

695 c⁄° *
gnués_Æît_gë_«me
 (
gnués_Æît_des¸ùti⁄_t
 
Æît
);

697 
gnués_£c_∑øm_t
 
gnués_pk_bôs_to_£c_∑øm
 (
gnués_pk_Æg‹ôhm_t
 
Ægo
,

698 
bôs
);

699 c⁄° *
gnués_£c_∑øm_gë_«me
 (
gnués_£c_∑øm_t
 
∑øm
);

700 
gnués_£c_∑øm_to_pk_bôs
 (
gnués_pk_Æg‹ôhm_t
 
Ægo
,

701 
gnués_£c_∑øm_t
 
∑øm
);

704 
gnués_cùhî_Æg‹ôhm_t
 
gnués_cùhî_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

705 
gnués_kx_Æg‹ôhm_t
 
gnués_kx_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

706 
gnués_mac_Æg‹ôhm_t
 
gnués_mac_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

707 
gnués_com¥essi⁄_mëhod_t


708 
gnués_com¥essi⁄_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

709 
gnués_˚πifiˇã_ty≥_t


710 
gnués_˚πifiˇã_ty≥_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

711 
gnués_sign_Æg‹ôhm_gë_ªque°ed
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

712 
size_t
 
ödx
,

713 
gnués_sign_Æg‹ôhm_t
 * 
Ægo
);

715 
size_t
 
gnués_cùhî_gë_key_size
 (
gnués_cùhî_Æg‹ôhm_t
 
Æg‹ôhm
);

716 
size_t
 
gnués_mac_gë_key_size
 (
gnués_mac_Æg‹ôhm_t
 
Æg‹ôhm
);

719 c⁄° *
gnués_cùhî_gë_«me
 (
gnués_cùhî_Æg‹ôhm_t
 
Æg‹ôhm
);

720 c⁄° *
gnués_mac_gë_«me
 (
gnués_mac_Æg‹ôhm_t
 
Æg‹ôhm
);

721 c⁄° *
gnués_com¥essi⁄_gë_«me
 (
gnués_com¥essi⁄_mëhod_t


722 
Æg‹ôhm
);

723 c⁄° *
gnués_kx_gë_«me
 (
gnués_kx_Æg‹ôhm_t
 
Æg‹ôhm
);

724 c⁄° *
gnués_˚πifiˇã_ty≥_gë_«me
 (
gnués_˚πifiˇã_ty≥_t


725 
ty≥
);

726 c⁄° *
gnués_pk_gë_«me
 (
gnués_pk_Æg‹ôhm_t
 
Æg‹ôhm
);

727 c⁄° *
gnués_sign_gë_«me
 (
gnués_sign_Æg‹ôhm_t
 
Æg‹ôhm
);

729 
gnués_mac_Æg‹ôhm_t
 
gnués_mac_gë_id
 (c⁄° *
«me
);

730 
gnués_com¥essi⁄_mëhod_t
 
gnués_com¥essi⁄_gë_id
 (c⁄° *
«me
);

731 
gnués_cùhî_Æg‹ôhm_t
 
gnués_cùhî_gë_id
 (c⁄° *
«me
);

732 
gnués_kx_Æg‹ôhm_t
 
gnués_kx_gë_id
 (c⁄° *
«me
);

733 
gnués_¥Ÿocﬁ_t
 
gnués_¥Ÿocﬁ_gë_id
 (c⁄° *
«me
);

734 
gnués_˚πifiˇã_ty≥_t
 
gnués_˚πifiˇã_ty≥_gë_id
 (c⁄° *
«me
);

735 
gnués_pk_Æg‹ôhm_t
 
gnués_pk_gë_id
 (c⁄° *
«me
);

736 
gnués_sign_Æg‹ôhm_t
 
gnués_sign_gë_id
 (c⁄° *
«me
);

739 c⁄° 
gnués_cùhî_Æg‹ôhm_t
 *
gnués_cùhî_li°
 ();

740 c⁄° 
gnués_mac_Æg‹ôhm_t
 *
gnués_mac_li°
 ();

741 c⁄° 
gnués_com¥essi⁄_mëhod_t
 *
gnués_com¥essi⁄_li°
 ();

742 c⁄° 
gnués_¥Ÿocﬁ_t
 *
gnués_¥Ÿocﬁ_li°
 ();

743 c⁄° 
gnués_˚πifiˇã_ty≥_t
 *
gnués_˚πifiˇã_ty≥_li°
 ();

744 c⁄° 
gnués_kx_Æg‹ôhm_t
 *
gnués_kx_li°
 ();

745 c⁄° 
gnués_pk_Æg‹ôhm_t
 *
gnués_pk_li°
 ();

746 c⁄° 
gnués_sign_Æg‹ôhm_t
 *
gnués_sign_li°
 ();

747 c⁄° *
gnués_cùhî_suôe_öfo
 (
size_t
 
idx
,

748 *
cs_id
,

749 
gnués_kx_Æg‹ôhm_t
 * 
kx
,

750 
gnués_cùhî_Æg‹ôhm_t
 * 
cùhî
,

751 
gnués_mac_Æg‹ôhm_t
 * 
mac
,

752 
gnués_¥Ÿocﬁ_t
 * 
vîsi⁄
);

755 
gnués_îr‹_is_Áèl
 (
îr‹
);

756 
gnués_îr‹_to_Æît
 (
îr
, *
Àvñ
);

758 
gnués_≥º‹
 (
îr‹
);

759 c⁄° *
gnués_°ªº‹
 (
îr‹
);

760 c⁄° *
gnués_°ªº‹_«me
 (
îr‹
);

764 
gnués_h™dshake_£t_¥iv©e_exãnsi⁄s
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

765 
Ælow
);

766 
gnués_h™dshake_des¸ùti⁄_t


767 
gnués_h™dshake_gë_œ°_out
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

768 
gnués_h™dshake_des¸ùti⁄_t


769 
gnués_h™dshake_gë_œ°_ö
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

773 
ssize_t
 
gnués_ªc‹d_£nd
 (
gnués_£ssi⁄_t
 
£ssi⁄
, c⁄° *
d©a
,

774 
size_t
 
sizeofd©a
);

775 
ssize_t
 
gnués_ªc‹d_ªcv
 (
gnués_£ssi⁄_t
 
£ssi⁄
, *
d©a
,

776 
size_t
 
sizeofd©a
);

777 
	#gnués_ªad
 
gnués_ªc‹d_ªcv


	)

778 
	#gnués_wrôe
 
gnués_ªc‹d_£nd


	)

780 
gnués_£ssi⁄_íabÀ_com∑tibûôy_mode
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

782 
gnués_ªc‹d_dißbÀ_∑ddög
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

784 
gnués_ªc‹d_gë_dúe˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

786 
size_t
 
gnués_ªc‹d_gë_max_size
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

787 
ssize_t
 
gnués_ªc‹d_£t_max_size
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
size_t
 
size
);

789 
size_t
 
gnués_ªc‹d_check_≥ndög
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

791 
gnués_¥f
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

792 
size_t
 
œbñ_size
, c⁄° *
œbñ
,

793 
£rvî_øndom_fú°
,

794 
size_t
 
exåa_size
, c⁄° *
exåa
,

795 
size_t
 
outsize
, *
out
);

797 
gnués_¥f_øw
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

798 
size_t
 
œbñ_size
, c⁄° *
œbñ
,

799 
size_t
 
£ed_size
, c⁄° *
£ed
,

800 
size_t
 
outsize
, *
out
);

804 (*
gnués_ext_ªcv_func
Ë(
	tgnués_£ssi⁄_t
 
	t£ssi⁄
,

805 c⁄° *
	td©a
, 
	tsize_t
 
	tÀn
);

806 (*
gnués_ext_£nd_func
Ë(
	tgnués_£ssi⁄_t
 
	t£ssi⁄
,

807 *
	td©a
, 
	tsize_t
 
	tÀn
);

825 
GNUTLS_EXT_ANY
 = 0,

826 
GNUTLS_EXT_APPLICATION
 = 1,

827 
GNUTLS_EXT_TLS
 = 2,

828 
GNUTLS_EXT_MANDATORY
 = 3,

829 
GNUTLS_EXT_NONE
 = 4

830 } 
	tgnués_ext_∑r£_ty≥_t
;

841 
GNUTLS_NAME_DNS
 = 1

842 } 
	tgnués_£rvî_«me_ty≥_t
;

844 
gnués_£rvî_«me_£t
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

845 
gnués_£rvî_«me_ty≥_t
 
ty≥
,

846 c⁄° *
«me
, 
size_t
 
«me_Àngth
);

848 
gnués_£rvî_«me_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

849 *
d©a
, 
size_t
 * 
d©a_Àngth
,

850 *
ty≥
, 
ödx
);

853 
gnués_ß„_ª√gŸüti⁄_°©us
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

863 
GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA
 = 0

864 } 
	tgnués_suµÀmíèl_d©a_f‹m©_ty≥_t
;

867 *
gnués_suµÀmíèl_gë_«me
 (
gnués_suµÀmíèl_d©a_f‹m©_ty≥_t


868 
ty≥
);

871 
gnués_£ssi⁄_tickë_key_gíî©e
 (
gnués_d©um_t
 * 
key
);

872 
gnués_£ssi⁄_tickë_íabÀ_˛õ¡
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

873 
gnués_£ssi⁄_tickë_íabÀ_£rvî
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

874 c⁄° 
gnués_d©um_t
 * 
key
);

878 
gnués_¥i‹ôy_öô
 (
gnués_¥i‹ôy_t
 * 
¥i‹ôy_ˇche
,

879 c⁄° *
¥i‹ôõs
, c⁄° **
îr_pos
);

880 
gnués_¥i‹ôy_deöô
 (
gnués_¥i‹ôy_t
 
¥i‹ôy_ˇche
);

882 
gnués_¥i‹ôy_£t
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

883 
gnués_¥i‹ôy_t
 
¥i‹ôy
);

884 
gnués_¥i‹ôy_£t_dúe˘
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

885 c⁄° *
¥i‹ôõs
,

886 c⁄° **
îr_pos
);

890 
gnués_£t_deÁu…_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

891 
gnués_£t_deÁu…_exp‹t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

894 c⁄° *
gnués_cùhî_suôe_gë_«me
 (
gnués_kx_Æg‹ôhm_t


895 
kx_Æg‹ôhm
,

896 
gnués_cùhî_Æg‹ôhm_t


897 
cùhî_Æg‹ôhm
,

898 
gnués_mac_Æg‹ôhm_t


899 
mac_Æg‹ôhm
);

902 
gnués_¥Ÿocﬁ_t
 
gnués_¥Ÿocﬁ_gë_vîsi⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

904 c⁄° *
gnués_¥Ÿocﬁ_gë_«me
 (
gnués_¥Ÿocﬁ_t
 
vîsi⁄
);

909 
gnués_£ssi⁄_£t_d©a
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

910 c⁄° *
£ssi⁄_d©a
,

911 
size_t
 
£ssi⁄_d©a_size
);

912 
gnués_£ssi⁄_gë_d©a
 (
gnués_£ssi⁄_t
 
£ssi⁄
, *
£ssi⁄_d©a
,

913 
size_t
 * 
£ssi⁄_d©a_size
);

914 
gnués_£ssi⁄_gë_d©a2
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

915 
gnués_d©um_t
 * 
d©a
);

918 
	#GNUTLS_MAX_SESSION_ID
 32

	)

919 
gnués_£ssi⁄_gë_id
 (
gnués_£ssi⁄_t
 
£ssi⁄
, *
£ssi⁄_id
,

920 
size_t
 * 
£ssi⁄_id_size
);

923 
gnués_£ssi⁄_ch™√l_bödög
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

924 
gnués_ch™√l_bödög_t
 
cbty≥
,

925 
gnués_d©um_t
 * 
cb
);

929 
gnués_£ssi⁄_is_ªsumed
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

931 (*
gnués_db_°‹e_func
Ë(*, 
	tgnués_d©um_t
 
	tkey
,

932 
	tgnués_d©um_t
 
	td©a
);

933 (*
gnués_db_ªmove_func
Ë(*, 
	tgnués_d©um_t
 
	tkey
);

934 
gnués_d©um_t
 (*
	tgnués_db_ªå_func
Ë(*, 
	tgnués_d©um_t
 
	tkey
);

936 
gnués_db_£t_ˇche_expú©i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
£c⁄ds
);

938 
gnués_db_ªmove_£ssi⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

939 
gnués_db_£t_ªåõve_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

940 
gnués_db_ªå_func
 
ªå_func
);

941 
gnués_db_£t_ªmove_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

942 
gnués_db_ªmove_func
 
ªm_func
);

943 
gnués_db_£t_°‹e_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

944 
gnués_db_°‹e_func
 
°‹e_func
);

945 
gnués_db_£t_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
, *
±r
);

946 *
gnués_db_gë_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

947 
gnués_db_check_íåy
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

948 
gnués_d©um_t
 
£ssi⁄_íåy
);

950 (*
gnués_h™dshake_po°_˛õ¡_hñlo_func
Ë(
	tgnués_£ssi⁄_t
);

952 
gnués_h™dshake_£t_po°_˛õ¡_hñlo_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

953 
gnués_h™dshake_po°_˛õ¡_hñlo_func


954 
func
);

956 
gnués_h™dshake_£t_max_∑ckë_Àngth
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

957 
size_t
 
max
);

961 c⁄° *
gnués_check_vîsi⁄
 (c⁄° *
ªq_vîsi⁄
);

965 
gnués_¸edítüls_˛ór
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

969 
gnués_¸edítüls_£t
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

970 
gnués_¸edítüls_ty≥_t
 
ty≥
, *
¸ed
);

971 
	#gnués_¸ed_£t
 
gnués_¸edítüls_£t


	)

975 
gnués_˚πifiˇã_¸edítüls_°
;

976 
gnués_˚πifiˇã_¸edítüls_°


977 *
	tgnués_˚πifiˇã_¸edítüls_t
;

978 
gnués_˚πifiˇã_¸edítüls_t


979 
	tgnués_˚πifiˇã_£rvî_¸edítüls
;

980 
gnués_˚πifiˇã_¸edítüls_t


981 
	tgnués_˚πifiˇã_˛õ¡_¸edítüls
;

983 
gnués_™⁄_£rvî_¸edítüls_°


984 *
	tgnués_™⁄_£rvî_¸edítüls_t
;

985 
gnués_™⁄_˛õ¡_¸edítüls_°


986 *
	tgnués_™⁄_˛õ¡_¸edítüls_t
;

988 
gnués_™⁄_‰ì_£rvî_¸edítüls
 (
gnués_™⁄_£rvî_¸edítüls_t


989 
sc
);

991 
gnués_™⁄_Æloˇã_£rvî_¸edítüls
 (
gnués_™⁄_£rvî_¸edítüls_t


992 * 
sc
);

994 
gnués_™⁄_£t_£rvî_dh_∑øms
 (
gnués_™⁄_£rvî_¸edítüls_t
 
ªs
,

995 
gnués_dh_∑øms_t
 
dh_∑øms
);

998 
gnués_™⁄_£t_£rvî_∑øms_fun˘i⁄
 (
gnués_™⁄_£rvî_¸edítüls_t


999 
ªs
,

1000 
gnués_∑øms_fun˘i⁄
 * 
func
);

1003 
gnués_™⁄_‰ì_˛õ¡_¸edítüls
 (
gnués_™⁄_˛õ¡_¸edítüls_t
 
sc
);

1005 
gnués_™⁄_Æloˇã_˛õ¡_¸edítüls
 (
gnués_™⁄_˛õ¡_¸edítüls_t


1006 * 
sc
);

1012 
gnués_˚πifiˇã_‰ì_¸edítüls
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
);

1014 
gnués_˚πifiˇã_Æloˇã_¸edítüls
 (
gnués_˚πifiˇã_¸edítüls_t


1015 * 
ªs
);

1017 
gnués_˚πifiˇã_‰ì_keys
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
);

1018 
gnués_˚πifiˇã_‰ì_ˇs
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
);

1019 
gnués_˚πifiˇã_‰ì_ˇ_«mes
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
);

1020 
gnués_˚πifiˇã_‰ì_¸ls
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
);

1022 
gnués_˚πifiˇã_£t_dh_∑øms
 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
,

1023 
gnués_dh_∑øms_t
 
dh_∑øms
);

1025 
gnués_˚πifiˇã_£t_rß_exp‹t_∑øms
 (
gnués_˚πifiˇã_¸edítüls_t


1026 
ªs
,

1027 
gnués_rß_∑øms_t
 
rß_∑øms
);

1028 
gnués_˚πifiˇã_£t_vîify_Êags
 (
gnués_˚πifiˇã_¸edítüls_t


1029 
ªs
, 
Êags
);

1030 
gnués_˚πifiˇã_£t_vîify_limôs
 (
gnués_˚πifiˇã_¸edítüls_t


1031 
ªs
, 
max_bôs
,

1032 
max_dïth
);

1035 
gnués_˚πifiˇã_£t_x509_åu°_fûe
 (
gnués_˚πifiˇã_¸edítüls_t


1036 
ªs
, c⁄° *
ˇfûe
,

1037 
gnués_x509_¸t_fmt_t
 
ty≥
);

1038 
gnués_˚πifiˇã_£t_x509_åu°_mem
 (
gnués_˚πifiˇã_¸edítüls_t


1039 
ªs
, c⁄° 
gnués_d©um_t
 * 
ˇ
,

1040 
gnués_x509_¸t_fmt_t
 
ty≥
);

1043 
gnués_˚πifiˇã_£t_x509_¸l_fûe
 (
gnués_˚πifiˇã_¸edítüls_t


1044 
ªs
, c⁄° *
¸lfûe
,

1045 
gnués_x509_¸t_fmt_t
 
ty≥
);

1046 
gnués_˚πifiˇã_£t_x509_¸l_mem
 (
gnués_˚πifiˇã_¸edítüls_t


1047 
ªs
, c⁄° 
gnués_d©um_t
 * 
CRL
,

1048 
gnués_x509_¸t_fmt_t
 
ty≥
);

1051 
gnués_˚πifiˇã_£t_x509_key_fûe
 (
gnués_˚πifiˇã_¸edítüls_t


1052 
ªs
, c⁄° *
˚πfûe
,

1053 c⁄° *
keyfûe
,

1054 
gnués_x509_¸t_fmt_t
 
ty≥
);

1055 
gnués_˚πifiˇã_£t_x509_key_mem
 (
gnués_˚πifiˇã_¸edítüls_t


1056 
ªs
, c⁄° 
gnués_d©um_t
 * 
˚π
,

1057 c⁄° 
gnués_d©um_t
 * 
key
,

1058 
gnués_x509_¸t_fmt_t
 
ty≥
);

1060 
gnués_˚πifiˇã_£nd_x509_rdn_£quí˚
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1061 
°©us
);

1063 
gnués_˚πifiˇã_£t_x509_sim∂e_pkcs12_fûe


1064 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
, c⁄° *
pkcs12fûe
,

1065 
gnués_x509_¸t_fmt_t
 
ty≥
, c⁄° *
∑ssw‹d
);

1066 
gnués_˚πifiˇã_£t_x509_sim∂e_pkcs12_mem


1067 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
, c⁄° 
gnués_d©um_t
 * 
p12blob
,

1068 
gnués_x509_¸t_fmt_t
 
ty≥
, c⁄° *
∑ssw‹d
);

1072 
gnués_x509_¥ivkey_öt
;

1073 
gnués_x509_¥ivkey_öt
 *
	tgnués_x509_¥ivkey_t
;

1075 
gnués_x509_¸l_öt
;

1076 
gnués_x509_¸l_öt
 *
	tgnués_x509_¸l_t
;

1078 
gnués_x509_¸t_öt
;

1079 
gnués_x509_¸t_öt
 *
	tgnués_x509_¸t_t
;

1081 
gnués_x509_¸q_öt
;

1082 
gnués_x509_¸q_öt
 *
	tgnués_x509_¸q_t
;

1084 
gnués_›ípgp_keyrög_öt
;

1085 
gnués_›ípgp_keyrög_öt
 *
	tgnués_›ípgp_keyrög_t
;

1088 
gnués_˚πifiˇã_gë_issuî
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
,

1089 
gnués_x509_¸t_t
 
˚π
, gnués_x509_¸t_t* 
issuî
, 
Êags
);

1091 
gnués_˚πifiˇã_£t_x509_key
 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
,

1092 
gnués_x509_¸t_t
 * 
˚π_li°
,

1093 
˚π_li°_size
,

1094 
gnués_x509_¥ivkey_t
 
key
);

1095 
gnués_˚πifiˇã_£t_x509_åu°
 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
,

1096 
gnués_x509_¸t_t
 * 
ˇ_li°
,

1097 
ˇ_li°_size
);

1098 
gnués_˚πifiˇã_£t_x509_¸l
 (
gnués_˚πifiˇã_¸edítüls_t
 
ªs
,

1099 
gnués_x509_¸l_t
 * 
¸l_li°
,

1100 
¸l_li°_size
);

1106 
gnués_globÆ_öô
 ();

1107 
gnués_globÆ_deöô
 ();

1109 
time_t
 (*
	tgnués_time_func
Ë(
	ttime_t
 *
	tt
);

1110 (*
muãx_öô_func
Ë(**
	tmuãx
);

1111 (*
muãx_lock_func
Ë(**
	tmuãx
);

1112 (*
muãx_u∆ock_func
Ë(**
	tmuãx
);

1113 (*
muãx_deöô_func
Ë(**
	tmuãx
);

1115 
gnués_globÆ_£t_muãx
 (
muãx_öô_func
 
öô
, 
muãx_deöô_func
 
deöô
,

1116 
muãx_lock_func
 
lock
, 
muãx_u∆ock_func
 
u∆ock
);

1118 *(*
	tgnués_Æloc_fun˘i⁄
Ë(
	tsize_t
);

1119 *(*
	tgnués_ˇŒoc_fun˘i⁄
Ë(
	tsize_t
, size_t);

1120 (*
gnués_is_£cuª_fun˘i⁄
) (const *);

1121 (*
gnués_‰ì_fun˘i⁄
) (*);

1122 *(*
	tgnués_ªÆloc_fun˘i⁄
Ë(*, 
	tsize_t
);

1125 
gnués_globÆ_£t_mem_fun˘i⁄s
 (
gnués_Æloc_fun˘i⁄
 
Æloc_func
,

1126 
gnués_Æloc_fun˘i⁄
 
£cuª_Æloc_func
,

1127 
gnués_is_£cuª_fun˘i⁄
 
is_£cuª_func
,

1128 
gnués_ªÆloc_fun˘i⁄
 
ªÆloc_func
,

1129 
gnués_‰ì_fun˘i⁄
 
‰ì_func
);

1131 
gnués_globÆ_£t_time_fun˘i⁄
 (
gnués_time_func
);

1134 
gnués_Æloc_fun˘i⁄
 
gnués_mÆloc
;

1135 
gnués_Æloc_fun˘i⁄
 
gnués_£cuª_mÆloc
;

1136 
gnués_ªÆloc_fun˘i⁄
 
gnués_ªÆloc
;

1137 
gnués_ˇŒoc_fun˘i⁄
 
gnués_ˇŒoc
;

1138 
gnués_‰ì_fun˘i⁄
 
gnués_‰ì
;

1140 *(*
gnués_°rdup
) (const *);

1142 (*
	ggnués_log_func
) (, const *);

1143 
gnués_globÆ_£t_log_fun˘i⁄
 (
gnués_log_func
 
log_func
);

1144 
gnués_globÆ_£t_log_Àvñ
 (
Àvñ
);

1148 
gnués_dh_∑øms_öô
 (
gnués_dh_∑øms_t
 * 
dh_∑øms
);

1149 
gnués_dh_∑øms_deöô
 (
gnués_dh_∑øms_t
 
dh_∑øms
);

1150 
gnués_dh_∑øms_imp‹t_øw
 (
gnués_dh_∑øms_t
 
dh_∑øms
,

1151 c⁄° 
gnués_d©um_t
 * 
¥ime
,

1152 c⁄° 
gnués_d©um_t
 * 
gíî©‹
);

1153 
gnués_dh_∑øms_imp‹t_pkcs3
 (
gnués_dh_∑øms_t
 
∑øms
,

1154 c⁄° 
gnués_d©um_t
 * 
pkcs3_∑øms
,

1155 
gnués_x509_¸t_fmt_t
 
f‹m©
);

1156 
gnués_dh_∑øms_gíî©e2
 (
gnués_dh_∑øms_t
 
∑øms
,

1157 
bôs
);

1158 
gnués_dh_∑øms_exp‹t_pkcs3
 (
gnués_dh_∑øms_t
 
∑øms
,

1159 
gnués_x509_¸t_fmt_t
 
f‹m©
,

1160 *
∑øms_d©a
,

1161 
size_t
 * 
∑øms_d©a_size
);

1162 
gnués_dh_∑øms_exp‹t_øw
 (
gnués_dh_∑øms_t
 
∑øms
,

1163 
gnués_d©um_t
 * 
¥ime
,

1164 
gnués_d©um_t
 * 
gíî©‹
,

1165 *
bôs
);

1166 
gnués_dh_∑øms_˝y
 (
gnués_dh_∑øms_t
 
d°
, gnués_dh_∑øms_à
§c
);

1171 
gnués_rß_∑øms_öô
 (
gnués_rß_∑øms_t
 * 
rß_∑øms
);

1172 
gnués_rß_∑øms_deöô
 (
gnués_rß_∑øms_t
 
rß_∑øms
);

1173 
gnués_rß_∑øms_˝y
 (
gnués_rß_∑øms_t
 
d°
,

1174 
gnués_rß_∑øms_t
 
§c
);

1175 
gnués_rß_∑øms_imp‹t_øw
 (
gnués_rß_∑øms_t
 
rß_∑øms
,

1176 c⁄° 
gnués_d©um_t
 * 
m
,

1177 c⁄° 
gnués_d©um_t
 * 
e
,

1178 c⁄° 
gnués_d©um_t
 * 
d
,

1179 c⁄° 
gnués_d©um_t
 * 
p
,

1180 c⁄° 
gnués_d©um_t
 * 
q
,

1181 c⁄° 
gnués_d©um_t
 * 
u
);

1182 
gnués_rß_∑øms_gíî©e2
 (
gnués_rß_∑øms_t
 
∑øms
,

1183 
bôs
);

1184 
gnués_rß_∑øms_exp‹t_øw
 (
gnués_rß_∑øms_t
 
∑øms
,

1185 
gnués_d©um_t
 * 
m
, gnués_d©um_à* 
e
,

1186 
gnués_d©um_t
 * 
d
, gnués_d©um_à* 
p
,

1187 
gnués_d©um_t
 * 
q
, gnués_d©um_à* 
u
,

1188 *
bôs
);

1189 
gnués_rß_∑øms_exp‹t_pkcs1
 (
gnués_rß_∑øms_t
 
∑øms
,

1190 
gnués_x509_¸t_fmt_t
 
f‹m©
,

1191 *
∑øms_d©a
,

1192 
size_t
 * 
∑øms_d©a_size
);

1193 
gnués_rß_∑øms_imp‹t_pkcs1
 (
gnués_rß_∑øms_t
 
∑øms
,

1194 c⁄° 
gnués_d©um_t
 * 
pkcs1_∑øms
,

1195 
gnués_x509_¸t_fmt_t
 
f‹m©
);

1201 *
	giov_ba£
;

1202 
size_t
 
	giov_Àn
;

1203 } 
	tgiovec_t
;

1205 
ssize_t
 (*
	tgnués_puŒ_func
Ë(
	tgnués_å™•‹t_±r_t
, *,

1206 
	tsize_t
);

1207 
ssize_t
 (*
	tgnués_push_func
Ë(
	tgnués_å™•‹t_±r_t
, const *,

1208 
	tsize_t
);

1210 
ssize_t
 (*
	tgnués_vec_push_func
Ë(
	tgnués_å™•‹t_±r_t
,

1211 c⁄° 
	tgiovec_t
 * 
	tiov
, 
	tiov˙t
);

1213 (*
	ggnués_î∫o_func
Ë(
	tgnués_å™•‹t_±r_t
);

1215 
gnués_å™•‹t_£t_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1216 
gnués_å™•‹t_±r_t
 
±r
);

1217 
gnués_å™•‹t_£t_±r2
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1218 
gnués_å™•‹t_±r_t
 
ªcv_±r
,

1219 
gnués_å™•‹t_±r_t
 
£nd_±r
);

1221 
gnués_å™•‹t_±r_t
 
gnués_å™•‹t_gë_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1222 
gnués_å™•‹t_gë_±r2
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1223 
gnués_å™•‹t_±r_t
 * 
ªcv_±r
,

1224 
gnués_å™•‹t_±r_t
 * 
£nd_±r
);

1228 
gnués_å™•‹t_£t_vec_push_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1229 
gnués_vec_push_func
 
vec_func
);

1230 
gnués_å™•‹t_£t_push_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1231 
gnués_push_func
 
push_func
);

1232 
gnués_å™•‹t_£t_puŒ_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1233 
gnués_puŒ_func
 
puŒ_func
);

1235 
gnués_å™•‹t_£t_î∫o_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1236 
gnués_î∫o_func
 
î∫o_func
);

1238 
gnués_å™•‹t_£t_î∫o
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
îr
);

1242 
gnués_£ssi⁄_£t_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
, *
±r
);

1243 *
gnués_£ssi⁄_gë_±r
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1245 
gnués_›ípgp_£nd_˚π
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1246 
gnués_›ípgp_¸t_°©us_t
 
°©us
);

1251 
gnués_fögî¥öt
 (
gnués_dige°_Æg‹ôhm_t
 
Ægo
,

1252 c⁄° 
gnués_d©um_t
 * 
d©a
, *
ªsu…
,

1253 
size_t
 * 
ªsu…_size
);

1259 
gnués_§p_£rvî_¸edítüls_°


1260 *
	tgnués_§p_£rvî_¸edítüls_t
;

1261 
gnués_§p_˛õ¡_¸edítüls_°


1262 *
	tgnués_§p_˛õ¡_¸edítüls_t
;

1265 
gnués_§p_‰ì_˛õ¡_¸edítüls
 (
gnués_§p_˛õ¡_¸edítüls_t
 
sc
);

1267 
gnués_§p_Æloˇã_˛õ¡_¸edítüls
 (
gnués_§p_˛õ¡_¸edítüls_t
 *

1268 
sc
);

1269 
gnués_§p_£t_˛õ¡_¸edítüls
 (
gnués_§p_˛õ¡_¸edítüls_t
 
ªs
,

1270 c⁄° *
u£∫ame
,

1271 c⁄° *
∑ssw‹d
);

1274 
gnués_§p_‰ì_£rvî_¸edítüls
 (
gnués_§p_£rvî_¸edítüls_t
 
sc
);

1276 
gnués_§p_Æloˇã_£rvî_¸edítüls
 (
gnués_§p_£rvî_¸edítüls_t
 *

1277 
sc
);

1278 
gnués_§p_£t_£rvî_¸edítüls_fûe
 (
gnués_§p_£rvî_¸edítüls_t


1279 
ªs
, c⁄° *
∑ssw‹d_fûe
,

1280 c⁄° *
∑ssw‹d_c⁄f_fûe
);

1282 c⁄° *
gnués_§p_£rvî_gë_u£∫ame
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1284 
gnués_§p_£t_¥ime_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1285 
bôs
);

1287 
gnués_§p_vîifõr
 (c⁄° *
u£∫ame
,

1288 c⁄° *
∑ssw‹d
,

1289 c⁄° 
gnués_d©um_t
 * 
ß…
,

1290 c⁄° 
gnués_d©um_t
 * 
gíî©‹
,

1291 c⁄° 
gnués_d©um_t
 * 
¥ime
,

1292 
gnués_d©um_t
 * 
ªs
);

1297 c⁄° 
gnués_d©um_t
 
gnués_§p_2048_group_¥ime
;

1298 c⁄° 
gnués_d©um_t
 
gnués_§p_2048_group_gíî©‹
;

1300 c⁄° 
gnués_d©um_t
 
gnués_§p_1536_group_¥ime
;

1301 c⁄° 
gnués_d©um_t
 
gnués_§p_1536_group_gíî©‹
;

1303 c⁄° 
gnués_d©um_t
 
gnués_§p_1024_group_¥ime
;

1304 c⁄° 
gnués_d©um_t
 
gnués_§p_1024_group_gíî©‹
;

1306 
	tgnués_§p_£rvî_¸edítüls_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

1307 c⁄° *
	tu£∫ame
,

1308 
	tgnués_d©um_t
 * 
	tß…
,

1309 
	tgnués_d©um_t
 *

1310 
	tvîifõr
,

1311 
	tgnués_d©um_t
 *

1312 
	tgíî©‹
,

1313 
	tgnués_d©um_t
 * 
	t¥ime
);

1315 
	ggnués_§p_£t_£rvî_¸edítüls_fun˘i⁄


1316 (
gnués_§p_£rvî_¸edítüls_t
 
	g¸ed
,

1317 
gnués_§p_£rvî_¸edítüls_fun˘i⁄
 * 
	gfunc
);

1319 
	tgnués_§p_˛õ¡_¸edítüls_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

1322 
	ggnués_§p_£t_˛õ¡_¸edítüls_fun˘i⁄


1323 (
gnués_§p_˛õ¡_¸edítüls_t
 
	g¸ed
,

1324 
gnués_§p_˛õ¡_¸edítüls_fun˘i⁄
 * 
	gfunc
);

1326 
gnués_§p_ba£64_ícode
 (c⁄° 
gnués_d©um_t
 * 
d©a
, *
ªsu…
,

1327 
size_t
 * 
ªsu…_size
);

1328 
gnués_§p_ba£64_ícode_Æloc
 (c⁄° 
gnués_d©um_t
 * 
d©a
,

1329 
gnués_d©um_t
 * 
ªsu…
);

1331 
gnués_§p_ba£64_decode
 (c⁄° 
gnués_d©um_t
 * 
b64_d©a
, *
ªsu…
,

1332 
size_t
 * 
ªsu…_size
);

1333 
gnués_§p_ba£64_decode_Æloc
 (c⁄° 
gnués_d©um_t
 * 
b64_d©a
,

1334 
gnués_d©um_t
 * 
ªsu…
);

1337 
gnués_psk_£rvî_¸edítüls_°


1338 *
	tgnués_psk_£rvî_¸edítüls_t
;

1339 
gnués_psk_˛õ¡_¸edítüls_°


1340 *
	tgnués_psk_˛õ¡_¸edítüls_t
;

1349 
	egnués_psk_key_Êags


1351 
	gGNUTLS_PSK_KEY_RAW
 = 0,

1352 
	gGNUTLS_PSK_KEY_HEX


1353 } 
	tgnués_psk_key_Êags
;

1356 
gnués_psk_‰ì_˛õ¡_¸edítüls
 (
gnués_psk_˛õ¡_¸edítüls_t
 
sc
);

1358 
gnués_psk_Æloˇã_˛õ¡_¸edítüls
 (
gnués_psk_˛õ¡_¸edítüls_t
 *

1359 
sc
);

1360 
gnués_psk_£t_˛õ¡_¸edítüls
 (
gnués_psk_˛õ¡_¸edítüls_t
 
ªs
,

1361 c⁄° *
u£∫ame
,

1362 c⁄° 
gnués_d©um_t
 * 
key
,

1363 
gnués_psk_key_Êags
 
f‹m©
);

1366 
gnués_psk_‰ì_£rvî_¸edítüls
 (
gnués_psk_£rvî_¸edítüls_t
 
sc
);

1368 
gnués_psk_Æloˇã_£rvî_¸edítüls
 (
gnués_psk_£rvî_¸edítüls_t
 *

1369 
sc
);

1370 
gnués_psk_£t_£rvî_¸edítüls_fûe
 (
gnués_psk_£rvî_¸edítüls_t


1371 
ªs
, c⁄° *
∑ssw‹d_fûe
);

1374 
gnués_psk_£t_£rvî_¸edítüls_höt
 (
gnués_psk_£rvî_¸edítüls_t


1375 
ªs
, c⁄° *
höt
);

1377 c⁄° *
gnués_psk_£rvî_gë_u£∫ame
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1378 c⁄° *
gnués_psk_˛õ¡_gë_höt
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1380 
	tgnués_psk_£rvî_¸edítüls_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

1381 c⁄° *
	tu£∫ame
,

1382 
	tgnués_d©um_t
 * 
	tkey
);

1384 
	ggnués_psk_£t_£rvî_¸edítüls_fun˘i⁄


1385 (
gnués_psk_£rvî_¸edítüls_t
 
	g¸ed
,

1386 
gnués_psk_£rvî_¸edítüls_fun˘i⁄
 * 
	gfunc
);

1388 
	tgnués_psk_˛õ¡_¸edítüls_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

1389 **
	tu£∫ame
,

1390 
	tgnués_d©um_t
 * 
	tkey
);

1392 
	ggnués_psk_£t_˛õ¡_¸edítüls_fun˘i⁄


1393 (
gnués_psk_˛õ¡_¸edítüls_t
 
	g¸ed
,

1394 
gnués_psk_˛õ¡_¸edítüls_fun˘i⁄
 * 
	gfunc
);

1396 
gnués_hex_ícode
 (c⁄° 
gnués_d©um_t
 * 
d©a
, *
ªsu…
,

1397 
size_t
 * 
ªsu…_size
);

1398 
gnués_hex_decode
 (c⁄° 
gnués_d©um_t
 * 
hex_d©a
, *
ªsu…
,

1399 
size_t
 * 
ªsu…_size
);

1402 
gnués_psk_£t_£rvî_dh_∑øms
 (
gnués_psk_£rvî_¸edítüls_t
 
ªs
,

1403 
gnués_dh_∑øms_t
 
dh_∑øms
);

1406 
gnués_psk_£t_£rvî_∑øms_fun˘i⁄
 (
gnués_psk_£rvî_¸edítüls_t


1407 
ªs
,

1408 
gnués_∑øms_fun˘i⁄
 * 
func
);

1423 
	egnués_x509_subje˘_Æt_«me_t


1425 
	gGNUTLS_SAN_DNSNAME
 = 1,

1426 
	gGNUTLS_SAN_RFC822NAME
 = 2,

1427 
	gGNUTLS_SAN_URI
 = 3,

1428 
	gGNUTLS_SAN_IPADDRESS
 = 4,

1429 
	gGNUTLS_SAN_OTHERNAME
 = 5,

1430 
	gGNUTLS_SAN_DN
 = 6,

1434 
	gGNUTLS_SAN_OTHERNAME_XMPP
 = 1000

1435 } 
	tgnués_x509_subje˘_Æt_«me_t
;

1437 
	ggnués_›ípgp_¸t_öt
;

1438 
gnués_›ípgp_¸t_öt
 *
	tgnués_›ípgp_¸t_t
;

1440 
	ggnués_›ípgp_¥ivkey_öt
;

1441 
gnués_›ípgp_¥ivkey_öt
 *
	tgnués_›ípgp_¥ivkey_t
;

1443 
	ggnués_pkcs11_¥ivkey_°
;

1444 
gnués_pkcs11_¥ivkey_°
 *
	tgnués_pkcs11_¥ivkey_t
;

1448 
	gGNUTLS_PRIVKEY_X509
,

1449 
	gGNUTLS_PRIVKEY_OPENPGP
,

1450 
	gGNUTLS_PRIVKEY_PKCS11


1451 } 
	tgnués_¥ivkey_ty≥_t
;

1453 
	sgnués_ªå2_°


1455 
gnués_˚πifiˇã_ty≥_t
 
	g˚π_ty≥
;

1456 
gnués_¥ivkey_ty≥_t
 
	gkey_ty≥
;

1460 
gnués_x509_¸t_t
 *
	gx509
;

1461 
gnués_›ípgp_¸t_t
 
	gpgp
;

1462 } 
	g˚π
;

1463 
	gn˚πs
;

1467 
gnués_x509_¥ivkey_t
 
	gx509
;

1468 
gnués_›ípgp_¥ivkey_t
 
	gpgp
;

1469 
gnués_pkcs11_¥ivkey_t
 
	gpkcs11
;

1470 } 
	gkey
;

1472 
	gdeöô_Æl
;

1473 } 
	tgnués_ªå2_°
;

1479 
gnués_¸edítüls_ty≥_t
 
gnués_auth_gë_ty≥
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1480 
gnués_¸edítüls_ty≥_t


1481 
gnués_auth_£rvî_gë_ty≥
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1482 
gnués_¸edítüls_ty≥_t


1483 
gnués_auth_˛õ¡_gë_ty≥
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1487 
gnués_dh_£t_¥ime_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
bôs
);

1488 
gnués_dh_gë_£¸ë_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1489 
gnués_dh_gë_≥îs_public_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1490 
gnués_dh_gë_¥ime_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1492 
gnués_dh_gë_group
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
gnués_d©um_t
 * 
øw_gí
,

1493 
gnués_d©um_t
 * 
øw_¥ime
);

1494 
gnués_dh_gë_pubkey
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1495 
gnués_d©um_t
 * 
øw_key
);

1498 
gnués_rß_exp‹t_gë_pubkey
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1499 
gnués_d©um_t
 * 
exp⁄ít
,

1500 
gnués_d©um_t
 * 
modulus
);

1501 
gnués_rß_exp‹t_gë_modulus_bôs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1509 
	tgnués_˚πifiˇã_ªåõve_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

1511 
	tgnués_d©um_t
 *

1512 
	tªq_ˇ_rdn
,

1513 
	tƒeqs
,

1515 
	tgnués_pk_Æg‹ôhm_t


1516 * 
	tpk_Ægos
,

1518 
	tpk_Ægos_Àngth
,

1519 
	tgnués_ªå2_°
 *);

1522 
	ggnués_˚πifiˇã_£t_ªåõve_fun˘i⁄


1523 (
gnués_˚πifiˇã_¸edítüls_t
 
	g¸ed
,

1524 
gnués_˚πifiˇã_ªåõve_fun˘i⁄
 * 
	gfunc
);

1526 
	tgnués_˚πifiˇã_vîify_fun˘i⁄
 (
	tgnués_£ssi⁄_t
);

1528 
gnués_˚πifiˇã_£t_vîify_fun˘i⁄
 (
gnués_˚πifiˇã_¸edítüls_t


1529 
¸ed
,

1530 
gnués_˚πifiˇã_vîify_fun˘i⁄


1531 * 
func
);

1534 
gnués_˚πifiˇã_£rvî_£t_ªque°
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1535 
gnués_˚πifiˇã_ªque°_t
 
ªq
);

1539 c⁄° 
gnués_d©um_t
 *
gnués_˚πifiˇã_gë_≥îs
 (
gnués_£ssi⁄_t


1540 
£ssi⁄
,

1542 *
li°_size
);

1543 c⁄° 
gnués_d©um_t
 *
gnués_˚πifiˇã_gë_ours
 (
gnués_£ssi⁄_t


1544 
£ssi⁄
);

1546 
time_t
 
gnués_˚πifiˇã_a˘iv©i⁄_time_≥îs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1547 
time_t
 
gnués_˚πifiˇã_expú©i⁄_time_≥îs
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1549 
gnués_˚πifiˇã_˛õ¡_gë_ªque°_°©us
 (
gnués_£ssi⁄_t
 
£ssi⁄
);

1550 
gnués_˚πifiˇã_vîify_≥îs2
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

1551 *
°©us
);

1553 
gnués_≥m_ba£64_ícode
 (c⁄° *
msg
, c⁄° 
gnués_d©um_t
 * 
d©a
,

1554 *
ªsu…
, 
size_t
 * 
ªsu…_size
);

1555 
gnués_≥m_ba£64_decode
 (c⁄° *
hódî
,

1556 c⁄° 
gnués_d©um_t
 * 
b64_d©a
,

1557 *
ªsu…
, 
size_t
 * 
ªsu…_size
);

1559 
gnués_≥m_ba£64_ícode_Æloc
 (c⁄° *
msg
,

1560 c⁄° 
gnués_d©um_t
 * 
d©a
,

1561 
gnués_d©um_t
 * 
ªsu…
);

1562 
gnués_≥m_ba£64_decode_Æloc
 (c⁄° *
hódî
,

1563 c⁄° 
gnués_d©um_t
 * 
b64_d©a
,

1564 
gnués_d©um_t
 * 
ªsu…
);

1570 
	#GNUTLS_KEY_DIGITAL_SIGNATURE
 128

	)

1571 
	#GNUTLS_KEY_NON_REPUDIATION
 64

	)

1573 
	#GNUTLS_KEY_KEY_ENCIPHERMENT
 32

	)

1574 
	#GNUTLS_KEY_DATA_ENCIPHERMENT
 16

	)

1575 
	#GNUTLS_KEY_KEY_AGREEMENT
 8

	)

1576 
	#GNUTLS_KEY_KEY_CERT_SIGN
 4

	)

1577 
	#GNUTLS_KEY_CRL_SIGN
 2

	)

1578 
	#GNUTLS_KEY_ENCIPHER_ONLY
 1

	)

1579 
	#GNUTLS_KEY_DECIPHER_ONLY
 32768

	)

1582 
gnués_˚πifiˇã_£t_∑øms_fun˘i⁄
 (
gnués_˚πifiˇã_¸edítüls_t


1583 
ªs
,

1584 
gnués_∑øms_fun˘i⁄
 * 
func
);

1585 
gnués_™⁄_£t_∑øms_fun˘i⁄
 (
gnués_™⁄_£rvî_¸edítüls_t
 
ªs
,

1586 
gnués_∑øms_fun˘i⁄
 * 
func
);

1587 
gnués_psk_£t_∑øms_fun˘i⁄
 (
gnués_psk_£rvî_¸edítüls_t
 
ªs
,

1588 
gnués_∑øms_fun˘i⁄
 * 
func
);

1590 
gnués_hex2bö
 (c⁄° *
hex_d©a
, 
size_t
 
hex_size
,

1591 *
bö_d©a
, 
size_t
 * 
bö_size
);

1597 
	#GNUTLS_E_SUCCESS
 0

	)

1598 
	#GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM
 -3

	)

1599 
	#GNUTLS_E_UNKNOWN_CIPHER_TYPE
 -6

	)

1600 
	#GNUTLS_E_LARGE_PACKET
 -7

	)

1601 
	#GNUTLS_E_UNSUPPORTED_VERSION_PACKET
 -8

	)

1602 
	#GNUTLS_E_UNEXPECTED_PACKET_LENGTH
 -9

	)

1603 
	#GNUTLS_E_INVALID_SESSION
 -10

	)

1604 
	#GNUTLS_E_FATAL_ALERT_RECEIVED
 -12

	)

1605 
	#GNUTLS_E_UNEXPECTED_PACKET
 -15

	)

1606 
	#GNUTLS_E_WARNING_ALERT_RECEIVED
 -16

	)

1607 
	#GNUTLS_E_ERROR_IN_FINISHED_PACKET
 -18

	)

1608 
	#GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET
 -19

	)

1609 
	#GNUTLS_E_UNKNOWN_CIPHER_SUITE
 -21

	)

1610 
	#GNUTLS_E_UNWANTED_ALGORITHM
 -22

	)

1611 
	#GNUTLS_E_MPI_SCAN_FAILED
 -23

	)

1612 
	#GNUTLS_E_DECRYPTION_FAILED
 -24

	)

1613 
	#GNUTLS_E_MEMORY_ERROR
 -25

	)

1614 
	#GNUTLS_E_DECOMPRESSION_FAILED
 -26

	)

1615 
	#GNUTLS_E_COMPRESSION_FAILED
 -27

	)

1616 
	#GNUTLS_E_AGAIN
 -28

	)

1617 
	#GNUTLS_E_EXPIRED
 -29

	)

1618 
	#GNUTLS_E_DB_ERROR
 -30

	)

1619 
	#GNUTLS_E_SRP_PWD_ERROR
 -31

	)

1620 
	#GNUTLS_E_INSUFFICIENT_CREDENTIALS
 -32

	)

1621 
	#GNUTLS_E_INSUFICIENT_CREDENTIALS
 
GNUTLS_E_INSUFFICIENT_CREDENTIALS


	)

1622 
	#GNUTLS_E_INSUFFICIENT_CRED
 
GNUTLS_E_INSUFFICIENT_CREDENTIALS


	)

1623 
	#GNUTLS_E_INSUFICIENT_CRED
 
GNUTLS_E_INSUFFICIENT_CREDENTIALS


	)

1625 
	#GNUTLS_E_HASH_FAILED
 -33

	)

1626 
	#GNUTLS_E_BASE64_DECODING_ERROR
 -34

	)

1628 
	#GNUTLS_E_MPI_PRINT_FAILED
 -35

	)

1629 
	#GNUTLS_E_REHANDSHAKE
 -37

	)

1630 
	#GNUTLS_E_GOT_APPLICATION_DATA
 -38

	)

1631 
	#GNUTLS_E_RECORD_LIMIT_REACHED
 -39

	)

1632 
	#GNUTLS_E_ENCRYPTION_FAILED
 -40

	)

1634 
	#GNUTLS_E_PK_ENCRYPTION_FAILED
 -44

	)

1635 
	#GNUTLS_E_PK_DECRYPTION_FAILED
 -45

	)

1636 
	#GNUTLS_E_PK_SIGN_FAILED
 -46

	)

1637 
	#GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION
 -47

	)

1638 
	#GNUTLS_E_KEY_USAGE_VIOLATION
 -48

	)

1639 
	#GNUTLS_E_NO_CERTIFICATE_FOUND
 -49

	)

1640 
	#GNUTLS_E_INVALID_REQUEST
 -50

	)

1641 
	#GNUTLS_E_SHORT_MEMORY_BUFFER
 -51

	)

1642 
	#GNUTLS_E_INTERRUPTED
 -52

	)

1643 
	#GNUTLS_E_PUSH_ERROR
 -53

	)

1644 
	#GNUTLS_E_PULL_ERROR
 -54

	)

1645 
	#GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER
 -55

	)

1646 
	#GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE
 -56

	)

1647 
	#GNUTLS_E_PKCS1_WRONG_PAD
 -57

	)

1648 
	#GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION
 -58

	)

1649 
	#GNUTLS_E_INTERNAL_ERROR
 -59

	)

1650 
	#GNUTLS_E_DH_PRIME_UNACCEPTABLE
 -63

	)

1651 
	#GNUTLS_E_FILE_ERROR
 -64

	)

1652 
	#GNUTLS_E_TOO_MANY_EMPTY_PACKETS
 -78

	)

1653 
	#GNUTLS_E_UNKNOWN_PK_ALGORITHM
 -80

	)

1659 
	#GNUTLS_E_INIT_LIBEXTRA
 -82

	)

1660 
	#GNUTLS_E_LIBRARY_VERSION_MISMATCH
 -83

	)

1666 
	#GNUTLS_E_NO_TEMPORARY_RSA_PARAMS
 -84

	)

1668 
	#GNUTLS_E_LZO_INIT_FAILED
 -85

	)

1669 
	#GNUTLS_E_NO_COMPRESSION_ALGORITHMS
 -86

	)

1670 
	#GNUTLS_E_NO_CIPHER_SUITES
 -87

	)

1672 
	#GNUTLS_E_OPENPGP_GETKEY_FAILED
 -88

	)

1673 
	#GNUTLS_E_PK_SIG_VERIFY_FAILED
 -89

	)

1675 
	#GNUTLS_E_ILLEGAL_SRP_USERNAME
 -90

	)

1676 
	#GNUTLS_E_SRP_PWD_PARSING_ERROR
 -91

	)

1677 
	#GNUTLS_E_NO_TEMPORARY_DH_PARAMS
 -93

	)

1681 
	#GNUTLS_E_ASN1_ELEMENT_NOT_FOUND
 -67

	)

1682 
	#GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND
 -68

	)

1683 
	#GNUTLS_E_ASN1_DER_ERROR
 -69

	)

1684 
	#GNUTLS_E_ASN1_VALUE_NOT_FOUND
 -70

	)

1685 
	#GNUTLS_E_ASN1_GENERIC_ERROR
 -71

	)

1686 
	#GNUTLS_E_ASN1_VALUE_NOT_VALID
 -72

	)

1687 
	#GNUTLS_E_ASN1_TAG_ERROR
 -73

	)

1688 
	#GNUTLS_E_ASN1_TAG_IMPLICIT
 -74

	)

1689 
	#GNUTLS_E_ASN1_TYPE_ANY_ERROR
 -75

	)

1690 
	#GNUTLS_E_ASN1_SYNTAX_ERROR
 -76

	)

1691 
	#GNUTLS_E_ASN1_DER_OVERFLOW
 -77

	)

1692 
	#GNUTLS_E_OPENPGP_UID_REVOKED
 -79

	)

1693 
	#GNUTLS_E_CERTIFICATE_ERROR
 -43

	)

1694 
	#GNUTLS_E_X509_CERTIFICATE_ERROR
 
GNUTLS_E_CERTIFICATE_ERROR


	)

1695 
	#GNUTLS_E_CERTIFICATE_KEY_MISMATCH
 -60

	)

1696 
	#GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE
 -61

	)

1697 
	#GNUTLS_E_X509_UNKNOWN_SAN
 -62

	)

1698 
	#GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED
 -94

	)

1699 
	#GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE
 -95

	)

1700 
	#GNUTLS_E_UNKNOWN_HASH_ALGORITHM
 -96

	)

1701 
	#GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE
 -97

	)

1702 
	#GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE
 -98

	)

1703 
	#GNUTLS_E_INVALID_PASSWORD
 -99

	)

1704 
	#GNUTLS_E_MAC_VERIFY_FAILED
 -100

	)

1705 
	#GNUTLS_E_CONSTRAINT_ERROR
 -101

	)

1707 
	#GNUTLS_E_WARNING_IA_IPHF_RECEIVED
 -102

	)

1708 
	#GNUTLS_E_WARNING_IA_FPHF_RECEIVED
 -103

	)

1710 
	#GNUTLS_E_IA_VERIFY_FAILED
 -104

	)

1711 
	#GNUTLS_E_UNKNOWN_ALGORITHM
 -105

	)

1712 
	#GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM
 -106

	)

1713 
	#GNUTLS_E_SAFE_RENEGOTIATION_FAILED
 -107

	)

1714 
	#GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED
 -108

	)

1715 
	#GNUTLS_E_UNKNOWN_SRP_USERNAME
 -109

	)

1717 
	#GNUTLS_E_BASE64_ENCODING_ERROR
 -201

	)

1718 
	#GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY
 -202

	)

1719 
	#GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY
 -202

	)

1720 
	#GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY
 -203

	)

1722 
	#GNUTLS_E_OPENPGP_KEYRING_ERROR
 -204

	)

1723 
	#GNUTLS_E_X509_UNSUPPORTED_OID
 -205

	)

1725 
	#GNUTLS_E_RANDOM_FAILED
 -206

	)

1726 
	#GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR
 -207

	)

1728 
	#GNUTLS_E_OPENPGP_SUBKEY_ERROR
 -208

	)

1730 
	#GNUTLS_E_CRYPTO_ALREADY_REGISTERED
 -209

	)

1732 
	#GNUTLS_E_HANDSHAKE_TOO_LARGE
 -210

	)

1734 
	#GNUTLS_E_CRYPTODEV_IOCTL_ERROR
 -211

	)

1735 
	#GNUTLS_E_CRYPTODEV_DEVICE_ERROR
 -212

	)

1737 
	#GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE
 -213

	)

1738 
	#GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR
 -215

	)

1739 
	#GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL
 -216

	)

1742 
	#GNUTLS_E_PKCS11_ERROR
 -300

	)

1743 
	#GNUTLS_E_PKCS11_LOAD_ERROR
 -301

	)

1744 
	#GNUTLS_E_PARSING_ERROR
 -302

	)

1745 
	#GNUTLS_E_PKCS11_PIN_ERROR
 -303

	)

1747 
	#GNUTLS_E_PKCS11_SLOT_ERROR
 -305

	)

1748 
	#GNUTLS_E_LOCKING_ERROR
 -306

	)

1749 
	#GNUTLS_E_PKCS11_ATTRIBUTE_ERROR
 -307

	)

1750 
	#GNUTLS_E_PKCS11_DEVICE_ERROR
 -308

	)

1751 
	#GNUTLS_E_PKCS11_DATA_ERROR
 -309

	)

1752 
	#GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR
 -310

	)

1753 
	#GNUTLS_E_PKCS11_KEY_ERROR
 -311

	)

1754 
	#GNUTLS_E_PKCS11_PIN_EXPIRED
 -312

	)

1755 
	#GNUTLS_E_PKCS11_PIN_LOCKED
 -313

	)

1756 
	#GNUTLS_E_PKCS11_SESSION_ERROR
 -314

	)

1757 
	#GNUTLS_E_PKCS11_SIGNATURE_ERROR
 -315

	)

1758 
	#GNUTLS_E_PKCS11_TOKEN_ERROR
 -316

	)

1759 
	#GNUTLS_E_PKCS11_USER_ERROR
 -317

	)

1761 
	#GNUTLS_E_CRYPTO_INIT_FAILED
 -318

	)

1762 
	#GNUTLS_E_CERTIFICATE_LIST_UNSORTED
 -324

	)

1764 
	#GNUTLS_E_UNIMPLEMENTED_FEATURE
 -1250

	)

1768 
	#GNUTLS_E_APPLICATION_ERROR_MAX
 -65000

	)

1769 
	#GNUTLS_E_APPLICATION_ERROR_MIN
 -65500

	)

1771 #ifde‡
__˝lu•lus


1775 
	~<gnués/com∑t.h
>

	@/usr/include/gnutls/x509.h

30 #i‚de‡
GNUTLS_X509_H


31 
	#GNUTLS_X509_H


	)

33 
	~<gnués/gnués.h
>

35 #ifde‡
__˝lu•lus


43 
	#GNUTLS_OID_X520_COUNTRY_NAME
 "2.5.4.6"

	)

44 
	#GNUTLS_OID_X520_ORGANIZATION_NAME
 "2.5.4.10"

	)

45 
	#GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME
 "2.5.4.11"

	)

46 
	#GNUTLS_OID_X520_COMMON_NAME
 "2.5.4.3"

	)

47 
	#GNUTLS_OID_X520_LOCALITY_NAME
 "2.5.4.7"

	)

48 
	#GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME
 "2.5.4.8"

	)

50 
	#GNUTLS_OID_X520_INITIALS
 "2.5.4.43"

	)

51 
	#GNUTLS_OID_X520_GENERATION_QUALIFIER
 "2.5.4.44"

	)

52 
	#GNUTLS_OID_X520_SURNAME
 "2.5.4.4"

	)

53 
	#GNUTLS_OID_X520_GIVEN_NAME
 "2.5.4.42"

	)

54 
	#GNUTLS_OID_X520_TITLE
 "2.5.4.12"

	)

55 
	#GNUTLS_OID_X520_DN_QUALIFIER
 "2.5.4.46"

	)

56 
	#GNUTLS_OID_X520_PSEUDONYM
 "2.5.4.65"

	)

57 
	#GNUTLS_OID_X520_POSTALCODE
 "2.5.4.17"

	)

58 
	#GNUTLS_OID_X520_NAME
 "2.5.4.41"

	)

60 
	#GNUTLS_OID_LDAP_DC
 "0.9.2342.19200300.100.1.25"

	)

61 
	#GNUTLS_OID_LDAP_UID
 "0.9.2342.19200300.100.1.1"

	)

65 
	#GNUTLS_OID_PKCS9_EMAIL
 "1.2.840.113549.1.9.1"

	)

67 
	#GNUTLS_OID_PKIX_DATE_OF_BIRTH
 "1.3.6.1.5.5.7.9.1"

	)

68 
	#GNUTLS_OID_PKIX_PLACE_OF_BIRTH
 "1.3.6.1.5.5.7.9.2"

	)

69 
	#GNUTLS_OID_PKIX_GENDER
 "1.3.6.1.5.5.7.9.3"

	)

70 
	#GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP
 "1.3.6.1.5.5.7.9.4"

	)

71 
	#GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE
 "1.3.6.1.5.5.7.9.5"

	)

75 
	#GNUTLS_KP_TLS_WWW_SERVER
 "1.3.6.1.5.5.7.3.1"

	)

76 
	#GNUTLS_KP_TLS_WWW_CLIENT
 "1.3.6.1.5.5.7.3.2"

	)

77 
	#GNUTLS_KP_CODE_SIGNING
 "1.3.6.1.5.5.7.3.3"

	)

78 
	#GNUTLS_KP_EMAIL_PROTECTION
 "1.3.6.1.5.5.7.3.4"

	)

79 
	#GNUTLS_KP_TIME_STAMPING
 "1.3.6.1.5.5.7.3.8"

	)

80 
	#GNUTLS_KP_OCSP_SIGNING
 "1.3.6.1.5.5.7.3.9"

	)

81 
	#GNUTLS_KP_IPSEC_IKE
 "1.3.6.1.5.5.7.3.17"

	)

82 
	#GNUTLS_KP_ANY
 "2.5.29.37.0"

	)

84 
	#GNUTLS_FSAN_SET
 0

	)

85 
	#GNUTLS_FSAN_APPEND
 1

	)

101 
	egnués_˚πifiˇã_imp‹t_Êags


103 
GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED
 = 1,

104 
GNUTLS_X509_CRT_LIST_FAIL_IF_UNSORTED
 = 2

105 } 
	tgnués_˚πifiˇã_imp‹t_Êags
;

107 
gnués_x509_¸t_öô
 (
gnués_x509_¸t_t
 * 
˚π
);

108 
gnués_x509_¸t_deöô
 (
gnués_x509_¸t_t
 
˚π
);

109 
gnués_x509_¸t_imp‹t
 (
gnués_x509_¸t_t
 
˚π
,

110 c⁄° 
gnués_d©um_t
 * 
d©a
,

111 
gnués_x509_¸t_fmt_t
 
f‹m©
);

112 
gnués_x509_¸t_li°_imp‹t
 (
gnués_x509_¸t_t
 * 
˚πs
,

113 *
˚π_max
,

114 c⁄° 
gnués_d©um_t
 * 
d©a
,

115 
gnués_x509_¸t_fmt_t
 
f‹m©
,

116 
Êags
);

117 
gnués_x509_¸t_exp‹t
 (
gnués_x509_¸t_t
 
˚π
,

118 
gnués_x509_¸t_fmt_t
 
f‹m©
,

119 *
ouçut_d©a
, 
size_t
 * 
ouçut_d©a_size
);

120 
gnués_x509_¸t_gë_issuî_dn
 (
gnués_x509_¸t_t
 
˚π
, *
buf
,

121 
size_t
 * 
sizeof_buf
);

122 
gnués_x509_¸t_gë_issuî_dn_oid
 (
gnués_x509_¸t_t
 
˚π
, 
ödx
,

123 *
oid
, 
size_t
 * 
sizeof_oid
);

124 
gnués_x509_¸t_gë_issuî_dn_by_oid
 (
gnués_x509_¸t_t
 
˚π
,

125 c⁄° *
oid
, 
ödx
,

126 
øw_Êag
,

127 *
buf
, 
size_t
 * 
sizeof_buf
);

128 
gnués_x509_¸t_gë_dn
 (
gnués_x509_¸t_t
 
˚π
, *
buf
,

129 
size_t
 * 
sizeof_buf
);

130 
gnués_x509_¸t_gë_dn_oid
 (
gnués_x509_¸t_t
 
˚π
, 
ödx
,

131 *
oid
, 
size_t
 * 
sizeof_oid
);

132 
gnués_x509_¸t_gë_dn_by_oid
 (
gnués_x509_¸t_t
 
˚π
,

133 c⁄° *
oid
, 
ödx
,

134 
øw_Êag
, *
buf
,

135 
size_t
 * 
sizeof_buf
);

136 
gnués_x509_¸t_check_ho°«me
 (
gnués_x509_¸t_t
 
˚π
,

137 c⁄° *
ho°«me
);

139 
gnués_x509_¸t_gë_sig«tuª_Æg‹ôhm
 (
gnués_x509_¸t_t
 
˚π
);

140 
gnués_x509_¸t_gë_sig«tuª
 (
gnués_x509_¸t_t
 
˚π
,

141 *
sig
, 
size_t
 * 
sizeof_sig
);

142 
gnués_x509_¸t_gë_vîsi⁄
 (
gnués_x509_¸t_t
 
˚π
);

143 
gnués_x509_¸t_gë_key_id
 (
gnués_x509_¸t_t
 
¸t
,

144 
Êags
,

145 *
ouçut_d©a
,

146 
size_t
 * 
ouçut_d©a_size
);

148 
gnués_x509_¸t_£t_auth‹ôy_key_id
 (
gnués_x509_¸t_t
 
˚π
,

149 c⁄° *
id
, 
size_t
 
id_size
);

150 
gnués_x509_¸t_gë_auth‹ôy_key_id
 (
gnués_x509_¸t_t
 
˚π
,

151 *
ªt
, 
size_t
 * 
ªt_size
,

152 *
¸ôiˇl
);

154 
gnués_x509_¸t_gë_subje˘_key_id
 (
gnués_x509_¸t_t
 
˚π
,

155 *
ªt
, 
size_t
 * 
ªt_size
,

156 *
¸ôiˇl
);

158 
gnués_x509_¸t_gë_subje˘_unique_id
 (
gnués_x509_¸t_t
 
¸t
, *
buf
,

159 
size_t
 * 
sizeof_buf
);

161 
gnués_x509_¸t_gë_issuî_unique_id
 (
gnués_x509_¸t_t
 
¸t
, *
buf
,

162 
size_t
 * 
sizeof_buf
);

164 
	#GNUTLS_CRL_REASON_UNUSED
 128

	)

165 
	#GNUTLS_CRL_REASON_KEY_COMPROMISE
 64

	)

166 
	#GNUTLS_CRL_REASON_CA_COMPROMISE
 32

	)

167 
	#GNUTLS_CRL_REASON_AFFILIATION_CHANGED
 16

	)

168 
	#GNUTLS_CRL_REASON_SUPERSEDED
 8

	)

169 
	#GNUTLS_CRL_REASON_SUPERSEEDED
 
GNUTLS_CRL_REASON_SUPERSEDED


	)

170 
	#GNUTLS_CRL_REASON_CESSATION_OF_OPERATION
 4

	)

171 
	#GNUTLS_CRL_REASON_CERTIFICATE_HOLD
 2

	)

172 
	#GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN
 1

	)

173 
	#GNUTLS_CRL_REASON_AA_COMPROMISE
 32768

	)

175 
gnués_x509_¸t_gë_¸l_di°_poöts
 (
gnués_x509_¸t_t
 
˚π
,

176 
£q
, *
ªt
,

177 
size_t
 * 
ªt_size
,

178 *
ªas⁄_Êags
,

179 *
¸ôiˇl
);

180 
gnués_x509_¸t_£t_¸l_di°_poöts2
 (
gnués_x509_¸t_t
 
¸t
,

181 
gnués_x509_subje˘_Æt_«me_t


182 
ty≥
, c⁄° *
d©a
,

183 
d©a_size
,

184 
ªas⁄_Êags
);

185 
gnués_x509_¸t_£t_¸l_di°_poöts
 (
gnués_x509_¸t_t
 
¸t
,

186 
gnués_x509_subje˘_Æt_«me_t


187 
ty≥
, c⁄° *
d©a_°rög
,

188 
ªas⁄_Êags
);

189 
gnués_x509_¸t_˝y_¸l_di°_poöts
 (
gnués_x509_¸t_t
 
d°
,

190 
gnués_x509_¸t_t
 
§c
);

192 
time_t
 
gnués_x509_¸t_gë_a˘iv©i⁄_time
 (
gnués_x509_¸t_t
 
˚π
);

193 
time_t
 
gnués_x509_¸t_gë_expú©i⁄_time
 (
gnués_x509_¸t_t
 
˚π
);

194 
gnués_x509_¸t_gë_£rül
 (
gnués_x509_¸t_t
 
˚π
, *
ªsu…
,

195 
size_t
 * 
ªsu…_size
);

197 
gnués_x509_¸t_gë_pk_Æg‹ôhm
 (
gnués_x509_¸t_t
 
˚π
,

198 *
bôs
);

199 
gnués_x509_¸t_gë_pk_rß_øw
 (
gnués_x509_¸t_t
 
¸t
,

200 
gnués_d©um_t
 * 
m
, gnués_d©um_à* 
e
);

201 
gnués_x509_¸t_gë_pk_dß_øw
 (
gnués_x509_¸t_t
 
¸t
,

202 
gnués_d©um_t
 * 
p
,

203 
gnués_d©um_t
 * 
q
,

204 
gnués_d©um_t
 * 
g
, gnués_d©um_à* 
y
);

206 
gnués_x509_¸t_gë_subje˘_Æt_«me
 (
gnués_x509_¸t_t
 
˚π
,

207 
£q
, *
ªt
,

208 
size_t
 * 
ªt_size
,

209 *
¸ôiˇl
);

210 
gnués_x509_¸t_gë_subje˘_Æt_«me2
 (
gnués_x509_¸t_t
 
˚π
,

211 
£q
, *
ªt
,

212 
size_t
 * 
ªt_size
,

213 *
ªt_ty≥
,

214 *
¸ôiˇl
);

216 
gnués_x509_¸t_gë_subje˘_Æt_Ÿhî«me_oid
 (
gnués_x509_¸t_t
 
˚π
,

217 
£q
,

218 *
ªt
,

219 
size_t
 * 
ªt_size
);

221 
gnués_x509_¸t_gë_issuî_Æt_«me
 (
gnués_x509_¸t_t
 
˚π
,

222 
£q
, *
ªt
,

223 
size_t
 * 
ªt_size
,

224 *
¸ôiˇl
);

225 
gnués_x509_¸t_gë_issuî_Æt_«me2
 (
gnués_x509_¸t_t
 
˚π
,

226 
£q
, *
ªt
,

227 
size_t
 * 
ªt_size
,

228 *
ªt_ty≥
,

229 *
¸ôiˇl
);

231 
gnués_x509_¸t_gë_issuî_Æt_Ÿhî«me_oid
 (
gnués_x509_¸t_t
 
˚π
,

232 
£q
,

233 *
ªt
,

234 
size_t
 * 
ªt_size
);

236 
gnués_x509_¸t_gë_ˇ_°©us
 (
gnués_x509_¸t_t
 
˚π
,

237 *
¸ôiˇl
);

238 
gnués_x509_¸t_gë_basic_c⁄°øöts
 (
gnués_x509_¸t_t
 
˚π
,

239 *
¸ôiˇl
,

240 *
ˇ
, *
∑thÀn
);

245 
gnués_x509_¸t_gë_key_ußge
 (
gnués_x509_¸t_t
 
˚π
,

246 *
key_ußge
,

247 *
¸ôiˇl
);

248 
gnués_x509_¸t_£t_key_ußge
 (
gnués_x509_¸t_t
 
¸t
,

249 
ußge
);

251 
gnués_x509_¸t_gë_¥oxy
 (
gnués_x509_¸t_t
 
˚π
,

252 *
¸ôiˇl
,

253 *
∑thÀn
,

254 **
pﬁicyL™guage
,

255 **
pﬁicy
, 
size_t
 * 
sizeof_pﬁicy
);

257 
gnués_x509_dn_oid_known
 (c⁄° *
oid
);

260 
gnués_x509_¸t_gë_exãnsi⁄_oid
 (
gnués_x509_¸t_t
 
˚π
, 
ödx
,

261 *
oid
, 
size_t
 * 
sizeof_oid
);

262 
gnués_x509_¸t_gë_exãnsi⁄_by_oid
 (
gnués_x509_¸t_t
 
˚π
,

263 c⁄° *
oid
, 
ödx
,

264 *
buf
,

265 
size_t
 * 
sizeof_buf
,

266 *
¸ôiˇl
);

269 
gnués_x509_¸t_gë_exãnsi⁄_öfo
 (
gnués_x509_¸t_t
 
˚π
, 
ödx
,

270 *
oid
, 
size_t
 * 
sizeof_oid
,

271 *
¸ôiˇl
);

272 
gnués_x509_¸t_gë_exãnsi⁄_d©a
 (
gnués_x509_¸t_t
 
˚π
, 
ödx
,

273 *
d©a
, 
size_t
 * 
sizeof_d©a
);

275 
gnués_x509_¸t_£t_exãnsi⁄_by_oid
 (
gnués_x509_¸t_t
 
¸t
,

276 c⁄° *
oid
,

277 c⁄° *
buf
,

278 
size_t
 
sizeof_buf
,

279 
¸ôiˇl
);

283 
gnués_x509_¸t_£t_dn_by_oid
 (
gnués_x509_¸t_t
 
¸t
,

284 c⁄° *
oid
,

285 
øw_Êag
,

286 c⁄° *
«me
,

287 
sizeof_«me
);

288 
gnués_x509_¸t_£t_issuî_dn_by_oid
 (
gnués_x509_¸t_t
 
¸t
,

289 c⁄° *
oid
,

290 
øw_Êag
,

291 c⁄° *
«me
,

292 
sizeof_«me
);

293 
gnués_x509_¸t_£t_vîsi⁄
 (
gnués_x509_¸t_t
 
¸t
,

294 
vîsi⁄
);

295 
gnués_x509_¸t_£t_key
 (
gnués_x509_¸t_t
 
¸t
,

296 
gnués_x509_¥ivkey_t
 
key
);

297 
gnués_x509_¸t_£t_ˇ_°©us
 (
gnués_x509_¸t_t
 
¸t
, 
ˇ
);

298 
gnués_x509_¸t_£t_basic_c⁄°øöts
 (
gnués_x509_¸t_t
 
¸t
,

299 
ˇ
,

300 
∑thLíC⁄°øöt
);

301 
gnués_x509_¸t_£t_subje˘_Æã∫©ive_«me
 (
gnués_x509_¸t_t
 
¸t
,

302 
gnués_x509_subje˘_Æt_«me_t


303 
ty≥
,

304 c⁄° *
d©a_°rög
);

305 
gnués_x509_¸t_£t_subje˘_Æt_«me
 (
gnués_x509_¸t_t
 
¸t
,

306 
gnués_x509_subje˘_Æt_«me_t


307 
ty≥
, c⁄° *
d©a
,

308 
d©a_size
,

309 
Êags
);

310 
gnués_x509_¸t_sign
 (
gnués_x509_¸t_t
 
¸t
, gnués_x509_¸t_à
issuî
,

311 
gnués_x509_¥ivkey_t
 
issuî_key
);

312 
gnués_x509_¸t_sign2
 (
gnués_x509_¸t_t
 
¸t
, gnués_x509_¸t_à
issuî
,

313 
gnués_x509_¥ivkey_t
 
issuî_key
,

314 
gnués_dige°_Æg‹ôhm_t
 
dig
,

315 
Êags
);

316 
gnués_x509_¸t_£t_a˘iv©i⁄_time
 (
gnués_x509_¸t_t
 
˚π
,

317 
time_t
 
a˘_time
);

318 
gnués_x509_¸t_£t_expú©i⁄_time
 (
gnués_x509_¸t_t
 
˚π
,

319 
time_t
 
exp_time
);

320 
gnués_x509_¸t_£t_£rül
 (
gnués_x509_¸t_t
 
˚π
, c⁄° *
£rül
,

321 
size_t
 
£rül_size
);

323 
gnués_x509_¸t_£t_subje˘_key_id
 (
gnués_x509_¸t_t
 
˚π
,

324 c⁄° *
id
, 
size_t
 
id_size
);

326 
gnués_x509_¸t_£t_¥oxy_dn
 (
gnués_x509_¸t_t
 
¸t
,

327 
gnués_x509_¸t_t
 
ì¸t
,

328 
øw_Êag
,

329 c⁄° *
«me
,

330 
sizeof_«me
);

331 
gnués_x509_¸t_£t_¥oxy
 (
gnués_x509_¸t_t
 
¸t
,

332 
∑thLíC⁄°øöt
,

333 c⁄° *
pﬁicyL™guage
,

334 c⁄° *
pﬁicy
, 
size_t
 
sizeof_pﬁicy
);

336 
gnués_x509_¸t_¥öt
 (
gnués_x509_¸t_t
 
˚π
,

337 
gnués_˚πifiˇã_¥öt_f‹m©s_t
 
f‹m©
,

338 
gnués_d©um_t
 * 
out
);

339 
gnués_x509_¸l_¥öt
 (
gnués_x509_¸l_t
 
¸l
,

340 
gnués_˚πifiˇã_¥öt_f‹m©s_t
 
f‹m©
,

341 
gnués_d©um_t
 * 
out
);

345 
gnués_x509_¸t_gë_øw_issuî_dn
 (
gnués_x509_¸t_t
 
˚π
,

346 
gnués_d©um_t
 * 
°¨t
);

347 
gnués_x509_¸t_gë_øw_dn
 (
gnués_x509_¸t_t
 
˚π
,

348 
gnués_d©um_t
 * 
°¨t
);

352 
gnués_x509_rdn_gë
 (c⁄° 
gnués_d©um_t
 * 
idn
,

353 *
buf
, 
size_t
 * 
sizeof_buf
);

354 
gnués_x509_rdn_gë_oid
 (c⁄° 
gnués_d©um_t
 * 
idn
,

355 
ödx
, *
buf
, 
size_t
 * 
sizeof_buf
);

357 
gnués_x509_rdn_gë_by_oid
 (c⁄° 
gnués_d©um_t
 * 
idn
,

358 c⁄° *
oid
, 
ödx
,

359 
øw_Êag
, *
buf
,

360 
size_t
 * 
sizeof_buf
);

362 *
	tgnués_x509_dn_t
;

364 
	sgnués_x509_ava_°


366 
gnués_d©um_t
 
oid
;

367 
gnués_d©um_t
 
vÆue
;

368 
vÆue_èg
;

369 } 
	tgnués_x509_ava_°
;

371 
gnués_x509_¸t_gë_subje˘
 (
gnués_x509_¸t_t
 
˚π
,

372 
gnués_x509_dn_t
 * 
dn
);

373 
gnués_x509_¸t_gë_issuî
 (
gnués_x509_¸t_t
 
˚π
,

374 
gnués_x509_dn_t
 * 
dn
);

375 
gnués_x509_dn_gë_rdn_ava
 (
gnués_x509_dn_t
 
dn
, 
údn
,

376 
üva
, 
gnués_x509_ava_°
 * 
ava
);

378 
gnués_x509_dn_öô
 (
gnués_x509_dn_t
 * 
dn
);

380 
gnués_x509_dn_imp‹t
 (
gnués_x509_dn_t
 
dn
,

381 c⁄° 
gnués_d©um_t
 * 
d©a
);

383 
gnués_x509_dn_exp‹t
 (
gnués_x509_dn_t
 
dn
,

384 
gnués_x509_¸t_fmt_t
 
f‹m©
, *
ouçut_d©a
,

385 
size_t
 * 
ouçut_d©a_size
);

387 
gnués_x509_dn_deöô
 (
gnués_x509_dn_t
 
dn
);

392 
gnués_x509_¸l_öô
 (
gnués_x509_¸l_t
 * 
¸l
);

393 
gnués_x509_¸l_deöô
 (
gnués_x509_¸l_t
 
¸l
);

395 
gnués_x509_¸l_imp‹t
 (
gnués_x509_¸l_t
 
¸l
,

396 c⁄° 
gnués_d©um_t
 * 
d©a
,

397 
gnués_x509_¸t_fmt_t
 
f‹m©
);

398 
gnués_x509_¸l_exp‹t
 (
gnués_x509_¸l_t
 
¸l
,

399 
gnués_x509_¸t_fmt_t
 
f‹m©
,

400 *
ouçut_d©a
, 
size_t
 * 
ouçut_d©a_size
);

403 
gnués_x509_¸l_gë_øw_issuî_dn
 (
gnués_x509_¸l_t
 
¸l
,

404 
gnués_d©um_t
 * 
dn
);

406 
gnués_x509_¸l_gë_issuî_dn
 (c⁄° 
gnués_x509_¸l_t
 
¸l
,

407 *
buf
, 
size_t
 * 
sizeof_buf
);

408 
gnués_x509_¸l_gë_issuî_dn_by_oid
 (
gnués_x509_¸l_t
 
¸l
,

409 c⁄° *
oid
, 
ödx
,

410 
øw_Êag
,

411 *
buf
, 
size_t
 * 
sizeof_buf
);

412 
gnués_x509_¸l_gë_dn_oid
 (
gnués_x509_¸l_t
 
¸l
, 
ödx
,

413 *
oid
, 
size_t
 * 
sizeof_oid
);

415 
gnués_x509_¸l_gë_sig«tuª_Æg‹ôhm
 (
gnués_x509_¸l_t
 
¸l
);

416 
gnués_x509_¸l_gë_sig«tuª
 (
gnués_x509_¸l_t
 
¸l
,

417 *
sig
, 
size_t
 * 
sizeof_sig
);

418 
gnués_x509_¸l_gë_vîsi⁄
 (
gnués_x509_¸l_t
 
¸l
);

420 
time_t
 
gnués_x509_¸l_gë_this_upd©e
 (
gnués_x509_¸l_t
 
¸l
);

421 
time_t
 
gnués_x509_¸l_gë_√xt_upd©e
 (
gnués_x509_¸l_t
 
¸l
);

423 
gnués_x509_¸l_gë_¸t_cou¡
 (
gnués_x509_¸l_t
 
¸l
);

424 
gnués_x509_¸l_gë_¸t_£rül
 (
gnués_x509_¸l_t
 
¸l
, 
ödx
,

425 *
£rül
,

426 
size_t
 * 
£rül_size
, 
time_t
 * 
t
);

427 
	#gnués_x509_¸l_gë_˚πifiˇã_cou¡
 
gnués_x509_¸l_gë_¸t_cou¡


	)

428 
	#gnués_x509_¸l_gë_˚πifiˇã
 
gnués_x509_¸l_gë_¸t_£rül


	)

430 
gnués_x509_¸l_check_issuî
 (
gnués_x509_¸l_t
 
¸l
,

431 
gnués_x509_¸t_t
 
issuî
);

435 
gnués_x509_¸l_£t_vîsi⁄
 (
gnués_x509_¸l_t
 
¸l
,

436 
vîsi⁄
);

437 
gnués_x509_¸l_£t_this_upd©e
 (
gnués_x509_¸l_t
 
¸l
,

438 
time_t
 
a˘_time
);

439 
gnués_x509_¸l_£t_√xt_upd©e
 (
gnués_x509_¸l_t
 
¸l
,

440 
time_t
 
exp_time
);

441 
gnués_x509_¸l_£t_¸t_£rül
 (
gnués_x509_¸l_t
 
¸l
,

442 c⁄° *
£rül
,

443 
size_t
 
£rül_size
,

444 
time_t
 
ªvoˇti⁄_time
);

445 
gnués_x509_¸l_£t_¸t
 (
gnués_x509_¸l_t
 
¸l
,

446 
gnués_x509_¸t_t
 
¸t
, 
time_t
 
ªvoˇti⁄_time
);

448 
gnués_x509_¸l_gë_auth‹ôy_key_id
 (
gnués_x509_¸l_t
 
¸l
, *
ªt
,

449 
size_t
 * 
ªt_size
,

450 *
¸ôiˇl
);

452 
gnués_x509_¸l_gë_numbî
 (
gnués_x509_¸l_t
 
¸l
, *
ªt
,

453 
size_t
 * 
ªt_size
, *
¸ôiˇl
);

455 
gnués_x509_¸l_gë_exãnsi⁄_oid
 (
gnués_x509_¸l_t
 
¸l
, 
ödx
,

456 *
oid
, 
size_t
 * 
sizeof_oid
);

458 
gnués_x509_¸l_gë_exãnsi⁄_öfo
 (
gnués_x509_¸l_t
 
¸l
, 
ödx
,

459 *
oid
, 
size_t
 * 
sizeof_oid
,

460 *
¸ôiˇl
);

462 
gnués_x509_¸l_gë_exãnsi⁄_d©a
 (
gnués_x509_¸l_t
 
¸l
, 
ödx
,

463 *
d©a
, 
size_t
 * 
sizeof_d©a
);

465 
gnués_x509_¸l_£t_auth‹ôy_key_id
 (
gnués_x509_¸l_t
 
¸l
,

466 c⁄° *
id
, 
size_t
 
id_size
);

468 
gnués_x509_¸l_£t_numbî
 (
gnués_x509_¸l_t
 
¸l
,

469 c⁄° *
ƒ
, 
size_t
 
ƒ_size
);

474 
gnués_pkcs7_öt
;

475 
gnués_pkcs7_öt
 *
	tgnués_pkcs7_t
;

477 
gnués_pkcs7_öô
 (
gnués_pkcs7_t
 * 
pkcs7
);

478 
gnués_pkcs7_deöô
 (
gnués_pkcs7_t
 
pkcs7
);

479 
gnués_pkcs7_imp‹t
 (
gnués_pkcs7_t
 
pkcs7
,

480 c⁄° 
gnués_d©um_t
 * 
d©a
,

481 
gnués_x509_¸t_fmt_t
 
f‹m©
);

482 
gnués_pkcs7_exp‹t
 (
gnués_pkcs7_t
 
pkcs7
,

483 
gnués_x509_¸t_fmt_t
 
f‹m©
,

484 *
ouçut_d©a
, 
size_t
 * 
ouçut_d©a_size
);

486 
gnués_pkcs7_gë_¸t_cou¡
 (
gnués_pkcs7_t
 
pkcs7
);

487 
gnués_pkcs7_gë_¸t_øw
 (
gnués_pkcs7_t
 
pkcs7
, 
ödx
,

488 *
˚πifiˇã
, 
size_t
 * 
˚πifiˇã_size
);

490 
gnués_pkcs7_£t_¸t_øw
 (
gnués_pkcs7_t
 
pkcs7
,

491 c⁄° 
gnués_d©um_t
 * 
¸t
);

492 
gnués_pkcs7_£t_¸t
 (
gnués_pkcs7_t
 
pkcs7
, 
gnués_x509_¸t_t
 
¸t
);

493 
gnués_pkcs7_dñëe_¸t
 (
gnués_pkcs7_t
 
pkcs7
, 
ödx
);

495 
gnués_pkcs7_gë_¸l_øw
 (
gnués_pkcs7_t
 
pkcs7
,

496 
ödx
, *
¸l
, 
size_t
 * 
¸l_size
);

497 
gnués_pkcs7_gë_¸l_cou¡
 (
gnués_pkcs7_t
 
pkcs7
);

499 
gnués_pkcs7_£t_¸l_øw
 (
gnués_pkcs7_t
 
pkcs7
,

500 c⁄° 
gnués_d©um_t
 * 
¸l
);

501 
gnués_pkcs7_£t_¸l
 (
gnués_pkcs7_t
 
pkcs7
, 
gnués_x509_¸l_t
 
¸l
);

502 
gnués_pkcs7_dñëe_¸l
 (
gnués_pkcs7_t
 
pkcs7
, 
ödx
);

537 
	egnués_˚πifiˇã_vîify_Êags


539 
GNUTLS_VERIFY_DISABLE_CA_SIGN
 = 1,

540 
GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT
 = 2,

541 
GNUTLS_VERIFY_DO_NOT_ALLOW_SAME
 = 4,

542 
GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT
 = 8,

543 
GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2
 = 16,

544 
GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5
 = 32,

545 
GNUTLS_VERIFY_DISABLE_TIME_CHECKS
 = 64,

546 
GNUTLS_VERIFY_DISABLE_TRUSTED_TIME_CHECKS
 = 128,

547 
GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT
 = 256

548 } 
	tgnués_˚πifiˇã_vîify_Êags
;

550 
gnués_x509_¸t_check_issuî
 (
gnués_x509_¸t_t
 
˚π
,

551 
gnués_x509_¸t_t
 
issuî
);

553 
gnués_x509_¸t_li°_vîify
 (c⁄° 
gnués_x509_¸t_t
 * 
˚π_li°
,

554 
˚π_li°_Àngth
,

555 c⁄° 
gnués_x509_¸t_t
 * 
CA_li°
,

556 
CA_li°_Àngth
,

557 c⁄° 
gnués_x509_¸l_t
 * 
CRL_li°
,

558 
CRL_li°_Àngth
,

559 
Êags
, *
vîify
);

561 
gnués_x509_¸t_vîify
 (
gnués_x509_¸t_t
 
˚π
,

562 c⁄° 
gnués_x509_¸t_t
 * 
CA_li°
,

563 
CA_li°_Àngth
, 
Êags
,

564 *
vîify
);

565 
gnués_x509_¸l_vîify
 (
gnués_x509_¸l_t
 
¸l
,

566 c⁄° 
gnués_x509_¸t_t
 * 
CA_li°
,

567 
CA_li°_Àngth
, 
Êags
,

568 *
vîify
);

570 
gnués_x509_¸t_check_ªvoˇti⁄
 (
gnués_x509_¸t_t
 
˚π
,

571 c⁄° 
gnués_x509_¸l_t
 *

572 
¸l_li°
, 
¸l_li°_Àngth
);

574 
gnués_x509_¸t_gë_fögî¥öt
 (
gnués_x509_¸t_t
 
˚π
,

575 
gnués_dige°_Æg‹ôhm_t
 
Ægo
,

576 *
buf
, 
size_t
 * 
sizeof_buf
);

578 
gnués_x509_¸t_gë_key_puΩo£_oid
 (
gnués_x509_¸t_t
 
˚π
,

579 
ödx
, *
oid
,

580 
size_t
 * 
sizeof_oid
,

581 *
¸ôiˇl
);

582 
gnués_x509_¸t_£t_key_puΩo£_oid
 (
gnués_x509_¸t_t
 
˚π
,

583 c⁄° *
oid
,

584 
¸ôiˇl
);

609 
	egnués_pkcs_í¸y±_Êags_t


611 
GNUTLS_PKCS_PLAIN
 = 1,

612 
GNUTLS_PKCS8_PLAIN
 = 
GNUTLS_PKCS_PLAIN
,

613 
GNUTLS_PKCS_USE_PKCS12_3DES
 = 2,

614 
GNUTLS_PKCS8_USE_PKCS12_3DES
 = 
GNUTLS_PKCS_USE_PKCS12_3DES
,

615 
GNUTLS_PKCS_USE_PKCS12_ARCFOUR
 = 4,

616 
GNUTLS_PKCS8_USE_PKCS12_ARCFOUR
 = 
GNUTLS_PKCS_USE_PKCS12_ARCFOUR
,

617 
GNUTLS_PKCS_USE_PKCS12_RC2_40
 = 8,

618 
GNUTLS_PKCS8_USE_PKCS12_RC2_40
 = 
GNUTLS_PKCS_USE_PKCS12_RC2_40
,

619 
GNUTLS_PKCS_USE_PBES2_3DES
 = 16,

620 
GNUTLS_PKCS_USE_PBES2_AES_128
 = 32,

621 
GNUTLS_PKCS_USE_PBES2_AES_192
 = 64,

622 
GNUTLS_PKCS_USE_PBES2_AES_256
 = 128

623 } 
	tgnués_pkcs_í¸y±_Êags_t
;

625 
gnués_x509_¥ivkey_öô
 (
gnués_x509_¥ivkey_t
 * 
key
);

626 
gnués_x509_¥ivkey_deöô
 (
gnués_x509_¥ivkey_t
 
key
);

627 
gnués_£c_∑øm_t
 
gnués_x509_¥ivkey_£c_∑øm
 (
gnués_x509_¥ivkey_t


628 
key
);

629 
gnués_x509_¥ivkey_˝y
 (
gnués_x509_¥ivkey_t
 
d°
,

630 
gnués_x509_¥ivkey_t
 
§c
);

631 
gnués_x509_¥ivkey_imp‹t
 (
gnués_x509_¥ivkey_t
 
key
,

632 c⁄° 
gnués_d©um_t
 * 
d©a
,

633 
gnués_x509_¸t_fmt_t
 
f‹m©
);

634 
gnués_x509_¥ivkey_imp‹t_pkcs8
 (
gnués_x509_¥ivkey_t
 
key
,

635 c⁄° 
gnués_d©um_t
 * 
d©a
,

636 
gnués_x509_¸t_fmt_t
 
f‹m©
,

637 c⁄° *
∑ssw‹d
,

638 
Êags
);

639 
gnués_x509_¥ivkey_imp‹t_rß_øw
 (
gnués_x509_¥ivkey_t
 
key
,

640 c⁄° 
gnués_d©um_t
 * 
m
,

641 c⁄° 
gnués_d©um_t
 * 
e
,

642 c⁄° 
gnués_d©um_t
 * 
d
,

643 c⁄° 
gnués_d©um_t
 * 
p
,

644 c⁄° 
gnués_d©um_t
 * 
q
,

645 c⁄° 
gnués_d©um_t
 * 
u
);

646 
gnués_x509_¥ivkey_imp‹t_rß_øw2
 (
gnués_x509_¥ivkey_t
 
key
,

647 c⁄° 
gnués_d©um_t
 * 
m
,

648 c⁄° 
gnués_d©um_t
 * 
e
,

649 c⁄° 
gnués_d©um_t
 * 
d
,

650 c⁄° 
gnués_d©um_t
 * 
p
,

651 c⁄° 
gnués_d©um_t
 * 
q
,

652 c⁄° 
gnués_d©um_t
 * 
u
,

653 c⁄° 
gnués_d©um_t
 * 
e1
,

654 c⁄° 
gnués_d©um_t
 * 
e2
);

655 
gnués_x509_¥ivkey_fix
 (
gnués_x509_¥ivkey_t
 
key
);

657 
gnués_x509_¥ivkey_exp‹t_dß_øw
 (
gnués_x509_¥ivkey_t
 
key
,

658 
gnués_d©um_t
 * 
p
,

659 
gnués_d©um_t
 * 
q
,

660 
gnués_d©um_t
 * 
g
,

661 
gnués_d©um_t
 * 
y
,

662 
gnués_d©um_t
 * 
x
);

663 
gnués_x509_¥ivkey_imp‹t_dß_øw
 (
gnués_x509_¥ivkey_t
 
key
,

664 c⁄° 
gnués_d©um_t
 * 
p
,

665 c⁄° 
gnués_d©um_t
 * 
q
,

666 c⁄° 
gnués_d©um_t
 * 
g
,

667 c⁄° 
gnués_d©um_t
 * 
y
,

668 c⁄° 
gnués_d©um_t
 * 
x
);

670 
gnués_x509_¥ivkey_gë_pk_Æg‹ôhm
 (
gnués_x509_¥ivkey_t
 
key
);

671 
gnués_x509_¥ivkey_gë_key_id
 (
gnués_x509_¥ivkey_t
 
key
,

672 
Êags
,

673 *
ouçut_d©a
,

674 
size_t
 * 
ouçut_d©a_size
);

676 
gnués_x509_¥ivkey_gíî©e
 (
gnués_x509_¥ivkey_t
 
key
,

677 
gnués_pk_Æg‹ôhm_t
 
Ægo
,

678 
bôs
, 
Êags
);

680 
gnués_x509_¥ivkey_exp‹t
 (
gnués_x509_¥ivkey_t
 
key
,

681 
gnués_x509_¸t_fmt_t
 
f‹m©
,

682 *
ouçut_d©a
,

683 
size_t
 * 
ouçut_d©a_size
);

684 
gnués_x509_¥ivkey_exp‹t_pkcs8
 (
gnués_x509_¥ivkey_t
 
key
,

685 
gnués_x509_¸t_fmt_t
 
f‹m©
,

686 c⁄° *
∑ssw‹d
,

687 
Êags
,

688 *
ouçut_d©a
,

689 
size_t
 * 
ouçut_d©a_size
);

690 
gnués_x509_¥ivkey_exp‹t_rß_øw2
 (
gnués_x509_¥ivkey_t
 
key
,

691 
gnués_d©um_t
 * 
m
,

692 
gnués_d©um_t
 * 
e
,

693 
gnués_d©um_t
 * 
d
,

694 
gnués_d©um_t
 * 
p
,

695 
gnués_d©um_t
 * 
q
,

696 
gnués_d©um_t
 * 
u
,

697 
gnués_d©um_t
 * 
e1
,

698 
gnués_d©um_t
 * 
e2
);

699 
gnués_x509_¥ivkey_exp‹t_rß_øw
 (
gnués_x509_¥ivkey_t
 
key
,

700 
gnués_d©um_t
 * 
m
,

701 
gnués_d©um_t
 * 
e
,

702 
gnués_d©um_t
 * 
d
,

703 
gnués_d©um_t
 * 
p
,

704 
gnués_d©um_t
 * 
q
,

705 
gnués_d©um_t
 * 
u
);

710 
gnués_x509_¸q_¥öt
 (
gnués_x509_¸q_t
 
¸q
,

711 
gnués_˚πifiˇã_¥öt_f‹m©s_t
 
f‹m©
,

712 
gnués_d©um_t
 * 
out
);

714 
gnués_x509_¸q_vîify
 (
gnués_x509_¸q_t
 
¸q
, 
Êags
);

716 
gnués_x509_¸q_öô
 (
gnués_x509_¸q_t
 * 
¸q
);

717 
gnués_x509_¸q_deöô
 (
gnués_x509_¸q_t
 
¸q
);

718 
gnués_x509_¸q_imp‹t
 (
gnués_x509_¸q_t
 
¸q
,

719 c⁄° 
gnués_d©um_t
 * 
d©a
,

720 
gnués_x509_¸t_fmt_t
 
f‹m©
);

722 
gnués_x509_¸q_gë_dn
 (
gnués_x509_¸q_t
 
¸q
, *
buf
,

723 
size_t
 * 
sizeof_buf
);

724 
gnués_x509_¸q_gë_dn_oid
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

725 *
oid
, 
size_t
 * 
sizeof_oid
);

726 
gnués_x509_¸q_gë_dn_by_oid
 (
gnués_x509_¸q_t
 
¸q
,

727 c⁄° *
oid
, 
ödx
,

728 
øw_Êag
, *
buf
,

729 
size_t
 * 
sizeof_buf
);

730 
gnués_x509_¸q_£t_dn_by_oid
 (
gnués_x509_¸q_t
 
¸q
,

731 c⁄° *
oid
,

732 
øw_Êag
,

733 c⁄° *
d©a
,

734 
sizeof_d©a
);

735 
gnués_x509_¸q_£t_vîsi⁄
 (
gnués_x509_¸q_t
 
¸q
,

736 
vîsi⁄
);

737 
gnués_x509_¸q_gë_vîsi⁄
 (
gnués_x509_¸q_t
 
¸q
);

738 
gnués_x509_¸q_£t_key
 (
gnués_x509_¸q_t
 
¸q
,

739 
gnués_x509_¥ivkey_t
 
key
);

741 
gnués_x509_¸q_£t_chÆÀnge_∑ssw‹d
 (
gnués_x509_¸q_t
 
¸q
,

742 c⁄° *
∑ss
);

743 
gnués_x509_¸q_gë_chÆÀnge_∑ssw‹d
 (
gnués_x509_¸q_t
 
¸q
,

744 *
∑ss
,

745 
size_t
 * 
sizeof_∑ss
);

747 
gnués_x509_¸q_£t_©åibuã_by_oid
 (
gnués_x509_¸q_t
 
¸q
,

748 c⁄° *
oid
, *
buf
,

749 
size_t
 
sizeof_buf
);

750 
gnués_x509_¸q_gë_©åibuã_by_oid
 (
gnués_x509_¸q_t
 
¸q
,

751 c⁄° *
oid
, 
ödx
,

752 *
buf
, 
size_t
 * 
sizeof_buf
);

754 
gnués_x509_¸q_exp‹t
 (
gnués_x509_¸q_t
 
¸q
,

755 
gnués_x509_¸t_fmt_t
 
f‹m©
,

756 *
ouçut_d©a
, 
size_t
 * 
ouçut_d©a_size
);

758 
gnués_x509_¸t_£t_¸q
 (
gnués_x509_¸t_t
 
¸t
, 
gnués_x509_¸q_t
 
¸q
);

759 
gnués_x509_¸t_£t_¸q_exãnsi⁄s
 (
gnués_x509_¸t_t
 
¸t
,

760 
gnués_x509_¸q_t
 
¸q
);

762 
gnués_x509_¸q_£t_key_rß_øw
 (
gnués_x509_¸q_t
 
¸q
,

763 c⁄° 
gnués_d©um_t
 * 
m
,

764 c⁄° 
gnués_d©um_t
 * 
e
);

765 
gnués_x509_¸q_£t_subje˘_Æt_«me
 (
gnués_x509_¸q_t
 
¸q
,

766 
gnués_x509_subje˘_Æt_«me_t
 
¡
,

767 c⁄° *
d©a
,

768 
d©a_size
,

769 
Êags
);

771 
gnués_x509_¸q_£t_key_ußge
 (
gnués_x509_¸q_t
 
¸q
,

772 
ußge
);

773 
gnués_x509_¸q_£t_basic_c⁄°øöts
 (
gnués_x509_¸q_t
 
¸q
,

774 
ˇ
,

775 
∑thLíC⁄°øöt
);

776 
gnués_x509_¸q_£t_key_puΩo£_oid
 (
gnués_x509_¸q_t
 
¸q
,

777 c⁄° *
oid
,

778 
¸ôiˇl
);

779 
gnués_x509_¸q_gë_key_puΩo£_oid
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

780 *
oid
, 
size_t
 * 
sizeof_oid
,

781 *
¸ôiˇl
);

783 
gnués_x509_¸q_gë_exãnsi⁄_d©a
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

784 *
d©a
, 
size_t
 * 
sizeof_d©a
);

785 
gnués_x509_¸q_gë_exãnsi⁄_öfo
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

786 *
oid
, 
size_t
 * 
sizeof_oid
,

787 *
¸ôiˇl
);

788 
gnués_x509_¸q_gë_©åibuã_d©a
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

789 *
d©a
, 
size_t
 * 
sizeof_d©a
);

790 
gnués_x509_¸q_gë_©åibuã_öfo
 (
gnués_x509_¸q_t
 
¸q
, 
ödx
,

791 *
oid
, 
size_t
 * 
sizeof_oid
);

792 
gnués_x509_¸q_gë_pk_Æg‹ôhm
 (
gnués_x509_¸q_t
 
¸q
,

793 *
bôs
);

795 
gnués_x509_¸q_gë_key_id
 (
gnués_x509_¸q_t
 
¸q
, 
Êags
,

796 *
ouçut_d©a
,

797 
size_t
 * 
ouçut_d©a_size
);

798 
gnués_x509_¸q_gë_key_rß_øw
 (
gnués_x509_¸q_t
 
¸q
,

799 
gnués_d©um_t
 * 
m
,

800 
gnués_d©um_t
 * 
e
);

802 
gnués_x509_¸q_gë_key_ußge
 (
gnués_x509_¸q_t
 
¸q
,

803 *
key_ußge
,

804 *
¸ôiˇl
);

805 
gnués_x509_¸q_gë_basic_c⁄°øöts
 (
gnués_x509_¸q_t
 
¸q
,

806 *
¸ôiˇl
,

807 *
ˇ
, *
∑thÀn
);

808 
gnués_x509_¸q_gë_subje˘_Æt_«me
 (
gnués_x509_¸q_t
 
¸q
,

809 
£q
, *
ªt
,

810 
size_t
 * 
ªt_size
,

811 *
ªt_ty≥
,

812 *
¸ôiˇl
);

813 
gnués_x509_¸q_gë_subje˘_Æt_Ÿhî«me_oid
 (
gnués_x509_¸q_t
 
¸q
,

814 
£q
,

815 *
ªt
,

816 
size_t
 * 
ªt_size
);

818 
gnués_x509_¸q_gë_exãnsi⁄_by_oid
 (
gnués_x509_¸q_t
 
¸q
,

819 c⁄° *
oid
, 
ödx
,

820 *
buf
, 
size_t
 * 
sizeof_buf
,

821 *
¸ôiˇl
);

823 #ifde‡
__˝lu•lus


	@/usr/include/iconv.h

19 #i‚de‡
_ICONV_H


20 
	#_ICONV_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
__BEGIN_DECLS


30 *
	tic⁄v_t
;

38 
ic⁄v_t
 
ic⁄v_›í
 (
__c⁄°
 *
__tocode
, __c⁄° *
__‰omcode
);

43 
size_t
 
ic⁄v
 (
ic⁄v_t
 
__cd
, **
__ª°ri˘
 
__öbuf
,

44 
size_t
 *
__ª°ri˘
 
__öbyã¶e·
,

45 **
__ª°ri˘
 
__outbuf
,

46 
size_t
 *
__ª°ri˘
 
__outbyã¶e·
);

52 
ic⁄v_˛o£
 (
ic⁄v_t
 
__cd
);

54 
	g__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/langinfo.h

20 #i‚de‡
_LANGINFO_H


21 
	#_LANGINFO_H
 1

	)

24 
	~<∆_ty≥s.h
>

26 
	~<bôs/loˇÀ.h
>

29 
	g__BEGIN_DECLS


35 
	#_NL_ITEM
(
ˇãg‹y
, 
ödex
Ë(((ˇãg‹yË<< 16Ë| (ödex))

	)

38 
	#_NL_ITEM_CATEGORY
(
ôem
Ë((Ë(ôemË>> 16)

	)

39 
	#_NL_ITEM_INDEX
(
ôem
Ë((Ë(ôemË& 0xffff)

	)

47 
	mABDAY_1
 = 
_NL_ITEM
 (
__LC_TIME
, 0),

48 
	#ABDAY_1
 
ABDAY_1


	)

49 
	mABDAY_2
,

50 
	#ABDAY_2
 
ABDAY_2


	)

51 
	mABDAY_3
,

52 
	#ABDAY_3
 
ABDAY_3


	)

53 
	mABDAY_4
,

54 
	#ABDAY_4
 
ABDAY_4


	)

55 
	mABDAY_5
,

56 
	#ABDAY_5
 
ABDAY_5


	)

57 
	mABDAY_6
,

58 
	#ABDAY_6
 
ABDAY_6


	)

59 
	mABDAY_7
,

60 
	#ABDAY_7
 
ABDAY_7


	)

63 
	mDAY_1
,

64 
	#DAY_1
 
DAY_1


	)

65 
	mDAY_2
,

66 
	#DAY_2
 
DAY_2


	)

67 
	mDAY_3
,

68 
	#DAY_3
 
DAY_3


	)

69 
	mDAY_4
,

70 
	#DAY_4
 
DAY_4


	)

71 
	mDAY_5
,

72 
	#DAY_5
 
DAY_5


	)

73 
	mDAY_6
,

74 
	#DAY_6
 
DAY_6


	)

75 
	mDAY_7
,

76 
	#DAY_7
 
DAY_7


	)

79 
	mABMON_1
,

80 
	#ABMON_1
 
ABMON_1


	)

81 
	mABMON_2
,

82 
	#ABMON_2
 
ABMON_2


	)

83 
	mABMON_3
,

84 
	#ABMON_3
 
ABMON_3


	)

85 
	mABMON_4
,

86 
	#ABMON_4
 
ABMON_4


	)

87 
	mABMON_5
,

88 
	#ABMON_5
 
ABMON_5


	)

89 
	mABMON_6
,

90 
	#ABMON_6
 
ABMON_6


	)

91 
	mABMON_7
,

92 
	#ABMON_7
 
ABMON_7


	)

93 
	mABMON_8
,

94 
	#ABMON_8
 
ABMON_8


	)

95 
	mABMON_9
,

96 
	#ABMON_9
 
ABMON_9


	)

97 
	mABMON_10
,

98 
	#ABMON_10
 
ABMON_10


	)

99 
	mABMON_11
,

100 
	#ABMON_11
 
ABMON_11


	)

101 
	mABMON_12
,

102 
	#ABMON_12
 
ABMON_12


	)

105 
	mMON_1
,

106 
	#MON_1
 
MON_1


	)

107 
	mMON_2
,

108 
	#MON_2
 
MON_2


	)

109 
	mMON_3
,

110 
	#MON_3
 
MON_3


	)

111 
	mMON_4
,

112 
	#MON_4
 
MON_4


	)

113 
	mMON_5
,

114 
	#MON_5
 
MON_5


	)

115 
	mMON_6
,

116 
	#MON_6
 
MON_6


	)

117 
	mMON_7
,

118 
	#MON_7
 
MON_7


	)

119 
	mMON_8
,

120 
	#MON_8
 
MON_8


	)

121 
	mMON_9
,

122 
	#MON_9
 
MON_9


	)

123 
	mMON_10
,

124 
	#MON_10
 
MON_10


	)

125 
	mMON_11
,

126 
	#MON_11
 
MON_11


	)

127 
	mMON_12
,

128 
	#MON_12
 
MON_12


	)

130 
	mAM_STR
,

131 
	#AM_STR
 
AM_STR


	)

132 
	mPM_STR
,

133 
	#PM_STR
 
PM_STR


	)

135 
	mD_T_FMT
,

136 
	#D_T_FMT
 
D_T_FMT


	)

137 
	mD_FMT
,

138 
	#D_FMT
 
D_FMT


	)

139 
	mT_FMT
,

140 
	#T_FMT
 
T_FMT


	)

141 
	mT_FMT_AMPM
,

142 
	#T_FMT_AMPM
 
T_FMT_AMPM


	)

144 
	mERA
,

145 
	#ERA
 
ERA


	)

146 
	m__ERA_YEAR
,

147 #ifde‡
__USE_GNU


148 
	#ERA_YEAR
 
__ERA_YEAR


	)

150 
	mERA_D_FMT
,

151 
	#ERA_D_FMT
 
ERA_D_FMT


	)

152 
	mALT_DIGITS
,

153 
	#ALT_DIGITS
 
ALT_DIGITS


	)

154 
	mERA_D_T_FMT
,

155 
	#ERA_D_T_FMT
 
ERA_D_T_FMT


	)

156 
	mERA_T_FMT
,

157 
	#ERA_T_FMT
 
ERA_T_FMT


	)

159 
	m_NL_TIME_ERA_NUM_ENTRIES
,

160 
	m_NL_TIME_ERA_ENTRIES
,

162 
	m_NL_WABDAY_1
,

163 
	m_NL_WABDAY_2
,

164 
	m_NL_WABDAY_3
,

165 
	m_NL_WABDAY_4
,

166 
	m_NL_WABDAY_5
,

167 
	m_NL_WABDAY_6
,

168 
	m_NL_WABDAY_7
,

171 
	m_NL_WDAY_1
,

172 
	m_NL_WDAY_2
,

173 
	m_NL_WDAY_3
,

174 
	m_NL_WDAY_4
,

175 
	m_NL_WDAY_5
,

176 
	m_NL_WDAY_6
,

177 
	m_NL_WDAY_7
,

180 
	m_NL_WABMON_1
,

181 
	m_NL_WABMON_2
,

182 
	m_NL_WABMON_3
,

183 
	m_NL_WABMON_4
,

184 
	m_NL_WABMON_5
,

185 
	m_NL_WABMON_6
,

186 
	m_NL_WABMON_7
,

187 
	m_NL_WABMON_8
,

188 
	m_NL_WABMON_9
,

189 
	m_NL_WABMON_10
,

190 
	m_NL_WABMON_11
,

191 
	m_NL_WABMON_12
,

194 
	m_NL_WMON_1
,

195 
	m_NL_WMON_2
,

196 
	m_NL_WMON_3
,

197 
	m_NL_WMON_4
,

198 
	m_NL_WMON_5
,

199 
	m_NL_WMON_6
,

200 
	m_NL_WMON_7
,

201 
	m_NL_WMON_8
,

202 
	m_NL_WMON_9
,

203 
	m_NL_WMON_10
,

204 
	m_NL_WMON_11
,

205 
	m_NL_WMON_12
,

207 
	m_NL_WAM_STR
,

208 
	m_NL_WPM_STR
,

210 
	m_NL_WD_T_FMT
,

211 
	m_NL_WD_FMT
,

212 
	m_NL_WT_FMT
,

213 
	m_NL_WT_FMT_AMPM
,

215 
	m_NL_WERA_YEAR
,

216 
	m_NL_WERA_D_FMT
,

217 
	m_NL_WALT_DIGITS
,

218 
	m_NL_WERA_D_T_FMT
,

219 
	m_NL_WERA_T_FMT
,

221 
	m_NL_TIME_WEEK_NDAYS
,

222 
	m_NL_TIME_WEEK_1STDAY
,

223 
	m_NL_TIME_WEEK_1STWEEK
,

224 
	m_NL_TIME_FIRST_WEEKDAY
,

225 
	m_NL_TIME_FIRST_WORKDAY
,

226 
	m_NL_TIME_CAL_DIRECTION
,

227 
	m_NL_TIME_TIMEZONE
,

229 
	m_DATE_FMT
,

230 
	#_DATE_FMT
 
_DATE_FMT


	)

231 
	m_NL_W_DATE_FMT
,

233 
	m_NL_TIME_CODESET
,

235 
	m_NL_NUM_LC_TIME
,

240 
	m_NL_COLLATE_NRULES
 = 
_NL_ITEM
 (
__LC_COLLATE
, 0),

241 
	m_NL_COLLATE_RULESETS
,

242 
	m_NL_COLLATE_TABLEMB
,

243 
	m_NL_COLLATE_WEIGHTMB
,

244 
	m_NL_COLLATE_EXTRAMB
,

245 
	m_NL_COLLATE_INDIRECTMB
,

246 
	m_NL_COLLATE_GAP1
,

247 
	m_NL_COLLATE_GAP2
,

248 
	m_NL_COLLATE_GAP3
,

249 
	m_NL_COLLATE_TABLEWC
,

250 
	m_NL_COLLATE_WEIGHTWC
,

251 
	m_NL_COLLATE_EXTRAWC
,

252 
	m_NL_COLLATE_INDIRECTWC
,

253 
	m_NL_COLLATE_SYMB_HASH_SIZEMB
,

254 
	m_NL_COLLATE_SYMB_TABLEMB
,

255 
	m_NL_COLLATE_SYMB_EXTRAMB
,

256 
	m_NL_COLLATE_COLLSEQMB
,

257 
	m_NL_COLLATE_COLLSEQWC
,

258 
	m_NL_COLLATE_CODESET
,

259 
	m_NL_NUM_LC_COLLATE
,

264 
	m_NL_CTYPE_CLASS
 = 
_NL_ITEM
 (
__LC_CTYPE
, 0),

265 
	m_NL_CTYPE_TOUPPER
,

266 
	m_NL_CTYPE_GAP1
,

267 
	m_NL_CTYPE_TOLOWER
,

268 
	m_NL_CTYPE_GAP2
,

269 
	m_NL_CTYPE_CLASS32
,

270 
	m_NL_CTYPE_GAP3
,

271 
	m_NL_CTYPE_GAP4
,

272 
	m_NL_CTYPE_GAP5
,

273 
	m_NL_CTYPE_GAP6
,

274 
	m_NL_CTYPE_CLASS_NAMES
,

275 
	m_NL_CTYPE_MAP_NAMES
,

276 
	m_NL_CTYPE_WIDTH
,

277 
	m_NL_CTYPE_MB_CUR_MAX
,

278 
	m_NL_CTYPE_CODESET_NAME
,

279 
	mCODESET
 = 
_NL_CTYPE_CODESET_NAME
,

280 
	#CODESET
 
CODESET


	)

281 
	m_NL_CTYPE_TOUPPER32
,

282 
	m_NL_CTYPE_TOLOWER32
,

283 
	m_NL_CTYPE_CLASS_OFFSET
,

284 
	m_NL_CTYPE_MAP_OFFSET
,

285 
	m_NL_CTYPE_INDIGITS_MB_LEN
,

286 
	m_NL_CTYPE_INDIGITS0_MB
,

287 
	m_NL_CTYPE_INDIGITS1_MB
,

288 
	m_NL_CTYPE_INDIGITS2_MB
,

289 
	m_NL_CTYPE_INDIGITS3_MB
,

290 
	m_NL_CTYPE_INDIGITS4_MB
,

291 
	m_NL_CTYPE_INDIGITS5_MB
,

292 
	m_NL_CTYPE_INDIGITS6_MB
,

293 
	m_NL_CTYPE_INDIGITS7_MB
,

294 
	m_NL_CTYPE_INDIGITS8_MB
,

295 
	m_NL_CTYPE_INDIGITS9_MB
,

296 
	m_NL_CTYPE_INDIGITS_WC_LEN
,

297 
	m_NL_CTYPE_INDIGITS0_WC
,

298 
	m_NL_CTYPE_INDIGITS1_WC
,

299 
	m_NL_CTYPE_INDIGITS2_WC
,

300 
	m_NL_CTYPE_INDIGITS3_WC
,

301 
	m_NL_CTYPE_INDIGITS4_WC
,

302 
	m_NL_CTYPE_INDIGITS5_WC
,

303 
	m_NL_CTYPE_INDIGITS6_WC
,

304 
	m_NL_CTYPE_INDIGITS7_WC
,

305 
	m_NL_CTYPE_INDIGITS8_WC
,

306 
	m_NL_CTYPE_INDIGITS9_WC
,

307 
	m_NL_CTYPE_OUTDIGIT0_MB
,

308 
	m_NL_CTYPE_OUTDIGIT1_MB
,

309 
	m_NL_CTYPE_OUTDIGIT2_MB
,

310 
	m_NL_CTYPE_OUTDIGIT3_MB
,

311 
	m_NL_CTYPE_OUTDIGIT4_MB
,

312 
	m_NL_CTYPE_OUTDIGIT5_MB
,

313 
	m_NL_CTYPE_OUTDIGIT6_MB
,

314 
	m_NL_CTYPE_OUTDIGIT7_MB
,

315 
	m_NL_CTYPE_OUTDIGIT8_MB
,

316 
	m_NL_CTYPE_OUTDIGIT9_MB
,

317 
	m_NL_CTYPE_OUTDIGIT0_WC
,

318 
	m_NL_CTYPE_OUTDIGIT1_WC
,

319 
	m_NL_CTYPE_OUTDIGIT2_WC
,

320 
	m_NL_CTYPE_OUTDIGIT3_WC
,

321 
	m_NL_CTYPE_OUTDIGIT4_WC
,

322 
	m_NL_CTYPE_OUTDIGIT5_WC
,

323 
	m_NL_CTYPE_OUTDIGIT6_WC
,

324 
	m_NL_CTYPE_OUTDIGIT7_WC
,

325 
	m_NL_CTYPE_OUTDIGIT8_WC
,

326 
	m_NL_CTYPE_OUTDIGIT9_WC
,

327 
	m_NL_CTYPE_TRANSLIT_TAB_SIZE
,

328 
	m_NL_CTYPE_TRANSLIT_FROM_IDX
,

329 
	m_NL_CTYPE_TRANSLIT_FROM_TBL
,

330 
	m_NL_CTYPE_TRANSLIT_TO_IDX
,

331 
	m_NL_CTYPE_TRANSLIT_TO_TBL
,

332 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN
,

333 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING
,

334 
	m_NL_CTYPE_TRANSLIT_IGNORE_LEN
,

335 
	m_NL_CTYPE_TRANSLIT_IGNORE
,

336 
	m_NL_CTYPE_MAP_TO_NONASCII
,

337 
	m_NL_CTYPE_NONASCII_CASE
,

338 
	m_NL_CTYPE_EXTRA_MAP_1
,

339 
	m_NL_CTYPE_EXTRA_MAP_2
,

340 
	m_NL_CTYPE_EXTRA_MAP_3
,

341 
	m_NL_CTYPE_EXTRA_MAP_4
,

342 
	m_NL_CTYPE_EXTRA_MAP_5
,

343 
	m_NL_CTYPE_EXTRA_MAP_6
,

344 
	m_NL_CTYPE_EXTRA_MAP_7
,

345 
	m_NL_CTYPE_EXTRA_MAP_8
,

346 
	m_NL_CTYPE_EXTRA_MAP_9
,

347 
	m_NL_CTYPE_EXTRA_MAP_10
,

348 
	m_NL_CTYPE_EXTRA_MAP_11
,

349 
	m_NL_CTYPE_EXTRA_MAP_12
,

350 
	m_NL_CTYPE_EXTRA_MAP_13
,

351 
	m_NL_CTYPE_EXTRA_MAP_14
,

352 
	m_NL_NUM_LC_CTYPE
,

357 
	m__INT_CURR_SYMBOL
 = 
_NL_ITEM
 (
__LC_MONETARY
, 0),

358 #ifde‡
__USE_GNU


359 
	#INT_CURR_SYMBOL
 
__INT_CURR_SYMBOL


	)

361 
	m__CURRENCY_SYMBOL
,

362 #ifde‡
__USE_GNU


363 
	#CURRENCY_SYMBOL
 
__CURRENCY_SYMBOL


	)

365 
	m__MON_DECIMAL_POINT
,

366 #ifde‡
__USE_GNU


367 
	#MON_DECIMAL_POINT
 
__MON_DECIMAL_POINT


	)

369 
	m__MON_THOUSANDS_SEP
,

370 #ifde‡
__USE_GNU


371 
	#MON_THOUSANDS_SEP
 
__MON_THOUSANDS_SEP


	)

373 
	m__MON_GROUPING
,

374 #ifde‡
__USE_GNU


375 
	#MON_GROUPING
 
__MON_GROUPING


	)

377 
	m__POSITIVE_SIGN
,

378 #ifde‡
__USE_GNU


379 
	#POSITIVE_SIGN
 
__POSITIVE_SIGN


	)

381 
	m__NEGATIVE_SIGN
,

382 #ifde‡
__USE_GNU


383 
	#NEGATIVE_SIGN
 
__NEGATIVE_SIGN


	)

385 
	m__INT_FRAC_DIGITS
,

386 #ifde‡
__USE_GNU


387 
	#INT_FRAC_DIGITS
 
__INT_FRAC_DIGITS


	)

389 
	m__FRAC_DIGITS
,

390 #ifde‡
__USE_GNU


391 
	#FRAC_DIGITS
 
__FRAC_DIGITS


	)

393 
	m__P_CS_PRECEDES
,

394 #ifde‡
__USE_GNU


395 
	#P_CS_PRECEDES
 
__P_CS_PRECEDES


	)

397 
	m__P_SEP_BY_SPACE
,

398 #ifde‡
__USE_GNU


399 
	#P_SEP_BY_SPACE
 
__P_SEP_BY_SPACE


	)

401 
	m__N_CS_PRECEDES
,

402 #ifde‡
__USE_GNU


403 
	#N_CS_PRECEDES
 
__N_CS_PRECEDES


	)

405 
	m__N_SEP_BY_SPACE
,

406 #ifde‡
__USE_GNU


407 
	#N_SEP_BY_SPACE
 
__N_SEP_BY_SPACE


	)

409 
	m__P_SIGN_POSN
,

410 #ifde‡
__USE_GNU


411 
	#P_SIGN_POSN
 
__P_SIGN_POSN


	)

413 
	m__N_SIGN_POSN
,

414 #ifde‡
__USE_GNU


415 
	#N_SIGN_POSN
 
__N_SIGN_POSN


	)

417 
	m_NL_MONETARY_CRNCYSTR
,

418 
	#CRNCYSTR
 
_NL_MONETARY_CRNCYSTR


	)

419 
	m__INT_P_CS_PRECEDES
,

420 #ifde‡
__USE_GNU


421 
	#INT_P_CS_PRECEDES
 
__INT_P_CS_PRECEDES


	)

423 
	m__INT_P_SEP_BY_SPACE
,

424 #ifde‡
__USE_GNU


425 
	#INT_P_SEP_BY_SPACE
 
__INT_P_SEP_BY_SPACE


	)

427 
	m__INT_N_CS_PRECEDES
,

428 #ifde‡
__USE_GNU


429 
	#INT_N_CS_PRECEDES
 
__INT_N_CS_PRECEDES


	)

431 
	m__INT_N_SEP_BY_SPACE
,

432 #ifde‡
__USE_GNU


433 
	#INT_N_SEP_BY_SPACE
 
__INT_N_SEP_BY_SPACE


	)

435 
	m__INT_P_SIGN_POSN
,

436 #ifde‡
__USE_GNU


437 
	#INT_P_SIGN_POSN
 
__INT_P_SIGN_POSN


	)

439 
	m__INT_N_SIGN_POSN
,

440 #ifde‡
__USE_GNU


441 
	#INT_N_SIGN_POSN
 
__INT_N_SIGN_POSN


	)

443 
	m_NL_MONETARY_DUO_INT_CURR_SYMBOL
,

444 
	m_NL_MONETARY_DUO_CURRENCY_SYMBOL
,

445 
	m_NL_MONETARY_DUO_INT_FRAC_DIGITS
,

446 
	m_NL_MONETARY_DUO_FRAC_DIGITS
,

447 
	m_NL_MONETARY_DUO_P_CS_PRECEDES
,

448 
	m_NL_MONETARY_DUO_P_SEP_BY_SPACE
,

449 
	m_NL_MONETARY_DUO_N_CS_PRECEDES
,

450 
	m_NL_MONETARY_DUO_N_SEP_BY_SPACE
,

451 
	m_NL_MONETARY_DUO_INT_P_CS_PRECEDES
,

452 
	m_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE
,

453 
	m_NL_MONETARY_DUO_INT_N_CS_PRECEDES
,

454 
	m_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE
,

455 
	m_NL_MONETARY_DUO_P_SIGN_POSN
,

456 
	m_NL_MONETARY_DUO_N_SIGN_POSN
,

457 
	m_NL_MONETARY_DUO_INT_P_SIGN_POSN
,

458 
	m_NL_MONETARY_DUO_INT_N_SIGN_POSN
,

459 
	m_NL_MONETARY_UNO_VALID_FROM
,

460 
	m_NL_MONETARY_UNO_VALID_TO
,

461 
	m_NL_MONETARY_DUO_VALID_FROM
,

462 
	m_NL_MONETARY_DUO_VALID_TO
,

463 
	m_NL_MONETARY_CONVERSION_RATE
,

464 
	m_NL_MONETARY_DECIMAL_POINT_WC
,

465 
	m_NL_MONETARY_THOUSANDS_SEP_WC
,

466 
	m_NL_MONETARY_CODESET
,

467 
	m_NL_NUM_LC_MONETARY
,

471 
	m__DECIMAL_POINT
 = 
_NL_ITEM
 (
__LC_NUMERIC
, 0),

472 #ifde‡
__USE_GNU


473 
	#DECIMAL_POINT
 
__DECIMAL_POINT


	)

475 
	mRADIXCHAR
 = 
__DECIMAL_POINT
,

476 
	#RADIXCHAR
 
RADIXCHAR


	)

477 
	m__THOUSANDS_SEP
,

478 #ifde‡
__USE_GNU


479 
	#THOUSANDS_SEP
 
__THOUSANDS_SEP


	)

481 
	mTHOUSEP
 = 
__THOUSANDS_SEP
,

482 
	#THOUSEP
 
THOUSEP


	)

483 
	m__GROUPING
,

484 #ifde‡
__USE_GNU


485 
	#GROUPING
 
__GROUPING


	)

487 
	m_NL_NUMERIC_DECIMAL_POINT_WC
,

488 
	m_NL_NUMERIC_THOUSANDS_SEP_WC
,

489 
	m_NL_NUMERIC_CODESET
,

490 
	m_NL_NUM_LC_NUMERIC
,

492 
	m__YESEXPR
 = 
_NL_ITEM
 (
__LC_MESSAGES
, 0),

493 
	#YESEXPR
 
__YESEXPR


	)

494 
	m__NOEXPR
,

495 
	#NOEXPR
 
__NOEXPR


	)

496 
	m__YESSTR
,

497 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

498 
	#YESSTR
 
__YESSTR


	)

500 
	m__NOSTR
,

501 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

502 
	#NOSTR
 
__NOSTR


	)

504 
	m_NL_MESSAGES_CODESET
,

505 
	m_NL_NUM_LC_MESSAGES
,

507 
	m_NL_PAPER_HEIGHT
 = 
_NL_ITEM
 (
__LC_PAPER
, 0),

508 
	m_NL_PAPER_WIDTH
,

509 
	m_NL_PAPER_CODESET
,

510 
	m_NL_NUM_LC_PAPER
,

512 
	m_NL_NAME_NAME_FMT
 = 
_NL_ITEM
 (
__LC_NAME
, 0),

513 
	m_NL_NAME_NAME_GEN
,

514 
	m_NL_NAME_NAME_MR
,

515 
	m_NL_NAME_NAME_MRS
,

516 
	m_NL_NAME_NAME_MISS
,

517 
	m_NL_NAME_NAME_MS
,

518 
	m_NL_NAME_CODESET
,

519 
	m_NL_NUM_LC_NAME
,

521 
	m_NL_ADDRESS_POSTAL_FMT
 = 
_NL_ITEM
 (
__LC_ADDRESS
, 0),

522 
	m_NL_ADDRESS_COUNTRY_NAME
,

523 
	m_NL_ADDRESS_COUNTRY_POST
,

524 
	m_NL_ADDRESS_COUNTRY_AB2
,

525 
	m_NL_ADDRESS_COUNTRY_AB3
,

526 
	m_NL_ADDRESS_COUNTRY_CAR
,

527 
	m_NL_ADDRESS_COUNTRY_NUM
,

528 
	m_NL_ADDRESS_COUNTRY_ISBN
,

529 
	m_NL_ADDRESS_LANG_NAME
,

530 
	m_NL_ADDRESS_LANG_AB
,

531 
	m_NL_ADDRESS_LANG_TERM
,

532 
	m_NL_ADDRESS_LANG_LIB
,

533 
	m_NL_ADDRESS_CODESET
,

534 
	m_NL_NUM_LC_ADDRESS
,

536 
	m_NL_TELEPHONE_TEL_INT_FMT
 = 
_NL_ITEM
 (
__LC_TELEPHONE
, 0),

537 
	m_NL_TELEPHONE_TEL_DOM_FMT
,

538 
	m_NL_TELEPHONE_INT_SELECT
,

539 
	m_NL_TELEPHONE_INT_PREFIX
,

540 
	m_NL_TELEPHONE_CODESET
,

541 
	m_NL_NUM_LC_TELEPHONE
,

543 
	m_NL_MEASUREMENT_MEASUREMENT
 = 
_NL_ITEM
 (
__LC_MEASUREMENT
, 0),

544 
	m_NL_MEASUREMENT_CODESET
,

545 
	m_NL_NUM_LC_MEASUREMENT
,

547 
	m_NL_IDENTIFICATION_TITLE
 = 
_NL_ITEM
 (
__LC_IDENTIFICATION
, 0),

548 
	m_NL_IDENTIFICATION_SOURCE
,

549 
	m_NL_IDENTIFICATION_ADDRESS
,

550 
	m_NL_IDENTIFICATION_CONTACT
,

551 
	m_NL_IDENTIFICATION_EMAIL
,

552 
	m_NL_IDENTIFICATION_TEL
,

553 
	m_NL_IDENTIFICATION_FAX
,

554 
	m_NL_IDENTIFICATION_LANGUAGE
,

555 
	m_NL_IDENTIFICATION_TERRITORY
,

556 
	m_NL_IDENTIFICATION_AUDIENCE
,

557 
	m_NL_IDENTIFICATION_APPLICATION
,

558 
	m_NL_IDENTIFICATION_ABBREVIATION
,

559 
	m_NL_IDENTIFICATION_REVISION
,

560 
	m_NL_IDENTIFICATION_DATE
,

561 
	m_NL_IDENTIFICATION_CATEGORY
,

562 
	m_NL_IDENTIFICATION_CODESET
,

563 
	m_NL_NUM_LC_IDENTIFICATION
,

566 
	m_NL_NUM


571 
	#_NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_ITEM
 ((category), \

572 
	`_NL_ITEM_INDEX
 (-1))

	)

573 #ifde‡
__USE_GNU


574 
	#NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_LOCALE_NAME
 (ˇãg‹y)

	)

584 *
	$∆_œngöfo
 (
∆_ôem
 
__ôem
Ë
__THROW
;

587 #ifdef 
__USE_XOPEN2K


592 
	~<xloˇÀ.h
>

595 *
	`∆_œngöfo_l
 (
∆_ôem
 
__ôem
, 
__loˇÀ_t
 
__l
);

598 
__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/nl_types.h

19 #i‚de‡
_NL_TYPES_H


20 
	#_NL_TYPES_H
 1

	)

22 
	~<„©uªs.h
>

25 
	#NL_SETD
 1

	)

28 
	#NL_CAT_LOCALE
 1

	)

31 
__BEGIN_DECLS


34 *
	t∆_ˇtd
;

37 
	t∆_ôem
;

43 
∆_ˇtd
 
	$ˇt›í
 (
__c⁄°
 *
__ˇt_«me
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1));

47 *
	$ˇtgës
 (
∆_ˇtd
 
__ˇèlog
, 
__£t
, 
__numbî
,

48 
__c⁄°
 *
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

51 
	$ˇt˛o£
 (
∆_ˇtd
 
__ˇèlog
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

53 
__END_DECLS


	@/usr/include/openssl/des.h

59 #i‚de‡
HEADER_NEW_DES_H


60 
	#HEADER_NEW_DES_H


	)

62 
	~<›ís¶/e_os2.h
>

65 #ifde‡
OPENSSL_NO_DES


66 #îr‹ 
DES
 
is
 
dißbÀd
.

69 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


70 #unde‡
OPENSSL_EXTERN


71 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

74 #ifde‡ 
__˝lu•lus


78 
	tDES_cblock
[8];

79 
	tc⁄°_DES_cblock
[8];

83 
	sDES_ks


87 
DES_cblock
 
cblock
;

90 
DES_LONG
 
de¶⁄g
[2];

91 } 
ks
[16];

92 } 
	tDES_key_scheduÀ
;

94 #i‚de‡
OPENSSL_DISABLE_OLD_DES_SUPPORT


95 #i‚de‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


96 
	#OPENSSL_ENABLE_OLD_DES_SUPPORT


	)

100 #ifde‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


101 
	~<›ís¶/des_ﬁd.h
>

104 
	#DES_KEY_SZ
 ((
DES_cblock
))

	)

105 
	#DES_SCHEDULE_SZ
 ((
DES_key_scheduÀ
))

	)

107 
	#DES_ENCRYPT
 1

	)

108 
	#DES_DECRYPT
 0

	)

110 
	#DES_CBC_MODE
 0

	)

111 
	#DES_PCBC_MODE
 1

	)

113 
	#DES_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

114 
	`DES_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

116 
	#DES_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

117 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

119 
	#DES_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

120 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

122 
	#DES_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

123 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

125 
OPENSSL_DECLARE_GLOBAL
(,
DES_check_key
);

126 
	#DES_check_key
 
	`OPENSSL_GLOBAL_REF
(
DES_check_key
)

	)

127 
OPENSSL_DECLARE_GLOBAL
(,
DES_rw_mode
);

128 
	#DES_rw_mode
 
	`OPENSSL_GLOBAL_REF
(
DES_rw_mode
)

	)

130 c⁄° *
DES_›ti⁄s
();

131 
DES_ecb3_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

132 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

133 
DES_key_scheduÀ
 *
ks3
, 
íc
);

134 
DES_LONG
 
DES_cbc_cksum
(c⁄° *
öput
,
DES_cblock
 *
ouçut
,

135 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,

136 
c⁄°_DES_cblock
 *
ivec
);

138 
DES_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

139 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

140 
íc
);

141 
DES_ncbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

142 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

143 
íc
);

144 
DES_xcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

145 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

146 
c⁄°_DES_cblock
 *
öw
,c⁄°_DES_cblock *
outw
,
íc
);

147 
DES_cfb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

148 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

149 
íc
);

150 
DES_ecb_í¸y±
(
c⁄°_DES_cblock
 *
öput
,
DES_cblock
 *
ouçut
,

151 
DES_key_scheduÀ
 *
ks
,
íc
);

162 
DES_í¸y±1
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

170 
DES_í¸y±2
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

172 
DES_í¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

173 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

174 
DES_de¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

175 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

176 
DES_ede3_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

177 
Àngth
,

178 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

179 
DES_key_scheduÀ
 *
ks3
,
DES_cblock
 *
ivec
,
íc
);

180 
DES_ede3_cbcm_í¸y±
(c⁄° *
ö
,*
out
,

181 
Àngth
,

182 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

183 
DES_key_scheduÀ
 *
ks3
,

184 
DES_cblock
 *
ivec1
,DES_cblock *
ivec2
,

185 
íc
);

186 
DES_ede3_cfb64_í¸y±
(c⁄° *
ö
,*
out
,

187 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

188 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

189 
DES_cblock
 *
ivec
,*
num
,
íc
);

190 
DES_ede3_cfb_í¸y±
(c⁄° *
ö
,*
out
,

191 
numbôs
,
Àngth
,
DES_key_scheduÀ
 *
ks1
,

192 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

193 
DES_cblock
 *
ivec
,
íc
);

194 
DES_ede3_ofb64_í¸y±
(c⁄° *
ö
,*
out
,

195 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

196 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

197 
DES_cblock
 *
ivec
,*
num
);

199 
DES_xwhôe_ö2out
(
c⁄°_DES_cblock
 *
DES_key
,c⁄°_DES_cblock *
ö_whôe
,

200 
DES_cblock
 *
out_whôe
);

203 
DES_íc_ªad
(
fd
,*
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

204 
DES_cblock
 *
iv
);

205 
DES_íc_wrôe
(
fd
,c⁄° *
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

206 
DES_cblock
 *
iv
);

207 *
DES_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

208 *
DES_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

209 
DES_ofb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

210 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
);

211 
DES_pcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

212 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

213 
íc
);

214 
DES_LONG
 
DES_quad_cksum
(c⁄° *
öput
,
DES_cblock
 
ouçut
[],

215 
Àngth
,
out_cou¡
,
DES_cblock
 *
£ed
);

216 
DES_øndom_key
(
DES_cblock
 *
ªt
);

217 
DES_£t_odd_∑rôy
(
DES_cblock
 *
key
);

218 
DES_check_key_∑rôy
(
c⁄°_DES_cblock
 *
key
);

219 
DES_is_wók_key
(
c⁄°_DES_cblock
 *
key
);

223 
DES_£t_key
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

224 
DES_key_sched
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

225 
DES_£t_key_checked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

226 
DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

227 #ifde‡
OPENSSL_FIPS


228 
¥iv©e_DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

230 
DES_°rög_to_key
(c⁄° *
°r
,
DES_cblock
 *
key
);

231 
DES_°rög_to_2keys
(c⁄° *
°r
,
DES_cblock
 *
key1
,DES_cblock *
key2
);

232 
DES_cfb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

233 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
,

234 
íc
);

235 
DES_ofb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

236 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
);

238 
DES_ªad_∑ssw‹d
(
DES_cblock
 *
key
, c⁄° *
¥om±
, 
vîify
);

239 
DES_ªad_2∑ssw‹ds
(
DES_cblock
 *
key1
, DES_cblock *
key2
, c⁄° *
¥om±
,

240 
vîify
);

242 
	#DES_fixup_key_∑rôy
 
DES_£t_odd_∑rôy


	)

244 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/md4.h

59 #i‚de‡
HEADER_MD4_H


60 
	#HEADER_MD4_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD4


70 #îr‹ 
MD4
 
is
 
dißbÀd
.

80 #i‡
deföed
(
__LP32__
)

81 
	#MD4_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD4_LONG
 

	)

84 
	#MD4_LONG_LOG2
 3

	)

93 
	#MD4_LONG
 

	)

96 
	#MD4_CBLOCK
 64

	)

97 
	#MD4_LBLOCK
 (
MD4_CBLOCK
/4)

	)

98 
	#MD4_DIGEST_LENGTH
 16

	)

100 
	sMD4°©e_°


102 
MD4_LONG
 
A
,
B
,
C
,
D
;

103 
MD4_LONG
 
Nl
,
Nh
;

104 
MD4_LONG
 
d©a
[
MD4_LBLOCK
];

105 
num
;

106 } 
	tMD4_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD4_Inô
(
MD4_CTX
 *
c
);

111 
MD4_Inô
(
MD4_CTX
 *
c
);

112 
MD4_Upd©e
(
MD4_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD4_FöÆ
(*
md
, 
MD4_CTX
 *
c
);

114 *
MD4
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD4_Tønsf‹m
(
MD4_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000100fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1-fù†14 M¨ 2012"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1 14 M¨ 2012"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

115 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

117 
RAND_s¸ìn
();

118 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

122 #ifde‡
OPENSSL_FIPS


123 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

124 
RAND_öô_fùs
();

131 
ERR_lﬂd_RAND_°rögs
();

136 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

137 
	#RAND_F_RAND_INIT_FIPS
 102

	)

138 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

141 
	#RAND_R_ERROR_INITIALISING_DRBG
 102

	)

142 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 103

	)

143 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 101

	)

144 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

146 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

268 
	#SSL_TXT_DSS
 "DSS"

	)

269 
	#SSL_TXT_DH
 "DH"

	)

270 
	#SSL_TXT_EDH
 "EDH"

	)

271 
	#SSL_TXT_ADH
 "ADH"

	)

272 
	#SSL_TXT_RSA
 "RSA"

	)

273 
	#SSL_TXT_ECDH
 "ECDH"

	)

274 
	#SSL_TXT_EECDH
 "EECDH"

	)

275 
	#SSL_TXT_AECDH
 "AECDH"

	)

276 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

277 
	#SSL_TXT_KRB5
 "KRB5"

	)

278 
	#SSL_TXT_PSK
 "PSK"

	)

279 
	#SSL_TXT_SRP
 "SRP"

	)

281 
	#SSL_TXT_DES
 "DES"

	)

282 
	#SSL_TXT_3DES
 "3DES"

	)

283 
	#SSL_TXT_RC4
 "RC4"

	)

284 
	#SSL_TXT_RC2
 "RC2"

	)

285 
	#SSL_TXT_IDEA
 "IDEA"

	)

286 
	#SSL_TXT_SEED
 "SEED"

	)

287 
	#SSL_TXT_AES128
 "AES128"

	)

288 
	#SSL_TXT_AES256
 "AES256"

	)

289 
	#SSL_TXT_AES
 "AES"

	)

290 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

291 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

292 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

293 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

295 
	#SSL_TXT_MD5
 "MD5"

	)

296 
	#SSL_TXT_SHA1
 "SHA1"

	)

297 
	#SSL_TXT_SHA
 "SHA"

	)

298 
	#SSL_TXT_GOST94
 "GOST94"

	)

299 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

300 
	#SSL_TXT_SHA256
 "SHA256"

	)

301 
	#SSL_TXT_SHA384
 "SHA384"

	)

303 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

304 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

305 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

306 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

307 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

309 
	#SSL_TXT_EXP
 "EXP"

	)

310 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

312 
	#SSL_TXT_ALL
 "ALL"

	)

328 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

329 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

334 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!aNULL:!eNULL:!SSLv2"

	)

343 
	#SSL_SENT_SHUTDOWN
 1

	)

344 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

346 #ifde‡
__˝lu•lus


350 #ifde‡ 
__˝lu•lus


354 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

355 
	#OPENSSL_NO_SSL2


	)

358 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

359 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

364 
s¶_°
 *
	ts¶_¸ock_°
;

365 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

366 
s¶_mëhod_°
 
	tSSL_METHOD
;

367 
s¶_cùhî_°
 
	tSSL_CIPHER
;

368 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

370 
DECLARE_STACK_OF
(
SSL_CIPHER
)

373 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


375 c⁄° *
«me
;

376 
id
;

377 } 
	tSRTP_PROTECTION_PROFILE
;

379 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

381 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

382 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

385 #i‚de‡
OPENSSL_NO_SSL_INTERN


388 
	ss¶_cùhî_°


390 
vÆid
;

391 c⁄° *
«me
;

392 
id
;

395 
Æg‹ôhm_mkey
;

396 
Æg‹ôhm_auth
;

397 
Æg‹ôhm_íc
;

398 
Æg‹ôhm_mac
;

399 
Æg‹ôhm_s¶
;

401 
Ægo_°ªngth
;

402 
Æg‹ôhm2
;

403 
°ªngth_bôs
;

404 
Æg_bôs
;

409 
	ss¶_mëhod_°


411 
vîsi⁄
;

412 (*
s¶_√w
)(
SSL
 *
s
);

413 (*
s¶_˛ór
)(
SSL
 *
s
);

414 (*
s¶_‰ì
)(
SSL
 *
s
);

415 (*
s¶_ac˚±
)(
SSL
 *
s
);

416 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

417 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

418 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

420 (*
s¶_shutdown
)(
SSL
 *
s
);

421 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

423 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

424 
max
, *
ok
);

425 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

426 
≥ek
);

427 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

428 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

429 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

430 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

431 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

432 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

433 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

434 (*
num_cùhîs
)();

435 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

436 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

437 (*
gë_timeout
)();

438 
s¶3_íc_mëhod
 *
s¶3_íc
;

439 (*
s¶_vîsi⁄
)();

440 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

441 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

469 
	ss¶_£ssi⁄_°


471 
s¶_vîsi⁄
;

475 
key_¨g_Àngth
;

476 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

477 
ma°î_key_Àngth
;

478 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

480 
£ssi⁄_id_Àngth
;

481 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

485 
sid_˘x_Àngth
;

486 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

488 #i‚de‡
OPENSSL_NO_KRB5


489 
krb5_˛õ¡_¥öc_Àn
;

490 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

492 #i‚de‡
OPENSSL_NO_PSK


493 *
psk_idítôy_höt
;

494 *
psk_idítôy
;

496 
nŸ_ªsumabÀ
;

499 
£ss_˚π_°
 *
£ss_˚π
;

505 
X509
 *
≥î
;

508 
vîify_ªsu…
;

510 
ª„ªn˚s
;

511 
timeout
;

512 
time
;

514 
com¥ess_mëh
;

516 c⁄° 
SSL_CIPHER
 *
cùhî
;

517 
cùhî_id
;

521 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

523 
CRYPTO_EX_DATA
 
ex_d©a
;

527 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

528 #i‚de‡
OPENSSL_NO_TLSEXT


529 *
é£xt_ho°«me
;

530 #i‚de‡
OPENSSL_NO_EC


531 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

532 *
é£xt_e˝oötf‹m©li°
;

533 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

534 *
é£xt_ñlùticcurvñi°
;

537 *
é£xt_tick
;

538 
size_t
 
é£xt_tickÀn
;

539 
é£xt_tick_li„time_höt
;

541 #i‚de‡
OPENSSL_NO_SRP


542 *
§p_u£∫ame
;

548 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

549 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

551 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

552 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

553 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

554 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

555 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

556 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

557 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

558 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

565 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

569 
	#SSL_OP_ALL
 0x80000BFFL

	)

572 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

574 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

576 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

578 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

581 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

583 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

585 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

587 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

589 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

592 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

595 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

600 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

602 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

603 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

604 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

605 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

606 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

613 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

614 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

616 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

617 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

622 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

626 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

631 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

634 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

636 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

640 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

645 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

646 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

647 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

648 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

649 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

650 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

651 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

652 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

653 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

654 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

655 
	#SSL_gë_›ti⁄s
(
s¶
) \

656 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

658 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

659 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

660 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

661 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

662 
	#SSL_CTX_gë_mode
(
˘x
) \

663 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

664 
	#SSL_˛ór_mode
(
s¶
,
›
) \

665 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

666 
	#SSL_£t_mode
(
s¶
,
›
) \

667 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

668 
	#SSL_gë_mode
(
s¶
) \

669 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

670 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

671 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

673 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

674 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

676 #i‚de‡
OPENSSL_NO_HEARTBEATS


677 
	#SSL_hóπbót
(
s¶
) \

678 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

681 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

682 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

683 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

684 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

686 #i‚de‡
OPENSSL_NO_SRP


688 #i‚de‡
OPENSSL_NO_SSL_INTERN


690 
	s§p_˘x_°


693 *
SRP_cb_¨g
;

695 (*
TLS_ext_§p_u£∫ame_ˇŒback
)(
SSL
 *, *, *);

697 (*
SRP_vîify_∑øm_ˇŒback
)(
SSL
 *, *);

699 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
)(
SSL
 *, *);

701 *
logö
;

702 
BIGNUM
 *
N
,*
g
,*
s
,*
B
,*
A
;

703 
BIGNUM
 *
a
,*
b
,*
v
;

704 *
öfo
;

705 
°ªngth
;

707 
§p_Mask
;

708 } 
	tSRP_CTX
;

713 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

714 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

715 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

716 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

717 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

718 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

719 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

720 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

724 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

725 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

727 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

730 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

745 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

746 *
	tid_Àn
);

748 
s¶_comp_°
 
	tSSL_COMP
;

750 #i‚de‡
OPENSSL_NO_SSL_INTERN


752 
	ss¶_comp_°


754 
id
;

755 c⁄° *
«me
;

756 #i‚de‡
OPENSSL_NO_COMP


757 
COMP_METHOD
 *
mëhod
;

759 *
mëhod
;

763 
DECLARE_STACK_OF
(
SSL_COMP
)

764 
DECLARE_LHASH_OF
(
SSL_SESSION
);

766 
	ss¶_˘x_°


768 c⁄° 
SSL_METHOD
 *
mëhod
;

770 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

772 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

774 
x509_°‹e_°
 *
˚π_°‹e
;

775 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

778 
£ssi⁄_ˇche_size
;

779 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

780 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

787 
£ssi⁄_ˇche_mode
;

792 
£ssi⁄_timeout
;

802 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

803 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

804 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

805 *
d©a
,
Àn
,*
c›y
);

809 
£ss_c⁄√˘
;

810 
£ss_c⁄√˘_ª√gŸüã
;

811 
£ss_c⁄√˘_good
;

812 
£ss_ac˚±
;

813 
£ss_ac˚±_ª√gŸüã
;

814 
£ss_ac˚±_good
;

815 
£ss_miss
;

816 
£ss_timeout
;

817 
£ss_ˇche_fuŒ
;

818 
£ss_hô
;

819 
£ss_cb_hô
;

825 } 
°©s
;

827 
ª„ªn˚s
;

830 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

831 *
≠p_vîify_¨g
;

836 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

839 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

842 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

845 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

846 *
cookõ_Àn
);

849 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

850 
cookõ_Àn
);

852 
CRYPTO_EX_DATA
 
ex_d©a
;

854 c⁄° 
EVP_MD
 *
rß_md5
;

855 c⁄° 
EVP_MD
 *
md5
;

856 c⁄° 
EVP_MD
 *
sha1
;

858 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

859 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

864 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

867 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

872 
›ti⁄s
;

873 
mode
;

874 
max_˚π_li°
;

876 
˚π_°
 *
˚π
;

877 
ªad_ahód
;

880 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

881 *
msg_ˇŒback_¨g
;

883 
vîify_mode
;

884 
sid_˘x_Àngth
;

885 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

886 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

889 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

891 
X509_VERIFY_PARAM
 *
∑øm
;

894 
puΩo£
;

895 
åu°
;

898 
quõt_shutdown
;

904 
max_£nd_‰agmít
;

906 #i‚de‡
OPENSSL_ENGINE


909 
ENGINE
 *
˛õ¡_˚π_ígöe
;

912 #i‚de‡
OPENSSL_NO_TLSEXT


914 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

915 *
é£xt_£rvî«me_¨g
;

917 
é£xt_tick_key_«me
[16];

918 
é£xt_tick_hmac_key
[16];

919 
é£xt_tick_´s_key
[16];

921 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

922 *
«me
, *
iv
,

923 
EVP_CIPHER_CTX
 *
e˘x
,

924 
HMAC_CTX
 *
h˘x
, 
íc
);

928 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

929 *
é£xt_°©us_¨g
;

931 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

932 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

935 #i‚de‡
OPENSSL_NO_PSK


936 *
psk_idítôy_höt
;

937 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

938 
max_idítôy_Àn
, *
psk
,

939 
max_psk_Àn
);

940 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

941 *
psk
, 
max_psk_Àn
);

944 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


945 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

946 
‰ìli°_max_Àn
;

947 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

948 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

950 #i‚de‡
OPENSSL_NO_SRP


951 
SRP_CTX
 
§p_˘x
;

954 #i‚de‡
OPENSSL_NO_TLSEXT


955 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


961 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

962 *
Àn
, *
¨g
);

963 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

966 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

967 *
ouéí
,

968 c⁄° *
ö
,

969 
öÀn
,

970 *
¨g
);

971 *
√xt_¥Ÿo_£À˘_cb_¨g
;

974 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

980 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

981 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

982 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

983 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

984 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

986 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

987 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

988 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

989 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

991 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

992 
	#SSL_CTX_£ss_numbî
(
˘x
) \

993 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

994 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

995 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

996 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

997 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

998 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1000 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1002 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1004 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1005 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1006 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1007 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1008 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1009 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1010 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1011 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1012 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1013 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1014 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1015 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1017 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

1018 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

1019 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

1020 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

1021 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

1022 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

1023 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1024 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1025 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

1026 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1027 #i‚de‡
OPENSSL_NO_ENGINE


1028 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1030 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

1031 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

1032 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1033 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1034 (*
cb
Ë(
SSL
 *
s¶
,

1035 c⁄° **
out
,

1036 *
ouéí
,

1037 *
¨g
),

1038 *
¨g
);

1039 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1040 (*
cb
Ë(
SSL
 *
s¶
,

1041 **
out
,

1042 *
ouéí
,

1043 c⁄° *
ö
,

1044 
öÀn
,

1045 *
¨g
),

1046 *
¨g
);

1048 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1049 c⁄° *
ö
, 
öÀn
,

1050 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1051 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1052 c⁄° **
d©a
, *
Àn
);

1054 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1055 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1056 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1059 #i‚de‡
OPENSSL_NO_PSK


1062 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1063 
	#PSK_MAX_PSK_LEN
 256

	)

1064 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1065 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1066 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1067 
max_psk_Àn
));

1068 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1069 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1070 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1071 
max_psk_Àn
));

1072 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1073 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1074 *
psk
, 
max_psk_Àn
));

1075 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1076 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1077 *
psk
, 
max_psk_Àn
));

1078 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1079 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1080 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1081 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1084 
	#SSL_NOTHING
 1

	)

1085 
	#SSL_WRITING
 2

	)

1086 
	#SSL_READING
 3

	)

1087 
	#SSL_X509_LOOKUP
 4

	)

1090 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1091 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1092 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1093 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1095 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1096 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1098 #i‚de‡
OPENSSL_NO_SSL_INTERN


1100 
	ss¶_°


1105 
vîsi⁄
;

1106 
ty≥
;

1108 c⁄° 
SSL_METHOD
 *
mëhod
;

1114 #i‚de‡
OPENSSL_NO_BIO


1115 
BIO
 *
rbio
;

1116 
BIO
 *
wbio
;

1117 
BIO
 *
bbio
;

1120 *
rbio
;

1121 *
wbio
;

1122 *
bbio
;

1128 
rw°©e
;

1131 
ö_h™dshake
;

1132 (*
h™dshake_func
)(
SSL
 *);

1142 
£rvî
;

1144 
√w_£ssi⁄
;

1148 
quõt_shutdown
;

1149 
shutdown
;

1151 
°©e
;

1152 
r°©e
;

1154 
BUF_MEM
 *
öô_buf
;

1155 *
öô_msg
;

1156 
öô_num
;

1157 
öô_off
;

1160 *
∑ckë
;

1161 
∑ckë_Àngth
;

1163 
s¶2_°©e_°
 *
s2
;

1164 
s¶3_°©e_°
 *
s3
;

1165 
dés1_°©e_°
 *
d1
;

1167 
ªad_ahód
;

1171 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1172 *
msg_ˇŒback_¨g
;

1174 
hô
;

1176 
X509_VERIFY_PARAM
 *
∑øm
;

1179 
puΩo£
;

1180 
åu°
;

1184 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1185 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1189 
mac_Êags
;

1190 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1191 
EVP_MD_CTX
 *
ªad_hash
;

1192 #i‚de‡
OPENSSL_NO_COMP


1193 
COMP_CTX
 *
ex∑nd
;

1195 *
ex∑nd
;

1198 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1199 
EVP_MD_CTX
 *
wrôe_hash
;

1200 #i‚de‡
OPENSSL_NO_COMP


1201 
COMP_CTX
 *
com¥ess
;

1203 *
com¥ess
;

1210 
˚π_°
 *
˚π
;

1214 
sid_˘x_Àngth
;

1215 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1218 
SSL_SESSION
 *
£ssi⁄
;

1221 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1224 
vîify_mode
;

1226 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1228 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1230 
îr‹
;

1231 
îr‹_code
;

1233 #i‚de‡
OPENSSL_NO_KRB5


1234 
KSSL_CTX
 *
ks¶_˘x
;

1237 #i‚de‡
OPENSSL_NO_PSK


1238 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1239 
max_idítôy_Àn
, *
psk
,

1240 
max_psk_Àn
);

1241 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1242 *
psk
, 
max_psk_Àn
);

1245 
SSL_CTX
 *
˘x
;

1248 
debug
;

1251 
vîify_ªsu…
;

1252 
CRYPTO_EX_DATA
 
ex_d©a
;

1255 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1257 
ª„ªn˚s
;

1258 
›ti⁄s
;

1259 
mode
;

1260 
max_˚π_li°
;

1261 
fú°_∑ckë
;

1262 
˛õ¡_vîsi⁄
;

1264 
max_£nd_‰agmít
;

1265 #i‚de‡
OPENSSL_NO_TLSEXT


1267 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1268 *
d©a
, 
Àn
,

1269 *
¨g
);

1270 *
é£xt_debug_¨g
;

1271 *
é£xt_ho°«me
;

1272 
£rvî«me_d⁄e
;

1279 
é£xt_°©us_ty≥
;

1281 
é£xt_°©us_ex≥˘ed
;

1283 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1284 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1286 *
é£xt_oc•_ª•
;

1287 
é£xt_oc•_ª•Àn
;

1290 
é£xt_tickë_ex≥˘ed
;

1291 #i‚de‡
OPENSSL_NO_EC


1292 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1293 *
é£xt_e˝oötf‹m©li°
;

1294 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1295 *
é£xt_ñlùticcurvñi°
;

1299 *
é£xt_›aque_¥f_öput
;

1300 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1303 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1306 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1307 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1310 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1311 *
és_£ssi⁄_£¸ë_cb_¨g
;

1313 
SSL_CTX
 * 
öôül_˘x
;

1315 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1323 *
√xt_¥Ÿo_√gŸüãd
;

1324 
√xt_¥Ÿo_√gŸüãd_Àn
;

1327 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1329 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1330 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1332 
é£xt_hóπbót
;

1337 
é£xt_hb_≥ndög
;

1338 
é£xt_hb_£q
;

1340 
	#£ssi⁄_˘x
 
˘x


	)

1343 
ª√gŸüã
;

1347 #i‚de‡
OPENSSL_NO_SRP


1348 
SRP_CTX
 
§p_˘x
;

1354 #ifde‡
__˝lu•lus


1358 
	~<›ís¶/s¶2.h
>

1359 
	~<›ís¶/s¶3.h
>

1360 
	~<›ís¶/és1.h
>

1361 
	~<›ís¶/dés1.h
>

1362 
	~<›ís¶/s¶23.h
>

1363 
	~<›ís¶/§ç.h
>

1365 #ifde‡ 
__˝lu•lus


1370 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1371 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1372 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1373 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1374 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1375 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1384 
	#SSL_ST_CONNECT
 0x1000

	)

1385 
	#SSL_ST_ACCEPT
 0x2000

	)

1386 
	#SSL_ST_MASK
 0x0FFF

	)

1387 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1388 
	#SSL_ST_BEFORE
 0x4000

	)

1389 
	#SSL_ST_OK
 0x03

	)

1390 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1392 
	#SSL_CB_LOOP
 0x01

	)

1393 
	#SSL_CB_EXIT
 0x02

	)

1394 
	#SSL_CB_READ
 0x04

	)

1395 
	#SSL_CB_WRITE
 0x08

	)

1396 
	#SSL_CB_ALERT
 0x4000

	)

1397 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1398 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1399 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1400 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1401 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1402 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1403 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1404 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1407 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1408 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1409 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1410 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1411 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1412 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1416 
	#SSL_ST_READ_HEADER
 0xF0

	)

1417 
	#SSL_ST_READ_BODY
 0xF1

	)

1418 
	#SSL_ST_READ_DONE
 0xF2

	)

1424 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1425 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1429 
	#SSL_VERIFY_NONE
 0x00

	)

1430 
	#SSL_VERIFY_PEER
 0x01

	)

1431 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1432 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1434 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1435 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1439 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1440 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1441 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1442 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1443 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1446 
	#SSL_gë_cùhî
(
s
) \

1447 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1448 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1449 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1450 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1451 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1452 
	#SSL_gë_cùhî_«me
(
s
) \

1453 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1454 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1455 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1456 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1457 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1459 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1460 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1462 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1464 
	#SSL_AD_REASON_OFFSET
 1000

	)

1467 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1468 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1469 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1470 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1471 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1472 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1473 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1474 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1475 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1476 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1477 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1478 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1479 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1480 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1481 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1482 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1483 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1484 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1485 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1486 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1487 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1488 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1489 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1490 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1491 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1492 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1493 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1494 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1495 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1496 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1498 
	#SSL_ERROR_NONE
 0

	)

1499 
	#SSL_ERROR_SSL
 1

	)

1500 
	#SSL_ERROR_WANT_READ
 2

	)

1501 
	#SSL_ERROR_WANT_WRITE
 3

	)

1502 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1503 
	#SSL_ERROR_SYSCALL
 5

	)

1504 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1505 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1506 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1508 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1509 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1510 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1511 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1512 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1513 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1514 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1516 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1517 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1518 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1519 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1520 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1521 
	#SSL_CTRL_GET_FLAGS
 13

	)

1522 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1524 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1525 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1528 
	#SSL_CTRL_SET_MTU
 17

	)

1530 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1531 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1532 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1533 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1534 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1535 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1536 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1537 
	#SSL_CTRL_SESS_HIT
 27

	)

1538 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1539 
	#SSL_CTRL_SESS_MISSES
 29

	)

1540 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1541 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1542 
	#SSL_CTRL_OPTIONS
 32

	)

1543 
	#SSL_CTRL_MODE
 33

	)

1545 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1546 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1547 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1548 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1549 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1550 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1552 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1553 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1555 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1558 #i‚de‡
OPENSSL_NO_TLSEXT


1559 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1560 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1561 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1562 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1563 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1564 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1565 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1566 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1567 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1568 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1569 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1570 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1571 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1572 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1573 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1574 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1575 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1576 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1577 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1579 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1581 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1582 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1583 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1585 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1586 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1587 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1588 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1589 #i‚de‡
OPENSSL_NO_HEARTBEATS


1590 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1591 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1592 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1596 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1597 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1598 
	#DTLS_CTRL_LISTEN
 75

	)

1600 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1601 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1602 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1604 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1605 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1607 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1608 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1609 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1610 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1611 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1612 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1614 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1615 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1616 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1617 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1618 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1619 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1620 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1621 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1623 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1624 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1625 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1626 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1627 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1628 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1629 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1630 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1632 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1633 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1634 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1635 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1636 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1637 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1638 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1639 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1641 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1642 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1643 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1644 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1645 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1646 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1648 #i‚de‡
OPENSSL_NO_BIO


1649 
BIO_METHOD
 *
BIO_f_s¶
();

1650 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1651 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1652 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1653 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1654 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1658 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1659 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1660 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1661 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1662 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1663 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1664 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1665 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1666 
SSL_˛ór
(
SSL
 *
s
);

1668 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1670 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1671 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1672 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1673 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1674 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1676 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1677 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1678 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1679 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1680 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1681 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1682 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1683 #i‚de‡
OPENSSL_NO_SOCK


1684 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1685 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1686 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1688 #i‚de‡
OPENSSL_NO_BIO


1689 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1690 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1691 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1693 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1694 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1695 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1696 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1697 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1698 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1699 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1700 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1701 #i‚de‡
OPENSSL_NO_RSA


1702 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1704 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1705 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1706 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1707 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1708 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1710 #i‚de‡
OPENSSL_NO_STDIO


1711 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1712 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1713 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1714 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1715 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1716 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1717 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1718 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1719 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1720 c⁄° *
fûe
);

1721 #i‚de‡
OPENSSL_SYS_VMS


1722 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1723 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1724 c⁄° *
dú
);

1730 
SSL_lﬂd_îr‹_°rögs
();

1731 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1732 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1733 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1734 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1735 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1736 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1737 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1738 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1739 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1740 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1741 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1742 
sid_˘x_Àn
);

1744 
SSL_SESSION
 *
SSL_SESSION_√w
();

1745 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1746 *
Àn
);

1747 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1748 #i‚de‡
OPENSSL_NO_FP_API


1749 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1751 #i‚de‡
OPENSSL_NO_BIO


1752 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1754 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1755 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1756 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1757 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1758 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1759 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1760 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1761 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1762 
id_Àn
);

1763 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1764 
Àngth
);

1766 #ifde‡
HEADER_X509_H


1767 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1770 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1772 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1773 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1774 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1775 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1776 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1777 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1778 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1779 #i‚de‡
OPENSSL_NO_RSA


1780 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1782 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1783 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1784 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1785 c⁄° *
d
, 
Àn
);

1786 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1787 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1789 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1790 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1792 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1793 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1795 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1796 
sid_˘x_Àn
);

1798 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1799 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1800 
sid_˘x_Àn
);

1802 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1803 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1804 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1805 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1807 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1808 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1810 #i‚de‡
OPENSSL_NO_SRP


1811 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
,*
«me
);

1812 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
,*
∑ssw‹d
);

1813 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1814 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1815 *(*
cb
)(
SSL
 *,*));

1816 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1817 (*
cb
)(
SSL
 *,*));

1818 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1819 (*
cb
)(
SSL
 *,*,*));

1820 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1822 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1823 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1824 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1825 c⁄° *
gΩ
);

1827 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1828 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1830 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1831 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1834 
SSL_‰ì
(
SSL
 *
s¶
);

1835 
SSL_ac˚±
(
SSL
 *
s¶
);

1836 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1837 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1838 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1839 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1840 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1841 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1842 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1843 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1845 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1846 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1849 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1851 #i‚de‡
OPENSSL_NO_SSL2


1852 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1853 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1854 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1857 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1858 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1859 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1861 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1862 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1863 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1865 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1866 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1867 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1869 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1870 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1871 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1873 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1874 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1875 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1878 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1879 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1880 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1882 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1884 
SSL_do_h™dshake
(
SSL
 *
s
);

1885 
SSL_ª√gŸüã
(
SSL
 *
s
);

1886 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1887 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1888 
SSL_shutdown
(
SSL
 *
s
);

1890 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1891 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1892 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1893 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1894 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1895 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1897 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1898 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1899 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1900 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1901 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1902 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1904 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1905 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1907 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1909 
SSL_libøry_öô
();

1911 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1912 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1914 
SSL
 *
SSL_dup
(SSL *
s¶
);

1916 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1917  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1919 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1920 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1921 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1922 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1923 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1924 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1925 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1926 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1927 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1928 c⁄° *
CA∑th
);

1929 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1930 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1931 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1932 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1933 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1934 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1935 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1936 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1937 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1938 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1940 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1941 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1943 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1944 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1945 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1946 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1948 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1949 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1950 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1951 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1953 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1954 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1955 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1956 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1958 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1960 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1961 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1962 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1963 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1964 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1965 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1966 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1967 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1969 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1970 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1971 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1972 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1973 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1974 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1975 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1976 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1977 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1978 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1979 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1980 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1981 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1982 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1984 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1985 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1986 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1987 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1990 #i‚de‡
OPENSSL_NO_RSA


1991 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1992 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1993 
keyÀngth
));

1995 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1996 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1997 
keyÀngth
));

1999 #i‚de‡
OPENSSL_NO_DH


2000 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2001 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2002 
keyÀngth
));

2003 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2004 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2005 
keyÀngth
));

2007 #i‚de‡
OPENSSL_NO_ECDH


2008 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2009 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2010 
keyÀngth
));

2011 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2012 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2013 
keyÀngth
));

2016 #i‚de‡
OPENSSL_NO_COMP


2017 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2018 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2019 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2020 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2021 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

2023 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2024 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2025 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2026 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2027 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

2031 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2033 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2034 *
¨g
);

2037 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

2039 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2040 
SSL_ˇche_hô
(
SSL
 *
s
);

2046 
ERR_lﬂd_SSL_°rögs
();

2051 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2052 
	#SSL_F_CLIENT_FINISHED
 167

	)

2053 
	#SSL_F_CLIENT_HELLO
 101

	)

2054 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2055 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2056 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2057 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2058 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2059 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2060 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2061 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2062 
	#SSL_F_DTLS1_CONNECT
 249

	)

2063 
	#SSL_F_DTLS1_ENC
 250

	)

2064 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2065 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2066 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2067 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2068 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2069 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2070 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2071 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2072 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2073 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2074 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2075 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2076 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2077 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2078 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2079 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2080 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2081 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2082 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2083 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2084 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2085 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2086 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2087 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2088 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2089 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2090 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2091 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2092 
	#SSL_F_READ_N
 112

	)

2093 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2094 
	#SSL_F_SERVER_FINISH
 239

	)

2095 
	#SSL_F_SERVER_HELLO
 114

	)

2096 
	#SSL_F_SERVER_VERIFY
 240

	)

2097 
	#SSL_F_SSL23_ACCEPT
 115

	)

2098 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2099 
	#SSL_F_SSL23_CONNECT
 117

	)

2100 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2101 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2102 
	#SSL_F_SSL23_PEEK
 237

	)

2103 
	#SSL_F_SSL23_READ
 120

	)

2104 
	#SSL_F_SSL23_WRITE
 121

	)

2105 
	#SSL_F_SSL2_ACCEPT
 122

	)

2106 
	#SSL_F_SSL2_CONNECT
 123

	)

2107 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2108 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2109 
	#SSL_F_SSL2_PEEK
 234

	)

2110 
	#SSL_F_SSL2_READ
 125

	)

2111 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2112 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2113 
	#SSL_F_SSL2_WRITE
 127

	)

2114 
	#SSL_F_SSL3_ACCEPT
 128

	)

2115 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2116 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2117 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2118 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2119 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2120 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2121 
	#SSL_F_SSL3_CONNECT
 132

	)

2122 
	#SSL_F_SSL3_CTRL
 213

	)

2123 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2124 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2125 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2126 
	#SSL_F_SSL3_ENC
 134

	)

2127 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2128 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2129 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2130 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2131 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2132 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2133 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2134 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2135 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2136 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2137 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2138 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2139 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2140 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2141 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2142 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2143 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2144 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2145 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2146 
	#SSL_F_SSL3_PEEK
 235

	)

2147 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2148 
	#SSL_F_SSL3_READ_N
 149

	)

2149 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2150 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2151 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2152 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2153 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2154 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2155 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2156 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2157 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2158 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2159 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2160 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2161 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2162 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2163 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2164 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2165 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2166 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2167 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2168 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2169 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2170 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2171 
	#SSL_F_SSL_CERT_DUP
 221

	)

2172 
	#SSL_F_SSL_CERT_INST
 222

	)

2173 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2174 
	#SSL_F_SSL_CERT_NEW
 162

	)

2175 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2176 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2177 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2178 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2179 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2180 
	#SSL_F_SSL_CLEAR
 164

	)

2181 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2182 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2183 
	#SSL_F_SSL_CTRL
 232

	)

2184 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2185 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2186 
	#SSL_F_SSL_CTX_NEW
 169

	)

2187 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2188 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2189 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2190 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2191 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2192 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2193 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2194 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2195 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2196 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2197 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2198 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2199 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2200 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2201 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2202 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2203 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2204 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2205 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2206 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2207 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2208 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2209 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2210 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2211 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2212 
	#SSL_F_SSL_NEW
 186

	)

2213 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2214 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2215 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2216 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2217 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2218 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2219 
	#SSL_F_SSL_PEEK
 270

	)

2220 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2221 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2222 
	#SSL_F_SSL_READ
 223

	)

2223 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2224 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2225 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2226 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2227 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2228 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2229 
	#SSL_F_SSL_SET_CERT
 191

	)

2230 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2231 
	#SSL_F_SSL_SET_FD
 192

	)

2232 
	#SSL_F_SSL_SET_PKEY
 193

	)

2233 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2234 
	#SSL_F_SSL_SET_RFD
 194

	)

2235 
	#SSL_F_SSL_SET_SESSION
 195

	)

2236 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2237 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2238 
	#SSL_F_SSL_SET_TRUST
 228

	)

2239 
	#SSL_F_SSL_SET_WFD
 196

	)

2240 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2241 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2242 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2243 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2244 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2245 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2246 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2247 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2248 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2249 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2250 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2251 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2252 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2253 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2254 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2255 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2256 
	#SSL_F_SSL_WRITE
 208

	)

2257 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2258 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2259 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2260 
	#SSL_F_TLS1_ENC
 210

	)

2261 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2262 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2263 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2264 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2265 
	#SSL_F_TLS1_PRF
 284

	)

2266 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2267 
	#SSL_F_WRITE_PENDING
 212

	)

2270 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2271 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2272 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2273 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2274 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2275 
	#SSL_R_BAD_CHECKSUM
 104

	)

2276 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2277 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2278 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2279 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2280 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2281 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2282 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2283 
	#SSL_R_BAD_ECC_CERT
 304

	)

2284 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2285 
	#SSL_R_BAD_ECPOINT
 306

	)

2286 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2287 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2288 
	#SSL_R_BAD_LENGTH
 271

	)

2289 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2290 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2291 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2292 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2293 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2294 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2295 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2296 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2297 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2298 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2299 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2300 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2301 
	#SSL_R_BAD_SIGNATURE
 123

	)

2302 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2303 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2304 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2305 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2306 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2307 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2308 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2309 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2310 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2311 
	#SSL_R_BAD_STATE
 126

	)

2312 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2313 
	#SSL_R_BIO_NOT_SET
 128

	)

2314 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2315 
	#SSL_R_BN_LIB
 130

	)

2316 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2317 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2318 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2319 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2320 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2321 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2322 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2323 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2324 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2325 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2326 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2327 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2328 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2329 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2330 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2331 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2332 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2333 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2334 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2335 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2336 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2337 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2338 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2339 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2340 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2341 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2342 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2343 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2344 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2345 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2346 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2347 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2348 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2349 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2350 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2351 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2352 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2353 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2354 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2355 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2356 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2357 
	#SSL_R_HTTP_REQUEST
 156

	)

2358 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2359 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2360 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2361 
	#SSL_R_INVALID_COMMAND
 280

	)

2362 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2363 
	#SSL_R_INVALID_PURPOSE
 278

	)

2364 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2365 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2366 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2367 
	#SSL_R_INVALID_TRUST
 279

	)

2368 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2369 
	#SSL_R_KRB5
 285

	)

2370 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2371 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2372 
	#SSL_R_KRB5_C_INIT
 288

	)

2373 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2374 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2375 
	#SSL_R_KRB5_S_INIT
 291

	)

2376 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2377 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2378 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2379 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2380 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2381 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2382 
	#SSL_R_LIBRARY_BUG
 274

	)

2383 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2384 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2385 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2386 
	#SSL_R_MISSING_DH_KEY
 163

	)

2387 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2388 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2389 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2390 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2391 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2392 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2393 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2394 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2395 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2396 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2397 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2398 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2399 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2400 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2401 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2402 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2403 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2404 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2405 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2406 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2407 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2408 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2409 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2410 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2411 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2412 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2413 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2414 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2415 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2416 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2417 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2418 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2419 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2420 
	#SSL_R_NO_PUBLICKEY
 192

	)

2421 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2422 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2423 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2424 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2425 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2426 
	#SSL_R_NULL_SSL_CTX
 195

	)

2427 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2428 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2429 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2430 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2431 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2432 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2433 
	#SSL_R_PARSE_TLSEXT
 227

	)

2434 
	#SSL_R_PATH_TOO_LONG
 270

	)

2435 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2436 
	#SSL_R_PEER_ERROR
 200

	)

2437 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2438 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2439 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2440 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2441 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2442 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2443 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2444 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2445 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2446 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2447 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2448 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2449 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2450 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2451 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2452 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2453 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2454 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2455 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2456 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2457 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2458 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2459 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2460 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2461 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2462 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2463 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2464 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2465 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2466 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2467 
	#SSL_R_SHORT_READ
 219

	)

2468 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2469 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2470 
	#SSL_R_SRP_A_CALC
 361

	)

2471 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2472 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2473 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2474 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2475 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2476 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2477 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2478 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2479 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2480 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2481 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2482 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2483 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2484 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2485 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2486 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2487 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2488 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2489 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2490 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2491 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2492 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2493 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2494 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2495 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2496 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2497 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2498 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2499 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2500 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2501 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2502 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2503 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2504 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2505 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2506 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2507 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2508 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2509 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2510 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2511 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2512 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2513 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2514 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2515 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2516 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2517 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2518 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2519 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2520 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2521 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2522 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2523 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2524 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2525 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2526 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2527 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2528 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2529 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2530 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2531 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2532 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2533 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2534 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2535 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2536 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2537 
	#SSL_R_UNINITIALIZED
 276

	)

2538 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2539 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2540 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2541 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2542 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2543 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2544 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2545 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2546 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2547 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2548 
	#SSL_R_UNKNOWN_STATE
 255

	)

2549 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2550 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2551 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2552 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2553 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2554 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2555 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2556 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2557 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2558 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2559 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2560 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2561 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2562 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2563 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2564 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2565 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2566 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2567 
	#SSL_R_X509_LIB
 268

	)

2568 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2570 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
) *

80 (*
	tX509V3_EXT_I2V
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

81 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

82 * (*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

83 
	tv3_ext_˘x
 *
	t˘x
,

84 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

85 * (*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

86 * (*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

87 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 (*
X509V3_EXT_I2R
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tBIO
 *
	tout
, 
	tödít
);

90 * (*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

95 
	sv3_ext_mëhod
 {

96 
ext_nid
;

97 
ext_Êags
;

99 
ASN1_ITEM_EXP
 *
ô
;

101 
X509V3_EXT_NEW
 
ext_√w
;

102 
X509V3_EXT_FREE
 
ext_‰ì
;

103 
X509V3_EXT_D2I
 
d2i
;

104 
X509V3_EXT_I2D
 
i2d
;

107 
X509V3_EXT_I2S
 
i2s
;

108 
X509V3_EXT_S2I
 
s2i
;

111 
X509V3_EXT_I2V
 
i2v
;

112 
X509V3_EXT_V2I
 
v2i
;

115 
X509V3_EXT_I2R
 
i2r
;

116 
X509V3_EXT_R2I
 
r2i
;

118 *
u§_d©a
;

121 
	sX509V3_CONF_METHOD_°
 {

122 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

123 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

124 (*
‰ì_°rög
)(*
db
, * 
°rög
);

125 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

126 } 
	tX509V3_CONF_METHOD
;

129 
	sv3_ext_˘x
 {

130 
	#CTX_TEST
 0x1

	)

131 
Êags
;

132 
X509
 *
issuî_˚π
;

133 
X509
 *
subje˘_˚π
;

134 
X509_REQ
 *
subje˘_ªq
;

135 
X509_CRL
 *
¸l
;

136 
X509V3_CONF_METHOD
 *
db_mëh
;

137 *
db
;

141 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

143 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

146 
	#X509V3_EXT_DYNAMIC
 0x1

	)

147 
	#X509V3_EXT_CTX_DEP
 0x2

	)

148 
	#X509V3_EXT_MULTILINE
 0x4

	)

150 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

152 
	sBASIC_CONSTRAINTS_°
 {

153 
ˇ
;

154 
ASN1_INTEGER
 *
∑thÀn
;

155 } 
	tBASIC_CONSTRAINTS
;

158 
	sPKEY_USAGE_PERIOD_°
 {

159 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

160 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

161 } 
	tPKEY_USAGE_PERIOD
;

163 
	sŸhîName_°
 {

164 
ASN1_OBJECT
 *
ty≥_id
;

165 
ASN1_TYPE
 *
vÆue
;

166 } 
	tOTHERNAME
;

168 
	sEDIP¨tyName_°
 {

169 
ASN1_STRING
 *
«meAssig√r
;

170 
ASN1_STRING
 *
∑πyName
;

171 } 
	tEDIPARTYNAME
;

173 
	sGENERAL_NAME_°
 {

175 
	#GEN_OTHERNAME
 0

	)

176 
	#GEN_EMAIL
 1

	)

177 
	#GEN_DNS
 2

	)

178 
	#GEN_X400
 3

	)

179 
	#GEN_DIRNAME
 4

	)

180 
	#GEN_EDIPARTY
 5

	)

181 
	#GEN_URI
 6

	)

182 
	#GEN_IPADD
 7

	)

183 
	#GEN_RID
 8

	)

185 
ty≥
;

187 *
±r
;

188 
OTHERNAME
 *
ŸhîName
;

189 
ASN1_IA5STRING
 *
rfc822Name
;

190 
ASN1_IA5STRING
 *
dNSName
;

191 
ASN1_TYPE
 *
x400Addªss
;

192 
X509_NAME
 *
dúe˘‹yName
;

193 
EDIPARTYNAME
 *
ediP¨tyName
;

194 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

195 
ASN1_OCTET_STRING
 *
iPAddªss
;

196 
ASN1_OBJECT
 *
ªgi°îedID
;

199 
ASN1_OCTET_STRING
 *
ù
;

200 
X509_NAME
 *
dún
;

201 
ASN1_IA5STRING
 *
ü5
;

202 
ASN1_OBJECT
 *
rid
;

203 
ASN1_TYPE
 *
Ÿhî
;

204 } 
d
;

205 } 
	tGENERAL_NAME
;

207 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

209 
	sACCESS_DESCRIPTION_°
 {

210 
ASN1_OBJECT
 *
mëhod
;

211 
GENERAL_NAME
 *
loˇti⁄
;

212 } 
	tACCESS_DESCRIPTION
;

214 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

216 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

218 
DECLARE_STACK_OF
(
GENERAL_NAME
)

219 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

221 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

222 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

224 
	sDIST_POINT_NAME_°
 {

225 
ty≥
;

227 
GENERAL_NAMES
 *
fuŒ«me
;

228 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

229 } 
«me
;

231 
X509_NAME
 *
d≤ame
;

232 } 
	tDIST_POINT_NAME
;

234 
	#CRLDP_ALL_REASONS
 0x807f

	)

236 
	#CRL_REASON_NONE
 -1

	)

237 
	#CRL_REASON_UNSPECIFIED
 0

	)

238 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

239 
	#CRL_REASON_CA_COMPROMISE
 2

	)

240 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

241 
	#CRL_REASON_SUPERSEDED
 4

	)

242 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

243 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

244 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

245 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

246 
	#CRL_REASON_AA_COMPROMISE
 10

	)

248 
	sDIST_POINT_°
 {

249 
DIST_POINT_NAME
 *
di°poöt
;

250 
ASN1_BIT_STRING
 *
ªas⁄s
;

251 
GENERAL_NAMES
 *
CRLissuî
;

252 
dp_ªas⁄s
;

255 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

257 
DECLARE_STACK_OF
(
DIST_POINT
)

258 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

260 
	sAUTHORITY_KEYID_°
 {

261 
ASN1_OCTET_STRING
 *
keyid
;

262 
GENERAL_NAMES
 *
issuî
;

263 
ASN1_INTEGER
 *
£rül
;

268 
	sSXNET_ID_°
 {

269 
ASN1_INTEGER
 *
z⁄e
;

270 
ASN1_OCTET_STRING
 *
u£r
;

271 } 
	tSXNETID
;

273 
DECLARE_STACK_OF
(
SXNETID
)

274 
DECLARE_ASN1_SET_OF
(
SXNETID
)

276 
	sSXNET_°
 {

277 
ASN1_INTEGER
 *
vîsi⁄
;

278 
STACK_OF
(
SXNETID
Ë*
ids
;

279 } 
	tSXNET
;

281 
	sNOTICEREF_°
 {

282 
ASN1_STRING
 *
‹g™iz©i⁄
;

283 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

284 } 
	tNOTICEREF
;

286 
	sUSERNOTICE_°
 {

287 
NOTICEREF
 *
nŸi˚ªf
;

288 
ASN1_STRING
 *
ex±ext
;

289 } 
	tUSERNOTICE
;

291 
	sPOLICYQUALINFO_°
 {

292 
ASN1_OBJECT
 *
pquÆid
;

294 
ASN1_IA5STRING
 *
˝suri
;

295 
USERNOTICE
 *
u£∫Ÿi˚
;

296 
ASN1_TYPE
 *
Ÿhî
;

297 } 
d
;

298 } 
	tPOLICYQUALINFO
;

300 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

301 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

303 
	sPOLICYINFO_°
 {

304 
ASN1_OBJECT
 *
pﬁicyid
;

305 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

306 } 
	tPOLICYINFO
;

308 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

310 
DECLARE_STACK_OF
(
POLICYINFO
)

311 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

313 
	sPOLICY_MAPPING_°
 {

314 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

315 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

316 } 
	tPOLICY_MAPPING
;

318 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

320 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

322 
	sGENERAL_SUBTREE_°
 {

323 
GENERAL_NAME
 *
ba£
;

324 
ASN1_INTEGER
 *
möimum
;

325 
ASN1_INTEGER
 *
maximum
;

326 } 
	tGENERAL_SUBTREE
;

328 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

330 
	sNAME_CONSTRAINTS_°
 {

331 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

332 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

335 
	sPOLICY_CONSTRAINTS_°
 {

336 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

337 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

338 } 
	tPOLICY_CONSTRAINTS
;

341 
	sPROXY_POLICY_°


343 
ASN1_OBJECT
 *
pﬁicyL™guage
;

344 
ASN1_OCTET_STRING
 *
pﬁicy
;

345 } 
	tPROXY_POLICY
;

347 
	sPROXY_CERT_INFO_EXTENSION_°


349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°


358 
DIST_POINT_NAME
 *
di°poöt
;

359 
⁄lyu£r
;

360 
⁄lyCA
;

361 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

362 
ödúe˘CRL
;

363 
⁄ly©å
;

368 
	#IDP_PRESENT
 0x1

	)

370 
	#IDP_INVALID
 0x2

	)

372 
	#IDP_ONLYUSER
 0x4

	)

374 
	#IDP_ONLYCA
 0x8

	)

376 
	#IDP_ONLYATTR
 0x10

	)

378 
	#IDP_INDIRECT
 0x20

	)

380 
	#IDP_REASONS
 0x40

	)

382 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

383 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

385 
	#X509V3_£t_˘x_ã°
(
˘x
) \

386 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

387 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

389 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

392 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

393 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

394 
NULL
, NULL, \

395 
èbÀ
}

	)

397 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

399 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

400 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

402 
NULL
}

	)

404 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

409 
	#EXFLAG_BCONS
 0x1

	)

410 
	#EXFLAG_KUSAGE
 0x2

	)

411 
	#EXFLAG_XKUSAGE
 0x4

	)

412 
	#EXFLAG_NSCERT
 0x8

	)

414 
	#EXFLAG_CA
 0x10

	)

416 
	#EXFLAG_SI
 0x20

	)

417 
	#EXFLAG_SS
 0x20

	)

418 
	#EXFLAG_V1
 0x40

	)

419 
	#EXFLAG_INVALID
 0x80

	)

420 
	#EXFLAG_SET
 0x100

	)

421 
	#EXFLAG_CRITICAL
 0x200

	)

422 
	#EXFLAG_PROXY
 0x400

	)

424 
	#EXFLAG_INVALID_POLICY
 0x800

	)

425 
	#EXFLAG_FRESHEST
 0x1000

	)

427 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

428 
	#KU_NON_REPUDIATION
 0x0040

	)

429 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

430 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

431 
	#KU_KEY_AGREEMENT
 0x0008

	)

432 
	#KU_KEY_CERT_SIGN
 0x0004

	)

433 
	#KU_CRL_SIGN
 0x0002

	)

434 
	#KU_ENCIPHER_ONLY
 0x0001

	)

435 
	#KU_DECIPHER_ONLY
 0x8000

	)

437 
	#NS_SSL_CLIENT
 0x80

	)

438 
	#NS_SSL_SERVER
 0x40

	)

439 
	#NS_SMIME
 0x20

	)

440 
	#NS_OBJSIGN
 0x10

	)

441 
	#NS_SSL_CA
 0x04

	)

442 
	#NS_SMIME_CA
 0x02

	)

443 
	#NS_OBJSIGN_CA
 0x01

	)

444 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

446 
	#XKU_SSL_SERVER
 0x1

	)

447 
	#XKU_SSL_CLIENT
 0x2

	)

448 
	#XKU_SMIME
 0x4

	)

449 
	#XKU_CODE_SIGN
 0x8

	)

450 
	#XKU_SGC
 0x10

	)

451 
	#XKU_OCSP_SIGN
 0x20

	)

452 
	#XKU_TIMESTAMP
 0x40

	)

453 
	#XKU_DVCS
 0x80

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

463 c⁄° 
X509
 *, );

464 *
«me
;

465 *
¢ame
;

466 *
u§_d©a
;

467 } 
	tX509_PURPOSE
;

469 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

470 
	#X509_PURPOSE_SSL_SERVER
 2

	)

471 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

472 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

473 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

474 
	#X509_PURPOSE_CRL_SIGN
 6

	)

475 
	#X509_PURPOSE_ANY
 7

	)

476 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

477 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

479 
	#X509_PURPOSE_MIN
 1

	)

480 
	#X509_PURPOSE_MAX
 9

	)

484 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

486 
	#X509V3_EXT_DEFAULT
 0

	)

488 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

490 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

492 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

496 
	#X509V3_ADD_OP_MASK
 0xfL

	)

497 
	#X509V3_ADD_DEFAULT
 0L

	)

498 
	#X509V3_ADD_APPEND
 1L

	)

499 
	#X509V3_ADD_REPLACE
 2L

	)

500 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

501 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

502 
	#X509V3_ADD_DELETE
 5L

	)

503 
	#X509V3_ADD_SILENT
 0x10

	)

505 
DECLARE_STACK_OF
(
X509_PURPOSE
)

507 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

510 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

512 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

513 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

516 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

520 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

522 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

524 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

525 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

526 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

530 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

531 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

537 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

539 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

541 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

542 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

543 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

544 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

546 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

547 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

548 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

549 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

550 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

551 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

552 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

553 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

554 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

556 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

557 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

559 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

560 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

562 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

563 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

564 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

565 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

566 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

568 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

569 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

570 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

571 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

573 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

575 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

577 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

578 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

580 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

581 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

582 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

584 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

585 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

587 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

588 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

591 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

593 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

594 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

595 
gí_ty≥
, *
vÆue
, 
is_nc
);

597 #ifde‡
HEADER_CONF_H


598 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

599 
CONF_VALUE
 *
˙f
);

600 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

601 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

602 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

603 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

605 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

606 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

607 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

608 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

609 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

610 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

612 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

613 
ext_nid
, *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

615 *
«me
, *
vÆue
);

616 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

617 *
£˘i⁄
, 
X509
 *
˚π
);

618 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

619 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

620 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

621 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

623 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

624 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

625 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

626 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

627 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

628 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

631 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

632 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

633 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

634 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

635 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

636 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

638 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

639 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

640 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

641 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

642 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

643 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

644 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

645 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

646 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

647 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

648 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

649 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

650 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

651 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

652 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

653 
X509V3_EXT_˛ónup
();

655 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

656 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

657 
X509V3_add_°™d¨d_exãnsi⁄s
();

658 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

659 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

660 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

663 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

664 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

666 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

667 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

668 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

670 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

671 
ml
);

672 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

673 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

675 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

677 
X509_check_ˇ
(
X509
 *
x
);

678 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

679 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

680 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

681 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

682 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

683 
X509_PURPOSE_gë_cou¡
();

684 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

685 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

686 
X509_PURPOSE_gë_by_id
(
id
);

687 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

688 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

689 *
«me
, *
¢ame
, *
¨g
);

690 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

691 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

692 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

693 
X509_PURPOSE_˛ónup
();

694 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

696 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

697 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

698 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

699 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

701 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

702 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

703 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

704 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

705 
chty≥
);

707 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

708 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

710 #i‚de‡
OPENSSL_NO_RFC3779


712 
	sASR™ge_°
 {

713 
ASN1_INTEGER
 *
mö
, *
max
;

714 } 
	tASR™ge
;

716 
	#ASIdOrR™ge_id
 0

	)

717 
	#ASIdOrR™ge_ønge
 1

	)

719 
	sASIdOrR™ge_°
 {

720 
ty≥
;

722 
ASN1_INTEGER
 *
id
;

723 
ASR™ge
 *
ønge
;

724 } 
u
;

725 } 
	tASIdOrR™ge
;

727 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

728 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

730 
	#ASIdítifõrChoi˚_öhîô
 0

	)

731 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

733 
	sASIdítifõrChoi˚_°
 {

734 
ty≥
;

736 
ASN1_NULL
 *
öhîô
;

737 
ASIdOrR™ges
 *
asIdsOrR™ges
;

738 } 
u
;

739 } 
	tASIdítifõrChoi˚
;

741 
	sASIdítifõrs_°
 {

742 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

743 } 
	tASIdítifõrs
;

745 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

746 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

747 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

748 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

751 
	sIPAddªssR™ge_°
 {

752 
ASN1_BIT_STRING
 *
mö
, *
max
;

753 } 
	tIPAddªssR™ge
;

755 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

756 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

758 
	sIPAddªssOrR™ge_°
 {

759 
ty≥
;

761 
ASN1_BIT_STRING
 *
addªssPªfix
;

762 
IPAddªssR™ge
 *
addªssR™ge
;

763 } 
u
;

764 } 
	tIPAddªssOrR™ge
;

766 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

767 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

769 
	#IPAddªssChoi˚_öhîô
 0

	)

770 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

772 
	sIPAddªssChoi˚_°
 {

773 
ty≥
;

775 
ASN1_NULL
 *
öhîô
;

776 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

777 } 
u
;

778 } 
	tIPAddªssChoi˚
;

780 
	sIPAddªssFamûy_°
 {

781 
ASN1_OCTET_STRING
 *
addªssFamûy
;

782 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

783 } 
	tIPAddªssFamûy
;

785 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

786 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

788 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

789 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

790 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

791 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

796 
	#V3_ASID_ASNUM
 0

	)

797 
	#V3_ASID_RDI
 1

	)

805 
	#IANA_AFI_IPV4
 1

	)

806 
	#IANA_AFI_IPV6
 2

	)

813 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

814 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

815 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

816 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

817 c⁄° 
afi
, c⁄° *
ßfi
);

818 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

819 c⁄° 
afi
, c⁄° *
ßfi
,

820 *
a
, c⁄° 
¥efixÀn
);

821 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

822 c⁄° 
afi
, c⁄° *
ßfi
,

823 *
mö
, *
max
);

824 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

825 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

826 *
mö
, *
max
,

827 c⁄° 
Àngth
);

832 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

833 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

834 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

835 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

840 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

841 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

842 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

843 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

848 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

849 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

850 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

851 
ASIdítifõrs
 *
ext
,

852 
Ælow_öhîô™˚
);

853 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

854 
IPAddrBlocks
 *
ext
,

855 
Ælow_öhîô™˚
);

863 
ERR_lﬂd_X509V3_°rögs
();

868 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

869 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

870 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

871 
	#X509V3_F_COPY_EMAIL
 122

	)

872 
	#X509V3_F_COPY_ISSUER
 123

	)

873 
	#X509V3_F_DO_DIRNAME
 144

	)

874 
	#X509V3_F_DO_EXT_CONF
 124

	)

875 
	#X509V3_F_DO_EXT_I2D
 135

	)

876 
	#X509V3_F_DO_EXT_NCONF
 151

	)

877 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

878 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

879 
	#X509V3_F_HEX_TO_STRING
 111

	)

880 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

881 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

882 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

883 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

884 
	#X509V3_F_NOTICE_SECTION
 132

	)

885 
	#X509V3_F_NREF_NOS
 133

	)

886 
	#X509V3_F_POLICY_SECTION
 131

	)

887 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

888 
	#X509V3_F_R2I_CERTPOL
 130

	)

889 
	#X509V3_F_R2I_PCI
 155

	)

890 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

891 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

892 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

893 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

894 
	#X509V3_F_S2I_SKEY_ID
 115

	)

895 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

896 
	#X509V3_F_STRING_TO_HEX
 113

	)

897 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

898 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

899 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

900 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

901 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

902 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

903 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

904 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

905 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

906 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

907 
	#X509V3_F_V2I_CRLD
 134

	)

908 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

909 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

910 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

911 
	#X509V3_F_V2I_IDP
 157

	)

912 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

913 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

914 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

915 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

916 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

917 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

918 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

919 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

920 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

921 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

922 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

923 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

924 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

925 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

926 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

927 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

928 
	#X509V3_F_X509V3_GET_STRING
 143

	)

929 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

930 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

931 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

932 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

935 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

936 
	#X509V3_R_BAD_OBJECT
 119

	)

937 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

938 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

939 
	#X509V3_R_DIRNAME_ERROR
 149

	)

940 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

941 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

942 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

943 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

944 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

945 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

946 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

947 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

948 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

949 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

950 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

951 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

952 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

953 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

954 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

955 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

956 
	#X509V3_R_INVALID_ASRANGE
 163

	)

957 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

958 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

959 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

960 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

961 
	#X509V3_R_INVALID_NAME
 106

	)

962 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

963 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

964 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

965 
	#X509V3_R_INVALID_NUMBER
 140

	)

966 
	#X509V3_R_INVALID_NUMBERS
 141

	)

967 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

968 
	#X509V3_R_INVALID_OPTION
 138

	)

969 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

970 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

971 
	#X509V3_R_INVALID_PURPOSE
 146

	)

972 
	#X509V3_R_INVALID_SAFI
 164

	)

973 
	#X509V3_R_INVALID_SECTION
 135

	)

974 
	#X509V3_R_INVALID_SYNTAX
 143

	)

975 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

976 
	#X509V3_R_MISSING_VALUE
 124

	)

977 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

978 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

979 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

980 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

981 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

982 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

983 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

984 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

985 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

986 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

987 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

988 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

989 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

990 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

991 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

992 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

993 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

994 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

995 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

996 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

997 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

998 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

999 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1000 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1001 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1002 
	#X509V3_R_USER_TOO_LONG
 132

	)

1004 #ifde‡ 
__˝lu•lus


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/spawn.h

20 #i‚def 
_SPAWN_H


21 
	#_SPAWN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sched.h
>

25 
	~<sig«l.h
>

26 
	~<sys/ty≥s.h
>

32 
	m__Êags
;

33 
pid_t
 
	m__pgΩ
;

34 
sig£t_t
 
	m__sd
;

35 
sig£t_t
 
	m__ss
;

36 
sched_∑øm
 
	m__•
;

37 
	m__pﬁicy
;

38 
	m__∑d
[16];

39 } 
	tposix_•aw«âr_t
;

46 
	m__Æloˇãd
;

47 
	m__u£d
;

48 
__•awn_a˘i⁄
 *
	m__a˘i⁄s
;

49 
	m__∑d
[16];

50 } 
	tposix_•awn_fûe_a˘i⁄s_t
;

54 
	#POSIX_SPAWN_RESETIDS
 0x01

	)

55 
	#POSIX_SPAWN_SETPGROUP
 0x02

	)

56 
	#POSIX_SPAWN_SETSIGDEF
 0x04

	)

57 
	#POSIX_SPAWN_SETSIGMASK
 0x08

	)

58 
	#POSIX_SPAWN_SETSCHEDPARAM
 0x10

	)

59 
	#POSIX_SPAWN_SETSCHEDULER
 0x20

	)

60 #ifde‡
__USE_GNU


61 
	#POSIX_SPAWN_USEVFORK
 0x40

	)

65 
__BEGIN_DECLS


72 
posix_•awn
 (
pid_t
 *
__ª°ri˘
 
__pid
,

73 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

74 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__ª°ri˘


75 
__fûe_a˘i⁄s
,

76 
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘
 
__©åp
,

77 *
__c⁄°
 
__¨gv
[
__ª°ri˘_¨r
],

78 *
__c⁄°
 
__ívp
[
__ª°ri˘_¨r
]);

84 
posix_•aw≈
 (
pid_t
 *
__pid
, 
__c⁄°
 *
__fûe
,

85 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

86 
__c⁄°
 
posix_•aw«âr_t
 *
__©åp
,

87 *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[]);

91 
	$posix_•aw«âr_öô
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

94 
	$posix_•aw«âr_de°roy
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

98 
	$posix_•aw«âr_gësigdeÁu…
 (
__c⁄°
 
posix_•aw«âr_t
 *

99 
__ª°ri˘
 
__©å
,

100 
sig£t_t
 *
__ª°ri˘
 
__sigdeÁu…
)

101 
__THROW
;

104 
	$posix_•aw«âr_£tsigdeÁu…
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

105 
__c⁄°
 
sig£t_t
 *
__ª°ri˘


106 
__sigdeÁu…
)

107 
__THROW
;

110 
	$posix_•aw«âr_gësigmask
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


111 
__©å
,

112 
sig£t_t
 *
__ª°ri˘
 
__sigmask
Ë
__THROW
;

115 
	$posix_•aw«âr_£tsigmask
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

116 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__sigmask
)

117 
__THROW
;

120 
	$posix_•aw«âr_gëÊags
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


121 
__©å
,

122 *
__ª°ri˘
 
__Êags
Ë
__THROW
;

125 
	$posix_•aw«âr_£tÊags
 (
posix_•aw«âr_t
 *
_©å
,

126 
__Êags
Ë
__THROW
;

129 
	$posix_•aw«âr_gëpgroup
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


130 
__©å
, 
pid_t
 *
__ª°ri˘
 
__pgroup
)

131 
__THROW
;

134 
	$posix_•aw«âr_£çgroup
 (
posix_•aw«âr_t
 *
__©å
,

135 
pid_t
 
__pgroup
Ë
__THROW
;

138 
	$posix_•aw«âr_gëschedpﬁicy
 (
__c⁄°
 
posix_•aw«âr_t
 *

139 
__ª°ri˘
 
__©å
,

140 *
__ª°ri˘
 
__schedpﬁicy
)

141 
__THROW
;

144 
	$posix_•aw«âr_£tschedpﬁicy
 (
posix_•aw«âr_t
 *
__©å
,

145 
__schedpﬁicy
Ë
__THROW
;

148 
	$posix_•aw«âr_gësched∑øm
 (
__c⁄°
 
posix_•aw«âr_t
 *

149 
__ª°ri˘
 
__©å
,

150 
sched_∑øm
 *
__ª°ri˘


151 
__sched∑øm
Ë
__THROW
;

154 
	$posix_•aw«âr_£tsched∑øm
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

155 c⁄° 
sched_∑øm
 *

156 
__ª°ri˘
 
__sched∑øm
Ë
__THROW
;

160 
	$posix_•awn_fûe_a˘i⁄s_öô
 (
posix_•awn_fûe_a˘i⁄s_t
 *

161 
__fûe_a˘i⁄s
Ë
__THROW
;

164 
	$posix_•awn_fûe_a˘i⁄s_de°roy
 (
posix_•awn_fûe_a˘i⁄s_t
 *

165 
__fûe_a˘i⁄s
Ë
__THROW
;

169 
	$posix_•awn_fûe_a˘i⁄s_add›í
 (
posix_•awn_fûe_a˘i⁄s_t
 *

170 
__ª°ri˘
 
__fûe_a˘i⁄s
,

171 
__fd
,

172 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

173 
__oÊag
, 
mode_t
 
__mode
)

174 
__THROW
;

178 
	$posix_•awn_fûe_a˘i⁄s_add˛o£
 (
posix_•awn_fûe_a˘i⁄s_t
 *

179 
__fûe_a˘i⁄s
, 
__fd
)

180 
__THROW
;

184 
	$posix_•awn_fûe_a˘i⁄s_adddup2
 (
posix_•awn_fûe_a˘i⁄s_t
 *

185 
__fûe_a˘i⁄s
,

186 
__fd
, 
__√wfd
Ë
__THROW
;

188 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdio_ext.h

23 #i‚de‡
_STDIO_EXT_H


24 
	#_STDIO_EXT_H
 1

	)

26 
	~<°dio.h
>

31 
	mFSETLOCKING_QUERY
 = 0,

32 
	#FSETLOCKING_QUERY
 
FSETLOCKING_QUERY


	)

35 
	mFSETLOCKING_INTERNAL
,

36 
	#FSETLOCKING_INTERNAL
 
FSETLOCKING_INTERNAL


	)

38 
	mFSETLOCKING_BYCALLER


39 
	#FSETLOCKING_BYCALLER
 
FSETLOCKING_BYCALLER


	)

43 
__BEGIN_DECLS


47 
size_t
 
	$__fbufsize
 (
FILE
 *
__Â
Ë
__THROW
;

52 
	$__‰ódög
 (
FILE
 *
__Â
Ë
__THROW
;

57 
	$__fwrôög
 (
FILE
 *
__Â
Ë
__THROW
;

62 
	$__‰ódabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

65 
	$__fwrôabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

69 
	$__Êbf
 (
FILE
 *
__Â
Ë
__THROW
;

73 
	$__Âurge
 (
FILE
 *
__Â
Ë
__THROW
;

76 
size_t
 
	$__Âídög
 (
FILE
 *
__Â
Ë
__THROW
;

79 
	`_Êushlbf
 ();

83 
	$__f£éockög
 (
FILE
 *
__Â
, 
__ty≥
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/gnutls/compat.h

3 #i‚de‡
_GNUTLS_COMPAT_H


4 
	#_GNUTLS_COMPAT_H


	)

6 #ifde‡
__˝lu•lus


11 #ifde‡
__GNUC__


13 
	#_GNUTLS_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

15 #i‡!
deföed
 
GNUTLS_INTERNAL_BUILD


16 #i‡
_GNUTLS_GCC_VERSION
 >= 30100

17 
	#_GNUTLS_GCC_ATTR_DEPRECATED
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

23 #i‚de‡
_GNUTLS_GCC_ATTR_DEPRECATED


24 
	#_GNUTLS_GCC_ATTR_DEPRECATED


	)

27 
	#gnués_cùhî_Æg‹ôhm
 
gnués_cùhî_Æg‹ôhm_t


	)

28 
	#gnués_kx_Æg‹ôhm
 
gnués_kx_Æg‹ôhm_t


	)

29 
	#gnués_∑ømsy≥
 
gnués_∑ømsy≥_t


	)

30 
	#gnués_mac_Æg‹ôhm
 
gnués_mac_Æg‹ôhm_t


	)

31 
	#gnués_dige°_Æg‹ôhm
 
gnués_dige°_Æg‹ôhm_t


	)

32 
	#gnués_com¥essi⁄_mëhod
 
gnués_com¥essi⁄_mëhod_t


	)

33 
	#gnués_c⁄√˘i⁄_íd
 
gnués_c⁄√˘i⁄_íd_t


	)

34 
	#gnués_¸edítülsy≥
 
gnués_¸edítülsy≥_t


	)

35 
	#gnués_˚πifiˇãy≥
 
gnués_˚πifiˇãy≥_t


	)

36 
	#gnués_x509_¸t_fmt
 
gnués_x509_¸t_fmt_t


	)

37 
	#gnués_›ípgp_key_fmt
 
gnués_›ípgp_key_fmt_t


	)

38 
	#gnués_pk_Æg‹ôhm
 
gnués_pk_Æg‹ôhm_t


	)

39 
	#gnués_sign_Æg‹ôhm
 
gnués_sign_Æg‹ôhm_t


	)

40 
	#gnués_£rvî_«me
 
gnués_£rvî_«mey≥_t


	)

41 
	#gnués_¥Ÿocﬁ
 
gnués_¥Ÿocﬁ_vîsi⁄_t


	)

42 
	#gnués_˛o£_ªque°
 
gnués_˛o£_ªque°_t


	)

43 
	#gnués_›ípgp_key_°©us
 
gnués_›ípgp_key_°©us_t


	)

44 
	#gnués_˚πifiˇã_ªque°
 
gnués_˚πifiˇã_ªque°_t


	)

45 
	#gnués_˚πifiˇã_°©us
 
gnués_˚πifiˇã_°©us_t


	)

46 
	#gnués_£ssi⁄
 
gnués_£ssi⁄_t


	)

47 
	#gnués_Æît_Àvñ
 
gnués_Æît_Àvñ_t


	)

48 
	#gnués_Æît_des¸ùti⁄
 
gnués_Æît_des¸ùti⁄_t


	)

49 
	#gnués_x509_subje˘_Æt_«me
 
gnués_x509_subje˘_Æt_«me_t


	)

50 
	#gnués_›ípgp_key
 
gnués_›ípgp_key_t


	)

51 
	#gnués_›ípgp_¥ivkey
 
gnués_›ípgp_¥ivkey_t


	)

52 
	#gnués_›ípgp_keyrög
 
gnués_›ípgp_keyrög_t


	)

53 
	#gnués_x509_¸t
 
gnués_x509_¸t_t


	)

54 
	#gnués_x509_¥ivkey
 
gnués_x509_¥ivkey_t


	)

55 
	#gnués_x509_¸l
 
gnués_x509_¸l_t


	)

56 
	#gnués_pkcs7
 
gnués_pkcs7_t


	)

57 
	#gnués_x509_¸q
 
gnués_x509_¸q_t


	)

58 
	#gnués_pkcs_í¸y±_Êags
 
gnués_pkcs_í¸y±_Êags_t


	)

59 
	#gnués_pkcs12_bag_ty≥
 
gnués_pkcs12_bag_ty≥_t


	)

60 
	#gnués_pkcs12_bag
 
gnués_pkcs12_bag_t


	)

61 
	#gnués_pkcs12
 
gnués_pkcs12_t


	)

62 
	#gnués_˚πifiˇã_¸edítüls
 
gnués_˚πifiˇã_¸edítüls_t


	)

63 
	#gnués_™⁄_£rvî_¸edítüls
 
gnués_™⁄_£rvî_¸edítüls_t


	)

64 
	#gnués_™⁄_˛õ¡_¸edítüls
 
gnués_™⁄_˛õ¡_¸edítüls_t


	)

65 
	#gnués_§p_˛õ¡_¸edítüls
 
gnués_§p_˛õ¡_¸edítüls_t


	)

66 
	#gnués_§p_£rvî_¸edítüls
 
gnués_§p_£rvî_¸edítüls_t


	)

67 
	#gnués_dh_∑øms
 
gnués_dh_∑øms_t


	)

68 
	#gnués_rß_∑øms
 
gnués_rß_∑øms_t


	)

69 
	#gnués_∑øms_ty≥
 
gnués_∑øms_ty≥_t


	)

70 
	#gnués_¸edítüls_ty≥
 
gnués_¸edítüls_ty≥_t


	)

71 
	#gnués_˚πifiˇã_ty≥
 
gnués_˚πifiˇã_ty≥_t


	)

72 
	#gnués_d©um
 
gnués_d©um_t


	)

73 
	#gnués_å™•‹t_±r
 
gnués_å™•‹t_±r_t


	)

77 
	#GNUTLS_A_MISSING_SRP_USERNAME
 
GNUTLS_A_UNKNOWN_PSK_IDENTITY


	)

78 
	#GNUTLS_A_UNKNOWN_SRP_USERNAME
 
GNUTLS_A_UNKNOWN_PSK_IDENTITY


	)

81 
	#gnués_›ípgp_key_fmt_t
 
gnués_›ípgp_¸t_fmt_t


	)

82 
	#GNUTLS_OPENPGP_KEY
 
GNUTLS_OPENPGP_CERT


	)

83 
	#GNUTLS_OPENPGP_KEY_FINGERPRINT
 
GNUTLS_OPENPGP_CERT_FINGERPRINT


	)

84 
	#gnués_›ípgp_£nd_key
 
gnués_›ípgp_£nd_˚π


	)

85 
	#gnués_›ípgp_key_°©us_t
 
gnués_›ípgp_¸t_°©us_t


	)

86 
	#gnués_›ípgp_key_t
 
gnués_›ípgp_¸t_t


	)

87 
	#gnués_›ípgp_key_öô
 
gnués_›ípgp_¸t_öô


	)

88 
	#gnués_›ípgp_key_deöô
 
gnués_›ípgp_¸t_deöô


	)

89 
	#gnués_›ípgp_key_imp‹t
 
gnués_›ípgp_¸t_imp‹t


	)

90 
	#gnués_›ípgp_key_exp‹t
 
gnués_›ípgp_¸t_exp‹t


	)

91 
	#gnués_›ípgp_key_gë_key_ußge
 
gnués_›ípgp_¸t_gë_key_ußge


	)

92 
	#gnués_›ípgp_key_gë_fögî¥öt
 
gnués_›ípgp_¸t_gë_fögî¥öt


	)

93 
	#gnués_›ípgp_key_gë_pk_Æg‹ôhm
 
gnués_›ípgp_¸t_gë_pk_Æg‹ôhm


	)

94 
	#gnués_›ípgp_key_gë_«me
 
gnués_›ípgp_¸t_gë_«me


	)

95 
	#gnués_›ípgp_key_gë_vîsi⁄
 
gnués_›ípgp_¸t_gë_vîsi⁄


	)

96 
	#gnués_›ípgp_key_gë_¸óti⁄_time
 
gnués_›ípgp_¸t_gë_¸óti⁄_time


	)

97 
	#gnués_›ípgp_key_gë_expú©i⁄_time
 
gnués_›ípgp_¸t_gë_expú©i⁄_time


	)

98 
	#gnués_›ípgp_key_gë_id
 
gnués_›ípgp_¸t_gë_id


	)

99 
	#gnués_›ípgp_key_check_ho°«me
 
gnués_›ípgp_¸t_check_ho°«me


	)

102 
	#gnués_›ípgp_¸t_gë_id
 
gnués_›ípgp_¸t_gë_key_id


	)

106 
	#GNUTLS_X509_CRT_FULL
 
GNUTLS_CRT_PRINT_FULL


	)

107 
	#GNUTLS_X509_CRT_ONELINE
 
GNUTLS_CRT_PRINT_ONELINE


	)

108 
	#GNUTLS_X509_CRT_UNSIGNED_FULL
 
GNUTLS_CRT_PRINT_UNSIGNED_FULL


	)

111 
	#TLS_MASTER_SIZE
 
GNUTLS_MASTER_SIZE


	)

112 
	#TLS_RANDOM_SIZE
 
GNUTLS_RANDOM_SIZE


	)

115 
	#LIBGNUTLS_VERSION
 
GNUTLS_VERSION


	)

116 
	#LIBGNUTLS_VERSION_MAJOR
 
GNUTLS_VERSION_MAJOR


	)

117 
	#LIBGNUTLS_VERSION_MINOR
 
GNUTLS_VERSION_MINOR


	)

118 
	#LIBGNUTLS_VERSION_PATCH
 
GNUTLS_VERSION_PATCH


	)

119 
	#LIBGNUTLS_VERSION_NUMBER
 
GNUTLS_VERSION_NUMBER


	)

120 
	#LIBGNUTLS_EXTRA_VERSION
 
GNUTLS_VERSION


	)

125 
	sgnués_ªå_°


127 
gnués_˚πifiˇã_ty≥_t
 
ty≥
;

130 
gnués_x509_¸t_t
 *
x509
;

131 
gnués_›ípgp_¸t_t
 
pgp
;

132 } 
˚π
;

133 
n˚πs
;

137 
gnués_x509_¥ivkey_t
 
x509
;

138 
gnués_›ípgp_¥ivkey_t
 
pgp
;

139 } 
key
;

141 
deöô_Æl
;

142 } 
	tgnués_ªå_°
;

144 
	tgnués_˚πifiˇã_˛õ¡_ªåõve_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

146 
	tgnués_d©um_t
 *

147 
	tªq_ˇ_rdn
,

148 
	tƒeqs
,

150 
	tgnués_pk_Æg‹ôhm_t


151 * 
	tpk_Ægos
,

153 
	tpk_Ægos_Àngth
,

154 
	tgnués_ªå_°
 *);

155 
	tgnués_˚πifiˇã_£rvî_ªåõve_fun˘i⁄
 (
	tgnués_£ssi⁄_t
,

156 
	tgnués_ªå_°
 *);

158 
gnués_˚πifiˇã_˛õ¡_£t_ªåõve_fun˘i⁄


159 (
gnués_˚πifiˇã_¸edítüls_t
 
¸ed
,

160 
gnués_˚πifiˇã_˛õ¡_ªåõve_fun˘i⁄
 *

161 
func
Ë
_GNUTLS_GCC_ATTR_DEPRECATED
;

163 
gnués_˚πifiˇã_£rvî_£t_ªåõve_fun˘i⁄


164 (
gnués_˚πifiˇã_¸edítüls_t
 
¸ed
,

165 
gnués_˚πifiˇã_£rvî_ªåõve_fun˘i⁄
 *

166 
func
Ë
_GNUTLS_GCC_ATTR_DEPRECATED
;

170 (*
gnués_sign_func
Ë(
	tgnués_£ssi⁄_t
 
	t£ssi⁄
,

171 *
	tu£rd©a
,

172 
	tgnués_˚πifiˇã_ty≥_t
 
	t˚π_ty≥
,

173 c⁄° 
	tgnués_d©um_t
 * 
	t˚π
,

174 c⁄° 
	tgnués_d©um_t
 * 
	thash
,

175 
	tgnués_d©um_t
 * 
	tsig«tuª
);

178 
gnués_sign_ˇŒback_£t
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

179 
gnués_sign_func
 
sign_func
, *
u£rd©a
)

180 
_GNUTLS_GCC_ATTR_DEPRECATED
;

181 
gnués_sign_func


182 
gnués_sign_ˇŒback_gë
 (
gnués_£ssi⁄_t
 
£ssi⁄
, **
u£rd©a
)

183 
_GNUTLS_GCC_ATTR_DEPRECATED
;

189 
gnués_ext_ªgi°î
 (
ty≥
,

190 c⁄° *
«me
,

191 
gnués_ext_∑r£_ty≥_t
 
∑r£_ty≥
,

192 
gnués_ext_ªcv_func
 
ªcv_func
,

193 
gnués_ext_£nd_func
 
£nd_func
)

194 
_GNUTLS_GCC_ATTR_DEPRECATED
;

199 (*
gnués_föished_ˇŒback_func
Ë(
	tgnués_£ssi⁄_t
 
	t£ssi⁄
,

200 c⁄° *
	tföished
,

201 
	tsize_t
 
	tÀn
);

202 
gnués_£ssi⁄_£t_föished_fun˘i⁄
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

203 
gnués_föished_ˇŒback_func


204 
func
)

205 
_GNUTLS_GCC_ATTR_DEPRECATED
;

211 
	#GNUTLS_MASTER_SIZE
 48

	)

212 
	#GNUTLS_RANDOM_SIZE
 32

	)

213 c⁄° *
gnués_£ssi⁄_gë_£rvî_øndom
 (
gnués_£ssi⁄_t
 
£ssi⁄
)

214 
_GNUTLS_GCC_ATTR_DEPRECATED
;

215 c⁄° *
gnués_£ssi⁄_gë_˛õ¡_øndom
 (
gnués_£ssi⁄_t
 
£ssi⁄
)

216 
_GNUTLS_GCC_ATTR_DEPRECATED
;

217 c⁄° *
gnués_£ssi⁄_gë_ma°î_£¸ë
 (
gnués_£ssi⁄_t
 
£ssi⁄
)

218 
_GNUTLS_GCC_ATTR_DEPRECATED
;

220 
gnués_psk_√tc⁄f_dîive_key
 (c⁄° *
∑ssw‹d
,

221 c⁄° *
psk_idítôy
,

222 c⁄° *
psk_idítôy_höt
,

223 
gnués_d©um_t
 *

224 
ouçut_key
)

225 
_GNUTLS_GCC_ATTR_DEPRECATED
;

230 
gnués_x509_¥ivkey_sign_hash
 (
gnués_x509_¥ivkey_t
 
key
,

231 c⁄° 
gnués_d©um_t
 * 
hash
,

232 
gnués_d©um_t
 * 
sig«tuª
)

233 
_GNUTLS_GCC_ATTR_DEPRECATED
;

235 
gnués_›ípgp_¥ivkey_sign_hash
 (
gnués_›ípgp_¥ivkey_t
 
key
,

236 c⁄° 
gnués_d©um_t
 * 
hash
,

237 
gnués_d©um_t
 * 
sig«tuª
)

238 
_GNUTLS_GCC_ATTR_DEPRECATED
;

244 
gnués_x509_¥ivkey_vîify_d©a
 (
gnués_x509_¥ivkey_t
 
key
,

245 
Êags
,

246 c⁄° 
gnués_d©um_t
 * 
d©a
,

247 c⁄° 
gnués_d©um_t
 * 
sig«tuª
)

248 
_GNUTLS_GCC_ATTR_DEPRECATED
;

252 
gnués_x509_¥ivkey_sign_d©a
 (
gnués_x509_¥ivkey_t
 
key
,

253 
gnués_dige°_Æg‹ôhm_t
 
dige°
,

254 
Êags
,

255 c⁄° 
gnués_d©um_t
 * 
d©a
,

256 *
sig«tuª
,

257 
size_t
 * 
sig«tuª_size
)

258 
_GNUTLS_GCC_ATTR_DEPRECATED
;

261 
gnués_x509_¸t_vîify_d©a
 (
gnués_x509_¸t_t
 
¸t
,

262 
Êags
,

263 c⁄° 
gnués_d©um_t
 * 
d©a
,

264 c⁄° 
gnués_d©um_t
 * 
sig«tuª
)

265 
_GNUTLS_GCC_ATTR_DEPRECATED
;

269 
gnués_x509_¸t_vîify_hash
 (
gnués_x509_¸t_t
 
¸t
,

270 
Êags
,

271 c⁄° 
gnués_d©um_t
 * 
hash
,

272 c⁄° 
gnués_d©um_t
 * 
sig«tuª
)

273 
_GNUTLS_GCC_ATTR_DEPRECATED
;

276 
gnués_x509_¸t_gë_vîify_Æg‹ôhm
 (
gnués_x509_¸t_t
 
¸t
,

277 c⁄° 
gnués_d©um_t
 * 
sig«tuª
,

278 
gnués_dige°_Æg‹ôhm_t
 * 
hash
)

279 
_GNUTLS_GCC_ATTR_DEPRECATED
;

282 
gnués_x509_¸t_gë_¥e„ºed_hash_Æg‹ôhm
 (
gnués_x509_¸t_t
 
¸t
,

283 
gnués_dige°_Æg‹ôhm_t


284 * 
hash
,

285 *
m™d
)

286 
_GNUTLS_GCC_ATTR_DEPRECATED
;

289 
gnués_x509_¸q_sign2
 (
gnués_x509_¸q_t
 
¸q
,

290 
gnués_x509_¥ivkey_t
 
key
,

291 
gnués_dige°_Æg‹ôhm_t
 
dig
,

292 
Êags
)

293 
_GNUTLS_GCC_ATTR_DEPRECATED
;

294 
gnués_x509_¸q_sign
 (
gnués_x509_¸q_t
 
¸q
, 
gnués_x509_¥ivkey_t
 
key
)

295 
_GNUTLS_GCC_ATTR_DEPRECATED
;

300 
gnués_x509_¸l_sign
 (
gnués_x509_¸l_t
 
¸l
,

301 
gnués_x509_¸t_t
 
issuî
,

302 
gnués_x509_¥ivkey_t
 
issuî_key
)

303 
_GNUTLS_GCC_ATTR_DEPRECATED
;

304 
gnués_x509_¸l_sign2
 (
gnués_x509_¸l_t
 
¸l
,

305 
gnués_x509_¸t_t
 
issuî
,

306 
gnués_x509_¥ivkey_t
 
issuî_key
,

307 
gnués_dige°_Æg‹ôhm_t
 
dig
,

308 
Êags
)

309 
_GNUTLS_GCC_ATTR_DEPRECATED
;

312 
gnués_˚πifiˇã_gë_x509_ˇs
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
,

313 
gnués_x509_¸t_t
 ** 
x509_ˇ_li°
,

314 *
nˇs
)

315 
_GNUTLS_GCC_ATTR_DEPRECATED
;

317 
gnués_˚πifiˇã_gë_x509_¸ls
 (
gnués_˚πifiˇã_¸edítüls_t
 
sc
,

318 
gnués_x509_¸l_t
 ** 
x509_¸l_li°
,

319 *
n¸ls
)

320 
_GNUTLS_GCC_ATTR_DEPRECATED
;

323 
gnués_˚πifiˇã_gë_›ípgp_keyrög
 (
gnués_˚πifiˇã_¸edítüls_t


324 
sc
,

325 
gnués_›ípgp_keyrög_t
 *

326 
keyrög
)

327 
_GNUTLS_GCC_ATTR_DEPRECATED
;

330 
gnués_˚πifiˇã_vîify_≥îs
 (
gnués_£ssi⁄_t
 
£ssi⁄
)

331 
_GNUTLS_GCC_ATTR_DEPRECATED
;

335 
gnués_cùhî_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
, c⁄° *
li°
)

336 
_GNUTLS_GCC_ATTR_DEPRECATED
;

337 
gnués_mac_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
, c⁄° *
li°
)

338 
_GNUTLS_GCC_ATTR_DEPRECATED
;

339 
gnués_com¥essi⁄_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

340 c⁄° *
li°
)

341 
_GNUTLS_GCC_ATTR_DEPRECATED
;

342 
gnués_kx_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
, c⁄° *
li°
)

343 
_GNUTLS_GCC_ATTR_DEPRECATED
;

344 
gnués_¥Ÿocﬁ_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

345 c⁄° *
li°
)

346 
_GNUTLS_GCC_ATTR_DEPRECATED
;

347 
gnués_˚πifiˇã_ty≥_£t_¥i‹ôy
 (
gnués_£ssi⁄_t
 
£ssi⁄
,

348 c⁄° *
li°
)

349 
_GNUTLS_GCC_ATTR_DEPRECATED
;

351 
gnués_å™•‹t_£t_low©
 (
gnués_£ssi⁄_t
 
£ssi⁄
, 
num
Ë
_GNUTLS_GCC_ATTR_DEPRECATED
;

353 
gnués_å™•‹t_£t_globÆ_î∫o
 (
îr
Ë
_GNUTLS_GCC_ATTR_DEPRECATED
;

355 #ifde‡
__˝lu•lus


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_LHASH_OF
(
CONF_VALUE
);

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 
	sc⁄f_mëhod_°


90 c⁄° *
«me
;

91 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

92 (*
öô
)(
CONF
 *
c⁄f
);

93 (*
de°roy
)(
CONF
 *
c⁄f
);

94 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

95 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

96 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

97 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

98 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

104 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

105 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

107 
DECLARE_STACK_OF
(
CONF_MODULE
)

108 
DECLARE_STACK_OF
(
CONF_IMODULE
)

111 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

112 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

114 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

115 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

116 
	#CONF_MFLAGS_SILENT
 0x4

	)

117 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

118 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

119 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

121 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

122 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

123 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
,c⁄° *
fûe
,

124 *
ñöe
);

125 #i‚de‡
OPENSSL_NO_FP_API


126 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

127 *
ñöe
);

129 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

130 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

131 c⁄° *
£˘i⁄
);

132 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

133 c⁄° *
«me
);

134 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

135 c⁄° *
«me
);

136 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

137 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

138 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

140 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

141 
OPENSSL_no_c⁄fig
();

146 
	sc⁄f_°


148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

157 
CONF_METHOD
 *
NCONF_XML
();

159 
NCONF_‰ì
(
CONF
 *
c⁄f
);

160 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

162 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

163 #i‚de‡
OPENSSL_NO_FP_API


164 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

166 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

167 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

168 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

169 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

170 *
ªsu…
);

171 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

172 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

176 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

178 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

183 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

184 
Êags
);

185 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_u∆ﬂd
(
Æl
);

188 
CONF_moduÀs_föish
();

189 
CONF_moduÀs_‰ì
();

190 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

191 
c⁄f_föish_func
 *
ffunc
);

193 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

194 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

195 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

196 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

197 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

199 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

200 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

201 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

203 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

205 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

206 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

208 
OPENSSL_lﬂd_buûtö_moduÀs
();

214 
ERR_lﬂd_CONF_°rögs
();

219 
	#CONF_F_CONF_DUMP_FP
 104

	)

220 
	#CONF_F_CONF_LOAD
 100

	)

221 
	#CONF_F_CONF_LOAD_BIO
 102

	)

222 
	#CONF_F_CONF_LOAD_FP
 103

	)

223 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

224 
	#CONF_F_CONF_PARSE_LIST
 119

	)

225 
	#CONF_F_DEF_LOAD
 120

	)

226 
	#CONF_F_DEF_LOAD_BIO
 121

	)

227 
	#CONF_F_MODULE_INIT
 115

	)

228 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

229 
	#CONF_F_MODULE_RUN
 118

	)

230 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

231 
	#CONF_F_NCONF_DUMP_FP
 106

	)

232 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

233 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

234 
	#CONF_F_NCONF_GET_SECTION
 108

	)

235 
	#CONF_F_NCONF_GET_STRING
 109

	)

236 
	#CONF_F_NCONF_LOAD
 113

	)

237 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

238 
	#CONF_F_NCONF_LOAD_FP
 114

	)

239 
	#CONF_F_NCONF_NEW
 111

	)

240 
	#CONF_F_STR_COPY
 101

	)

243 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

244 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

245 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

246 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

247 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

248 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

249 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

250 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

251 
	#CONF_R_NO_CONF
 105

	)

252 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

253 
	#CONF_R_NO_SECTION
 107

	)

254 
	#CONF_R_NO_SUCH_FILE
 114

	)

255 
	#CONF_R_NO_VALUE
 108

	)

256 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

257 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

258 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

260 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

582 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

588 
ERR_lﬂd_CRYPTO_°rögs
();

593 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

594 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

595 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

596 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

597 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

598 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

599 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

600 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

601 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

602 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

605 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

606 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

608 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/des_old.h

91 #i‚de‡
HEADER_DES_H


92 
	#HEADER_DES_H


	)

94 
	~<›ís¶/e_os2.h
>

96 #ifde‡
OPENSSL_NO_DES


97 #îr‹ 
DES
 
is
 
dißbÀd
.

100 #i‚de‡
HEADER_NEW_DES_H


101 #îr‹ 
You
 
mu°
 
ö˛ude
 
des
.
h
, 
nŸ
 
des_ﬁd
.h 
dúe˘ly
.

104 #ifde‡
_KERBEROS_DES_H


105 #îr‹ <
›ís¶
/
des_ﬁd
.
h
> 
ª∂a˚s
 <
kîbîos
/
des
.h>.

108 
	~<›ís¶/symhacks.h
>

110 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


111 #unde‡
OPENSSL_EXTERN


112 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

115 #ifde‡ 
__˝lu•lus


119 #ifde‡
_


120 #unde‡
_


123 
	t_os¶_ﬁd_des_cblock
[8];

124 
	s_os¶_ﬁd_des_ks_°ru˘


127 
_os¶_ﬁd_des_cblock
 
_
;

130 
DES_LONG
 
∑d
[2];

131 } 
ks
;

132 } 
	t_os¶_ﬁd_des_key_scheduÀ
[16];

134 #i‚de‡
OPENSSL_DES_LIBDES_COMPATIBILITY


135 
	#des_cblock
 
DES_cblock


	)

136 
	#c⁄°_des_cblock
 
c⁄°_DES_cblock


	)

137 
	#des_key_scheduÀ
 
DES_key_scheduÀ


	)

138 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

139 
	`DES_ecb3_í¸y±
((
i
),(
o
),&(
k1
),&(
k2
),&(
k3
),(
e
))

	)

140 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

141 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
e
))

	)

142 
	#des_ede3_cbcm_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv1
,
iv2
,
e
)\

143 
	`DES_ede3_cbcm_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv1
),(
iv2
),(
e
))

	)

144 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

145 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
),(
e
))

	)

146 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

147 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
))

	)

148 
	#des_›ti⁄s
()\

149 
	`DES_›ti⁄s
()

	)

150 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

151 
	`DES_cbc_cksum
((
i
),(
o
),(
l
),&(
k
),(
iv
))

	)

152 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

153 
	`DES_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

154 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

155 
	`DES_ncbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

156 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

157 
	`DES_xcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

158 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

159 
	`DES_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
),(
e
))

	)

160 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

161 
	`DES_ecb_í¸y±
((
i
),(
o
),&(
k
),(
e
))

	)

162 
	#des_í¸y±1
(
d
,
k
,
e
)\

163 
	`DES_í¸y±1
((
d
),&(
k
),(
e
))

	)

164 
	#des_í¸y±2
(
d
,
k
,
e
)\

165 
	`DES_í¸y±2
((
d
),&(
k
),(
e
))

	)

166 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

167 
	`DES_í¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

168 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

169 
	`DES_de¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

170 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

171 
	`DES_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

172 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

173 
	`DES_íc_ªad
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

174 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

175 
	`DES_íc_wrôe
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

176 
	#des_f¸y±
(
b
,
s
,
r
)\

177 
	`DES_f¸y±
((
b
),(
s
),(
r
))

	)

179 
	#des_¸y±
(
b
,
s
)\

180 
	`DES_¸y±
((
b
),(
s
))

	)

181 #i‡!
deföed
(
PERL5
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
NeXT
Ë&& !deföed(
__O≥nBSD__
)

182 
	#¸y±
(
b
,
s
)\

183 
	`DES_¸y±
((
b
),(
s
))

	)

186 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

187 
	`DES_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
))

	)

188 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

189 
	`DES_pcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

190 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

191 
	`DES_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

192 
	#des_øndom_£ed
(
k
)\

193 
	`_os¶_096_des_øndom_£ed
((
k
))

	)

194 
	#des_øndom_key
(
r
)\

195 
	`DES_øndom_key
((
r
))

	)

196 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

197 
	`DES_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

198 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

199 
	`DES_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

200 
	#des_£t_odd_∑rôy
(
k
)\

201 
	`DES_£t_odd_∑rôy
((
k
))

	)

202 
	#des_check_key_∑rôy
(
k
)\

203 
	`DES_check_key_∑rôy
((
k
))

	)

204 
	#des_is_wók_key
(
k
)\

205 
	`DES_is_wók_key
((
k
))

	)

206 
	#des_£t_key
(
k
,
ks
)\

207 
	`DES_£t_key
((
k
),&(
ks
))

	)

208 
	#des_key_sched
(
k
,
ks
)\

209 
	`DES_key_sched
((
k
),&(
ks
))

	)

210 
	#des_£t_key_checked
(
k
,
ks
)\

211 
	`DES_£t_key_checked
((
k
),&(
ks
))

	)

212 
	#des_£t_key_unchecked
(
k
,
ks
)\

213 
	`DES_£t_key_unchecked
((
k
),&(
ks
))

	)

214 
	#des_°rög_to_key
(
s
,
k
)\

215 
	`DES_°rög_to_key
((
s
),(
k
))

	)

216 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

217 
	`DES_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

218 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

219 
	`DES_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
),(
e
))

	)

220 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

221 
	`DES_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
))

	)

224 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

225 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

227 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

228 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

230 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

231 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

233 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

234 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

236 
	#des_check_key
 
DES_check_key


	)

237 
	#des_rw_mode
 
DES_rw_mode


	)

241 
	#des_cblock
 
_os¶_ﬁd_des_cblock


	)

242 
	#des_key_scheduÀ
 
_os¶_ﬁd_des_key_scheduÀ


	)

243 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

244 
	`_os¶_ﬁd_des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(
k3
),(
e
))

	)

245 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

246 
	`_os¶_ﬁd_des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
e
))

	)

247 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

248 
	`_os¶_ﬁd_des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
),(
e
))

	)

249 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

250 
	`_os¶_ﬁd_des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
))

	)

251 
	#des_›ti⁄s
()\

252 
	`_os¶_ﬁd_des_›ti⁄s
()

	)

253 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

254 
	`_os¶_ﬁd_des_cbc_cksum
((
i
),(
o
),(
l
),(
k
),(
iv
))

	)

255 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

256 
	`_os¶_ﬁd_des_cbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

257 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

258 
	`_os¶_ﬁd_des_ncbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

259 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

260 
	`_os¶_ﬁd_des_xcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

261 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

262 
	`_os¶_ﬁd_des_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
),(
e
))

	)

263 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

264 
	`_os¶_ﬁd_des_ecb_í¸y±
((
i
),(
o
),(
k
),(
e
))

	)

265 
	#des_í¸y±
(
d
,
k
,
e
)\

266 
	`_os¶_ﬁd_des_í¸y±
((
d
),(
k
),(
e
))

	)

267 
	#des_í¸y±2
(
d
,
k
,
e
)\

268 
	`_os¶_ﬁd_des_í¸y±2
((
d
),(
k
),(
e
))

	)

269 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

270 
	`_os¶_ﬁd_des_í¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

271 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

272 
	`_os¶_ﬁd_des_de¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

273 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

274 
	`_os¶_ﬁd_des_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

275 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

276 
	`_os¶_ﬁd_des_íc_ªad
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

277 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

278 
	`_os¶_ﬁd_des_íc_wrôe
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

279 
	#des_f¸y±
(
b
,
s
,
r
)\

280 
	`_os¶_ﬁd_des_f¸y±
((
b
),(
s
),(
r
))

	)

281 
	#des_¸y±
(
b
,
s
)\

282 
	`_os¶_ﬁd_des_¸y±
((
b
),(
s
))

	)

284 
	#¸y±
(
b
,
s
)\

285 
	`_os¶_ﬁd_¸y±
((
b
),(
s
))

	)

287 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

288 
	`_os¶_ﬁd_des_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
))

	)

289 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

290 
	`_os¶_ﬁd_des_pcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

291 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

292 
	`_os¶_ﬁd_des_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

293 
	#des_øndom_£ed
(
k
)\

294 
	`_os¶_ﬁd_des_øndom_£ed
((
k
))

	)

295 
	#des_øndom_key
(
r
)\

296 
	`_os¶_ﬁd_des_øndom_key
((
r
))

	)

297 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

298 
	`_os¶_ﬁd_des_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

299 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

300 
	`_os¶_ﬁd_des_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

301 
	#des_£t_odd_∑rôy
(
k
)\

302 
	`_os¶_ﬁd_des_£t_odd_∑rôy
((
k
))

	)

303 
	#des_is_wók_key
(
k
)\

304 
	`_os¶_ﬁd_des_is_wók_key
((
k
))

	)

305 
	#des_£t_key
(
k
,
ks
)\

306 
	`_os¶_ﬁd_des_£t_key
((
k
),(
ks
))

	)

307 
	#des_key_sched
(
k
,
ks
)\

308 
	`_os¶_ﬁd_des_key_sched
((
k
),(
ks
))

	)

309 
	#des_°rög_to_key
(
s
,
k
)\

310 
	`_os¶_ﬁd_des_°rög_to_key
((
s
),(
k
))

	)

311 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

312 
	`_os¶_ﬁd_des_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

313 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

314 
	`_os¶_ﬁd_des_cfb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
),(
e
))

	)

315 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

316 
	`_os¶_ﬁd_des_ofb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
))

	)

319 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

320 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

322 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

323 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

325 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

326 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

328 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

329 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

331 
	#des_check_key
 
DES_check_key


	)

332 
	#des_rw_mode
 
DES_rw_mode


	)

335 c⁄° *
_os¶_ﬁd_des_›ti⁄s
();

336 
_os¶_ﬁd_des_ecb3_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

337 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,_os¶_ﬁd_des_key_scheduÀ 
ks2
,

338 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
íc
);

339 
DES_LONG
 
_os¶_ﬁd_des_cbc_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

340 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

341 
_os¶_ﬁd_des_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

342 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

343 
_os¶_ﬁd_des_ncbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

344 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

345 
_os¶_ﬁd_des_xcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

346 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,

347 
_os¶_ﬁd_des_cblock
 *
öw
,_os¶_ﬁd_des_cblock *
outw
,
íc
);

348 
_os¶_ﬁd_des_cfb_í¸y±
(*
ö
,*
out
,
numbôs
,

349 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

350 
_os¶_ﬁd_des_ecb_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

351 
_os¶_ﬁd_des_key_scheduÀ
 
ks
,
íc
);

352 
_os¶_ﬁd_des_í¸y±
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

353 
_os¶_ﬁd_des_í¸y±2
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

354 
_os¶_ﬁd_des_í¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

355 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

356 
_os¶_ﬁd_des_de¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

357 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

358 
_os¶_ﬁd_des_ede3_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
, _os¶_ﬁd_des_cblock *
ouçut
,

359 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

360 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

361 
_os¶_ﬁd_des_ede3_cfb64_í¸y±
(*
ö
, *
out
,

362 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

363 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

364 
_os¶_ﬁd_des_ede3_ofb64_í¸y±
(*
ö
, *
out
,

365 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

366 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

368 
_os¶_ﬁd_des_xwhôe_ö2out
(
_os¶_ﬁd_des_cblock
 (*
des_key
), _os¶_ﬁd_des_cblock (*
ö_whôe
),

369 
_os¶_ﬁd_des_cblock
 (*
out_whôe
));

372 
_os¶_ﬁd_des_íc_ªad
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

373 
_os¶_ﬁd_des_cblock
 *
iv
);

374 
_os¶_ﬁd_des_íc_wrôe
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

375 
_os¶_ﬁd_des_cblock
 *
iv
);

376 *
_os¶_ﬁd_des_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

377 *
_os¶_ﬁd_des_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

378 #i‡!
deföed
(
PERL5
Ë&& !deföed(
NeXT
)

379 *
_os¶_ﬁd_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

381 
_os¶_ﬁd_des_ofb_í¸y±
(*
ö
,*
out
,

382 
numbôs
,
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

383 
_os¶_ﬁd_des_pcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

384 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

385 
DES_LONG
 
_os¶_ﬁd_des_quad_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

386 
Àngth
,
out_cou¡
,
_os¶_ﬁd_des_cblock
 *
£ed
);

387 
_os¶_ﬁd_des_øndom_£ed
(
_os¶_ﬁd_des_cblock
 
key
);

388 
_os¶_ﬁd_des_øndom_key
(
_os¶_ﬁd_des_cblock
 
ªt
);

389 
_os¶_ﬁd_des_ªad_∑ssw‹d
(
_os¶_ﬁd_des_cblock
 *
key
,c⁄° *
¥om±
,
vîify
);

390 
_os¶_ﬁd_des_ªad_2∑ssw‹ds
(
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
,

391 c⁄° *
¥om±
,
vîify
);

392 
_os¶_ﬁd_des_£t_odd_∑rôy
(
_os¶_ﬁd_des_cblock
 *
key
);

393 
_os¶_ﬁd_des_is_wók_key
(
_os¶_ﬁd_des_cblock
 *
key
);

394 
_os¶_ﬁd_des_£t_key
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

395 
_os¶_ﬁd_des_key_sched
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

396 
_os¶_ﬁd_des_°rög_to_key
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key
);

397 
_os¶_ﬁd_des_°rög_to_2keys
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
);

398 
_os¶_ﬁd_des_cfb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

399 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

400 
_os¶_ﬁd_des_ofb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

401 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

403 
_os¶_096_des_øndom_£ed
(
des_cblock
 *
key
);

408 
	#_KERBEROS_DES_H


	)

410 
	#KRBDES_ENCRYPT
 
DES_ENCRYPT


	)

411 
	#KRBDES_DECRYPT
 
DES_DECRYPT


	)

413 #ifde‡
KERBEROS


414 
	#ENCRYPT
 
DES_ENCRYPT


	)

415 
	#DECRYPT
 
DES_DECRYPT


	)

418 #i‚de‡
NCOMPAT


419 
	#C_Block
 
des_cblock


	)

420 
	#Key_scheduÀ
 
des_key_scheduÀ


	)

421 
	#KEY_SZ
 
DES_KEY_SZ


	)

422 
	#°rög_to_key
 
des_°rög_to_key


	)

423 
	#ªad_pw_°rög
 
des_ªad_pw_°rög


	)

424 
	#øndom_key
 
des_øndom_key


	)

425 
	#pcbc_í¸y±
 
des_pcbc_í¸y±


	)

426 
	#£t_key
 
des_£t_key


	)

427 
	#key_sched
 
des_key_sched


	)

428 
	#ecb_í¸y±
 
des_ecb_í¸y±


	)

429 
	#cbc_í¸y±
 
des_cbc_í¸y±


	)

430 
	#ncbc_í¸y±
 
des_ncbc_í¸y±


	)

431 
	#xcbc_í¸y±
 
des_xcbc_í¸y±


	)

432 
	#cbc_cksum
 
des_cbc_cksum


	)

433 
	#quad_cksum
 
des_quad_cksum


	)

434 
	#check_∑rôy
 
des_check_key_∑rôy


	)

437 
	#des_fixup_key_∑rôy
 
DES_fixup_key_∑rôy


	)

439 #ifde‡ 
__˝lu•lus


444 
	~<›ís¶/ui_com∑t.h
>

	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS1_BAD_VER
 0x0100

	)

87 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

91 
	#DTLS1_COOKIE_LENGTH
 256

	)

93 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

95 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

97 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

98 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

100 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

102 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


103 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

105 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

108 #i‚de‡
OPENSSL_NO_SSL_INTERN


110 #i‚de‡
OPENSSL_NO_SCTP


111 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

114 
	sdés1_bôm≠_°


116 
m≠
;

118 
max_£q_num
[8];

121 } 
	tDTLS1_BITMAP
;

123 
	sdés1_ªå™smô_°©e


125 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

126 
EVP_MD_CTX
 *
wrôe_hash
;

127 #i‚de‡
OPENSSL_NO_COMP


128 
COMP_CTX
 *
com¥ess
;

130 *
com¥ess
;

132 
SSL_SESSION
 *
£ssi⁄
;

133 
ïoch
;

136 
	shm_hódî_°


138 
ty≥
;

139 
msg_Àn
;

140 
£q
;

141 
‰ag_off
;

142 
‰ag_Àn
;

143 
is_ccs
;

144 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

147 
	sccs_hódî_°


149 
ty≥
;

150 
£q
;

153 
	sdés1_timeout_°


156 
ªad_timeouts
;

159 
wrôe_timeouts
;

162 
num_Æîts
;

165 
	sªc‹d_pqueue_°


167 
ïoch
;

168 
pqueue
 
q
;

169 } 
	tªc‹d_pqueue
;

171 
	shm_‰agmít_°


173 
hm_hódî_°
 
msg_hódî
;

174 *
‰agmít
;

175 *
ªas£mbly
;

176 } 
	thm_‰agmít
;

178 
	sdés1_°©e_°


180 
£nd_cookõ
;

181 
cookõ
[
DTLS1_COOKIE_LENGTH
];

182 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

183 
cookõ_Àn
;

190 
r_ïoch
;

191 
w_ïoch
;

194 
DTLS1_BITMAP
 
bôm≠
;

197 
DTLS1_BITMAP
 
√xt_bôm≠
;

200 
h™dshake_wrôe_£q
;

201 
√xt_h™dshake_wrôe_£q
;

203 
h™dshake_ªad_£q
;

206 
œ°_wrôe_£quí˚
[8];

209 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

210 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

213 
pqueue
 
buf„ªd_mesßges
;

216 
pqueue
 
£¡_mesßges
;

223 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

226 
li°í
;

228 
mtu
;

230 
hm_hódî_°
 
w_msg_hdr
;

231 
hm_hódî_°
 
r_msg_hdr
;

233 
dés1_timeout_°
 
timeout
;

236 
timevÆ
 
√xt_timeout
;

239 
timeout_duøti⁄
;

243 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

244 
Æît_‰agmít_Àn
;

245 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

246 
h™dshake_‰agmít_Àn
;

248 
ªå™smôtög
;

249 
ch™ge_cùhî_•ec_ok
;

251 #i‚de‡
OPENSSL_NO_SCTP


253 
√xt_°©e
;

255 
shutdown_ª˚ived
;

258 } 
	tDTLS1_STATE
;

260 
	sdés1_ªc‹d_d©a_°


262 *
∑ckë
;

263 
∑ckë_Àngth
;

264 
SSL3_BUFFER
 
rbuf
;

265 
SSL3_RECORD
 
ºec
;

266 #i‚de‡
OPENSSL_NO_SCTP


267 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

269 } 
	tDTLS1_RECORD_DATA
;

274 
	#DTLS1_TMO_READ_COUNT
 2

	)

275 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

277 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

279 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

176 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

177 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

179 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

134 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

135 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

137 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

138 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


132 
	#SSL3_CK_SCSV
 0x030000FF

	)

134 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

135 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

136 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

137 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

138 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

139 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

140 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

141 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

142 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

143 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

145 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

146 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

147 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

148 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

149 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

150 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

152 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

153 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

154 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

155 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

156 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

157 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

159 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

160 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

161 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

162 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

163 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

166 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

167 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

171 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

177 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

178 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

179 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

180 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

181 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

182 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

183 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

184 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

186 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

187 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

188 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

189 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

190 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

191 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

193 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

194 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

195 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

196 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

197 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

198 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

199 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

200 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

201 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

202 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

204 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

207 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

209 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

211 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

214 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

215 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

216 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

218 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

219 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

220 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

222 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

226 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

227 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

230 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

233 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

234 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

235 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

236 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

237 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

239 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

240 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

241 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

242 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

243 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

246 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

247 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

249 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

250 
	#SSL3_RANDOM_SIZE
 32

	)

251 
	#SSL3_SESSION_ID_SIZE
 32

	)

252 
	#SSL3_RT_HEADER_LENGTH
 5

	)

254 #i‚de‡
SSL3_ALIGN_PAYLOAD


261 
	#SSL3_ALIGN_PAYLOAD
 8

	)

263 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

265 #unde‡
SSL3_ALIGN_PAYLOAD


274 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

279 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

281 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

284 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

286 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

292 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

298 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

299 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 #ifde‡
OPENSSL_NO_COMP


304 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

306 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

307 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

309 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

310 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

311 
	#SSL3_RT_MAX_PACKET_SIZE
 \

312 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

314 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

315 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

317 
	#SSL3_VERSION
 0x0300

	)

318 
	#SSL3_VERSION_MAJOR
 0x03

	)

319 
	#SSL3_VERSION_MINOR
 0x00

	)

321 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

322 
	#SSL3_RT_ALERT
 21

	)

323 
	#SSL3_RT_HANDSHAKE
 22

	)

324 
	#SSL3_RT_APPLICATION_DATA
 23

	)

325 
	#TLS1_RT_HEARTBEAT
 24

	)

327 
	#SSL3_AL_WARNING
 1

	)

328 
	#SSL3_AL_FATAL
 2

	)

330 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

331 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

332 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

333 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

334 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

335 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

336 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

337 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

338 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

339 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

340 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

341 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

343 
	#TLS1_HB_REQUEST
 1

	)

344 
	#TLS1_HB_RESPONSE
 2

	)

346 #i‚de‡
OPENSSL_NO_SSL_INTERN


348 
	ss¶3_ªc‹d_°


350  
ty≥
;

351  
Àngth
;

352  
off
;

353  *
d©a
;

354  *
öput
;

355  *
comp
;

356  
ïoch
;

357  
£q_num
[8];

358 } 
	tSSL3_RECORD
;

360 
	ss¶3_buf„r_°


362 *
buf
;

364 
size_t
 
Àn
;

365 
off£t
;

366 
À·
;

367 } 
	tSSL3_BUFFER
;

371 
	#SSL3_CT_RSA_SIGN
 1

	)

372 
	#SSL3_CT_DSS_SIGN
 2

	)

373 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

374 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

375 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

376 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

377 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

382 
	#SSL3_CT_NUMBER
 9

	)

385 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

386 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

387 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

388 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

389 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

390 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

401 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

403 #i‚de‡
OPENSSL_NO_SSL_INTERN


405 
	ss¶3_°©e_°


407 
Êags
;

408 
dñay_buf_p›_ªt
;

410 
ªad_£quí˚
[8];

411 
ªad_mac_£¸ë_size
;

412 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

413 
wrôe_£quí˚
[8];

414 
wrôe_mac_£¸ë_size
;

415 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

417 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

418 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

421 
√ed_em±y_‰agmíts
;

422 
em±y_‰agmít_d⁄e
;

425 
öô_exåa
;

427 
SSL3_BUFFER
 
rbuf
;

428 
SSL3_BUFFER
 
wbuf
;

430 
SSL3_RECORD
 
ºec
;

431 
SSL3_RECORD
 
wªc
;

435 
Æît_‰agmít
[2];

436 
Æît_‰agmít_Àn
;

437 
h™dshake_‰agmít
[4];

438 
h™dshake_‰agmít_Àn
;

441 
wnum
;

442 
w≥nd_tŸ
;

443 
w≥nd_ty≥
;

444 
w≥nd_ªt
;

445 c⁄° *
w≥nd_buf
;

448 
BIO
 *
h™dshake_buf„r
;

452 
EVP_MD_CTX
 **
h™dshake_dg°
;

455 
ch™ge_cùhî_•ec
;

457 
w¨n_Æît
;

458 
Áèl_Æît
;

461 
Æît_di•©ch
;

462 
£nd_Æît
[2];

466 
ª√gŸüã
;

467 
tŸÆ_ª√gŸüti⁄s
;

468 
num_ª√gŸüti⁄s
;

470 
ö_ªad_≠p_d©a
;

475 *
˛õ¡_›aque_¥f_öput
;

476 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

477 *
£rvî_›aque_¥f_öput
;

478 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

482 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

485 
föish_md
[
EVP_MAX_MD_SIZE
*2];

486 
föish_md_Àn
;

487 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

488 
≥î_föish_md_Àn
;

490 
mesßge_size
;

491 
mesßge_ty≥
;

494 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

495 #i‚de‡
OPENSSL_NO_DH


496 
DH
 *
dh
;

499 #i‚de‡
OPENSSL_NO_ECDH


500 
EC_KEY
 *
ecdh
;

504 
√xt_°©e
;

506 
ªu£_mesßge
;

509 
˚π_ªq
;

510 
˘y≥_num
;

511 
˘y≥
[
SSL3_CT_NUMBER
];

512 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

514 
u£_rß_tmp
;

516 
key_block_Àngth
;

517 *
key_block
;

519 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

520 c⁄° 
EVP_MD
 *
√w_hash
;

521 
√w_mac_pkey_ty≥
;

522 
√w_mac_£¸ë_size
;

523 #i‚de‡
OPENSSL_NO_COMP


524 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

526 *
√w_com¥essi⁄
;

528 
˚π_ªque°
;

529 } 
tmp
;

532 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

533 
¥evious_˛õ¡_föished_Àn
;

534 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

535 
¥evious_£rvî_föished_Àn
;

536 
£nd_c⁄√˘i⁄_bödög
;

538 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


540 
√xt_¥Ÿo_√g_£í
;

542 } 
	tSSL3_STATE
;

549 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

550 #i‚de‡
OPENSSL_NO_SCTP


551 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

552 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

555 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

556 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

558 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

559 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

560 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

561 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

562 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

563 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

564 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

565 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

566 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

567 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

568 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

569 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

571 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

572 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

573 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

574 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

575 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

576 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

579 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

582 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

583 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

586 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

587 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

588 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

590 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

591 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

592 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

593 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

597 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

598 #i‚de‡
OPENSSL_NO_SCTP


599 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

600 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

604 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

605 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

606 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

608 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

609 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

610 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

611 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

612 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

613 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

614 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

615 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

616 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

617 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

618 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

619 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

620 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

621 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

622 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

624 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

625 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

626 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

627 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

629 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

631 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

632 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

633 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

637 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

640 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

641 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

642 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

643 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

646 
	#SSL3_MT_HELLO_REQUEST
 0

	)

647 
	#SSL3_MT_CLIENT_HELLO
 1

	)

648 
	#SSL3_MT_SERVER_HELLO
 2

	)

649 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

650 
	#SSL3_MT_CERTIFICATE
 11

	)

651 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

652 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

653 
	#SSL3_MT_SERVER_DONE
 14

	)

654 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

655 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

656 
	#SSL3_MT_FINISHED
 20

	)

657 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

658 
	#SSL3_MT_NEXT_PROTO
 67

	)

659 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

662 
	#SSL3_MT_CCS
 1

	)

665 
	#SSL3_CC_READ
 0x01

	)

666 
	#SSL3_CC_WRITE
 0x02

	)

667 
	#SSL3_CC_CLIENT
 0x10

	)

668 
	#SSL3_CC_SERVER
 0x20

	)

669 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

670 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

671 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

672 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

674 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


320 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

321 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


322 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

323 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

324 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


325 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

326 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

327 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


328 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

329 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

330 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


331 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

332 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

333 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


334 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

335 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

336 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


337 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

338 
ec_GFp_smp_±_£t_af_co‹ds


	)

339 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


340 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

341 
ec_GFp_smp_±_gë_af_co‹ds


	)

342 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


343 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

344 
ec_GFp_smp_£t_com¥_co‹ds


	)

345 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


346 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

349 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


350 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

351 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


352 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

353 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


354 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

355 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


356 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

357 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


358 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

359 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


360 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

365 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


366 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

367 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


372 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

373 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


374 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

375 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


376 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

377 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


378 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

379 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


380 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

381 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


382 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

383 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


384 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

389 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


390 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

391 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

395 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


396 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

399 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


400 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

401 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

403 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


404 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


408 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

409 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


410 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

411 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


412 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

413 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


414 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

415 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


416 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

417 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


418 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

421 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


422 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

425 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


426 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

427 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


428 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

431 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

433 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


434 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

440 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

441 #unde‡
ERR_lﬂd_CRYPTO_°rögs


442 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

443 #unde‡
OCSP_¸lID_√w


444 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

446 #unde‡
d2i_ECPARAMETERS


447 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

448 #unde‡
i2d_ECPARAMETERS


449 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

450 #unde‡
d2i_ECPKPARAMETERS


451 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

452 #unde‡
i2d_ECPKPARAMETERS


453 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

461 #unde‡
X509v3_˛ónup_exãnsi⁄s


462 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

463 #unde‡
X509v3_add_exãnsi⁄


464 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

465 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


466 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

467 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


468 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

471 #unde‡
cms_D©a_¸óã


472 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_2_VERSION
 0x0303

	)

163 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

164 
	#TLS1_2_VERSION_MINOR
 0x03

	)

166 
	#TLS1_1_VERSION
 0x0302

	)

167 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_1_VERSION_MINOR
 0x02

	)

170 
	#TLS1_VERSION
 0x0301

	)

171 
	#TLS1_VERSION_MAJOR
 0x03

	)

172 
	#TLS1_VERSION_MINOR
 0x01

	)

174 
	#TLS1_gë_vîsi⁄
(
s
) \

175 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

177 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

178 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

180 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

181 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

182 
	#TLS1_AD_UNKNOWN_CA
 48

	)

183 
	#TLS1_AD_ACCESS_DENIED
 49

	)

184 
	#TLS1_AD_DECODE_ERROR
 50

	)

185 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

186 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

187 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

188 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

189 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

190 
	#TLS1_AD_USER_CANCELLED
 90

	)

191 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

193 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

194 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

195 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

196 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

197 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

198 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

201 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

202 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

203 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

204 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

205 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

206 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

208 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

211 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

212 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

215 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

218 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

219 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

222 
	#TLSEXT_TYPE_§p
 12

	)

225 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

228 
	#TLSEXT_TYPE_u£_§ç
 14

	)

231 
	#TLSEXT_TYPE_hóπbót
 15

	)

234 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

240 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

244 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

246 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


248 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

252 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

254 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

257 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

258 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

259 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

260 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

261 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

265 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

266 
	#TLSEXT_sig«tuª_rß
 1

	)

267 
	#TLSEXT_sig«tuª_dß
 2

	)

268 
	#TLSEXT_sig«tuª_ecdß
 3

	)

270 
	#TLSEXT_hash_n⁄e
 0

	)

271 
	#TLSEXT_hash_md5
 1

	)

272 
	#TLSEXT_hash_sha1
 2

	)

273 
	#TLSEXT_hash_sha224
 3

	)

274 
	#TLSEXT_hash_sha256
 4

	)

275 
	#TLSEXT_hash_sha384
 5

	)

276 
	#TLSEXT_hash_sha512
 6

	)

278 #i‚de‡
OPENSSL_NO_TLSEXT


280 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

282 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

283 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

291 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

292 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

293 
u£_c⁄ãxt
);

295 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

296 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

298 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

299 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

301 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

302 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

304 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

305 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

307 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

308 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

310 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

313 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

316 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

319 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

322 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

325 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

326 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

328 
	#SSL_TLSEXT_ERR_OK
 0

	)

329 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

330 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

331 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

333 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

334 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

336 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

337 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

338 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

339 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

341 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

342 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

344 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

345 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

347 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

348 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

349 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

350 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

351 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

352 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

354 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

355 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

357 #i‚de‡
OPENSSL_NO_HEARTBEATS


358 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

359 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

360 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

362 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

363 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

364 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

365 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

370 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

371 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

372 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

373 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

380 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

381 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

382 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

383 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

384 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

385 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

386 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

390 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

391 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

392 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

393 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

394 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

395 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

397 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

398 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

399 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

400 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

401 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

402 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

405 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

406 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

407 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

408 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

409 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

410 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

413 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

414 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

415 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

416 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

417 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

418 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

421 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

422 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

423 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

424 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

425 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

426 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

427 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

430 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

431 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

432 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

433 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

434 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

435 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

438 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

439 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

440 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

441 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

442 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

443 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

446 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

447 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

448 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

449 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

450 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

451 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

452 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

453 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

454 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

455 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

456 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

457 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

460 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

461 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

462 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

463 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

464 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

466 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

467 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

468 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

469 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

470 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

472 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

473 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

474 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

475 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

476 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

478 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

479 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

480 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

481 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

482 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

484 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

485 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

486 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

487 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

488 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

491 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

492 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

493 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

494 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

495 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

496 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

497 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

498 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

499 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

503 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

504 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

505 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

507 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

508 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

509 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

510 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

515 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

516 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

517 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

518 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

529 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

530 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

531 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

532 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

533 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

534 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

535 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

538 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

539 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

540 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

541 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

542 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

543 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

545 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

546 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

547 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

548 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

549 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

550 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

553 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

554 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

555 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

556 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

557 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

559 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

560 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

561 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

562 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

563 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

565 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

566 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

567 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

568 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

569 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

571 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

572 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

573 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

574 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

575 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

577 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

578 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

579 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

580 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

581 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

584 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

585 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

586 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

587 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

590 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

591 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

592 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

593 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

594 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

595 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

596 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

597 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

598 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

601 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

602 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

603 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

604 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

605 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

606 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

608 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

609 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

610 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

611 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

612 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

613 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

616 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

617 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

618 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

619 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

620 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

621 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

624 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

625 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

626 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

627 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

628 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

629 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

630 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

631 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

632 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

633 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

634 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

635 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

636 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

639 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

640 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

641 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

642 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

643 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

644 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

645 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

646 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

647 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

648 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

649 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

650 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

654 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

655 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

656 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

657 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

658 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

659 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

660 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

661 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

664 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

665 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

666 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

667 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

668 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

669 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

670 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

671 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

673 
	#TLS_CT_RSA_SIGN
 1

	)

674 
	#TLS_CT_DSS_SIGN
 2

	)

675 
	#TLS_CT_RSA_FIXED_DH
 3

	)

676 
	#TLS_CT_DSS_FIXED_DH
 4

	)

677 
	#TLS_CT_ECDSA_SIGN
 64

	)

678 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

679 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

680 
	#TLS_CT_GOST94_SIGN
 21

	)

681 
	#TLS_CT_GOST01_SIGN
 22

	)

684 
	#TLS_CT_NUMBER
 9

	)

686 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

688 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

689 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

690 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

691 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

692 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

693 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

694 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

695 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

696 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

697 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

698 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

699 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

700 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

701 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

702 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

703 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

704 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

706 #ifde‡
CHARSET_EBCDIC


707 #unde‡
TLS_MD_CLIENT_FINISH_CONST


708 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

709 #unde‡
TLS_MD_SERVER_FINISH_CONST


710 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

711 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


712 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

713 #unde‡
TLS_MD_KEY_EXPANSION_CONST


714 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

715 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


716 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

717 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


718 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

719 #unde‡
TLS_MD_IV_BLOCK_CONST


720 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

721 #unde‡
TLS_MD_MASTER_SECRET_CONST


722 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

726 
	sés_£ssi⁄_tickë_ext_°


728 
Àngth
;

729 *
d©a
;

732 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

772 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

773 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

775 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

776 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

777 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

778 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

779 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

780 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

782 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

783 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

784 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

785 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

786 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

787 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

789 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

790 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

792 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

793 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

794 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

796 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

798 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

799 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

800 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

801 
STACK_OF
(
X509
Ë*
chaö
);

802 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

803 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

804 
Àngth
);

805 #i‚de‡
OPENSSL_NO_RSA


806 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

807 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

808 
Àngth
);

810 #i‚de‡
OPENSSL_NO_DSA


811 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

812 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

813 
Àngth
);

815 #i‚de‡
OPENSSL_NO_EC


816 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

817 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

818 
Àngth
);

821 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

822 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

825 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

826 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

828 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

829 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

831 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

833 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

835 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

837 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

839 
DECLARE_ASN1_FUNCTIONS
(
X509
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

842 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

844 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

845 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

846 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

847 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

848 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

849 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

851 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

852 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

853 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

854 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

855 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

856 
X509_TRUST_£t
(*
t
, 
åu°
);

857 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

858 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_åu°_˛ór
(
X509
 *
x
);

860 
X509_ªje˘_˛ór
(
X509
 *
x
);

862 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

863 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

866 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

867 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

868 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

869 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

871 
X509_PKEY
 * 
X509_PKEY_√w
();

872 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

873 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

874 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

876 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

880 #i‚de‡
OPENSSL_NO_EVP


881 
X509_INFO
 * 
X509_INFO_√w
();

882 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

883 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

885 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

886 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

888 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

889 *
md
,*
Àn
);

891 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

892 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

893 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

895 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

896 *
md
,*
Àn
);

898 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

899 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

901 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

902 
ASN1_BIT_STRING
 *
sig«tuª
,

903 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

904 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

905 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

906 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

909 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

910 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

911 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

912 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

913 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

914 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

915 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

916 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

917 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

919 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

920 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

921 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

923 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

924 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

925 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

926 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

927 
X509_REQ_exãnsi⁄_nid
(
nid
);

928 * 
X509_REQ_gë_exãnsi⁄_nids
();

929 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

930 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

931 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

932 
nid
);

933 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

934 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

935 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

936 
œ°pos
);

937 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

938 
œ°pos
);

939 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

940 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

941 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

942 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

943 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

944 c⁄° *
byãs
, 
Àn
);

945 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

946 
nid
, 
ty≥
,

947 c⁄° *
byãs
, 
Àn
);

948 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

949 c⁄° *
©å«me
, 
ty≥
,

950 c⁄° *
byãs
, 
Àn
);

952 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

953 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

954 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

955 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

958 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

959 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

961 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

963 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

965 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

966 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

968 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

969 
X509_issuî_«me_hash
(
X509
 *
a
);

971 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

972 
X509_subje˘_«me_hash
(
X509
 *
x
);

974 #i‚de‡
OPENSSL_NO_MD5


975 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

976 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

979 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

980 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

981 
X509_NAME_hash
(
X509_NAME
 *
x
);

982 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

984 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

985 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 #i‚de‡
OPENSSL_NO_FP_API


987 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

988 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

989 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

990 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

991 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

994 #i‚de‡
OPENSSL_NO_BIO


995 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

996 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

997 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

998 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

999 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1001 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1002 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1003 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1006 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1007 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1008 *
buf
,
Àn
);

1009 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1010 *
buf
,
Àn
);

1014 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1015 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1016 
œ°pos
);

1017 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1020 
loc
, 
£t
);

1021 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1022 *
byãs
, 
Àn
, 
loc
, 
£t
);

1023 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1024 *
byãs
, 
Àn
, 
loc
, 
£t
);

1025 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1026 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1027 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1028 
ty≥
,*
byãs
, 
Àn
);

1029 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1030 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1031 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1032 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1033 
Àn
);

1034 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1035 
ASN1_OBJECT
 *
obj
);

1036 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1037 c⁄° *
byãs
, 
Àn
);

1038 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1039 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1041 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1042 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1043 
nid
, 
œ°pos
);

1044 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1045 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1046 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1047 
¸ô
, 
œ°pos
);

1048 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1049 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1051 
X509_EXTENSION
 *
ex
, 
loc
);

1053 
X509_gë_ext_cou¡
(
X509
 *
x
);

1054 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1055 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1056 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1057 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1058 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1059 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1060 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1061 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1062 
Êags
);

1064 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1065 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1066 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1067 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1068 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1069 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1071 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1072 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1073 
Êags
);

1075 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1076 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1077 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1079 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1080 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1082 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1083 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1084 
Êags
);

1086 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1087 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1088 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1089 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1090 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1091 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1092 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1093 
ASN1_OCTET_STRING
 *
d©a
);

1094 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1095 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1096 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1098 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1099 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1100 
œ°pos
);

1101 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1102 
œ°pos
);

1103 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1104 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1106 
X509_ATTRIBUTE
 *
©å
);

1107 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1108 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1109 c⁄° *
byãs
, 
Àn
);

1110 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1111 
nid
, 
ty≥
,

1112 c⁄° *
byãs
, 
Àn
);

1113 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1114 c⁄° *
©å«me
, 
ty≥
,

1115 c⁄° *
byãs
, 
Àn
);

1116 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1117 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1118 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1119 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1120 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1121 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1122 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1123 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1124 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1125 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1126 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1127 
©πy≥
, *
d©a
);

1128 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1129 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1132 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1133 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1134 
œ°pos
);

1135 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1136 
œ°pos
);

1137 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1139 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1140 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1141 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1142 c⁄° *
byãs
, 
Àn
);

1143 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1144 
nid
, 
ty≥
,

1145 c⁄° *
byãs
, 
Àn
);

1146 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1147 c⁄° *
©å«me
, 
ty≥
,

1148 c⁄° *
byãs
, 
Àn
);

1150 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1153 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1154 
ASN1_INTEGER
 *
£rül
);

1155 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1157 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1158 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1161 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1162 c⁄° *
ß…
, 
ß…Àn
);

1164 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1165 c⁄° *
ß…
, 
ß…Àn
);

1166 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1167 *
ß…
, 
ß…Àn
);

1168 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1169 *
ß…
, 
ß…Àn
,

1170 *
aiv
, 
¥f_nid
);

1172 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1173 
¥f_nid
, 
keyÀn
);

1177 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1179 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1180 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1182 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1184 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1185 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1186 *
≥nc
, 
≥n˛í
);

1187 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1188 c⁄° **
pk
, *
µkÀn
,

1189 
X509_ALGOR
 **
∑
,

1190 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1192 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1193 
±y≥
, *
pvÆ
,

1194 *
≥nc
, 
≥n˛í
);

1195 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1196 c⁄° **
pk
, *
µkÀn
,

1197 
X509_ALGOR
 **
∑
,

1198 
X509_PUBKEY
 *
pub
);

1200 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1201 
X509_TRUST_gë_cou¡
();

1202 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1203 
X509_TRUST_gë_by_id
(
id
);

1204 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1205 *
«me
, 
¨g1
, *
¨g2
);

1206 
X509_TRUST_˛ónup
();

1207 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1208 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1209 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1215 
ERR_lﬂd_X509_°rögs
();

1220 
	#X509_F_ADD_CERT_DIR
 100

	)

1221 
	#X509_F_BY_FILE_CTRL
 101

	)

1222 
	#X509_F_CHECK_POLICY
 145

	)

1223 
	#X509_F_DIR_CTRL
 102

	)

1224 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1225 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1227 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1228 
	#X509_F_X509V3_ADD_EXT
 104

	)

1229 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1232 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1233 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1234 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1235 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1236 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1238 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1239 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1240 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1241 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1242 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1243 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1245 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1246 
	#X509_F_X509_NAME_ONELINE
 116

	)

1247 
	#X509_F_X509_NAME_PRINT
 117

	)

1248 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1249 
	#X509_F_X509_PUBKEY_GET
 119

	)

1250 
	#X509_F_X509_PUBKEY_SET
 120

	)

1251 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1252 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1253 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1254 
	#X509_F_X509_REQ_TO_X509
 123

	)

1255 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1256 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1257 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1258 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1259 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1260 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1261 
	#X509_F_X509_TO_X509_REQ
 126

	)

1262 
	#X509_F_X509_TRUST_ADD
 133

	)

1263 
	#X509_F_X509_TRUST_SET
 141

	)

1264 
	#X509_F_X509_VERIFY_CERT
 127

	)

1267 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1268 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1269 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1270 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1271 
	#X509_R_ERR_ASN1_LIB
 102

	)

1272 
	#X509_R_INVALID_DIRECTORY
 113

	)

1273 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1274 
	#X509_R_INVALID_TRUST
 123

	)

1275 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1276 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1277 
	#X509_R_LOADING_CERT_DIR
 103

	)

1278 
	#X509_R_LOADING_DEFAULTS
 104

	)

1279 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1280 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1281 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1282 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1283 
	#X509_R_SHOULD_RETRY
 106

	)

1284 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1285 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1286 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1287 
	#X509_R_UNKNOWN_NID
 109

	)

1288 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1289 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1290 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1291 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1292 
	#X509_R_WRONG_TYPE
 122

	)

1294 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_TLC_°
 
	tASN1_TLC
;

298 
ASN1_VALUE_°
 
	tASN1_VALUE
;

302 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

304 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

307 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

308 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

311 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

313 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

315 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

316 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

317 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

318 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

320 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

321 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

322 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

323 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

325 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

326 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

328 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

329 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

330 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

332 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

333 
ty≥
 *
«me
##
	`_√w
(); \

334 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

336 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

337 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

339 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

340 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

341 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

343 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

344 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

345 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

347 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

348 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

349 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

350 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

351 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

352 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

353 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

354 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

355 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

356 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

358 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

359 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

360 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

362 
TYPEDEF_D2I2D_OF
();

399 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


402 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

405 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

408 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

410 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

412 
	#DECLARE_ASN1_ITEM
(
«me
) \

413 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

422 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

425 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

428 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

430 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

432 
	#DECLARE_ASN1_ITEM
(
«me
) \

433 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

444 
	#ASN1_STRFLGS_ESC_2253
 1

	)

445 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

446 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

454 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

460 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

462 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

464 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

474 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

481 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

484 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

494 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

495 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

502 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

509 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

510 
ASN1_STRFLGS_ESC_CTRL
 | \

511 
ASN1_STRFLGS_ESC_MSB
 | \

512 
ASN1_STRFLGS_UTF8_CONVERT
 | \

513 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

514 
ASN1_STRFLGS_DUMP_DER
)

	)

516 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

517 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

519 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

521 
	sa¢1_ty≥_°


523 
ty≥
;

525 *
±r
;

526 
ASN1_BOOLEAN
 
boﬁón
;

527 
ASN1_STRING
 * 
a¢1_°rög
;

528 
ASN1_OBJECT
 * 
obje˘
;

529 
ASN1_INTEGER
 * 
öãgî
;

530 
ASN1_ENUMERATED
 * 
íumî©ed
;

531 
ASN1_BIT_STRING
 * 
bô_°rög
;

532 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

533 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

534 
ASN1_T61STRING
 * 
t61°rög
;

535 
ASN1_IA5STRING
 * 
ü5°rög
;

536 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

537 
ASN1_BMPSTRING
 * 
bmp°rög
;

538 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

539 
ASN1_UTCTIME
 * 
ut˘ime
;

540 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

541 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

542 
ASN1_UTF8STRING
 * 
utf8°rög
;

545 
ASN1_STRING
 * 
£t
;

546 
ASN1_STRING
 * 
£quí˚
;

547 
ASN1_VALUE
 * 
a¢1_vÆue
;

548 } 
vÆue
;

549 } 
	tASN1_TYPE
;

551 
DECLARE_STACK_OF
(
ASN1_TYPE
)

552 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

554 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

556 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

559 
	sNETSCAPE_X509_°


561 
ASN1_OCTET_STRING
 *
hódî
;

562 
X509
 *
˚π
;

563 } 
	tNETSCAPE_X509
;

566 
	sBIT_STRING_BITNAME_°
 {

567 
bônum
;

568 c⁄° *
 ame
;

569 c⁄° *
¢ame
;

570 } 
	tBIT_STRING_BITNAME
;

573 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

574 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

575 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

576 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

579 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

581 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

582 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

583 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

584 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

585 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

586 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

588 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

589 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

590 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

591 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

592 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

593 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

594 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

597 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

598 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

599 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

600 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

601 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

602 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

604 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

605 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

606 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

607 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

608 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

609 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

610 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

612 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

613 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

614 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

615 
V_ASN1_UNIVERSAL
)

	)

617 
	#B_ASN1_TIME
 \

618 
B_ASN1_UTCTIME
 | \

619 
B_ASN1_GENERALIZEDTIME


	)

621 
	#B_ASN1_PRINTABLE
 \

622 
B_ASN1_NUMERICSTRING
| \

623 
B_ASN1_PRINTABLESTRING
| \

624 
B_ASN1_T61STRING
| \

625 
B_ASN1_IA5STRING
| \

626 
B_ASN1_BIT_STRING
| \

627 
B_ASN1_UNIVERSALSTRING
|\

628 
B_ASN1_BMPSTRING
|\

629 
B_ASN1_UTF8STRING
|\

630 
B_ASN1_SEQUENCE
|\

631 
B_ASN1_UNKNOWN


	)

633 
	#B_ASN1_DIRECTORYSTRING
 \

634 
B_ASN1_PRINTABLESTRING
| \

635 
B_ASN1_TELETEXSTRING
|\

636 
B_ASN1_BMPSTRING
|\

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_UTF8STRING


	)

640 
	#B_ASN1_DISPLAYTEXT
 \

641 
B_ASN1_IA5STRING
| \

642 
B_ASN1_VISIBLESTRING
| \

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UTF8STRING


	)

646 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

647 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

648 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

649 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

650 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

651 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

652 
B_ASN1_PRINTABLE
)

	)

654 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

655 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

656 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

657 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

658 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

659 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

660 
B_ASN1_DIRECTORYSTRING
)

	)

662 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

663 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

664 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

665 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

667 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

668 
B_ASN1_DISPLAYTEXT
)

	)

670 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

672 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

674 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

675 
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

677 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

678 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

680 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

682 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

687 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

690 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

692 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_ASN1_IA5STRING_dup
(
a
) \

694 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

695 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

696 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

697 
V_ASN1_UNIVERSAL
)

	)

698 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

699 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

700 
B_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

704 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

706 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

712 (c⁄° 
ASN1_STRING
 *)
a
)

	)

714 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

715 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

716 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

717 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

718 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

720 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

721 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

722 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

723 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

724 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

725 
V_ASN1_UNIVERSAL
)

	)

726 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

727 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

728 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

730 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

740 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

750 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

757 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

760 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

762 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

767 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

771 
	#IS_SEQUENCE
 0

	)

772 
	#IS_SET
 1

	)

774 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

776 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

777 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

778 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

779 
ASN1_TYPE_cmp
(
ASN1_TYPE
 *
a
, ASN1_TYPE *
b
);

781 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

782 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

783 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

784 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

785 
Àngth
);

786 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

787 
Àngth
);

789 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

791 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

792 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

794 
ASN1_STRING
 * 
ASN1_STRING_√w
();

795 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

796 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

797 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

798 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

799 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

802 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

803 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

804 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

805 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

806 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

807 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

809 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

810 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

811 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

812 
Àngth
);

813 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

814 
Àngth
 );

815 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

816 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

817 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

818 *
Êags
, 
Êags_Àn
);

820 #i‚de‡
OPENSSL_NO_BIO


821 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

822 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

824 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

825 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

826 
BIT_STRING_BITNAME
 *
tbl
);

828 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

829 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

832 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

833 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

834 
Àngth
);

835 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

836 
Àngth
);

837 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

838 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

840 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

842 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

843 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

845 
off£t_day
, 
off£t_£c
);

846 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

847 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

849 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

852 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

853 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

855 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

856 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

858 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

859 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

860 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

861 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

869 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

870 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

872 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

874 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

884 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

886 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

887 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

888 
off£t_day
, 
off£t_£c
);

889 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

890 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

891 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

893 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

894 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

895 
is_£t
);

896 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

897 c⁄° **
µ
,

898 
Àngth
, 
d2i_of_void
 *
d2i
,

899 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

900 
ex_˛ass
);

902 #i‚de‡
OPENSSL_NO_BIO


903 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

904 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

905 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

906 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

907 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

908 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

909 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

911 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

913 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

914 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

915 c⁄° *
¢
, c⁄° *
 
);

917 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

918 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

919 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

920 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

922 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

923 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

924 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

925 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

929 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

931 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

932 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

933 
Àngth
, 
Pèg
, 
P˛ass
);

934 
ASN1_èg2bô
(
èg
);

936 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

937 
Àngth
,
ty≥
);

940 
a¢1_Föish
(
ASN1_CTX
 *
c
);

941 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

944 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

945 *
p˛ass
, 
omax
);

946 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

947 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

948 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

949 
èg
, 
x˛ass
);

950 
ASN1_put_eoc
(**
µ
);

951 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

954 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

956 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

957 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

961 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

962 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

963 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

964 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

966 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

970 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

971 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

972 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

974 #i‚de‡
OPENSSL_NO_FP_API


975 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

977 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

978 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

979 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

980 
ö
, \

981 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

983 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

984 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

986 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

987 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

988 
out
, \

989 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

991 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

992 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

993 
out
, \

994 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

996 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

997 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1000 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1002 #i‚de‡
OPENSSL_NO_BIO


1003 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1005 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1006 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1007 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1008 
ö
, \

1009 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1011 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1012 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1014 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1015 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1016 
out
, \

1017 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1019 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1020 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1021 
out
, \

1022 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1024 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1025 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1026 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1027 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1028 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1029 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1030 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1031 *
buf
, 
off
);

1032 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1033 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1035 c⁄° *
ASN1_èg2°r
(
èg
);

1039 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1041 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1043 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1044 *
d©a
, 
Àn
);

1045 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1046 *
d©a
, 
max_Àn
);

1047 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1048 *
d©a
, 
Àn
);

1049 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1050 *
d©a
, 
max_Àn
);

1052 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1053 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1054 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1055 **
buf
, *
Àn
 );

1056 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1057 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1058 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1059 
ASN1_OCTET_STRING
 **
o˘
);

1061 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1062 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1063 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1064 
o˘
))

	)

1066 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1068 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1069 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1070 
ASN1_STRING_gë_deÁu…_mask
();

1071 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1072 
öf‹m
, 
mask
);

1073 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1074 
öf‹m
, 
mask
,

1075 
mösize
, 
maxsize
);

1077 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1078 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1079 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1080 
ASN1_STRING_TABLE_add
(, , , , );

1081 
ASN1_STRING_TABLE_˛ónup
();

1086 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1087 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1092 
ASN1_add_oid_moduÀ
();

1094 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1095 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1100 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1102 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1104 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1106 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1108 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1110 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1112 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1114 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1116 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1118 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1119 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1120 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1121 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1122 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1124 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1125 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1126 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1127 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1128 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1130 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1131 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
BIO_METHOD
 *
BIO_f_a¢1
();

1135 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1137 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1138 c⁄° 
ASN1_ITEM
 *
ô
);

1139 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1140 c⁄° *
hdr
,

1141 c⁄° 
ASN1_ITEM
 *
ô
);

1142 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1143 
˘y≥_nid
, 
ec⁄t_nid
,

1144 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1147 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1148 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1154 
ERR_lﬂd_ASN1_°rögs
();

1159 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1160 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1161 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1162 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1163 
	#ASN1_F_APPEND_EXP
 176

	)

1164 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1165 
	#ASN1_F_ASN1_CB
 177

	)

1166 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1167 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1168 
	#ASN1_F_ASN1_COLLECT
 106

	)

1169 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1170 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1171 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1172 
	#ASN1_F_ASN1_DIGEST
 184

	)

1173 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1174 
	#ASN1_F_ASN1_DUP
 111

	)

1175 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1177 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1178 
	#ASN1_F_ASN1_FIND_END
 190

	)

1179 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1181 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1182 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1183 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1184 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1185 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1186 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1187 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1188 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1189 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1190 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1192 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1194 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1195 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1270 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1271 
	#ASN1_F_SMIME_TEXT
 213

	)

1272 
	#ASN1_F_X509_CINF_NEW
 168

	)

1273 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1274 
	#ASN1_F_X509_INFO_NEW
 170

	)

1275 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1276 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1277 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1278 
	#ASN1_F_X509_NEW
 172

	)

1279 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1282 
	#ASN1_R_ADDING_OBJECT
 171

	)

1283 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1284 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1285 
	#ASN1_R_AUX_ERROR
 100

	)

1286 
	#ASN1_R_BAD_CLASS
 101

	)

1287 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1288 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1289 
	#ASN1_R_BAD_TAG
 104

	)

1290 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1291 
	#ASN1_R_BN_LIB
 105

	)

1292 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1293 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1294 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1295 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1296 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1297 
	#ASN1_R_DECODE_ERROR
 110

	)

1298 
	#ASN1_R_DECODING_ERROR
 111

	)

1299 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1300 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1301 
	#ASN1_R_ENCODE_ERROR
 112

	)

1302 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1303 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1304 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1305 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1306 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1307 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1308 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1309 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1310 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1311 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1312 
	#ASN1_R_FIELD_MISSING
 121

	)

1313 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1314 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1315 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1316 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1317 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1318 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1319 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1320 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1321 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1322 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1323 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1324 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1325 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1326 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1327 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1328 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1329 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1330 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1331 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1332 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1333 
	#ASN1_R_INVALID_DIGIT
 130

	)

1334 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1335 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1336 
	#ASN1_R_INVALID_NUMBER
 187

	)

1337 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1338 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1339 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1340 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1341 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1342 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1343 
	#ASN1_R_LENGTH_ERROR
 136

	)

1344 
	#ASN1_R_LIST_ERROR
 188

	)

1345 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1346 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1347 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1348 
	#ASN1_R_MISSING_EOC
 137

	)

1349 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1350 
	#ASN1_R_MISSING_VALUE
 189

	)

1351 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1352 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1353 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1354 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1355 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1356 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1357 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1358 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1359 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1360 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1361 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1362 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1363 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1364 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1365 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1366 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1367 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1368 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1369 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1370 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1371 
	#ASN1_R_SHORT_LINE
 150

	)

1372 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1373 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1374 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1375 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1376 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1377 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1378 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1379 
	#ASN1_R_TOO_LONG
 155

	)

1380 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1381 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1382 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1383 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1384 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1385 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1386 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1387 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1388 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1389 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1390 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1391 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1392 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1393 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1394 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1395 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1396 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1397 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1398 
	#ASN1_R_WRONG_TAG
 168

	)

1399 
	#ASN1_R_WRONG_TYPE
 169

	)

1401 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

252 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

260 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

272 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

274 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

275 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

277 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

278 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

280 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *);

281 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

282 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

292 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

302 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

304 #i‚de‡
OPENSSL_NO_EC2M


313 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

336 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

343 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

351 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

364 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_EC2M


374 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

381 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

389 
nid
;

390 c⁄° *
commít
;

391 } 
	tEC_buûtö_curve
;

397 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

408 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

413 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

418 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

425 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

433 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

439 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

446 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

457 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

458 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

480 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

481 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

502 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

503 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

504 #i‚de‡
OPENSSL_NO_EC2M


513 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

514 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

525 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

535 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

536 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

548 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

549 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

550 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

561 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

564 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

565 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

566 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

567 
EC_POINT
 *, 
BN_CTX
 *);

568 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

569 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

570 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

571 
EC_POINT
 *, 
BN_CTX
 *);

586 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

595 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

603 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

610 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

618 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

627 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

629 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

630 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

642 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

653 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

660 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

675 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

676 #i‚de‡
OPENSSL_NO_EC2M


677 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

678 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

679 *
k2
, *
k3
);

682 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

684 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

686 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

687 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

689 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

690 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

691 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

692 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

693 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

694 (*)(
x
))

	)

696 #i‚de‡
OPENSSL_NO_BIO


697 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

699 #i‚de‡
OPENSSL_NO_FP_API


700 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

708 
ec_key_°
 
	tEC_KEY
;

711 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

712 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

715 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

716 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

721 
EC_KEY
 *
EC_KEY_√w
();

723 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

725 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

727 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

734 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

739 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

746 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

752 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

758 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

764 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

772 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

778 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

786 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

792 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

802 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

803 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *, );

804 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *);

805 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

807 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *,

808 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

809 
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *, *
d©a
,

810 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

812 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *, );

820 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

826 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

832 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

841 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

854 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

862 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

876 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

884 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

899 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

909 #i‚de‡
OPENSSL_NO_BIO


915 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

923 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

926 #i‚de‡
OPENSSL_NO_FP_API


932 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

940 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

944 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

946 #i‚de‡
__˝lu•lus


947 #i‡
deföed
(
__SUNPRO_C
)

948 #i‡
__SUNPRO_C
 >= 0x520

949 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

954 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

955 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

956 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

959 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

965 
ERR_lﬂd_EC_°rögs
();

970 
	#EC_F_BN_TO_FELEM
 224

	)

971 
	#EC_F_COMPUTE_WNAF
 143

	)

972 
	#EC_F_D2I_ECPARAMETERS
 144

	)

973 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

974 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

975 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

976 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

977 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

978 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

979 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

980 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

981 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

982 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

983 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

984 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

985 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

986 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

987 
	#EC_F_ECP_NIST_MOD_192
 203

	)

988 
	#EC_F_ECP_NIST_MOD_224
 204

	)

989 
	#EC_F_ECP_NIST_MOD_256
 205

	)

990 
	#EC_F_ECP_NIST_MOD_521
 206

	)

991 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

992 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

993 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

994 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

995 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

996 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

997 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

998 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

999 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1000 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1001 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1002 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1003 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1004 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1005 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1006 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1007 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1008 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1009 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1010 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1011 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1012 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1013 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1014 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1015 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1016 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1017 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1018 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1019 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1020 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1021 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1022 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1023 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1024 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1025 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1026 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1027 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1028 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1029 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1030 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1031 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1032 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1033 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1034 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1035 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1036 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1037 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1038 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1039 
	#EC_F_EC_GROUP_CHECK
 170

	)

1040 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1041 
	#EC_F_EC_GROUP_COPY
 106

	)

1042 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1043 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1044 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1045 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1046 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1047 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1048 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1049 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1050 
	#EC_F_EC_GROUP_NEW
 108

	)

1051 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1052 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1053 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1054 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1055 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1056 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1057 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1058 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1059 
	#EC_F_EC_KEY_COPY
 178

	)

1060 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1061 
	#EC_F_EC_KEY_NEW
 182

	)

1062 
	#EC_F_EC_KEY_PRINT
 180

	)

1063 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1064 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1065 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1066 
	#EC_F_EC_POINT_ADD
 112

	)

1067 
	#EC_F_EC_POINT_CMP
 113

	)

1068 
	#EC_F_EC_POINT_COPY
 114

	)

1069 
	#EC_F_EC_POINT_DBL
 115

	)

1070 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1071 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1072 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1073 
	#EC_F_EC_POINT_INVERT
 210

	)

1074 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1075 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1076 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1077 
	#EC_F_EC_POINT_MUL
 184

	)

1078 
	#EC_F_EC_POINT_NEW
 121

	)

1079 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1080 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1081 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1082 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1083 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1084 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1085 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1086 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1087 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1088 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1089 
	#EC_F_EC_WNAF_MUL
 187

	)

1090 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1091 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1092 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1093 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1094 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1095 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1096 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1097 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1098 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1099 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1100 
	#EC_F_PKEY_EC_CTRL
 197

	)

1101 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1102 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1103 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1104 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1105 
	#EC_F_PKEY_EC_SIGN
 218

	)

1108 
	#EC_R_ASN1_ERROR
 115

	)

1109 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1110 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1111 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1112 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1113 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1114 
	#EC_R_DECODE_ERROR
 142

	)

1115 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1116 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1117 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1118 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1119 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1120 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1121 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1122 
	#EC_R_INVALID_ARGUMENT
 112

	)

1123 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1124 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1125 
	#EC_R_INVALID_CURVE
 141

	)

1126 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1127 
	#EC_R_INVALID_ENCODING
 102

	)

1128 
	#EC_R_INVALID_FIELD
 103

	)

1129 
	#EC_R_INVALID_FORM
 104

	)

1130 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1131 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1132 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1133 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1134 
	#EC_R_KEYS_NOT_SET
 140

	)

1135 
	#EC_R_MISSING_PARAMETERS
 124

	)

1136 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1137 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1138 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1139 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1140 
	#EC_R_NOT_INITIALIZED
 111

	)

1141 
	#EC_R_NO_FIELD_MOD
 133

	)

1142 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1143 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1144 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1145 
	#EC_R_POINT_AT_INFINITY
 106

	)

1146 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1147 
	#EC_R_SLOT_FULL
 108

	)

1148 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1149 
	#EC_R_UNDEFINED_ORDER
 128

	)

1150 
	#EC_R_UNKNOWN_GROUP
 129

	)

1151 
	#EC_R_UNKNOWN_ORDER
 114

	)

1152 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1153 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1154 
	#EC_R_WRONG_ORDER
 130

	)

1156 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

401 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

403 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

406 
	sevp_cùhî_öfo_°


408 c⁄° 
EVP_CIPHER
 *
cùhî
;

409 
iv
[
EVP_MAX_IV_LENGTH
];

410 } 
	tEVP_CIPHER_INFO
;

412 
	sevp_cùhî_˘x_°


414 c⁄° 
EVP_CIPHER
 *
cùhî
;

415 
ENGINE
 *
ígöe
;

416 
í¸y±
;

417 
buf_Àn
;

419 
oiv
[
EVP_MAX_IV_LENGTH
];

420 
iv
[
EVP_MAX_IV_LENGTH
];

421 
buf
[
EVP_MAX_BLOCK_LENGTH
];

422 
num
;

424 *
≠p_d©a
;

425 
key_Àn
;

426 
Êags
;

427 *
cùhî_d©a
;

428 
föÆ_u£d
;

429 
block_mask
;

430 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

433 
	sevp_Encode_Ctx_°


435 
num
;

436 
Àngth
;

441 
íc_d©a
[80];

442 
löe_num
;

443 
ex≥˘_∆
;

444 } 
	tEVP_ENCODE_CTX
;

447 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

448 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

449 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

451 #i‚de‡
OPENSSL_NO_RSA


452 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

453 (*)(
rß
))

	)

456 #i‚de‡
OPENSSL_NO_DSA


457 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

458 (*)(
dß
))

	)

461 #i‚de‡
OPENSSL_NO_DH


462 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

463 (*)(
dh
))

	)

466 #i‚de‡
OPENSSL_NO_EC


467 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

468 (*)(
eckey
))

	)

472 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

473 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

474 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

475 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

477 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

478 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

479 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

480 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

483 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

485 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

486 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

488 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

490 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

491 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

492 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

498 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

504 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

506 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

507 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

508 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

510 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

511 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

513 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

514 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

515 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

516 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

517 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

518 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

519 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

520 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

521 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

522 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

524 #ifde‡
CONST_STRICT


525 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

527 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

529 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

530 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

531 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

532 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

533 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

535 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

536 *
out
,

537 c⁄° *
ö
,

538 
öl
);

540 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

541 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

542 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

543 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

544 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

545 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

546 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

547 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

549 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

550 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

551 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

552 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

554 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

555 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

556 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

557 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

559 
size_t
 
˙t
);

560 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

561 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

562 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

564 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

565 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

566 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

568 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

569 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

570 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

571 * 
EVP_gë_pw_¥om±
();

573 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

574 c⁄° *
ß…
, c⁄° *
d©a
,

575 
d©Æ
, 
cou¡
, *
key
,*
iv
);

577 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

579 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

581 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

582 c⁄° *
key
, c⁄° *
iv
);

583 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
, c⁄° *
iv
);

585 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

586 *
oué
, c⁄° *
ö
, 
öl
);

587 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

588 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

590 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

591 c⁄° *
key
, c⁄° *
iv
);

592 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

593 c⁄° *
key
, c⁄° *
iv
);

594 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

595 *
oué
, c⁄° *
ö
, 
öl
);

596 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

597 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

599 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

600 c⁄° *
key
,c⁄° *
iv
,

601 
íc
);

602 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

603 c⁄° *
key
,c⁄° *
iv
,

604 
íc
);

605 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

606 *
oué
, c⁄° *
ö
, 
öl
);

607 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

608 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

610 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

611 
EVP_PKEY
 *
pkey
);

613 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

614 
sigÀn
,
EVP_PKEY
 *
pkey
);

616 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

617 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

618 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

619 *
sigªt
, 
size_t
 *
sigÀn
);

621 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

622 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

623 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

624 *
sig
, 
size_t
 
sigÀn
);

626 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

627 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

628 
EVP_PKEY
 *
¥iv
);

629 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

631 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

632 **
ek
, *
ekl
, *
iv
,

633 
EVP_PKEY
 **
pubk
, 
≈ubk
);

634 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

636 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

637 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

638 c⁄° *
ö
,
öl
);

639 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

640 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

642 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

643 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

644 c⁄° *
ö
, 
öl
);

645 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

646 *
out
, *
oué
);

647 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

649 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

650 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

651 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

652 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

654 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

655 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

656 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

658 #i‚de‡
OPENSSL_NO_BIO


659 
BIO_METHOD
 *
BIO_f_md
();

660 
BIO_METHOD
 *
BIO_f_ba£64
();

661 
BIO_METHOD
 *
BIO_f_cùhî
();

662 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

663 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

664 c⁄° *
i
, 
íc
);

667 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

668 #i‚de‡
OPENSSL_NO_MD2


669 c⁄° 
EVP_MD
 *
EVP_md2
();

671 #i‚de‡
OPENSSL_NO_MD4


672 c⁄° 
EVP_MD
 *
EVP_md4
();

674 #i‚de‡
OPENSSL_NO_MD5


675 c⁄° 
EVP_MD
 *
EVP_md5
();

677 #i‚de‡
OPENSSL_NO_SHA


678 c⁄° 
EVP_MD
 *
EVP_sha
();

679 c⁄° 
EVP_MD
 *
EVP_sha1
();

680 c⁄° 
EVP_MD
 *
EVP_dss
();

681 c⁄° 
EVP_MD
 *
EVP_dss1
();

682 c⁄° 
EVP_MD
 *
EVP_ecdß
();

684 #i‚de‡
OPENSSL_NO_SHA256


685 c⁄° 
EVP_MD
 *
EVP_sha224
();

686 c⁄° 
EVP_MD
 *
EVP_sha256
();

688 #i‚de‡
OPENSSL_NO_SHA512


689 c⁄° 
EVP_MD
 *
EVP_sha384
();

690 c⁄° 
EVP_MD
 *
EVP_sha512
();

692 #i‚de‡
OPENSSL_NO_MDC2


693 c⁄° 
EVP_MD
 *
EVP_mdc2
();

695 #i‚de‡
OPENSSL_NO_RIPEMD


696 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

698 #i‚de‡
OPENSSL_NO_WHIRLPOOL


699 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

701 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

702 #i‚de‡
OPENSSL_NO_DES


703 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

709 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

712 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

713 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

716 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

719 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

732 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


733 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

734 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

735 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

739 #i‚de‡
OPENSSL_NO_RC4


740 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

741 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

742 #i‚de‡
OPENSSL_NO_MD5


743 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

746 #i‚de‡
OPENSSL_NO_IDEA


747 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

749 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

753 #i‚de‡
OPENSSL_NO_RC2


754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

759 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

762 #i‚de‡
OPENSSL_NO_BF


763 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

765 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

766 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

769 #i‚de‡
OPENSSL_NO_CAST


770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

773 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

776 #i‚de‡
OPENSSL_NO_RC5


777 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

778 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

779 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

780 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

781 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

783 #i‚de‡
OPENSSL_NO_AES


784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

789 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

800 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

810 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

816 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

821 #i‚de‡
OPENSSL_NO_CAMELLIA


822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

827 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

834 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

840 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

841 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

842 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

845 #i‚de‡
OPENSSL_NO_SEED


846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

848 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

849 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

850 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

853 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

854 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

856 #ifde‡
OPENSSL_LOAD_CONF


857 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

858 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

860 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

861 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

864 
O≥nSSL_add_Æl_cùhîs
();

865 
O≥nSSL_add_Æl_dige°s
();

866 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

867 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

868 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

870 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

871 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

873 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

874 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

875 
EVP_˛ónup
();

877 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

878 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

879 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

880 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

882 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

883 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

884 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

885 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

887 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

888 c⁄° *
íc_key
,
íc_key_Àn
,

889 
EVP_PKEY
 *
¥iv©e_key
);

890 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

891 c⁄° *
key
,
key_Àn
,

892 
EVP_PKEY
 *
pub_key
);

893 
EVP_PKEY_ty≥
(
ty≥
);

894 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

895 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

899 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

900 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

901 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

903 #i‚de‡
OPENSSL_NO_RSA


904 
rß_°
;

905 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

906 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

908 #i‚de‡
OPENSSL_NO_DSA


909 
dß_°
;

910 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

911 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

913 #i‚de‡
OPENSSL_NO_DH


914 
dh_°
;

915 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

916 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

918 #i‚de‡
OPENSSL_NO_EC


919 
ec_key_°
;

920 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

921 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

924 
EVP_PKEY
 * 
EVP_PKEY_√w
();

925 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

928 
Àngth
);

929 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

931 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

932 
Àngth
);

933 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

934 
Àngth
);

935 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

937 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

938 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

939 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

940 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

942 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

944 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

945 
ödít
, 
ASN1_PCTX
 *
p˘x
);

946 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

947 
ödít
, 
ASN1_PCTX
 *
p˘x
);

948 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

949 
ödít
, 
ASN1_PCTX
 *
p˘x
);

951 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

953 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

956 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

957 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

960 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

961 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

964 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

965 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

966 
í_de
);

967 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

968 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

969 
keyÀn
, *
out
);

970 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

971 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

972 c⁄° 
EVP_MD
 *
dige°
,

973 
keyÀn
, *
out
);

974 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

975 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

976 
í_de
);

978 
PKCS5_PBE_add
();

980 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

981 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

986 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

988 
	#EVP_PBE_TYPE_PRF
 0x1

	)

990 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

991 
EVP_PBE_KEYGEN
 *
keygí
);

992 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

993 
EVP_PBE_KEYGEN
 *
keygí
);

994 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

995 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

996 
EVP_PBE_˛ónup
();

998 
	#ASN1_PKEY_ALIAS
 0x1

	)

999 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1000 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1002 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1003 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1004 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1005 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1006 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1008 
EVP_PKEY_a¢1_gë_cou¡
();

1009 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1010 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1011 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1012 c⁄° *
°r
, 
Àn
);

1013 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1014 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1015 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1016 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1017 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1020 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1021 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1022 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1023 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1024 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1025 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1026 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1027 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1028 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1029 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1030 
ASN1_PCTX
 *
p˘x
),

1031 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1032 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1033 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1034 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1035 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1036 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1037 
ASN1_PCTX
 *
p˘x
));

1038 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1039 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1040 c⁄° **
pdî
, 
dîÀn
),

1041 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1042 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1043 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1044 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1045 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1046 
ASN1_PCTX
 *
p˘x
));

1048 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1049 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1050 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1051 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1052 
¨g1
, *
¨g2
));

1055 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1056 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1057 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1058 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1059 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1060 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1061 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1062 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1063 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1064 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1065 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1067 
	#EVP_PKEY_OP_TYPE_SIG
 \

1068 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1069 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1071 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1072 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1074 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1075 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1077 
	#EVP_PKEY_OP_TYPE_GEN
 \

1078 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1080 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1081 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1082 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1084 
	#EVP_PKEY_CTRL_MD
 1

	)

1085 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1087 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1088 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1090 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1092 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1094 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1097 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1099 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1100 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1101 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1103 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1105 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1108 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1112 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1114 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1115 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1116 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1117 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1118 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1119 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1120 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1122 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1123 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1124 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1125 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1127 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1128 
cmd
, 
p1
, *
p2
);

1129 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1130 c⁄° *
vÆue
);

1132 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1133 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1135 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1136 c⁄° *
key
, 
keyÀn
);

1138 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1139 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1140 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1142 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1145 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1147 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1148 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1149 *
sig
, 
size_t
 *
sigÀn
,

1150 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1151 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1152 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1153 c⁄° *
sig
, 
size_t
 
sigÀn
,

1154 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1155 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1156 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1157 *
rout
, 
size_t
 *
rouéí
,

1158 c⁄° *
sig
, 
size_t
 
sigÀn
);

1159 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1160 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1161 *
out
, 
size_t
 *
ouéí
,

1162 c⁄° *
ö
, 
size_t
 
öÀn
);

1163 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1164 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1165 *
out
, 
size_t
 *
ouéí
,

1166 c⁄° *
ö
, 
size_t
 
öÀn
);

1168 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1169 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1170 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1172 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1174 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1175 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1176 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1177 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1179 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1180 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1182 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1184 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1185 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1187 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1188 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1190 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1191 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1193 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1194 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1195 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1197 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1198 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1199 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1201 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1202 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1203 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1204 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1206 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1207 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1208 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1209 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1211 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1212 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1213 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1214 *
sig
, 
size_t
 *
sigÀn
,

1215 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1217 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1218 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1219 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1220 
EVP_MD_CTX
 *
m˘x
));

1222 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1223 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1224 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1225 
EVP_MD_CTX
 *
m˘x
));

1227 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1228 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1229 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1230 c⁄° *
ö
, 
size_t
 
öÀn
));

1232 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1233 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1234 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1235 c⁄° *
ö
, 
size_t
 
öÀn
));

1237 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1238 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1239 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1241 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1242 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1243 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1244 c⁄° *
ty≥
, c⁄° *
vÆue
));

1250 
ERR_lﬂd_EVP_°rögs
();

1255 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1256 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1257 
	#EVP_F_AES_INIT_KEY
 133

	)

1258 
	#EVP_F_AES_XTS
 172

	)

1259 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1260 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1261 
	#EVP_F_CMAC_INIT
 173

	)

1262 
	#EVP_F_D2I_PKEY
 100

	)

1263 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1264 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1265 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1266 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1267 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1268 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1269 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1270 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1271 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1272 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1273 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1274 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1275 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1276 
	#EVP_F_EVP_MD_SIZE
 162

	)

1277 
	#EVP_F_EVP_OPENINIT
 102

	)

1278 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1279 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1280 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1281 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1282 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1283 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1284 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1285 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1286 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1287 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1288 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1289 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1290 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1291 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1292 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1293 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1294 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1295 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1296 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1297 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1298 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1299 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1300 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1301 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1302 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1303 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1304 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1305 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1306 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1307 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1308 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1309 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1310 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1312 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1313 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1314 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1315 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1316 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1317 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1318 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1319 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1320 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1321 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1322 
	#EVP_F_HMAC_INIT_EX
 174

	)

1323 
	#EVP_F_INT_CTX_NEW
 157

	)

1324 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1325 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1326 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1327 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1328 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1329 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1330 
	#EVP_F_RC5_CTRL
 125

	)

1333 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1334 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1335 
	#EVP_R_ASN1_LIB
 140

	)

1336 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1337 
	#EVP_R_BAD_DECRYPT
 100

	)

1338 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1339 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1340 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1341 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1342 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1343 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1344 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1345 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1346 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1347 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1348 
	#EVP_R_DECODE_ERROR
 114

	)

1349 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1350 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1351 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1352 
	#EVP_R_ENCODE_ERROR
 115

	)

1353 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1354 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1355 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1356 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1357 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1358 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1359 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1360 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1361 
	#EVP_R_INVALID_DIGEST
 152

	)

1362 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1363 
	#EVP_R_INVALID_OPERATION
 148

	)

1364 
	#EVP_R_IV_TOO_LARGE
 102

	)

1365 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1366 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1367 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1368 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1369 
	#EVP_R_NO_CIPHER_SET
 131

	)

1370 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1371 
	#EVP_R_NO_DIGEST_SET
 139

	)

1372 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1373 
	#EVP_R_NO_KEY_SET
 154

	)

1374 
	#EVP_R_NO_OPERATION_SET
 149

	)

1375 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1376 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1377 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1378 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1379 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1380 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1381 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1382 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1383 
	#EVP_R_TOO_LARGE
 164

	)

1384 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1385 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1386 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1387 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1388 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1389 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1390 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1391 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1392 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1393 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1394 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1395 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1396 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1397 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1399 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

5 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


8 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


9 
	#OPENSSL_NO_EC_NISTP_64_GCC_128


	)

11 #i‚de‡
OPENSSL_NO_GMP


12 
	#OPENSSL_NO_GMP


	)

14 #i‚de‡
OPENSSL_NO_IDEA


15 
	#OPENSSL_NO_IDEA


	)

17 #i‚de‡
OPENSSL_NO_JPAKE


18 
	#OPENSSL_NO_JPAKE


	)

20 #i‚de‡
OPENSSL_NO_KRB5


21 
	#OPENSSL_NO_KRB5


	)

23 #i‚de‡
OPENSSL_NO_MD2


24 
	#OPENSSL_NO_MD2


	)

26 #i‚de‡
OPENSSL_NO_MDC2


27 
	#OPENSSL_NO_MDC2


	)

29 #i‚de‡
OPENSSL_NO_RC5


30 
	#OPENSSL_NO_RC5


	)

32 #i‚de‡
OPENSSL_NO_RFC3779


33 
	#OPENSSL_NO_RFC3779


	)

35 #i‚de‡
OPENSSL_NO_SCTP


36 
	#OPENSSL_NO_SCTP


	)

38 #i‚de‡
OPENSSL_NO_SSL2


39 
	#OPENSSL_NO_SSL2


	)

41 #i‚de‡
OPENSSL_NO_STORE


42 
	#OPENSSL_NO_STORE


	)

47 #i‚de‡
OPENSSL_THREADS


48 
	#OPENSSL_THREADS


	)

50 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


51 
	#OPENSSL_NO_STATIC_ENGINE


	)

58 #ifde‡
OPENSSL_ALGORITHM_DEFINES


59 #i‡
deföed
(
OPENSSL_NO_EC_NISTP_64_GCC_128
Ë&& !deföed(
NO_EC_NISTP_64_GCC_128
)

60 
	#NO_EC_NISTP_64_GCC_128


	)

62 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

63 
	#NO_GMP


	)

65 #i‡
deföed
(
OPENSSL_NO_IDEA
Ë&& !deföed(
NO_IDEA
)

66 
	#NO_IDEA


	)

68 #i‡
deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
NO_JPAKE
)

69 
	#NO_JPAKE


	)

71 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

72 
	#NO_KRB5


	)

74 #i‡
deföed
(
OPENSSL_NO_MD2
Ë&& !deföed(
NO_MD2
)

75 
	#NO_MD2


	)

77 #i‡
deföed
(
OPENSSL_NO_MDC2
Ë&& !deföed(
NO_MDC2
)

78 
	#NO_MDC2


	)

80 #i‡
deföed
(
OPENSSL_NO_RC5
Ë&& !deföed(
NO_RC5
)

81 
	#NO_RC5


	)

83 #i‡
deföed
(
OPENSSL_NO_RFC3779
Ë&& !deföed(
NO_RFC3779
)

84 
	#NO_RFC3779


	)

86 #i‡
deföed
(
OPENSSL_NO_SCTP
Ë&& !deföed(
NO_SCTP
)

87 
	#NO_SCTP


	)

89 #i‡
deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
NO_SSL2
)

90 
	#NO_SSL2


	)

92 #i‡
deföed
(
OPENSSL_NO_STORE
Ë&& !deföed(
NO_STORE
)

93 
	#NO_STORE


	)

97 
	#OPENSSL_CPUID_OBJ


	)

102 #unde‡
I386_ONLY


104 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

105 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

106 
	#ENGINESDIR
 "/u§/lib/i386-löux-gnu/›ís¶-1.0.0/ígöes"

	)

107 
	#OPENSSLDIR
 "/u§/lib/s¶"

	)

111 #unde‡
OPENSSL_UNISTD


112 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

114 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


116 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

117 
	#IDEA_INT
 

	)

120 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

121 
	#MD2_INT
 

	)

124 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

126 
	#RC2_INT
 

	)

129 #i‡
deföed
(
HEADER_RC4_H
)

130 #i‡!
deföed
(
RC4_INT
)

138 
	#RC4_INT
 

	)

140 #i‡!
deföed
(
RC4_CHUNK
)

145 #unde‡
RC4_CHUNK


149 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

152 #i‚de‡
DES_LONG


153 
	#DES_LONG
 

	)

157 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

158 
	#CONFIG_HEADER_BN_H


	)

159 
	#BN_LLONG


	)

164 #unde‡
SIXTY_FOUR_BIT_LONG


165 #unde‡
SIXTY_FOUR_BIT


166 
	#THIRTY_TWO_BIT


	)

169 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

170 
	#CONFIG_HEADER_RC4_LOCL_H


	)

173 
	#RC4_INDEX


	)

176 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

177 
	#CONFIG_HEADER_BF_LOCL_H


	)

178 #unde‡
BF_PTR


181 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

182 
	#CONFIG_HEADER_DES_LOCL_H


	)

183 #i‚de‡
DES_DEFAULT_OPTIONS


186 #i‚de‡
DES_PTR


187 
	#DES_PTR


	)

193 #i‚de‡
DES_RISC1


194 
	#DES_RISC1


	)

197 #i‚de‡
DES_RISC2


198 #unde‡
DES_RISC2


201 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

202 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

207 #i‚de‡
DES_UNROLL


208 
	#DES_UNROLL


	)

214 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

221 #i‡
deföed
–
sun
 )

222 
	#DES_PTR


	)

223 
	#DES_RISC1


	)

224 
	#DES_UNROLL


	)

225 #ñi‡
deföed
–
__u…rix
 )

226 
	#DES_PTR


	)

227 
	#DES_RISC2


	)

228 
	#DES_UNROLL


	)

229 #ñi‡
deföed
–
__osf1__
 )

230 
	#DES_PTR


	)

231 
	#DES_RISC2


	)

232 #ñi‡
deföed
 ( 
_AIX
 )

234 #ñi‡
deföed
–
__hpux
 )

236 #ñi‡
deföed
–
__aux
 )

238 #ñi‡
deföed
–
__dgux
 )

239 
	#DES_UNROLL


	)

240 #ñi‡
deföed
–
__sgi
 )

241 
	#DES_PTR


	)

242 
	#DES_RISC2


	)

243 
	#DES_UNROLL


	)

244 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386__
)

245 
	#DES_PTR


	)

246 
	#DES_RISC1


	)

247 
	#DES_UNROLL


	)

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_P_NOT_PRIME
 128

	)

563 
	#RSA_R_Q_NOT_PRIME
 129

	)

564 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

565 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

566 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

567 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

568 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

569 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

570 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

571 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

572 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

573 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

574 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

575 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

576 
	#RSA_R_VALUE_MISSING
 147

	)

577 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

579 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui_compat.h

59 #i‚de‡
HEADER_UI_COMPAT_H


60 
	#HEADER_UI_COMPAT_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 
	~<›ís¶/ui.h
>

65 #ifde‡ 
__˝lu•lus


72 
	#des_ªad_pw_°rög
(
b
,
l
,
p
,
v
) \

73 
	`_os¶_ﬁd_des_ªad_pw_°rög
((
b
),(
l
),(
p
),(
v
))

	)

74 
	#des_ªad_pw
(
b
,
bf
,
s
,
p
,
v
) \

75 
	`_os¶_ﬁd_des_ªad_pw
((
b
),(
bf
),(
s
),(
p
),(
v
))

	)

77 
_os¶_ﬁd_des_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

78 
_os¶_ﬁd_des_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

80 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

394 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

395 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

396 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

397 
	#X509_VP_FLAG_LOCKED
 0x8

	)

398 
	#X509_VP_FLAG_ONCE
 0x10

	)

401 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

402 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

403 | 
X509_V_FLAG_INHIBIT_ANY
 \

404 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

406 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

407 
X509_NAME
 *
«me
);

408 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

409 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

410 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

411 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

412 
X509_STORE
 *
X509_STORE_√w
();

413 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

415 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

416 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

417 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

418 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

419 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

420 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

422 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

423 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

425 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

427 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

429 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

430 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

431 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

432 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

433 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

435 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

437 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

438 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

440 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

441 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

443 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

444 
X509_OBJECT
 *
ªt
);

446 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

447 
¨gl
, **
ªt
);

449 #i‚de‡
OPENSSL_NO_STDIO


450 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

451 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

452 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

457 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

458 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

459 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

460 
X509_OBJECT
 *
ªt
);

461 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

464 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

466 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

469 #i‚de‡
OPENSSL_NO_STDIO


470 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

471 c⁄° *
fûe
, c⁄° *
dú
);

472 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

475 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

476 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

477 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

478 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

479 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

480 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

481 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

482 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

483 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

484 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

486 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

487 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

488 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

489 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

490 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

491 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

492 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

493 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

494 
puΩo£
, 
åu°
);

495 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

496 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

497 
time_t
 
t
);

498 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

499 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

501 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

502 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

504 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

505 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

506 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

510 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

511 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

512 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

513 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

514 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

517 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

518 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

519 
Êags
);

520 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

522 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

523 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

524 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

525 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

526 
ASN1_OBJECT
 *
pﬁicy
);

527 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

529 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

531 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

532 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

533 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

535 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

536 
STACK_OF
(
X509
Ë*
˚πs
,

537 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

538 
Êags
);

540 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

542 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

543 
X509_POLICY_LEVEL
 *

544 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

546 
STACK_OF
(
X509_POLICY_NODE
) *

547 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

549 
STACK_OF
(
X509_POLICY_NODE
) *

550 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

552 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

554 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

556 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

558 
STACK_OF
(
POLICYQUALINFO
) *

559 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 c⁄° 
X509_POLICY_NODE
 *

561 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 #ifde‡ 
__˝lu•lus


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

135 #ifde‡ 
__˝lu•lus


151 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


152 
	#BN_MUL_COMBA


	)

153 
	#BN_SQR_COMBA


	)

154 
	#BN_RECURSION


	)

168 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

169 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

170 #i‚de‡
BN_DIV2W


171 
	#BN_DIV2W


	)

178 #ifde‡
SIXTY_FOUR_BIT_LONG


179 
	#BN_ULLONG
 

	)

180 
	#BN_ULONG
 

	)

181 
	#BN_LONG
 

	)

182 
	#BN_BITS
 128

	)

183 
	#BN_BYTES
 8

	)

184 
	#BN_BITS2
 64

	)

185 
	#BN_BITS4
 32

	)

186 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

188 
	#BN_MASK2l
 (0xffffffffL)

	)

189 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

190 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

191 
	#BN_TBIT
 (0x8000000000000000L)

	)

192 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%019lu"

	)

195 
	#BN_DEC_NUM
 19

	)

196 
	#BN_HEX_FMT1
 "%lX"

	)

197 
	#BN_HEX_FMT2
 "%016lX"

	)

205 #ifde‡
SIXTY_FOUR_BIT


206 #unde‡
BN_LLONG


207 #unde‡
BN_ULLONG


208 
	#BN_ULONG
 

	)

209 
	#BN_LONG
 

	)

210 
	#BN_BITS
 128

	)

211 
	#BN_BYTES
 8

	)

212 
	#BN_BITS2
 64

	)

213 
	#BN_BITS4
 32

	)

214 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

215 
	#BN_MASK2l
 (0xffffffffL)

	)

216 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

217 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

218 
	#BN_TBIT
 (0x8000000000000000LL)

	)

219 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

220 
	#BN_DEC_FMT1
 "%Œu"

	)

221 
	#BN_DEC_FMT2
 "%019Œu"

	)

222 
	#BN_DEC_NUM
 19

	)

223 
	#BN_HEX_FMT1
 "%ŒX"

	)

224 
	#BN_HEX_FMT2
 "%016ŒX"

	)

227 #ifde‡
THIRTY_TWO_BIT


228 #ifde‡
BN_LLONG


229 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

230 
	#BN_ULLONG
 
__öt64


	)

231 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

233 
	#BN_ULLONG
 

	)

234 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

237 
	#BN_ULONG
 

	)

238 
	#BN_LONG
 

	)

239 
	#BN_BITS
 64

	)

240 
	#BN_BYTES
 4

	)

241 
	#BN_BITS2
 32

	)

242 
	#BN_BITS4
 16

	)

243 
	#BN_MASK2
 (0xffffffffL)

	)

244 
	#BN_MASK2l
 (0xffff)

	)

245 
	#BN_MASK2h1
 (0xffff8000L)

	)

246 
	#BN_MASK2h
 (0xffff0000L)

	)

247 
	#BN_TBIT
 (0x80000000L)

	)

248 
	#BN_DEC_CONV
 (1000000000L)

	)

249 
	#BN_DEC_FMT1
 "%u"

	)

250 
	#BN_DEC_FMT2
 "%09u"

	)

251 
	#BN_DEC_NUM
 9

	)

252 
	#BN_HEX_FMT1
 "%X"

	)

253 
	#BN_HEX_FMT2
 "%08X"

	)

264 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

265 #i‡
__INITIAL_POINTER_SIZE
 == 64

266 
	#PTR_SIZE_INT
 

	)

268 
	#PTR_SIZE_INT
 

	)

271 
	#PTR_SIZE_INT
 
size_t


	)

274 
	#BN_DEFAULT_BITS
 1280

	)

276 
	#BN_FLG_MALLOCED
 0x01

	)

277 
	#BN_FLG_STATIC_DATA
 0x02

	)

278 
	#BN_FLG_CONSTTIME
 0x04

	)

284 #i‚de‡
OPENSSL_NO_DEPRECATED


285 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

290 #i‚de‡
OPENSSL_NO_DEPRECATED


291 
	#BN_FLG_FREE
 0x8000

	)

293 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

294 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

298 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

299 (
de°
)->
t›
=(
b
)->top, \

300 (
de°
)->
dmax
=(
b
)->dmax, \

301 (
de°
)->
√g
=(
b
)->neg, \

302 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

303 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

304 | 
BN_FLG_STATIC_DATA
 \

305 | (
n
)))

	)

309 
bignum_°
 
	tBIGNUM
;

311 
bignum_˘x
 
	tBN_CTX
;

312 
bn_blödög_°
 
	tBN_BLINDING
;

313 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

314 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

315 
bn_gícb_°
 
	tBN_GENCB
;

318 
	sbignum_°


320 
BN_ULONG
 *
d
;

321 
t›
;

323 
dmax
;

324 
√g
;

325 
Êags
;

329 
	sbn_m⁄t_˘x_°


331 
ri
;

332 
BIGNUM
 
RR
;

333 
BIGNUM
 
N
;

334 
BIGNUM
 
Ni
;

336 
BN_ULONG
 
n0
[2];

338 
Êags
;

344 
	sbn_ª˝_˘x_°


346 
BIGNUM
 
N
;

347 
BIGNUM
 
Nr
;

348 
num_bôs
;

349 
shi·
;

350 
Êags
;

354 
	sbn_gícb_°


356 
vî
;

357 *
¨g
;

361 (*
cb_1
)(, , *);

363 (*
cb_2
)(, , 
BN_GENCB
 *);

364 } 
cb
;

367 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

369 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

370 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

371 
tmp_gícb
->
vî
 = 1; \

372 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

373 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

375 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

376 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

377 
tmp_gícb
->
vî
 = 2; \

378 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

379 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

381 
	#BN_¥ime_checks
 0

	)

389 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

390 (
b
) >= 850 ? 3 : \

391 (
b
) >= 650 ? 4 : \

392 (
b
) >= 550 ? 5 : \

393 (
b
) >= 450 ? 6 : \

394 (
b
) >= 400 ? 7 : \

395 (
b
) >= 350 ? 8 : \

396 (
b
) >= 300 ? 9 : \

397 (
b
) >= 250 ? 12 : \

398 (
b
) >= 200 ? 15 : \

399 (
b
) >= 150 ? 18 : \

400  27)

	)

402 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

405 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

406 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

407 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

408 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

409 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

410 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

412 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

413 
	#BN_zîo_ex
(
a
) \

415 
BIGNUM
 *
_tmp_bn
 = (
a
); \

416 
_tmp_bn
->
t›
 = 0; \

417 
_tmp_bn
->
√g
 = 0; \

418 } 0)

	)

419 #ifde‡
OPENSSL_NO_DEPRECATED


420 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

422 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

425 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

426 * 
	`BN_›ti⁄s
();

427 
BN_CTX
 *
	`BN_CTX_√w
();

428 #i‚de‡
OPENSSL_NO_DEPRECATED


429 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

431 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

432 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

433 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

434 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

435 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

436 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

438 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

440 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

441 
BIGNUM
 *
	`BN_√w
();

442 
	`BN_öô
(
BIGNUM
 *);

443 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

444 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

445 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

446 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

447 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

448 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

449 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

450 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

451 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

455 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

460 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

465 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

467 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

468 
BN_CTX
 *
˘x
);

469 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

470 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

471 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

473 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

474 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

481 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

483 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

484 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

486 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

491 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_‰ì
(
BIGNUM
 *
a
);

493 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

494 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

495 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

496 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

498 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

499 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

500 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

501 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

502 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

503 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

504 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

505 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

506 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

507 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

508 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

509 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

510 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

512 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

513 #i‚de‡
OPENSSL_NO_FP_API


514 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

516 #ifde‡
HEADER_BIO_H


517 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

519 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

522 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

523 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

524 
	`BN_˛ór
(
BIGNUM
 *
a
);

525 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

526 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

527 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

528 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

529 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

530 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

531 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

532 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

535 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

537 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

538 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

539 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

542 #i‚de‡
OPENSSL_NO_DEPRECATED


543 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

544 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

545 (*
ˇŒback
)(,,*),*
cb_¨g
);

546 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

547 (*
ˇŒback
)(,,*),

548 
BN_CTX
 *
˘x
,*
cb_¨g
);

549 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

550 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

551 
do_åül_divisi⁄
);

555 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

556 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

557 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

558 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

559 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

561 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

563 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

564 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

565 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

566 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

567 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

568 c⁄° 
BIGNUM
 *
Xp
,

569 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

570 
BN_GENCB
 *
cb
);

572 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

573 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

574 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

575 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

576 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

577 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

578 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

579 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

580 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

581 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

582 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

583 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

584 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

587 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

588 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

590 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

591 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

592 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

593 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

594 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

596 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

597 #i‚de‡
OPENSSL_NO_DEPRECATED


598 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

599 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

601 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

602 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

603 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

604 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

605 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

606 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

607 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

608 
BN_MONT_CTX
 *
m_˘x
);

610 #i‚de‡
OPENSSL_NO_DEPRECATED


611 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

612 
	`BN_gë_∑øms
(
which
);

615 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

616 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

617 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

618 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

619 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

620 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

621 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

622 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

623 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

624 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

626 #i‚de‡
OPENSSL_NO_EC2M


637 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

638 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

639 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

640 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

641 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

642 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

643 
BN_CTX
 *
˘x
);

644 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

645 
BN_CTX
 *
˘x
);

646 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

647 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

648 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

649 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

650 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

651 
BN_CTX
 *
˘x
);

652 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

653 
BN_CTX
 *
˘x
);

654 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

660 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

662 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

663 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

664 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

665 
BN_CTX
 *
˘x
);

666 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

667 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

669 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

670 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

671 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

672 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

673 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

674 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

675 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

676 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

677 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

683 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

684 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

685 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

686 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

690 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

691 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

697 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

698 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

699 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

700 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

701 #i‚de‡
OPENSSL_NO_DEPRECATED


702 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

733 #ifde‡
BN_DEBUG


736 
	~<as£π.h
>

738 #ifde‡
BN_DEBUG_RAND


740 #i‚de‡
RAND_p£udo_byãs


741 
	`RAND_p£udo_byãs
(*
buf
,
num
);

742 
	#BN_DEBUG_TRIX


	)

744 
	#bn_pﬁluã
(
a
) \

746 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

747 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

748 
_tmp_ch¨
; \

752 
BN_ULONG
 *
_nŸ_c⁄°
; \

753 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

754 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

755 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

756 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

758 } 0)

	)

759 #ifde‡
BN_DEBUG_TRIX


760 #unde‡
RAND_p£udo_byãs


763 
	#bn_pﬁluã
(
a
)

	)

765 
	#bn_check_t›
(
a
) \

767 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

768 i‡(
_bnum2
 !
NULL
) { \

769 
	`as£π
((
_bnum2
->
t›
 == 0) || \

770 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

771 
	`bn_pﬁluã
(
_bnum2
); \

773 } 0)

	)

775 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

779 
	#bn_pﬁluã
(
a
)

	)

780 
	#bn_check_t›
(
a
)

	)

781 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

785 
	#bn_c‹ª˘_t›
(
a
) \

787 
BN_ULONG
 *
·l
; \

788 
tmp_t›
 = (
a
)->
t›
; \

789 i‡(
tmp_t›
 > 0) \

791 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

792 i‡(*(
·l
--)) ; \

793 (
a
)->
t›
 = 
tmp_t›
; \

795 
	`bn_pﬁluã
(
a
); \

796 }

	)

798 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

799 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

800 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

801 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

802 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

803 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

806 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

807 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

810 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

811 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

812 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

813 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

814 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

815 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

817 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

823 
	`ERR_lﬂd_BN_°rögs
();

828 
	#BN_F_BNRAND
 127

	)

829 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

830 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

831 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

832 
	#BN_F_BN_BLINDING_NEW
 102

	)

833 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

834 
	#BN_F_BN_BN2DEC
 104

	)

835 
	#BN_F_BN_BN2HEX
 105

	)

836 
	#BN_F_BN_CTX_GET
 116

	)

837 
	#BN_F_BN_CTX_NEW
 106

	)

838 
	#BN_F_BN_CTX_START
 129

	)

839 
	#BN_F_BN_DIV
 107

	)

840 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

841 
	#BN_F_BN_DIV_RECP
 130

	)

842 
	#BN_F_BN_EXP
 123

	)

843 
	#BN_F_BN_EXPAND2
 108

	)

844 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

845 
	#BN_F_BN_GF2M_MOD
 131

	)

846 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

847 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

848 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

849 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

850 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

851 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

852 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

853 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

854 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

855 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

856 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

857 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

858 
	#BN_F_BN_MOD_INVERSE
 110

	)

859 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

860 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

861 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

862 
	#BN_F_BN_MOD_SQRT
 121

	)

863 
	#BN_F_BN_MPI2BN
 112

	)

864 
	#BN_F_BN_NEW
 113

	)

865 
	#BN_F_BN_RAND
 114

	)

866 
	#BN_F_BN_RAND_RANGE
 122

	)

867 
	#BN_F_BN_USUB
 115

	)

870 
	#BN_R_ARG2_LT_ARG3
 100

	)

871 
	#BN_R_BAD_RECIPROCAL
 101

	)

872 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

873 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

874 
	#BN_R_DIV_BY_ZERO
 103

	)

875 
	#BN_R_ENCODING_ERROR
 104

	)

876 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

877 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

878 
	#BN_R_INVALID_LENGTH
 106

	)

879 
	#BN_R_INVALID_RANGE
 115

	)

880 
	#BN_R_NOT_A_SQUARE
 111

	)

881 
	#BN_R_NOT_INITIALIZED
 107

	)

882 
	#BN_R_NO_INVERSE
 108

	)

883 
	#BN_R_NO_SOLUTION
 116

	)

884 
	#BN_R_P_IS_NOT_PRIME
 112

	)

885 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

886 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

888 #ifde‡ 
__˝lu•lus


889 
	}
}

	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

59 #i‚de‡
HEADER_UI_H


60 
	#HEADER_UI_H


	)

62 #i‚de‡
OPENSSL_NO_DEPRECATED


63 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/os¶_typ.h
>

68 #ifde‡ 
__˝lu•lus


83 
UI
 *
UI_√w
();

84 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

85 
UI_‰ì
(
UI
 *
ui
);

130 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

131 *
ªsu…_buf
, 
mösize
, 
maxsize
);

132 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

136 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

138 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

139 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

140 
Êags
, *
ªsu…_buf
);

141 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

142 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

143 
Êags
, *
ªsu…_buf
);

144 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

145 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

146 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

147 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

157 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

168 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

188 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

189 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

201 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

203 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

206 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

209 
UI_¥o˚ss
(
UI
 *
ui
);

214 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
)());

220 
	#UI_CTRL_PRINT_ERRORS
 1

	)

224 
	#UI_CTRL_IS_REDOABLE
 2

	)

228 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

229 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

230 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
UI_£t_ex_d©a
(
UI
 *
r
,
idx
,*
¨g
);

233 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

236 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

237 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

238 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

239 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

242 
UI_METHOD
 *
UI_O≥nSSL
();

290 
ui_°rög_°
 
	tUI_STRING
;

291 
DECLARE_STACK_OF
(
UI_STRING
)

295 
	eUI_°rög_ty≥s


297 
UIT_NONE
=0,

298 
UIT_PROMPT
,

299 
UIT_VERIFY
,

300 
UIT_BOOLEAN
,

301 
UIT_INFO
,

302 
UIT_ERROR


306 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

307 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

308 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
)(
UI
 *
ui
));

309 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
, (*
wrôî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

310 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
)(
UI
 *
ui
));

311 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
, (*
ªadî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

312 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
)(
UI
 *
ui
));

313 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
, *(*
¥om±_c⁄°ru˘‹
)(
UI
* 
ui
, c⁄° * 
obje˘_desc
, c⁄° * 
obje˘_«me
));

314 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
))(
UI
*);

315 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

316 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
))(
UI
*);

317 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

318 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
))(
UI
*);

319 * (*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
))(
UI
*, const *, const *);

325 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

327 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

329 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

331 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

333 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

335 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

337 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

339 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

341 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

345 
UI_UTIL_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

346 
UI_UTIL_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

353 
ERR_lﬂd_UI_°rögs
();

358 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

359 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

360 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

361 
	#UI_F_UI_CTRL
 111

	)

362 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

363 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

364 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

365 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

366 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

367 
	#UI_F_UI_GET0_RESULT
 107

	)

368 
	#UI_F_UI_NEW_METHOD
 104

	)

369 
	#UI_F_UI_SET_RESULT
 105

	)

372 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

373 
	#UI_R_INDEX_TOO_LARGE
 102

	)

374 
	#UI_R_INDEX_TOO_SMALL
 103

	)

375 
	#UI_R_NO_RESULT_BUFFER
 105

	)

376 
	#UI_R_RESULT_TOO_LARGE
 100

	)

377 
	#UI_R_RESULT_TOO_SMALL
 101

	)

378 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

380 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@
1
.
1
/usr/include
354
6466
build-aux/snippet/_Noreturn.h
build-aux/snippet/arg-nonnull.h
build-aux/snippet/c++defs.h
build-aux/snippet/warn-on-use.h
lib/accept.c
lib/alignof.h
lib/alloca.c
lib/alloca.in.h
lib/arpa_inet.in.h
lib/asnprintf.c
lib/asprintf.c
lib/basename-lgpl.c
lib/binary-io.h
lib/bind.c
lib/c-ctype.c
lib/c-ctype.h
lib/cloexec.c
lib/cloexec.h
lib/close.c
lib/connect.c
lib/dirname-lgpl.c
lib/dirname.h
lib/dosname.h
lib/dup-safer-flag.c
lib/dup-safer.c
lib/dup2.c
lib/errno.in.h
lib/error.c
lib/error.h
lib/exitfail.c
lib/exitfail.h
lib/fatal-signal.c
lib/fatal-signal.h
lib/fcntl.c
lib/fcntl.in.h
lib/fd-hook.c
lib/fd-hook.h
lib/fd-safer-flag.c
lib/fd-safer.c
lib/float+.h
lib/float.c
lib/float.in.h
lib/fseek.c
lib/fseeko.c
lib/futimens.c
lib/gai_strerror.c
lib/getaddrinfo.c
lib/getdelim.c
lib/getdtablesize.c
lib/getline.c
lib/getopt.c
lib/getopt.in.h
lib/getopt1.c
lib/getopt_int.h
lib/getpass.c
lib/getpass.h
lib/getpeername.c
lib/getsockname.c
lib/gettext.h
lib/gettime.c
lib/gettimeofday.c
lib/glthread/lock.c
lib/glthread/lock.h
lib/glthread/threadlib.c
lib/iconv.in.h
lib/inet_ntop.c
lib/intprops.h
lib/ioctl.c
lib/listen.c
lib/localcharset.c
lib/localcharset.h
lib/lseek.c
lib/lstat.c
lib/malloc.c
lib/mbrtowc.c
lib/mbsinit.c
lib/mbtowc-impl.h
lib/mbtowc.c
lib/md5.c
lib/md5.h
lib/memchr.c
lib/mkdir.c
lib/netdb.in.h
lib/netinet_in.in.h
lib/open.c
lib/pipe-safer.c
lib/pipe.h
lib/pipe2-safer.c
lib/pipe2.c
lib/printf-args.c
lib/printf-args.h
lib/printf-parse.c
lib/printf-parse.h
lib/quote.c
lib/quote.h
lib/quotearg.c
lib/quotearg.h
lib/rawmemchr.c
lib/realloc.c
lib/recv.c
lib/sched.in.h
lib/select.c
lib/send.c
lib/setsockopt.c
lib/sig-handler.h
lib/sigaction.c
lib/signal.in.h
lib/sigprocmask.c
lib/size_max.h
lib/snprintf.c
lib/socket.c
lib/sockets.c
lib/sockets.h
lib/spawn-pipe.c
lib/spawn-pipe.h
lib/spawn.in.h
lib/spawn_faction_addclose.c
lib/spawn_faction_adddup2.c
lib/spawn_faction_addopen.c
lib/spawn_faction_destroy.c
lib/spawn_faction_init.c
lib/spawn_int.h
lib/spawnattr_destroy.c
lib/spawnattr_init.c
lib/spawnattr_setflags.c
lib/spawnattr_setsigmask.c
lib/spawni.c
lib/spawnp.c
lib/stat-time.h
lib/stat.c
lib/stdbool.in.h
lib/stddef.in.h
lib/stdint.in.h
lib/stdio-impl.h
lib/stdio-write.c
lib/stdio.in.h
lib/stdlib.in.h
lib/str-two-way.h
lib/strcasecmp.c
lib/strcasestr.c
lib/strchrnul.c
lib/streq.h
lib/strerror-override.c
lib/strerror-override.h
lib/strerror.c
lib/strerror_r.c
lib/string.in.h
lib/strings.in.h
lib/stripslash.c
lib/strncasecmp.c
lib/sys_ioctl.in.h
lib/sys_select.in.h
lib/sys_socket.in.h
lib/sys_stat.in.h
lib/sys_time.in.h
lib/sys_types.in.h
lib/sys_uio.in.h
lib/sys_wait.in.h
lib/time.in.h
lib/timespec.h
lib/unistd--.h
lib/unistd-safer.h
lib/unistd.in.h
lib/unlocked-io.h
lib/utimens.c
lib/utimens.h
lib/vasnprintf.c
lib/vasnprintf.h
lib/vasprintf.c
lib/verify.h
lib/w32sock.h
lib/w32spawn.h
lib/wait-process.c
lib/wait-process.h
lib/waitpid.c
lib/wchar.in.h
lib/wctype.in.h
lib/write.c
lib/xalloc-die.c
lib/xalloc-oversized.h
lib/xalloc.h
lib/xmalloc.c
lib/xsize.h
msdos/config.h
src/build_info.c
src/cmpt.c
src/connect.c
src/connect.h
src/convert.c
src/convert.h
src/cookies.c
src/cookies.h
src/css-tokens.h
src/css-url.c
src/css-url.h
src/css.c
src/css.l
src/css_.c
src/exits.c
src/exits.h
src/ftp-basic.c
src/ftp-ls.c
src/ftp-opie.c
src/ftp.c
src/ftp.h
src/gettext.h
src/gnutls.c
src/hash.c
src/hash.h
src/host.c
src/host.h
src/html-parse.c
src/html-parse.h
src/html-url.c
src/html-url.h
src/http-ntlm.c
src/http-ntlm.h
src/http.c
src/http.h
src/init.c
src/init.h
src/iri.c
src/iri.h
src/log.c
src/log.h
src/main.c
src/mswindows.c
src/mswindows.h
src/netrc.c
src/netrc.h
src/openssl.c
src/options.h
src/progress.c
src/progress.h
src/ptimer.c
src/ptimer.h
src/recur.c
src/recur.h
src/res.c
src/res.h
src/retr.c
src/retr.h
src/spider.c
src/spider.h
src/ssl.h
src/sysdep.h
src/test.c
src/test.h
src/url.c
src/url.h
src/utils.c
src/utils.h
src/wget.h
util/trunc.c
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/config.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/gnutls/gnutls.h
/usr/include/gnutls/x509.h
/usr/include/iconv.h
/usr/include/inttypes.h
/usr/include/langinfo.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/nl_types.h
/usr/include/openssl/des.h
/usr/include/openssl/err.h
/usr/include/openssl/md4.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/rand.h
/usr/include/openssl/ssl.h
/usr/include/openssl/x509v3.h
/usr/include/paths.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/spawn.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdio_ext.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/gnutls/compat.h
/usr/include/libio.h
/usr/include/openssl/bio.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/des_old.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/evp.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/stack.h
/usr/include/openssl/ui_compat.h
/usr/include/openssl/x509_vfy.h
/usr/include/gconv.h
/usr/include/openssl/bn.h
/usr/include/openssl/objects.h
/usr/include/openssl/ui.h
/usr/include/openssl/obj_mac.h
